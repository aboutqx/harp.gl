{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///external \"THREE\"","webpack:///../@here/harp-utils/index.web.ts","webpack:///../@here/harp-datasource-protocol/index.ts","webpack:///../@here/harp-geoutils/index.ts","webpack:///../@here/harp-materials/index.ts","webpack:///../@here/harp-datasource-protocol/lib/Expr.ts","webpack:///../@here/harp-text-canvas/index.ts","webpack:///../@here/harp-geoutils/lib/coordinates/GeoCoordinates.ts","webpack:///../@here/harp-geoutils/lib/math/MathUtils.ts","webpack:///../@here/harp-materials/lib/Utils.ts","webpack:///../@here/harp-mapview/lib/Utils.ts","webpack:///../@here/harp-geoutils/lib/projection/EarthConstants.ts","webpack:///../@here/harp-geoutils/lib/math/Box3Like.ts","webpack:///../@here/harp-geoutils/lib/math/OrientedBox3Like.ts","webpack:///../@here/harp-geoutils/lib/projection/Projection.ts","webpack:///../@here/harp-mapview/index.ts","webpack:///../@here/harp-text-canvas/lib/rendering/TextStyle.ts","webpack:///../@here/harp-mapview/lib/text/TextElement.ts","webpack:///../@here/harp-geoutils/lib/coordinates/GeoBox.ts","webpack:///../@here/harp-geoutils/lib/tiling/TilingScheme.ts","webpack:///../@here/harp-datasource-protocol/lib/ColorUtils.ts","webpack:///../@here/harp-datasource-protocol/lib/InterpolatedPropertyDefs.ts","webpack:///../@here/harp-text-canvas/lib/utils/UnicodeUtils.ts","webpack:///../@here/harp-mapview/lib/DecodedTileHelpers.ts","webpack:///../@here/harp-mapview/lib/text/TextElementType.ts","webpack:///../@here/harp-mapview/lib/composing/Pass.ts","webpack:///../@here/harp-geoutils/lib/projection/MercatorProjection.ts","webpack:///../@here/harp-geoutils/lib/tiling/QuadTreeSubdivisionScheme.ts","webpack:///../@here/harp-geoutils/lib/tiling/TileKey.ts","webpack:///../@here/harp-materials/lib/MapMeshMaterialsDefs.ts","webpack:///../@here/harp-mapview/lib/MapView.ts","webpack:///../@here/harp-datasource-protocol/lib/Env.ts","webpack:///../@here/harp-datasource-protocol/lib/Theme.ts","webpack:///../@here/harp-mapview/lib/text/TextElementsRenderer.ts","webpack:///../@here/harp-mapview/lib/Tile.ts","webpack:///../@here/harp-mapview/lib/Statistics.ts","webpack:///../@here/harp-mapview/lib/AnimatedExtrusionHandler.ts","webpack:///../@here/harp-utils/lib/Logger/ILogger.ts","webpack:///../@here/harp-utils/lib/UrlUtils.ts","webpack:///../@here/harp-materials/lib/MapMeshMaterials.ts","webpack:///../@here/harp-materials/lib/ShaderChunks/LinesChunks.ts","webpack:///../@here/harp-datasource-protocol/lib/StringEncodedNumeral.ts","webpack:///../@here/harp-datasource-protocol/lib/Techniques.ts","webpack:///../@here/harp-mapview/lib/DataSource.ts","webpack:///../@here/harp-mapview/lib/geometry/TileGeometryCreator.ts","webpack:///../@here/harp-text-canvas/lib/rendering/GlyphData.ts","webpack:///../@here/harp-text-canvas/lib/rendering/TextGeometry.ts","webpack:///../@here/harp-text-canvas/lib/utils/TypesettingUtils.ts","webpack:///../@here/harp-mapview/lib/MapViewPoints.ts","webpack:///../@here/harp-mapview/lib/DebugContext.ts","webpack:///../@here/harp-mapview/lib/PickHandler.ts","webpack:///../@here/harp-mapview/lib/ColorCache.ts","webpack:///../@here/harp-mapview/lib/ClipPlanesEvaluator.ts","webpack:///../@here/harp-mapview/lib/ConcurrentDecoderFacade.ts","webpack:///../@here/harp-mapview/lib/copyrights/CopyrightInfo.ts","webpack:///../@here/harp-lines/lib/HighPrecisionUtils.ts","webpack:///../@here/harp-omv-datasource/lib/OmvDecoderDefs.ts","webpack:///../@here/harp-omv-datasource/lib/OmvTile.ts","webpack:///../@here/harp-geoutils/lib/coordinates/GeoCoordinatesLike.ts","webpack:///../@here/harp-geoutils/lib/coordinates/GeoPointLike.ts","webpack:///../@here/harp-geoutils/lib/coordinates/LatLngLike.ts","webpack:///../@here/harp-geoutils/lib/projection/EquirectangularProjection.ts","webpack:///../@here/harp-geoutils/lib/projection/TransverseMercatorProjection.ts","webpack:///../@here/harp-geoutils/lib/tiling/FlatTileBoundingBoxGenerator.ts","webpack:///../@here/harp-geoutils/lib/tiling/HalfQuadTreeSubdivisionScheme.ts","webpack:///../@here/harp-geoutils/lib/tiling/SubTiles.ts","webpack:///../@here/harp-geoutils/lib/tiling/TileKeyUtils.ts","webpack:///../@here/harp-geoutils/lib/tiling/TileTreeTraverse.ts","webpack:///../@here/harp-utils/lib/Logger/ConsoleChannel.ts","webpack:///../@here/harp-utils/lib/Logger/Logger.ts","webpack:///../@here/harp-utils/lib/Logger/WorkerChannel.ts","webpack:///../@here/harp-materials/lib/CopyMaterial.ts","webpack:///../@here/harp-materials/lib/ShaderChunks/AtmosphereChunks.ts","webpack:///../@here/harp-datasource-protocol/lib/InterpolatedProperty.ts","webpack:///../@here/harp-datasource-protocol/lib/TechniqueParams.ts","webpack:///../@here/harp-datasource-protocol/lib/TechniqueDescriptor.ts","webpack:///../@here/harp-datasource-protocol/lib/DecodedTile.ts","webpack:///../@here/harp-mapview/lib/BackgroundDataSource.ts","webpack:///../@here/harp-geometry/lib/SubdivisionModifier.ts","webpack:///../@here/harp-lrucache/index.ts","webpack:///../@here/harp-text-canvas/lib/rendering/TextMaterials.ts","webpack:///../@here/harp-text-canvas/lib/rendering/TextBufferObject.ts","webpack:///../@here/harp-text-canvas/lib/utils/MaterialUtils.ts","webpack:///../@here/harp-mapview/lib/geometry/DisplacedBufferAttribute.ts","webpack:///../@here/harp-mapview/lib/geometry/DisplacedBufferGeometry.ts","webpack:///../@here/harp-mapview/lib/ThemeHelpers.ts","webpack:///../@here/harp-mapview/lib/DepthPrePass.ts","webpack:///../@here/harp-mapview/lib/geometry/overlayOnElevation.ts","webpack:///../@here/harp-mapview/lib/text/Placement.ts","webpack:///../@here/harp-mapview/lib/poi/PoiRenderer.ts","webpack:///../@here/harp-mapview/lib/image/MipMapGenerator.ts","webpack:///../@here/harp-mapview/lib/ScreenCollisions.ts","webpack:///../node_modules/rbush/rbush.min.js","webpack:///../@here/harp-mapview/lib/text/TextStyleCache.ts","webpack:///../@here/harp-mapview/lib/geometry/LodMesh.ts","webpack:///../@here/harp-mapview/lib/CameraMovementDetector.ts","webpack:///../@here/harp-mapview/lib/composing/index.ts","webpack:///../@here/harp-mapview/lib/composing/MSAARenderPass.ts","webpack:///../@here/harp-mapview/lib/ConcurrentWorkerSet.ts","webpack:///../@here/harp-mapview/lib/workers/WorkerLoader.ts","webpack:///../@here/harp-mapview/lib/WorkerBasedDecoder.ts","webpack:///../@here/harp-mapview/lib/ElevationRangeSource.ts","webpack:///../@here/harp-mapview/lib/image/MapViewImageCache.ts","webpack:///../@here/harp-mapview/lib/image/ImageCache.ts","webpack:///../@here/harp-mapview/lib/MapViewFog.ts","webpack:///../@here/harp-mapview/lib/poi/PoiManager.ts","webpack:///../@here/harp-mapview/lib/poi/PoiTableManager.ts","webpack:///../@here/harp-mapview/lib/PolarTileDataSource.ts","webpack:///../@here/harp-mapview/lib/SkyCubemapTexture.ts","webpack:///../@here/harp-mapview/lib/ThemeLoader.ts","webpack:///../@here/harp-mapview/lib/VisibleTileSet.ts","webpack:///../@here/harp-mapview/lib/ConcurrentTilerFacade.ts","webpack:///../@here/harp-mapview/lib/WorkerBasedTiler.ts","webpack:///../@here/harp-mapview/lib/copyrights/CopyrightCoverageProvider.ts","webpack:///../@here/harp-transfer-manager/index.ts","webpack:///../@here/harp-mapview/lib/geometry/TileGeometry.ts","webpack:///../@here/harp-lines/lib/TriangulateLines.ts","webpack:///../@here/harp-lines/lib/HighPrecisionLines.ts","webpack:///../@here/harp-mapview-decoder/lib/TileLoader.ts","webpack:///../@here/harp-omv-datasource/lib/OmvRestClient.ts","webpack:///./src/index.ts","webpack:///../@here/harp-geoutils/lib/coordinates/GeoBoxExtentLike.ts","webpack:///../@here/harp-geoutils/lib/projection/IdentityProjection.ts","webpack:///../@here/harp-geoutils/lib/projection/SphereProjection.ts","webpack:///../@here/harp-geoutils/lib/tiling/QuadTree.ts","webpack:///../@here/harp-geoutils/lib/tiling/HereTilingScheme.ts","webpack:///../@here/harp-geoutils/lib/tiling/WebMercatorTilingScheme.ts","webpack:///../@here/harp-geoutils/lib/tiling/MercatorTilingScheme.ts","webpack:///../@here/harp-geoutils/lib/tiling/PolarTilingScheme.ts","webpack:///../@here/harp-geoutils/lib/math/Vector3Like.ts","webpack:///../@here/harp-geoutils/lib/math/TransformLike.ts","webpack:///../@here/harp-geoutils/lib/math/OrientedBox3.ts","webpack:///../@here/harp-materials/lib/CirclePointsMaterial.ts","webpack:///../@here/harp-utils/index-common.ts","webpack:///../@here/harp-utils/lib/GroupedPriorityList.ts","webpack:///../@here/harp-utils/lib/Logger/index.ts","webpack:///../@here/harp-utils/lib/Logger/LoggerManager.ts","webpack:///../@here/harp-utils/lib/Logger/LoggerManagerImpl.ts","webpack:///../@here/harp-utils/lib/Logger/MultiChannel.ts","webpack:///../@here/harp-utils/lib/Math2D.ts","webpack:///../@here/harp-utils/lib/MathUtils.ts","webpack:///../@here/harp-utils/lib/Mixins.ts","webpack:///../@here/harp-utils/lib/assert.ts","webpack:///../@here/harp-utils/lib/ContextLogger.ts","webpack:///../@here/harp-utils/lib/PerformanceTimer.ts","webpack:///../@here/harp-utils/lib/ObjectUtils.ts","webpack:///../@here/harp-utils/lib/OptionsUtils.ts","webpack:///../@here/harp-utils/lib/UriResolver.ts","webpack:///../@here/harp-utils/lib/Functions.ts","webpack:///../@here/harp-utils/lib/SampleBilinear.ts","webpack:///../@here/harp-utils/lib/UrlPlatformUtils.web.ts","webpack:///../@here/harp-materials/lib/DisplacementFeature.ts","webpack:///../@here/harp-materials/lib/EdgeMaterial.ts","webpack:///../@here/harp-materials/lib/ShaderChunks/ExtrusionChunks.ts","webpack:///../@here/harp-materials/lib/ShaderChunks/FadingChunks.ts","webpack:///../@here/harp-materials/lib/ShaderChunks/ShadowChunks.ts","webpack:///../@here/harp-materials/lib/GroundAtmosphereMaterial.ts","webpack:///../@here/harp-materials/lib/HighPrecisionLineMaterial.ts","webpack:///../@here/harp-materials/lib/HighPrecisionPointMaterial.ts","webpack:///../@here/harp-materials/lib/IconMaterial.ts","webpack:///../@here/harp-materials/lib/LuminosityHighPassShader.ts","webpack:///../@here/harp-materials/lib/MSAAMaterial.ts","webpack:///../@here/harp-materials/lib/SepiaShader.ts","webpack:///../@here/harp-materials/lib/SkyAtmosphereMaterial.ts","webpack:///../@here/harp-materials/lib/SolidLineMaterial.ts","webpack:///../@here/harp-materials/lib/VignetteShader.ts","webpack:///../@here/harp-datasource-protocol/lib/ExprEvaluator.ts","webpack:///../@here/harp-datasource-protocol/lib/operators/ArrayOperators.ts","webpack:///../@here/harp-datasource-protocol/lib/operators/CastOperators.ts","webpack:///../@here/harp-datasource-protocol/lib/operators/ColorOperators.ts","webpack:///../@here/harp-datasource-protocol/lib/operators/ComparisonOperators.ts","webpack:///../@here/harp-datasource-protocol/lib/operators/FeatureOperators.ts","webpack:///../@here/harp-datasource-protocol/lib/operators/FlowOperators.ts","webpack:///../@here/harp-datasource-protocol/lib/operators/InterpolationOperators.ts","webpack:///../@here/harp-datasource-protocol/lib/ExponentialInterpolant.ts","webpack:///../@here/harp-datasource-protocol/lib/operators/MapOperators.ts","webpack:///../@here/harp-datasource-protocol/lib/operators/MathOperators.ts","webpack:///../@here/harp-datasource-protocol/lib/operators/MiscOperators.ts","webpack:///../@here/harp-datasource-protocol/lib/operators/ObjectOperators.ts","webpack:///../@here/harp-datasource-protocol/lib/operators/StringOperators.ts","webpack:///../@here/harp-datasource-protocol/lib/operators/TypeOperators.ts","webpack:///../@here/harp-datasource-protocol/lib/operators/VectorOperators.ts","webpack:///../@here/harp-datasource-protocol/lib/ExprInstantiator.ts","webpack:///../@here/harp-datasource-protocol/lib/ExprParser.ts","webpack:///../@here/harp-datasource-protocol/lib/WorkerServiceProtocol.ts","webpack:///../@here/harp-datasource-protocol/lib/WorkerTilerProtocol.ts","webpack:///../@here/harp-datasource-protocol/lib/WorkerDecoderProtocol.ts","webpack:///../@here/harp-datasource-protocol/lib/TechniqueAttr.ts","webpack:///../@here/harp-datasource-protocol/lib/ThemeVisitor.ts","webpack:///../@here/harp-geometry/lib/EdgeLengthGeometrySubdivisionModifier.ts","webpack:///../@here/harp-geometry/lib/SphericalGeometrySubdivisionModifier.ts","webpack:///../@here/harp-text-canvas/lib/rendering/FontCatalog.ts","webpack:///../@here/harp-text-canvas/lib/rendering/GlyphTextureCache.ts","webpack:///../@here/harp-lrucache/lib/LRUCache.ts","webpack:///../@here/harp-text-canvas/lib/TextCanvas.ts","webpack:///../@here/harp-text-canvas/lib/typesetting/LineTypesetter.ts","webpack:///../@here/harp-text-canvas/lib/typesetting/PathTypesetter.ts","webpack:///../@here/harp-text-canvas/lib/utils/ContextualArabicConverter.ts","webpack:///../@here/harp-mapview/lib/geometry/DisplacedMesh.ts","webpack:///../@here/harp-mapview/lib/geometry/VertexCache.ts","webpack:///../@here/harp-mapview/lib/geometry/SolidLineMesh.ts","webpack:///../@here/harp-mapview/lib/PathBlockingElement.ts","webpack:///../@here/harp-mapview/lib/poi/BoxBuffer.ts","webpack:///../@here/harp-mapview/lib/poi/PixelPicker.ts","webpack:///../@here/harp-mapview/lib/text/PlacementStats.ts","webpack:///../@here/harp-mapview/lib/text/SimplePath.ts","webpack:///../@here/harp-mapview/lib/text/TextElementsRendererOptions.ts","webpack:///../@here/harp-mapview/lib/text/TextElementStateCache.ts","webpack:///../@here/harp-mapview/lib/text/TextElementGroupState.ts","webpack:///../@here/harp-mapview/lib/text/TextElementState.ts","webpack:///../@here/harp-mapview/lib/text/LayoutState.ts","webpack:///../@here/harp-mapview/lib/text/RenderState.ts","webpack:///../@here/harp-mapview/lib/text/UpdateStats.ts","webpack:///../@here/harp-mapview/lib/text/TextElementGroup.ts","webpack:///../@here/harp-mapview/lib/text/TextElementGroupPriorityList.ts","webpack:///../@here/harp-mapview/lib/text/TileTextStyleCache.ts","webpack:///../@here/harp-mapview/lib/composing/MapRenderingManager.ts","webpack:///../@here/harp-mapview/lib/composing/LowResRenderPass.ts","webpack:///../@here/harp-mapview/lib/composing/Outline.ts","webpack:///../@here/harp-mapview/lib/composing/UnrealBloomPass.ts","webpack:///../@here/harp-mapview/lib/workers/WorkerBootstrapDefs.ts","webpack:///../@here/harp-mapview/lib/FrustumIntersection.ts","webpack:///../@here/harp-mapview/lib/MapTileCuller.ts","webpack:///../@here/harp-mapview/lib/geometry/TileGeometryManager.ts","webpack:///../@here/harp-mapview/lib/geometry/TileGeometryLoader.ts","webpack:///../@here/harp-mapview/lib/PickingRaycaster.ts","webpack:///../@here/harp-mapview/lib/poi/PoiRendererFactory.ts","webpack:///../@here/harp-datasource-protocol/index-decoder.ts","webpack:///../@here/harp-datasource-protocol/lib/StyleSetEvaluator.ts","webpack:///../@here/harp-datasource-protocol/lib/ExprPool.ts","webpack:///../@here/harp-datasource-protocol/lib/Extruder.ts","webpack:///../@here/harp-datasource-protocol/lib/Outliner.ts","webpack:///../@here/harp-datasource-protocol/lib/ThreeBufferUtils.ts","webpack:///../@here/harp-mapview/lib/ScreenProjector.ts","webpack:///../@here/harp-mapview/lib/SkyBackground.ts","webpack:///../@here/harp-mapview/lib/SkyGradientTexture.ts","webpack:///../@here/harp-mapview/lib/text/FontCatalogLoader.ts","webpack:///../@here/harp-mapview/lib/text/MapViewState.ts","webpack:///../@here/harp-mapview/lib/text/TextCanvasFactory.ts","webpack:///../@here/harp-mapview/lib/copyrights/CopyrightElementHandler.ts","webpack:///../@here/harp-mapview/lib/copyrights/UrlCopyrightProvider.ts","webpack:///../@here/harp-transfer-manager/src/TransferManager.ts","webpack:///../@here/harp-transfer-manager/src/DeferredPromise.ts","webpack:///../@here/harp-mapview/lib/image/Image.ts","webpack:///../@here/harp-mapview/lib/MapViewAtmosphere.ts","webpack:///../@here/harp-mapview/lib/poi/Poi.ts","webpack:///../@here/harp-mapview/lib/TextureLoader.ts","webpack:///../@here/harp-mapview/lib/geometry/TileDataAccessor.ts","webpack:///../@here/harp-lines/index.ts","webpack:///../@here/harp-lines/lib/Lines.ts","webpack:///../@here/harp-lines/lib/HighPrecisionPoints.ts","webpack:///../@here/harp-omv-datasource/index.ts","webpack:///../@here/harp-omv-datasource/lib/OmvDataFilter.ts","webpack:///../@here/harp-omv-datasource/lib/OmvDataSource.ts","webpack:///../@here/harp-mapview-decoder/index.ts","webpack:///../@here/harp-mapview-decoder/lib/TileDataSource.ts","webpack:///../@here/harp-omv-datasource/lib/OmvDebugLabelsTile.ts","webpack:///../@here/harp-omv-datasource/lib/GeoJsonDataProvider.ts","webpack:///../@here/harp-examples/config.ts"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","THREE","exprEvaluator","ExprEvaluator","exprInstantiator","ExprInstantiator","ExprDependencies","properties","Set","ComputeExprDependencies","expr","dependencies","accept","this","instance","context","add","args","forEach","childExpr","op","featureState","branches","_","branch","fallback","condition","isJsonExpr","v","Array","isArray","length","ExprScope","Expr","code","ExprParser","parse","node","definitions","definitionExprCache","parseNode","undefined","lockedNames","cache","Map","env","scope","Value","ExprEvaluatorContext","m_dependencies","of","pool","ExprSerializer","serialize","m_isDynamic","exprIsDynamic","VarExpr","super","visitor","visitVarExpr","LiteralExpr","BooleanLiteralExpr","NumberLiteralExpr","StringLiteralExpr","NullLiteralExpr","ObjectLiteralExpr","Error","visitNullLiteralExpr","visitBooleanLiteralExpr","visitNumberLiteralExpr","visitStringLiteralExpr","visitObjectLiteralExpr","HasAttributeExpr","visitHasAttributeExpr","CallExpr","visitCallExpr","descriptor","getOperator","isDynamicOperator","some","e","isDynamic","MatchExpr","elementTy","every","visitMatchExpr","CaseExpr","visitCaseExpr","cond","Vector2","x","y","Vector3","z","Vector4","w","map","label","body","push","referenceResolverState","parseCall","slice","has","cachedEntry","result","definitionEntry","isLiteralDefinition","fromJSON","isBoxedDefinition","isInterpolatedPropertyDefinition","interpolatedPropertyDefinitionToJsonExpr","delete","set","resolveReference","makeCallExpr","parseGetExpr","parseHasExpr","obj","parseLiteralExpr","conditions","isValidMatchLabel","JSON","stringify","parseMatchExpr","caseFallback","parseCaseExpr","GeoCoordinates","latitude","longitude","altitude","MathUtils","radToDeg","latLng","lat","lng","geoPoint","isGeoPointLike","fromGeoPoint","isGeoCoordinatesLike","fromDegrees","isLatLngLike","degToRad","isNaN","wrapped","sign","Math","other","normalizeAngleDeg","a","angleDistanceDeg","b","newEmptyBox3","min","Infinity","max","newVector3","clamp","normalizeLongitudeDeg","interpolateAnglesDeg","p0","p1","enableBlending","material","transparent","forcedBlending","blending","CustomBlending","premultipliedAlpha","blendSrc","OneFactor","blendDst","OneMinusSrcAlphaFactor","blendSrcAlpha","blendDstAlpha","SrcAlphaFactor","getShaderMaterialDefine","fallbackValue","defines","getShaderDefine","setShaderDefine","updated","DEFINE_BOOL_TRUE","currentValue","DEFINE_BOOL_FALSE","shaderContent","shaderName","insertedShaderName","addTab","tabChar","replace","NormalBlending","assert","needsUpdate","logger","LoggerManager","groundNormalPlanarProj","groundPlane","Plane","clone","groundSphere","Sphere","EarthConstants","EQUATORIAL_RADIUS","rayCaster","Raycaster","space","tangentSpace","quaternions","Quaternion","vector3","matrix4","Matrix4","transforms","xAxis","yAxis","zAxis","position","MapViewUtils","orbitFocusPoint","mapView","deltaAzimuthDeg","deltaTiltDeg","maxTiltAngleRad","MAX_TILT_RAD","target","sphericalCoordinates","extractSphericalCoordinatesFromLocation","camera","tilt","heading","azimuth","PI","lookAt","distance","targetDistance","getWorldTargetFromCamera","projection","elevation","cameraPos","copy","cameraLookAt","getWorldDirection","constant","radius","targetWorldPos","type","ProjectionType","Planar","ray","intersectPlane","intersectSphere","getCameraPositionFromTargetCoordinates","targetCoordinates","yawDeg","pitchDeg","pitchRad","cos","yawRad","projectPoint","groundDistance","sin","Spherical","normalize","projectOnPlane","setFromAxisAngle","applyQuaternion","setLength","height","cameraHeight","sqrt","wrapWorldPointsToView","points","cameraPosNormalized","point","angleTo","pointLen","getFitBoundsDistance","worldTarget","cameraRotationMatrix","extractRotation","matrixWorld","screenUpVector","applyMatrix4","screenSideVector","screenVertMidPlane","setFromCoplanarPoints","screenHorzMidPlane","halfVertFov","fov","halfHorzFov","aspect","halfVertFovTan","tan","halfHorzFovTan","cameraToTarget","sub","negate","cameraToTargetNormalized","offsetVector","cameraToPointOnRefPlane","pointOnRefPlane","checkAngle","referencePlane","maxAngle","fovFactor","viewAngle","cameraToPointLen","cameraToTargetLen","newCameraDistance","multiplyScalar","rayCastWorldCoordinates","pointOnScreenXinNDC","pointOnScreenYinNDC","pointInNDCPosition","multiplyMatrices","getInverse","projectionMatrix","pointInCameraSpace","worldPosition","panCameraAboveFlatMap","offsetX","offsetY","panCameraAroundGlobe","fromWorld","toWorld","setFromUnitVectors","inverse","makeRotationFromQuaternion","updateMatrixWorld","getCameraRotationAtTarget","transform","localTangentSpace","makeBasis","setFromRotationMatrix","multiply","extractCameraTilt","normal","surfaceNormal","cosTheta","dot","acos","targetGeoCoords","getGeoTargetFromCamera","extractTiltAngleFromLocation","warn","extractAttitude","options","setFromMatrixPosition","unprojectPoint","setFromMatrixColumn","yaw","pitch","roll","atan2","location","cross","calculateDistanceToGroundFromZoomLevel","zoomLevel","cameraPitch","tileSize","EQUATORIAL_CIRCUMFERENCE","pow","focalLength","roundZoomLevel","round","estimateTextureSize","texture","objectSize","visitedObjects","image","uuid","imageBytes","width","heapSize","gpuSize","estimateMaterialSize","RawShaderMaterial","ShaderMaterial","rawMaterial","uniforms","uniform","Texture","MeshBasicMaterial","MapMeshBasicMaterial","meshMaterial","aoMap","specularMap","alphaMap","envMap","MapMeshStandardMaterial","standardMaterial","lightMap","emissiveMap","bumpMap","normalMap","displacementMap","roughnessMap","metalnessMap","LineBasicMaterial","LineDashedMaterial","estimateAttributeSize","attribute","attrName","generateUUID","attrBytes","bytesPerElement","array","BYTES_PER_ELEMENT","InterleavedBufferAttribute","BufferAttribute","count","itemSize","estimateGeometrySize","geometry","bufferGeometry","Geometry","vertices","faces","_bufferGeometry","BufferGeometry","attributes","index","getIsoLanguageCode","language","substring","MAX_TILT_DEG","DEG2RAD","zoomOnTargetPosition","targetNDCx","targetNDCy","maxTiltAngle","elevationProvider","getHeight","setZ","deltaTilt","newWorldTarget","getTargetAndDistance","distanceTo","cameraPosZ","level","geoLocation","heightAboveTerrain","unprojectAltitude","abs","getHeightAboveTerrain","cameraDir","fallbackTarget","wrapGeoPointsToScreen","startPosition","startIndex","fromObject","north","south","lonCenter","lonSpan","east","west","relToCenter","geoBoxToGeoPoints","box","center","getFitBoundsLookAtParams","geoTarget","worldPoints","params","startDistance","minDistance","tmpCamera","quaternion","getCameraCoordinatesFromTargetCoordinates","rotate","deltaYawDeg","deltaPitchDeg","rotateOnWorldAxis","newPitch","maxPitch","asin","rotateX","setRotation","geoCenter","dirVec","dirLen","error","divideScalar","getCameraFrustumPlanes","near","far","top","zoom","left","view","enabled","fullWidth","fullHeight","filmOffset","getFilmWidth","right","bottom","rayCastGeoCoordinates","worldCoordinates","calculateDistanceFromZoomLevel","calculateZoomLevelFromDistance","log2","minZoomLevel","maxZoomLevel","calculateDepthFromClipDistance","clipDistance","perspCam","cameraRange","viewSpaceDistance","cameraToWorldDistance","calculateVerticalFovByHorizontalFov","hFov","atan","calculateHorizontalFovByVerticalFov","vFov","calculateFocalLengthByVerticalFov","calculateFovByFocalLength","calculateScreenSizeByFocalLength","worldSize","calculateWorldSizeByFocalLength","screenSize","estimateObject3dSize","parentSize","size","isObject3D","Scene","isMesh","isLine","isPoints","mesh","materials","geometries","featureData","userData","feature","getFeatureDataSize","estimateMeshSize","children","child","mapViewIsLoading","numTilesLoading","tileList","visibleTileSet","dataSourceTileList","tile","visibleTiles","tileLoader","isFinished","tileGeometryLoader","isLoading","textElementsRenderer","loading","poiTableManager","finishedLoading","allVisibleTilesLoaded","getBrowserLanguages","navigator","languages","languageList","lang","powerOfTwo","TileOffsetUtils","getKeyForTileKeyAndOffset","tileKey","offset","bitshift","shiftedOffset","offsetBits","totalOffsetsToStore","getShiftedOffset","mortonCode","extractOffsetAndMortonKeyFromKey","num","getParentKeyFromKey","calculatedKey","TileKey","fromMortonCode","parentMortonCode","MIN_ELEVATION","MAX_ELEVATION","MAX_BUILDING_HEIGHT","box3","obb","extents","unitScale","sourceProjection","worldPos","FontUnit","FontStyle","FontVariant","VerticalAlignment","HorizontalAlignment","WrappingMode","DefaultTextStyle","DEFAULT_FONT_NAME","DEFAULT_FONT_SIZE","unit","freeze","Pixel","backgroundSize","DEFAULT_FONT_STYLE","Regular","DEFAULT_FONT_VARIANT","DEFAULT_ROTATION","DEFAULT_COLOR","Color","DEFAULT_OPACITY","DEFAULT_BACKGROUND_COLOR","DEFAULT_BACKGROUND_OPACITY","DEFAULT_TRACKING","DEFAULT_LEADING","DEFAULT_MAX_LINES","DEFAULT_LINE_WIDTH","DEFAULT_CANVAS_ROTATION","DEFAULT_LINE_ROTATION","DEFAULT_WRAPPING_MODE","Word","DEFAULT_VERTICAL_ALIGNMENT","Above","DEFAULT_HORIZONTAL_ALIGNMENT","Left","TextRenderStyle","m_params","fontName","fontSize","fontStyle","fontVariant","rotation","color","opacity","backgroundColor","backgroundOpacity","source","TextLayoutStyle","tracking","leading","maxLines","lineWidth","canvasRotation","lineRotation","wrappingMode","verticalAlignment","horizontalAlignment","poiInfo","poiRenderBatch","LoadingState","TextElement","text","renderParams","layoutParams","priority","xOffset","yOffset","featureId","style","fadeNear","fadeFar","tileOffset","visible","distanceScale","renderOrder","elevated","renderStyle","layoutStyle","TextElementType","PoiLabel","PathLabel","mayOverlap","reserveSpace","m_poiInfo","path","LineMarker","poiRenderOrder","m_renderStyle","m_layoutStyle","min2","iconMinZoomLevel","textMinZoomLevel","max2","iconMaxZoomLevel","textMaxZoomLevel","HIGHEST_PRIORITY","Number","MAX_SAFE_INTEGER","GeoBox","southWest","northEast","extent","latitudeSpan","longitudeSpan","minAltitude","altitudeSpan","maxAltitude","containsHelper","isFlat","isSameAltitude","isWithinAltitudeRange","subdivisionScheme","boundingBoxGenerator","FlatTileBoundingBoxGenerator","tileTreeTraverse","TileTreeTraverse","subTiles","TileKeyUtils","geoCoordinatesToTileKey","geoBox","geoRectangleToTileKeys","getGeoBox","getWorldBox","tmpColor","ColorUtils","getHexFromRgba","g","floor","getHexFromRgb","getHexFromHsl","h","setHSL","getHex","getRgbaFromHex","hex","hasAlphaInHex","getAlphaFromHex","removeAlphaFromHex","InterpolationMode","interpolationMode","values","zoomLevels","interpolation","step","exponent","UnicodeUtils","Direction","whiteSpaceRanges","isWhiteSpace","codePoint","range","newLineRanges","isNewLine","nonPrintableRanges","isPrintable","rtlBlocks","neutralBidirectionalRanges","weakBidirectionalRanges","getDirection","block","weakRange","Weak","neutralRange","Neutral","find","element","RTL","LTR","rtlMirroredCodePoints","isRtlMirrored","DEFAULT_SKIP_PROPERTIES","TEXTURE_PROPERTY_KEYS","getMaterialConstructor","technique","shadowsEnabled","isExtrudedLineTechnique","shading","SolidLineMaterial","PointsMaterial","CirclePointsMaterial","applyTechniquePropertyToMaterial","propertyName","techniqueAttrValue","applySecondaryColorToMaterial","evaluateProperty","materialColor","techniqueColor","evaluateColorProperty","setHex","applyBaseColorToMaterial","colorValue","tech","setRGB","disableBlending","isInterpolatedProperty","isExpr","getPropertyValue","parsed","parseStringEncodedColor","getBaseColorPropName","techDescriptor","techniqueDescriptors","attrTransparencyColor","textureReadyCallback","Constructor","settings","HighPrecisionLineMaterial","fog","removeDiffuseLight","id","isExtrudedPolygonTechnique","flatShading","vertexColors","depthTest","isStandardTechnique","isTerrainTechnique","texturePropertyName","textureProperty","onLoad","wrapS","toWrappingMode","wrapT","magFilter","toTextureFilter","minFilter","flipY","repeatU","repeat","repeatV","onError","textureUrl","isTextureBuffer","dataTextureProperties","textureDataType","toTextureDataType","textureBuffer","buffer","Uint8Array","UnsignedByteType","ByteType","Int8Array","ShortType","Int16Array","UnsignedShortType","Uint16Array","IntType","Int32Array","UnsignedIntType","Uint32Array","FloatType","Float32Array","HalfFloatType","getTextureBuffer","DataTexture","format","toPixelFormat","textureBlob","Blob","URL","createObjectURL","TextureLoader","load","isShaderTechnique","baseColorPropName","hasBaseColor","getOwnPropertyNames","filter","TRANSPARENCY_PROPERTY_KEYS","indexOf","prop","propColor","applyShaderTechniqueToMaterial","skipExtraProps","startsWith","BASE_TECHNIQUE_NON_MATERIAL_PROPS","applyTechniqueToMaterial","itemCount","normalized","elevationEnabled","DisplacedMesh","elevationRange","minElevation","maxElevation","Mesh","SolidLineMesh","raycast","Circles","Squares","LineSegments","primitive","Line","Points","Object3D","baseColorProp","getBaseColorProp","techniques","Pass","renderToScreen","renderer","scene","writeBuffer","readBuffer","delta","setRenderTarget","render","shader","textureID","UniformsUtils","vertexShader","fragmentShader","fsQuad","FullScreenQuad","m_camera","OrthographicCamera","PlaneBufferGeometry","m_mesh","MercatorProjection","Projection","val","MercatorConstants","MAXIMUM_LATITUDE","log","latitudeProject","latitudeClamp","exp","worldPoint","cosh","Box3","geoPointLike","latitudeClampProject","latitudeInRadians","fromRadians","unprojectLatitude","worldCenter","worldNorth","worldSouth","worldYCenter","isBox3Like","isOrientedBox3Like","EPSILON","worldBox","minGeo","maxGeo","fromCoordinates","_worldPoint","webMercatorProjection","mercatorProjection","reprojectPoint","sy","projectBox","maxY","quadTreeSubdivisionScheme","row","column","quadkey","mask","parseInt","charAt","fromRowColumnLevel","quadKey64","quadKey","m_mortonCode","quadkey64","m_hereTile","coordX","coordY","totalWidth","totalHeight","rowsAtLevel","columnsAtLevel","changedLevelBy","toString","col","qnr","subQuad","fromQuadKey","fromHereTile","msb","ExtrusionFeatureDefs","DEFAULT_RATIO_MIN","DEFAULT_RATIO_MAX","MIN_BUILDING_HEIGHT","MapViewEventNames","setLogLevelForAll","LogLevel","DEFAULT_FOV_CALCULATION","FALLBACK_RENDER_ORDER_OFFSET","UPDATE","Update","RENDER_EVENT","Render","DID_RENDER_EVENT","AfterRender","FIRST_FRAME_EVENT","FirstFrame","FRAME_COMPLETE_EVENT","FrameComplete","THEME_LOADED_EVENT","ThemeLoaded","ANIMATION_STARTED_EVENT","AnimationStarted","ANIMATION_FINISHED_EVENT","AnimationFinished","MOVEMENT_STARTED_EVENT","MovementStarted","MOVEMENT_FINISHED_EVENT","MovementFinished","CONTEXT_LOST_EVENT","ContextLost","CONTEXT_RESTORED_EVENT","ContextRestored","COPYRIGHT_CHANGED_EVENT","CopyrightChanged","vector2","frustumPoints","MapViewPowerPreference","MapViewDefaults","addBackgroundDatasource","maxVisibleDataSourceTiles","extendedFrustumCulling","tileCacheSize","resourceComputationType","ResourceComputationType","EstimationInMb","quadTreeSearchDistanceUp","quadTreeSearchDistanceDown","pixelRatio","window","devicePixelRatio","theme","MapView","EventDispatcher","m_renderLabels","m_screenCollisions","ScreenCollisions","m_visibleTileSetLock","m_tileWrappingEnabled","m_zoomLevel","m_minZoomLevel","m_maxZoomLevel","m_minCameraHeight","m_screenCamera","m_rteCamera","PerspectiveCamera","m_yaw","m_pitch","m_roll","m_focalLength","m_targetDistance","m_targetGeoPos","m_targetWorldPos","m_viewRanges","minimum","maximum","m_scene","m_fog","MapViewFog","m_mapTilesRoot","m_mapAnchors","m_worldAnchors","m_animationCount","m_drawing","m_updatePending","m_frameNumber","m_forceCameraAspect","m_tileDataSources","m_connectedDataSources","m_failedDataSources","m_enablePolarDataSource","m_plane","m_sphere","m_theme","m_themeIsLoading","m_firstFrameRendered","m_firstFrameComplete","m_initialTextPlacementDone","m_imageCache","MapViewImageCache","m_poiManager","PoiManager","m_poiTableManager","PoiTableManager","m_lastTileIds","m_copyrightInfo","m_env","MapEnv","onWebGLContextLost","event","dispatchEvent","onWebGLContextRestored","m_renderer","clearColor","setClearColor","update","m_options","m_uriResolver","uriResolver","minCameraHeight","decoderUrl","ConcurrentDecoderFacade","defaultScriptUrl","resolveUri","decoderCount","defaultWorkerCount","m_visibleTileSetOptions","clipPlanesEvaluator","createDefaultClipPlanesEvaluator","enablePolarDataSource","m_pixelRatio","maxFps","enableStatistics","m_languages","handleRequestAnimationFrame","renderLoop","m_pickHandler","PickHandler","enablePickTechnique","tileWrappingEnabled","setupStats","canvas","addEventListener","WebGLRenderer","antialias","nativeWebglAntialiasEnabled","alpha","preserveDrawingBuffer","powerPreference","Default","autoClear","debug","checkShaderErrors","info","autoReset","setupRenderer","fovCalculation","getCanvasClientSize","up","m_screenProjector","ScreenProjector","setupCamera","m_raycaster","PickingRaycaster","m_movementDetector","CameraMovementDetector","movementThrottleTimeout","movementStarted","movementFinished","mapPassAntialiasSettings","customAntialiasSettings","mapRenderingManager","MapRenderingManager","dynamicPixelRatio","m_tileGeometryManager","TileGeometryManager","enableMixedLod","m_enableMixedLod","m_visibleTiles","createVisibleTileSet","m_animatedExtrusionHandler","AnimatedExtrusionHandler","m_backgroundDataSource","BackgroundDataSource","addDataSource","styleSetName","polarStyleSetName","m_polarDataSource","PolarTileDataSource","geometryLevelOffset","polarGeometryLevelOffset","updatePolarDataSource","backgroundTilingScheme","setTilingScheme","initTheme","m_textElementsRenderer","createTextRenderer","m_createdLights","resetTextRenderer","m_movementFinishedUpdateTimerId","clearTimeout","m_animationFrameHandle","cancelAnimationFrame","removeEventListener","dataSource","dispose","clearTileCache","clearRenderStates","clear","getDataSourceCacheSize","numVisibleTiles","setDataSourceCacheSize","setNumberOfVisibleTiles","updateImages","updateLighting","invalidateCache","updateSkyBackground","m_pointOfView","pointOfView","postEffectsFile","fetch","then","response","json","postEffects","m_postEffects","setPostEffects","ThemeLoader","isThemeLoaded","loadedTheme","catch","sky","reset","lights","clearAlpha","images","imageTextures","poiTables","loadPoiTables","textStyles","defaultTextStyle","fontCatalogs","priorities","labelPriorities","styles","setTheme","time","Date","now","setLanguages","disable","disableFading","m_previousFrameTimeStamp","listener","m_collisionDebugCanvas","rendererClearColor","getClearColor","rendererClearAlpha","getClearAlpha","setClearAlpha","lookAtImpl","enableNativeWebglAntialias","calculateFocalLength","getSize","updateCameras","dataSourceName","ds","ready","isVisible","getDataSourceByName","attach","setEnableElevationOverlay","m_elevationProvider","updateStorageLevelOffset","connect","Promise","resolve","resolveOnce","DataSourceConnect","message","dsIndex","detach","removeDataSource","splice","textElements","addOverlayText","clearOverlayText","targetOrParams","tiltDeg","headingDeg","geoPos","limitedPitch","maxPitchRadWithCurvature","maxPitchDegWithCurvature","entries","cameraIsMoving","animating","isAnimating","m_pixelToWorld","lookAtDistance","pixelToWorld","getPixelRatio","setPixelRatio","ratio","lowResPixelRatio","project","setFromCamera","getNormalizedScreenCoordinates","getWorldPositionAt","intersectMapObjects","setSize","collisionDebugCanvas","Resize","frameStartTime","PerformanceTimer","startRenderLoop","clearCache","fun","forEachVisibleTile","forEachCachedTile","markTilesDirty","elevationSource","elevationRangeSource","m_elevationSource","m_elevationRangeSource","dataSources","setTileUpdateCallback","overlayOnElevation","bloom","outline","vignette","sepia","updateOutline","enableShadows","shadowMap","PCFSoftShadowMap","tangentSpaceMatrix","getOptionValue","bounds","geoPoints","isGeoBoxExtentLike","fromCenterAndExtents","setFromPoints","getCenter","scalePointToSurface","updateLookAtSettings","twinDataSource","viewRanges","setFovOnCamera","maxGeometryHeightScaled","getScaleFactor","reduce","maxGeometryHeight","assign","updateClipPlanes","updateProjectionMatrix","setScalar","$zoom","$pixelToMeters","$frameNumber","vector","projectionMatrixInverse","viewPos","matrixWorldInverse","transformedPoints","ndcToView","directionalLight","isDirectionalLight","pointsInLightSpace","viewToLightSpace","shadow","expandByPoint","lightDirection","lightPosHyp","addScaledVector","synchronousRendering","fudgeTimeInMs","frameInterval","requestAnimationFrame","enabledDataSources","isDataSourceEnabled","currentFrameEvent","stats","PerformanceStatistics","gatherStatistics","currentFrame","timeSincePreviousFrame","setValue","storeAndClearFrameInfo","setupTime","cullTime","textPlacementTime","drawTime","textDrawTime","endTime","m_thisFrameTilesChanged","updateEnv","updateLights","lockVisibleTileSet","viewRangesStatus","updateRenderList","storageLevel","getEnabledTileDataSources","viewRangesChanged","renderList","renderedTiles","renderTileObjects","frameNumLastVisible","isDynamicFrame","initializing","childObject","geoPosition","wp","addValue","checkCameraMoved","CameraPositionChanged","renderLabels","prepareRenderTextElements","m_skyBackground","updateCamera","finishRenderTextElements","appResults","disposePendingTiles","checkCopyrightUpdates","frameRenderTime","addWebGLInfo","addMemoryInfo","worldOffsetX","computeWorldOffsetX","willRender","objects","processTileObjectFeatures","displacement","setRotationFromMatrix","boundingBox","getRotationMatrix","frustumCulled","_backupRenderOrder","isBuilding","kind","includes","GeometryKind","Building","levelOffset","didRender","Boolean","starts","objInfos","isBufferGeometry","getIndex","endOfLastGroup","clearGroups","featureIndex","getFeatureId","getFeatureState","$state","parentEnv","start","groups","addGroup","placeText","renderText","themeName","resize","VisibleTileSet","FrustumIntersection","SkyBackground","updateSkyBackgroundColors","addNewSkyBackground","removeSkyBackGround","groundColor","background","updateTexture","light","remove","lightDescription","createLight","setTimeout","tileIdList","sort","newTileIds","join","checkIfTilesChanged","newCopyrightInfo","getRenderedTilesCopyrightInfo","allEqual","tileCopyrightInfo","copyrightInfo","CopyrightInfo","mergeArrays","poiManager","keys","addImage","url","preload","atlas","addTextureAtlas","imageTexture","addImageTexture","enable","TextElementsRenderer","MapViewState","TextCanvasFactory","PoiRendererFactory","FontCatalogLoader","overlayText","limitFov","clientWidth","clientHeight","Env","_name","parent","lookup","unmap","def","bdef","styleDef","DEFAULT_TEXT_DISTANCE_SCALE","Log","updateStats","placementStats","tempPosition","tempScreenPosition","tempScreenPoints","tempPoiScreenPosition","tmpTextBufferCreationParams","tmpAdditionParams","tmpBufferAdditionParams","TileTextElements","group","TextElementLists","lists","list","elements","addTextToCanvas","textElement","screenPosition","pathOverflow","layer","letterCaseArray","glyphCaseArray","pickingData","addText","glyphs","isPlacementTimeExceeded","startTime","m_viewState","m_viewCamera","m_viewUpdateCallback","m_textCanvasFactory","m_poiRendererFactory","m_fontCatalogLoader","m_initialized","m_glyphLoadingCount","m_textRenderers","m_tmpVector","m_overloaded","m_cacheInvalidated","m_forceNewLabelsPass","m_textElementStateCache","TextElementStateCache","m_textStyleCache","TextStyleCache","initializeDefaultOptions","setGlyphCountLimits","minNumGlyphs","maxNumGlyphs","initialized","updateGlyphDebugMesh","textRenderer","textCanvas","tileTextElementsChanged","textElementsChanged","checkIfTextElementsChanged","textElementsAvailable","hasOverlayText","initialize","updateTextElements","renderedTilesChanged","frameNumber","clearVisited","findReplacements","anyTextGroupEvicted","prepopulateScreenWithBlockingElements","placeNewTextElements","placeTextElements","placeOverlayTextElements","updateTextRenderers","m_overlayTextElements","concat","pickResults","pickHandler","pickData","pickObjectType","isDuplicate","pickResult","pickText","PickObjectType","Text","poiRenderer","pickTextElements","Icon","waitInitialized","m_loadPromise","memoryUsage","getMemoryUsage","m_initPromise","initializeDefaultAssets","initializeTextCanvases","boxes","renderListEntry","startLinePointProj","endLinePointProj","pathBlockingElement","blockingElements","project3","line","screenSpaceLines","end","lineWithBound","minX","maxX","minY","allocateIBoxes","groupState","maxNumPlacedLabels","pass","visited","shieldGroups","hiddenKinds","hiddenGeometryKinds","elevationMap","getDisplacementMap","textElementState","textElementStates","PersistentLabels","total","numRenderedTextElements","uninitialized","viewDistance","tooFar","elementVisible","NewLabels","textElementStyle","getTextElementStyle","hasOrIntersects","overlayTextElement","elementType","isPathLabelTooSmall","numNotVisible","dbgPathTooSmall","numPathTooSmall","forceNewPassOnLoaded","initializeGlyphs","getLayer","DEFAULT_TEXT_CANVAS_LAYER","storage","drawCount","capacity","numCannotAdd","textRenderStyle","textLayoutStyle","addPoiLabel","addLineMarkerLabel","addPathLabel","loadingState","Initialized","Requested","Loaded","newLoadPromise","fontCatalog","loadCharset","all","getGlyphs","defaultFontCatalogName","initializeDefaultTextElementStyle","loadCatalogs","catalog","loadedTextCanvas","createTextCanvas","createPoiRenderer","defaultTextCanvas","defaultPoiRenderer","initializeTextElementStyles","debugGlyphs","debugContext","getValue","m_debugGlyphTextureCacheMesh","initializeGlyphDebugMesh","m_debugGlyphTextureCacheWireMesh","defaultFontCatalog","planeGeometry","PlaneGeometry","textureSize","maxWidth","maxHeight","depthWrite","wireframe","WireframeGeometry","wireframeMaterial","clearTextCache","checkIfOverloaded","updateStartTime","overloaded","updateTextElementsFromSource","from","tileDataSource","tiles","sortedTiles","sortedGroups","createSortedGroupsForSorting","numTextElementsUpdated","textElementLists","selectTextElementsToUpdateByDistance","textElementGroup","maxViewDistance","found","getOrSet","checkReadyForPlacement","PrePlacementResult","Ok","deduplicateElement","Duplicate","totalLabels","results","totalGroups","newGroups","tilesToRender","shouldRenderText","groupedPriorityLists","textElementGroups","foundGroup","farDistanceLimitRatio","maxDistanceRatioForTextLabels","maxDistanceRatioForPoiLabels","getMaxViewDistance","tileTextElements","prepareTextElementGroup","fadeAnimationRunning","placeStartTime","placeNew","maxNumPlacedTextElements","maxNumVisibleLabels","groupStates","sortedGroupStates","currentPriority","currentPriorityBegin","textElementGroupState","newPriority","placeTextElementGroup","beginGroupIndex","endGroupIndex","screenXOrigin","screenYOrigin","textPath","screenPoints","pt","pX","pY","SimplePath","LineCurve","factor","labelDistanceScaleMin","labelDistanceScaleMax","state","maxVisibilityDist","distanceFadeValue","textDistance","labelState","iconIndex","pointLabel","textRenderState","iconRenderStates","iconRenderState","setViewDistance","iconRejected","renderIcon","isClamped","isValid","distanceScaleFactor","getDistanceScalingFactor","iconReady","prepareRender","placeIcon","PlacementResult","Invisible","Rejected","distanceFadeFactor","getDistanceFadingFactor","viewState","poiTextMaxDistance","ignoreDistance","iconIsOptional","shouldRenderPointText","placeResult","placePointLabel","numPoiTextsInvisible","textRejected","textIsOptional","startFadeOut","renderTextDuringMovements","shouldRenderPoiText","isFading","startFadeIn","fadeFactor","scaleFactor","textBufferObject","createTextBufferObject","backgroundIsVisible","scale","addTextBufferObject","addTextBufferToCanvas","numRenderedPoiTexts","allocateSpace","renderPoi","renderDistance","numRenderedPoiIcons","addPointLabel","lineMarkerLabel","shieldGroup","shieldGroupIndex","lineTechnique","minDistanceSqr","pointIndex","tooClose","j","Math2D","distSquared","textMaxDistance","pathLabel","Path","SimpleLineCurve","getPoint","computeViewDistance","textRenderDistance","prevSize","placePathLabel","prevOpacity","prevBgOpacity","numTextElementsInScene","newOverloaded","TileLoaderState","numBytes","frameNumLastRequested","frameNumVisible","numFramesVisible","visibilityCounter","skipRendering","m_boundingBox","OrientedBox3","m_disposed","m_localTangentSpace","m_forceHasGeometry","m_textElementGroups","TextElementGroupPriorityList","m_pathBlockingElements","m_worldCenter","m_visibleArea","m_elevationRange","m_ownedTextures","WeakSet","getTilingScheme","updateBoundingBox","TileTextStyleCache","m_resourceInfo","computeResourceInfo","TextElementGroup","addTextElement","removeTextElement","m_textElementsChanged","blockingElement","changed","_zoomLevel","area","updatePriority","calculationStatus","m_maxGeometryHeight","elevateBoundingBox","m_decodedTile","decodedTile","invalidateResourceInfo","forceHasGeometry","decodeTime","copyrightHolderIds","requestUpdate","m_tileGeometryLoader","hasGeometry","basicGeometryLoaded","allGeometryLoaded","m_tileLoader","loadAndDecode","tileLoaderState","Ready","Canceled","Failed","m_animatedExtrusionTileHandler","handler","disposeMaterial","materialProperty","shouldDisposeTexture","disposeObject","shouldDisposeObjectGeometry","shouldDisposeObjectMaterial","rootObject","traverse","preparedTextPaths","clearTextElements","hasTextElements","cancel","worldExtent","LodMesh","setLevelOfDetail","newBoundingBox","tmpPos","num3dObjects","numTextElements","aggregatedObjSize","tileInfo","numUserTextElements","RingBuffer","head","tail","data","next","enqOne","previous","Iterator","m_buffer","m_index","SimpleTimer","statistics","running","m_currentValue","SampledTimer","numResets","maxNumSamples","samples","getStats","computeArrayStats","asArray","median","median75","median90","median95","median97","median99","median999","mid","sum","avg","numSamples","stages","stage","hasTimer","getTimer","currentStage","stop","timers","nullTimer","keepSamples","timer","addTimer","header","footer","maxNameLength","print","toFixed","simpleStats","FrameStats","messages","oldValue","FrameStatsArray","frameEntries","frameStats","currentSize","enq","maxNumFrames","configs","m_instance","m_frameEvents","clearFrames","webGlInfo","calls","lines","triangles","memory","textures","programs","performance","totalJSHeapSize","usedJSHeapSize","jsHeapSizeLimit","addFrame","onlyLastFrame","frames","plainObject","getAsPlainObject","simpleStatistics","AnimatedExtrusionState","m_mapView","duration","forceEnabled","m_tileHandlerMap","m_zoomDirection","m_zoomLevelPrevious","tileHandler","zoomLevelChanged","m_forceAnimatedExtrusion","animatedExtrusion","m_forceAnimatedExtrusionDuration","extrusionDuration","tileKeys","m_tile","extrudedObjects","m_animatedExtrusionDuration","m_extrudedObjects","m_animatedExtrusionState","None","m_animatedExtrusionStartTime","animateExtrusion","Playing","Started","currentTime","timeProgress","extrusionRatio","easeInOutCubic","Finished","stopExtrusionAnimation","animatedExtrusionHandler","extrudedObject","startExtrusionAnimationIfNeeded","zoomDirection","customDepthMaterial","removeTile","childTileKeys","getSubTileKeys","childTileKey","extrusionStartTime","nextLevelDiff","getChildTiles","parentTileKey","startExtrusionAnimation","parentUri","childUri","absoluteUrlWithOriginRe","test","getUrlOrigin","substr","baseUrl","RegExp","idx","lastIndexOf","getUrlHostAndProtocol","protocol","host","urlOriginRe","match","emptyTexture","visibilityRange","linkMixinWithMaterial","mixin","shaderDefines","shaderUniforms","linkMixinWithShader","DisplacementFeature","FadingFeature","ExtrusionFeature","isEnabled","displacementMaterial","updateDisplacementFeature","useDisplacementMap","onBeforeCompile","insertShaderInclude","DisplacementFeatureMixin","m_displacementMap","setDisplacementMap","Uniform","displacementScale","displacementBias","chainCallbacks","fadingMaterial","DEFAULT_FADE_NEAR","DEFAULT_FADE_FAR","patchGlobalShaderChunks","ShaderChunk","fading_pars_vertex","updateFadingFeature","useFading","addRenderHelper","updateUniforms","additionalCallback","onBeforeRender","FadingFeatureMixin","m_fadeNear","m_fadeFar","getFadeNear","setFadeNear","getFadeFar","setFadeFar","extrusionMaterial","extrusion_pars_vertex","updateExtrusionFeature","useExtrusion","ExtrusionFeatureMixin","m_extrusion","getExtrusionRatio","setExtrusionRatio","zFightingWorkaround","ZFIGHTING_WORKAROUND","addFadingProperties","applyFadingParameters","addExtrusionProperties","applyExtrusionParameters","addDisplacementProperties","applyDisplacementParameters","copyFadingParameters","copyExtrusionParameters","copyDisplacementParameters","MapMeshDepthMaterial","MeshDepthMaterial","MeshStandardMaterial","meshphysical_frag","simpleLightingShadowChunk","applyMixinsWithoutProperties","LineCapsModes","extrude_line_vert_func","round_edges_and_add_caps","CAPS_NONE","CAPS_SQUARE","CAPS_ROUND","CAPS_TRIANGLE_IN","CAPS_TRIANGLE_OUT","tile_clip_func","high_precision_vert_func","StringEncodedNumeralType","StringEncodedMeters","Meters","regExp","decoder","encodedValue","exec","StringEncodedPixels","Pixels","StringEncodedHex","Hex","StringEncodedRGB","RGB","channels","StringEncodedRGBA","RGBA","parseFloat","StringEncodedHSL","HSL","StringEncodedMetricFormats","StringEncodedMetricFormatMaxSize","StringEncodedColorFormats","StringEncodedColorFormatMaxSize","StringEncodedNumeralFormats","StringEncodedNumeralFormatMaxSize","tmpBuffer","numeral","pixelToMeters","matchedFormat","formats","baseTechniqueParamsDescriptor","attrScopes","AttrScope","TechniqueGeometry","FeatureGeometry","transient","TechniqueRendering","pointTechniquePropTypes","mergeTechniqueDescriptor","enablePicking","squaresTechniquePropTypes","squares","circlesTechniquePropTypes","circles","lineMarkerTechniquePropTypes","useAbbreviation","useIsoCode","textMayOverlap","iconMayOverlap","textReserveSpace","iconReserveSpace","alwaysOnTop","showOnMap","stackMode","iconFadeTime","textFadeTime","iconXOffset","iconYOffset","iconScale","screenHeight","screenWidth","poiTable","poiName","poiNameField","imageTextureField","imageTexturePrefix","imageTexturePostfix","hAlignment","vAlignment","polygonalTechniqueDescriptor","polygonOffset","polygonOffsetFactor","polygonOffsetUnits","lineColor","lineFadeFar","lineFadeNear","solidLineTechniqueDescriptor","clipping","secondaryRenderOrder","secondaryWidth","secondaryColor","dashSize","gapSize","lineTechniqueDescriptor","fillTechniqueDescriptor","fill","standardTechniqueDescriptor","roughness","metalness","alphaTest","emissive","emissiveIntensity","refractionRatio","mapProperties","normalMapProperties","displacementMapProperties","roughnessMapProperties","emissiveMapProperties","bumpMapProperties","metalnessMapProperties","alphaMapProperties","standard","extrudedPolygonTechniqueDescriptor","floorHeight","defaultColor","defaultHeight","constantHeight","boundaryWalls","footprint","maxSlope","enableDepthPrePass","animateExtrusionDuration","lineColorMix","textTechniqueDescriptor","shaderTechniqueDescriptor","isStandardExtrudedLineTechnique","isFillTechnique","dashes","textureCoordinateType","transferList","texturePropertyKey","ArrayBuffer","imageName","textureName","UPDATE_EVENT","DataSource","cacheable","useGeometryLoader","addGroundPlane","minDataLevel","maxDataLevel","minDisplayLevel","maxDisplayLevel","m_storageLevelOffset","m_featureStateMap","storageLevelOffset","uniqueNameCounter","m_styleSetName","styleSet","tmpVector3","tmpVector2","AttachmentCache","bufferAttributes","interleavedAttributes","AttachmentInfo","description","getBufferAttribute","getArrayConstructor","interleavedBuffer","InterleavedBuffer","stride","attrs","interleavedAttr","TileGeometryCreator","enabledKinds","disabledKinds","_kindState","srcGeometry","createdOffsets","compileTechniques","createObjects","preparePois","createTextElements","isPoiTechnique","isLineMarkerTechnique","isTextTechnique","createLabelRejectionElements","pathGeometries","addBlockingElement","PathBlockingElement","processPriorities","initDecodedTile","geometryKind","resetVisibilityCounter","textPathGeometries","textFilter","processedPaths","newPaths","pop","textStyleCache","discreteZoomLevel","discreteZoomEnv","prepareTextPaths","ContextualArabicConverter","convert","getRenderStyle","getLayoutStyle","pathLengthSqr","textGeometries","stringCatalog","positions","numPositions","getX","getY","getZ","texts","techniqueFilter","attachment","getAttachments","groupCount","groupIndex","techniqueIndex","usesObject3D","onMaterialUpdated","addOwnedTexture","createMaterial","techniqueKind","setupTerrainMaterial","vertexAttributes","vertexAttribute","setAttribute","interleavedVertexAttributes","attr","getInterleavedBufferAttributes","setIndex","getAttribute","needsVertexNormals","computeVertexNormals","isSolidLineTechnique","isHighPrecisionLineMaterial","lineMaterial","clipTileSize","setShaderMaterialDefine","hasSolidLinesOutlines","hasFeatureGroups","featureStarts","buildObject","geometryId","isCirclesTechnique","isSquaresTechnique","enableRayTesting","isLineTechnique","isSegmentsTechnique","hasDynamicColor","fadingParams","getFadingParams","mat","unitFactor","metricUnit","outlineWidth","extrudedMaterial","addUserData","castShadow","receiveShadow","hasDynamicPrimaryColor","hasDynamicSecondaryColor","polygonMaterial","standardMat","extrusionAnimationEnabled","animateExtrusionValue","isRenderDepthPrePassEnabled","depthPassMesh","createDepthPrePassMesh","registerTileObject","materialFeature","setDepthPrePassStencil","edgeIndex","edgeGeometry","colorAttribute","extrusionAttribute","normalAttribute","uvAttribute","extrudedPolygonTechnique","getPolygonFadingParams","materialParams","colorMix","edgeMaterial","EdgeMaterial","edgeObj","depthPacking","RGBADepthPacking","extrusionAnimationDuration","animatedExtrusionTileHandler","AnimatedExtrusionTileHandler","outlineGeometry","fillTechnique","outlineMaterial","outlineObj","outlineTechnique","secondaryCaps","caps","techniqueLineWidth","techniqueSecondaryWidth","techniqueOpacity","poiGeometries","addPois","createTexCoords","shouldSubdivide","tmpV","moveTileCenter","geom","posArray","sw","se","nw","ne","posAttr","toArray","normAttr","uvAttr","sphericalModifier","SphericalGeometrySubdivisionModifier","zoomLevelOffset","subdivision","zoomLevelGeometry","EdgeLengthGeometrySubdivisionModifier","SubdivisionMode","All","modify","createGroundPlaneMaterial","createGroundPlane","Background","mainAttachment","attachments","_category","_styleSet","computeRenderOrder","category","findIndex","entry","_secondaryCategory","terrainColor","tileDisplacementMap","xCountVertices","yCountVertices","LuminanceFormat","geometryType","DEFAULT_COLOR_MIX","GlyphData","advanceX","u0","v0","u1","v1","font","sourceTextureCoordinates","dynamicTextureCoordinates","copyIndex","isInCache","character","String","fromCodePoint","direction","metrics","lineHeight","MAX_CAPACITY","VERTEX_BUFFER_STRIDE","INDEX_BUFFER_STRIDE","VERTICES_PER_QUAD","INDICES_PER_QUAD","QUAD_VERTEX_MEMORY_FOOTPRINT","QUAD_INDEX_MEMORY_FOOTPRINT","backgroundMaterial","initialSize","m_currentCapacity","m_drawCount","m_updateOffset","m_pickingCount","m_vertexBuffer","setUsage","DynamicDrawUsage","m_positionAttribute","m_uvAttribute","m_colorAttribute","m_bgColorAttribute","m_indexBuffer","m_geometry","m_pickingDataArray","m_bgMesh","updateRange","setDrawRange","glyphData","corners","weight","bgWeight","mirrored","newSize","resizeBuffers","baseVertex","baseIndex","setXYZW","mirroredUVIdx","setX","vertexOffset","bgColor","bgOpacity","cosR","sinR","offsetZ","rotSign","red","green","blue","bgRed","bgGreen","bgBlue","bgAlpha","targetOffset","srcOffset","glyph","bw","startIdx","endIdx","pickCallback","positionIndex","newVertexBuffer","newIndexBuffer","TypesettingUtils","EM_TO_PX","PT_TO_PX","OBLIQUE_ANGLE","OBLIQUE_OFFSET","getPixelSize","originalSize","Em","Point","Percent","getSmallCapsScale","smallCapsTransformations","SmallCaps","xHeight","capHeight","computeGlyphTransform","localRotation","cosAngle","sinAngle","localCosAngle","localSinAngle","updateBounds","globalBounds","individualBounds","Box2","MapViewPoints","raycaster","intersects","screenCoords","origin","mouseCoords","ceil","indices","il","fromArray","pointInfo","getPointInfo","pointIsOnScreen","testPoint","absoluteScreenPosition","relativeScreenPosition","pickCoordinates","dx","dy","halfSize","isNode","DebugOption","SET_EVENT_TYPE","DebugContext","m_optionsMap","__debugContext","opt","hasEventListener","option","tmpOBB","raycasterFromScreenPoint","screenX","screenY","scenePosition","intersectsRay","intersectObjects","intersect","Unspecified","intersection","addObjInfo","GeometryType","ExtrudedLine","SolidLine","TextPath","Polygon","ExtrudedPolygon","Area","faceIndex","intersectIndex","objInfosIndex","featureStartIndex","ColorCache","m_map","colorCode","padStart","nearMin","nearMultiplier","nearFarMultiplier","farOffset","m_tmpVectors","m_tmpQuaternion","farMin","nearPlane","farPlane","extractBasis","fwd","fwdRot","ElevationBasedClipPlanesEvaluator","m_minElevation","m_maxElevation","TopViewClipPlanesEvaluator","nearFarMarginRatio","farMaxRatio","nearFarMargin","m_minimumViewRange","evaluateDistanceSphericalProj","evaluateDistancePlanarProj","minimumViewRange","getCameraAltitude","farMax","cameraAltitude","cam","halfFovAngle","farTangent","getTangentBasedFarPlane","getFovBasedFarPlane","getOrthoBasedFarPlane","getTangentDistance","te","fovAngle","dVec","cameraFwdVec","tVec","cta","a2","r2","TiltViewClipPlanesEvaluator","halfPiLimit","cameraTilt","topAngleRad","bottomAngleRad","z1","z2","sinBeta","topDist","bottomDist","planesDist","getFrustumGroundIntersectionDist","cosHalfFov","cameraToOrigin","getCameraPitch","modifiedAlpha","getTiltedFovBasedFarPlane","cosAlpha","dSqr","cosAlpha1","minNear","minFarOffset","minFar","m_nearPlane","m_farPlane","fixedNear","invalidatePlanes","fixedFar","nearDist","farDist","decoderServiceType","scriptUrl","workerCount","workerSet","getWorkerSet","WorkerBasedDecoder","workerSets","ConcurrentWorkerSet","destroy","sourceInfo","existingInfo","findItem","year","link","formatAsHtml","filtered","HighPrecisionUtils","doubleToFloatVec","fround","createHighPrecisionCameraPos","objectInverseWorldMatrix","mvp","eyePos","eyePosFloat","viewProjection","eyePosHi","eyePosLo","createAttributes","positionVec","positionVecLow","addHPValue","major","addHPVector","vec","positionHigh","Float32BufferAttribute","positionLow","addInterleavedAttributes3","positionOffset","newPositions","majorX","minorX","majorY","minorY","majorZ","minorZ","setPositions","makeFloatVec","minorVec","updateHpUniforms","shaderMaterial","highPrecisionCameraInfo","isMaterial","u_mvp","u_eyepos","u_eyepos_lowpart","convertPositions","vAny","returnPositions","createLine","linePositions","addCircles","wireFrame","triangulateLine","hpLineGeometry","hpPositions","positionAttribute","positionLowAttribute","hpSolidMaterial","lineObject","HPL","HighPrecisionWireFrameLine","HighPrecisionLine","setupForRendering","createPoints","pointPositions","materialParameters","hpPointsGeometry","hpPointsMaterial","isHighPrecisionPointMaterial","HighPrecisionPointMaterial","pointsObject","HPP","HighPrecisionPoints","FeatureModifierId","OmvFilterString","StringMatch","matchString","str","filterString","Any","Match","StartsWith","EndsWith","endsWith","OmvGeometryType","OMV_TILE_DECODER_SERVICE_TYPE","OMV_TILER_SERVICE_TYPE","OmvTile","Tile","EquirectangularProjection","geoToWorldScale","worldToGeoScale","latitudeSpanInRadians","longitudeSpanInRadians","sizeX","sizeY","normalizedEquirectangularProjection","equirectangularProjection","TransverseMercatorProjection","m_phi0","m_lambda0","_unitScale","lon","TransverseMercatorUtils","POLE_RADIUS","rsq","POLE_RADIUS_SQ","nearestQuarter","deltaLon","deltaLat","distanceToPoleSq","distanceToPole","dir","offsetLon","clamped","clampGeoPoint","normalLon","phi","lambda","B","atanh","outScale","tau","nx","ny","D","sinh","pointsToCheck","E","POLE_EDGE_DEG","containsEastCut","containsCenterX","containsCenterY","alignLatitude","projected","vx","vy","vz","minZ","maxZ","lowerQ","upperQ","containsLowerQY","containsUpperQY","alignLongitude","latitudes","longitudes","altitudes","referencePoint","bad","good","POLE_EDGE","transverseMercatorProjection","tilingScheme","m_tilingScheme","m_worldBox","m_worldDimensions","levelDimensionX","getLevelDimensionX","levelDimensionY","getLevelDimensionY","originX","originY","unprojectBox","halfQuadTreeSubdivisionScheme","SubTiles","iterator","ZCurveIterator","RowColumnIterator","parentKey","worldCoordinatesToTileKey","cx","cy","worldSizeX","worldSizeY","wrap","lower","upper","minVal","maxVal","southWestLongitude","longitudeInRadians","southWestLatitude","northEastLongitude","northEastLatitude","minTileKey","maxTileKey","columnCount","minColumn","maxColumn","minRow","maxRow","m_subdivisionScheme","divX","getSubdivisionX","divY","getSubdivisionY","optionalParams","console","trace","m_channel","Trace","prefix","Debug","Info","Warn","WORKERCHANNEL_MSG_TYPE","workerMessage","self","postMessage","CopyShader","tDiffuse","CopyMaterial","NoBlending","atmosphere_common_utils","atmosphere_vertex_utils","atmosphere_fragment_utils","interpolants","DiscreteInterpolant","LinearInterpolant","CubicInterpolant","ExponentialInterpolant","InterpolatedProperty","isCubic","removeDuplicatePropertyValues","Discrete","vectorComponents","_vectorInterpolation","firstValue","needsMask","propValues","maskValues","baseFormat","allowedValueFormats","valueIdx","matched","valueFormat","processStringEnocodedNumeralInterpolatedProperty","_stringEncodedNumeralType","_stringEncodedNumeralDynamicMask","getInterpolatedMetric","getInterpolatedColor","nChannels","interpolant","Exponential","evaluate","resultBuffer","maskInterpolant","Dynamic","parseStringEncodedNumeral","StandardGeometryKind","GeometryKindSet","subset","elem","hasIntersection","TextureCoordinateType","PoiStackMode","descriptors","getFeatureName","abbreviation","isoCode","projectionName","sphereProjection","attributeMap","$id","evaluateTechniqueAttr","attributeName","DEFAULT_TILING_SCHEME","newScheme","removeDecodedTile","MIN_SAFE_INTEGER","webMercatorTilingScheme","tmpVectorA","tmpVectorB","tmpVectorC","positionAttr","uv","edgeAttr","edge","wallAttr","wall","indexAttr","middleVertex","lerpVectors","newIndices","shift","v2","shouldSplitTriangle","v3","SdfShaderChunks","sdf_attributes","sdf_varying","sdf_varying_computation","sdf_frag_uniforms","sdf_sampling_functions","GlyphClearMaterial","GlyphCopyMaterial","pageOffset","page0","DEFAULT_IMAGE","page1","page2","page3","page4","page5","page6","page7","SdfTextMaterial","vertexSource","fragmentSource","sdfTexture","sdfParams","distanceRange","MSDF","isMsdf","BG_TEXT","isBackground","side","DoubleSide","extensions","derivatives","characterBounds","DisplacedBufferAttribute","originalAttribute","m_normals","m_uvs","m_textureWidth","m_textureHeight","m_cache","VertexCache","MAX_CACHE_SIZE","m_lastPos","m_tmpNormal","resetTexture","normals","uvs","m_lastBufferIndex","getDisplacedCoordinate","m_texture","bufferIndex","displacePosition","fromBufferAttribute","u","sampleBilinear","tmpV1","tmpV2","tmpBox","displaceBox","displacementRange","displacementDir","tmpNormalMin","tmpNormalMax","translate","union","DisplacedBufferGeometry","originalGeometry","displacedPositions","m_originalBoundingBox","m_displacedPositions","resetAttributes","displacementRangeChanged","resetBoundingVolumes","computeBoundingBox","origBBox","boundingSphere","getBoundingSphere","equals","needsBoundingBoxUpdate","computeBoundingSphere","drawRange","AlphaFormat","RGBFormat","RGBAFormat","LuminanceAlphaFormat","RGBEFormat","DepthFormat","DepthStencilFormat","RedFormat","dataType","ClampToEdgeWrapping","RepeatWrapping","MirroredRepeatWrapping","NearestFilter","NearestMipMapNearestFilter","NearestMipMapLinearFilter","LinearFilter","LinearMipMapNearestFilter","LinearMipMapLinearFilter","AmbientLight","intensity","DirectionalLight","bias","mapSize","DEPTH_PRE_PASS_STENCIL_MASK","createDepthPrePassMaterial","baseMaterial","depthFunc","EqualDepth","colorWrite","enforceBlending","depthPassMaterial","LessDepth","evaluateBaseColorProperty","depthPassGeometry","extrusionAxisAttribute","materialIndex","depthMesh","colorMesh","depthMaterial","stencilWrite","stencilFail","KeepStencilOp","stencilZFail","stencilZPass","ReplaceStencilOp","stencilFunc","AlwaysStencilFunc","stencilRef","stencilFuncMask","colorMaterial","ZeroStencilOp","EqualStencilFunc","overlayObject","hasDisplacementFeature","overlayPosition","worldCoords","geoCoords","contains","sampleHeight","overlayPath","firstObject","Terrain","tmpPosition","tmpCameraDir","refPosition","viewDistance0","viewDistance1","anchorPlacementsCentered","Center","Below","Right","anchorPlacementsCornered","tmpPlacementPosition","tmpPlacementBounds","viewCamera","updatePoiFromPoiTable","projectionType","getWorldPosition","checkViewDistance","TooFar","NotReady","tmpBoxes","tmpMeasurementParams","tmpCollisionBoxes","tmpCollisionBox","CollisionBox","tmpScreenPosition","tmpTextOffset","tmp2DBox","Box","pointLabelMargin","placePointLabelAtAnchor","placement","screenCollisions","isRejected","forceInvalidation","outScreenPosition","measureText","applyTextPlacement","outputCharacterBounds","textOffset","poiIsRenderable","computedWidth","computedHeight","hAlign","vAlign","hAlignDiff","vAlignDiff","relOffsetX","relOffsetY","computePointTextOffset","expandByVector","persistent","isAllocated","textReservesSpace","allocate","textPlacement","PoiRenderer","computeIconScreenBox","multiAnchor","newLabel","lastPlacement","placePointLabelAtCurrentAnchor","placements","placementsNum","matchIdx","allInvisible","anchorPlacement","isLastPlacement","placementResult","placePointLabelChoosingAnchor","candidateBoxes","checkGlyphCollision","search","checkGlyphVisible","isFullyVisible","glyphBox","collisionBox","intersectsDetails","DetailedCollisionBox","screenProjector","outScreenPoints","anyPointVisible","projectOnScreen","minScreenSpace","lengthSq","tempPos","PoiRenderBufferBatch","imageItem","getColor","boxBuffer","setup","init","updateBufferGeometry","updateMemoryUsage","imageData","UVMapping","trilinear","mipMaps","mipmaps","premultiplyAlpha","m_material","IconMaterial","BoxBuffer","PoiRenderBuffer","batches","m_batchMap","imageTextureName","batchKey","mappedIndex","bufferBatch","batchSet","screenBox","batchIndex","registerPoi","uvBox","addBox","batch","pickBoxes","m_tempScreenBox","m_renderBuffer","centerX","centerY","preparePoi","allocateScreenSpace","addPoi","poiTableName","getImageTexture","m_missingTextureName","imageDefinition","imageCache","findImageByName","loaded","loadingPromise","imageUrl","loadImage","loadedImageItem","setupPoiInfo","imageWidth","imageHeight","paddedSize","MipMapGenerator","getPaddedSize","trilinearFiltering","paddedImageWidth","paddedImageHeight","iconWidth","iconHeight","minS","maxS","minT","maxT","iconScaleH","iconScaleV","s0","t0","s1","t1","m_paddingCanvas","document","createElement","m_paddingContext","getContext","m_resizeCanvas","m_resizeContext","ceilPowerOfTwo","paddedWidth","paddedHeight","copyImageWithPadding","getImageData","previousImage","resizeImage","clearRect","ImageBitmap","drawImage","putImageData","paddedImage","RBush","detailBoxes","isLineWithBound","screenBounds","rtree","bbox","insert","containsBox","testBox","detailBox","boundedLine","intersectsLine","lineXDiffTransformed","signBL","signBR","signTL","signTR","lineYDiffTransformed","normalX","normalY","debugCanvas","m_renderContext","m_renderingEnabled","m_numAllocations","m_numSuccessfulTests","m_numFailedTests","m_numSuccessfulVisibilityTests","m_numFailedVisibilityTests","strokeStyle","strokeRect","boundsArray","collisionFound","padding","f","_maxEntries","_minEntries","leaf","_all","toBBox","collides","_build","_splitRoot","_insert","_condense","compareMinX","compareMinY","toJSON","apply","_chooseSubtree","_split","_adjustParentBBoxes","_chooseSplitAxis","_chooseSplitIndex","M","_allDistMargin","defaultTextRenderStyle","defaultTextLayoutStyle","m_textStyles","m_defaultStyle","themedDefaultStyle","createTextElementStyle","textRenderers","styledTextRenderer","styleId","defaultRenderParams","defaultOpacity","hexColor","defaultBackgroundSize","hasBackgroundDefined","defaultBackgroundOpacity","hexBgColor","themeRenderParams","floorZoomLevel","defaultLayoutParams","wrapping","themeLayoutParams","styleName","fontCatalogName","m_geometries","disposeGeometries","m_throttlingTimeout","m_movementStartedFunc","m_movementFinishedFunc","m_lastCameraPos","m_newCameraPos","m_throttlingTimerId","m_movementDetectorDeadline","onDeadlineTimer","startMovementFinishedTimer","newAttitude","newCameraPos","m_lastAttitude","cameraMoved","m_cameraMovedLastFrame","NaN","removeMovementFinishedTimer","remainingTime","MSAARenderPass","MSAASampling","samplingLevel","Level_1","m_renderTarget","m_localCamera","m_quadScene","m_quadUniforms","m_quadMaterial","MSAAMaterial","m_quad","WebGLRenderTarget","offsets","OffsetVectors","oldClearColor","oldView","oldRenderTarget","getRenderTarget","setViewOffset","uniformCenteredDistribution","sampleWeight","isLoggingMessage","DEFAULT_WORKER_INITIALIZATION_TIMEOUT","m_workerChannelLogger","m_eventListeners","m_workers","m_availableWorkers","m_workerPromises","m_readyPromises","m_requests","m_workerRequestQueue","m_nextMessageId","m_stopped","m_referenceCount","onWorkerMessage","workerId","WorkerServiceProtocol","isResponseMessage","messageId","worker","checkWorkerRequestQueue","errorMessage","errorStack","stack","resolver","isInitializedMessage","readyPromise","getReadyPromise","service","eventHandler","m_workerCount","hardwareConcurrency","timeout","workerConnectionTimeout","workerPromise","WorkerLoader","startWorker","evt","waitForAllResponses","terminateWorkers","serviceId","ensureStarted","promise","callback","request","requestController","reject","ServiceMessageName","Request","postRequestMessage","promises","buffers","signal","aborted","err","RequestController","unshift","workerEntry","terminate","newPromise","that","startWorkerImmediately","directlyFallbackToBlobBasedLoading","startWorkerBlob","pageUrl","href","fullScriptUrl","Worker","waitWorkerInitialized","fetchScriptSourceToBlobUrl","blobUrl","sourceLoaderCache","scriptSource","blob","firstMessageCallback","isWorkerBootstrapRequest","resolvedDependencies","dependency","resolved","dependencyUrlMapping","cleanup","errorCallback","filename","lineno","timerId","nextUniqueServiceId","m_serviceCreated","addReference","broadcastRequest","WORKER_SERVICE_MANAGER_SERVICE_ID","Requests","DestroyService","targetServiceId","removeReference","CreateService","targetServiceType","tileKeyCode","WorkerDecoderProtocol","DecodeTileRequest","getProjectionName","invokeRequest","TileInfoRequest","DecoderMessageName","Configuration","broadcastMessage","CalculationStatus","m_name2Url","m_url2Name","hasName","oldNames","ImageCache","findImage","registerImage","startLoading","mipMapGenerator","m_images","imageCacheItem","findImageCacheItem","mapViews","itemsToRemove","mapViewIndex","keyToDelete","imageLoader","ImageLoader","renderImage","generateTextureAtlasMipMap","ex","errorEvent","createImageBitmap","imageBitmap","m_enabled","Fog","m_fogIsDefined","m_cachedTheme","enableFog","startRatio","viewRange","horizontalDensity","verticalDensity","endRatio","density","smoothStep","lerp","setFogInRawShaderMaterials","Material","m_imageTextures","m_poiShieldGroups","m_missingPoiTableName","loadedOk","m_missingPoiName","assertExists","poiGeometry","addLineMarker","ok","statusText","jsonAtlas","imageTextureDef","reason","getPoiTable","notifyMissingPoiTable","poiTableEntry","getEntry","notifyMissingPoi","iconName","composeTechniqueTextureName","iconMinLevel","iconMaxLevel","textMinLevel","textMaxLevel","updateMinMaxZoomLevelsFromPoiInfo","groupKey","positionArray","checkCreateTextElement","techniqueTextureName","poiTechnique","PoiTableEntry","jsonEntry","isOK","altNames","Show","Hide","ShowParent","PoiTable","useAltNamesForKey","poiList","poiDict","m_isLoading","m_loadedOk","entryIdx","poiTableUrl","jsonPoiTable","tableEntry","verifyJSON","newPoiEntry","altName","m_poiTables","loadPromises","poiTableRef","addTable","finally","finishLoading","debugTiles","polarTilingScheme","m_maxLatitude","m_geometryLevelOffset","m_debugTiles","m_northPoleMaterial","m_southPoleMaterial","m_styleSetEvaluator","styleSetEvaluator","$geometryType","$layer","getMatchingTechniques","StyleSetEvaluator","setStyleSet","createTileGeometry","latA","latB","lonA","lonB","isNorthPole","srcProjection","dstProjection","maxLat","poleLat","pBL","pBR","pTR","pTL","needsGeometryCut","isLeftHalf","poleX","poleY","pPole","pXX","lats","lmax","lmin","nearest","inPointB","inPointD","cutStart","intersectEdge","cutEnd","cutIndexStart","cutIndexEnd","Face3","fromGeometry","SkyCubemapFaceId","SKY_CUBEMAP_FACE_COUNT","createCubemapFaceArray","m_skybox","CubeTextureLoader","CubeTexture","face","DEFAULT_MAX_THEME_INTHERITANCE_DEPTH","themeUrl","resolveReferenceUri","getAppBaseUrl","resolveUrls","checkTechniqueSupport","resolveDefinitions","resolveBaseThemes","contextLoader","ContextLogger","resolveThemeReferences","extends","childUrlResolver","composeUriResolvers","RelativeUriResolver","resolveIncludes","resolveIncludeUris","baseTheme","convertFlatTheme","resolveResourceUris","resolveResources","contextLogger","pushAttr","definitionName","isActualSelectorDefinition","resolvedDef","resolveStyle","resolveStyleSet","currentStyle","pushIndex","resolvedStyle","isJsonExprReference","cloneDeep","when","resolvedWhen","resolveExpressionReferences","resolvedValue","failed","resolveInternal","defName","maxInheritanceDepth","baseThemes","baseThemesMerged","actualBaseTheme","mergeThemes","currentStyleSets","incomingStyleSets","faceUrl","DataSourceCache","cacheSize","rct","m_disposedTiles","m_resourceComputationType","m_tileCache","LRUCache","evictionCallback","canEvict","getKey","setCapacityAndMeasure","getKeyForTile","deleteByKey","shrinkToCapacity","evictAll","selector","evictSelected","inDataSource","m_frustumIntersection","m_cameraOverride","m_viewRange","m_coveringMap","m_dataSourceCache","computationType","setCapacity","evaluateClipPlanes","visibleTileKeysResult","getVisibleTileKeysForDataSources","visibleTileKeys","distanceDiff","minDiff","actuallyVisibleTiles","allDataSourceTilesLoaded","dataZoomLevel","getDataZoomLevel","tileEntry","getTile","skipOverlappedTiles","visibleArea","updateTiles","allVisibleTileLoaded","allBoundingBoxesFinal","fillMissingTilesFromCache","disposeTile","oldViewRanges","newViewRanges","getTileImpl","dataSourceVisibleTileList","visibleLevel","visibleTileKey","getTileKey","searchLevelsUp","searchLevelsDown","getCacheSearchLevels","childLevel","markDataSourceTilesDirty","disposeTiles","listEntry","isFullyCovering","SearchDirection","defaultSearchDirection","NONE","BOTH","DOWN","UP","incompleteTiles","tileCode","checkedTiles","searchDirection","findUp","findDown","childTileCode","childTile","parentCode","exists","parentTile","foundUp","cacheOnly","updateTile","tileToUpdate","resultTile","tileCache","initTile","dataSourceCache","retainedTiles","markTileDirty","tileGeometryManager","dataSourceBuckets","bucket","updateFrustum","compute","calculationFinal","tileKeyEntry","tileKeyEntries","canGetTile","ConcurrentTilerFacade","tilerServiceType","WorkerBasedTiler","indexId","input","WorkerTilerProtocol","RegisterIndex","UpdateIndex","TileRequest","m_cachedTreePromise","getCopyrightCoverageData","coverageInfo","initRBush","matchingEntries","getTree","minLevel","maxLevel","item","tree","alt","arg","isLineAccessor","isObject3dAccessor","BufferedGeometryAccessorBase","startCapSize","endCapSize","constructor","rawShaderMaterial","diffuse","BufferedGeometryAccessor","checkSetUp","positionsArray","subarray","getVertices","IndexedBufferedGeometryAccessor","reconstructLineWidth","k","UNIT_Z","POINTS","BEVEL_POINTS","STEP","addCircle","lineAngle","SECTORS_IN_CIRCLE","angle","startWithCircle","endWithCircle","angleVec","prevBt","bt","averageBt","p2","p3","N","useBevel","inclineWidth","inBuffer","startOffset","outBuffer","i2","xd","yd","zd","_renderer","_scene","_geometry","_material","_group","force","doUpdateMatrixWorldInverse","matrixWorldNeedsUpdate","TileLoader","dataProvider","tileDecoder","loadAbortController","AbortController","Loading","Decoding","donePromise","abort","onDone","myLoadCancellationToken","payload","onLoaded","resolveDonePromise","rejectedDonePromise","byteLength","startDecodeTile","decodeTile","onDecoded","doneState","getTileInfo","APIFormat","AuthenticationMethod","AuthenticationTypeBearer","method","AuthorizationHeader","AuthenticationTypeTomTomV1","QueryString","AuthenticationTypeAccessToken","downloadManager","TransferManager","urlParams","abortSignal","tileUrl","dataUrl","authenticationCode","getActualAuthenticationCode","applyAuthCode","addQueryParams","apiFormat","XYZJson","downloadJson","downloadArrayBuffer","getBearerToken","HereV1","MapboxV4","XYZOMV","XYZMVT","XYZSpace","TomtomV1","authMethod","authenticationMethod","getDefaultAuthMethod","headers","Headers","authType","append","authParams","queryParams","queryString","concatinator","s3Base","querySelector","getElementById","innerText","getFullYear","releases","date","hash","version","dropdown","res","release","appendChild","onchange","selected","omvDataSource","OmvDataSource","apikey","innerWidth","beginAnimation","main","IdentityProjection","identityProjection","getLongitudeQuadrant","oneOverPI","quadrantIndex","lengthOfVector3","makeBox3","halfEquatorialRadius","minLongitude","maxLongitude","minLongitudeQuadrant","maxLongitudeQuadrant","xMin","xMax","yMin","yMax","cosMaxLongitude","sinMaxLongitude","xCenter","xExtent","yCenter","yExtent","minLatitude","maxLatutide","zMax","zMin","zCenter","zExtent","SphereProjection","_minElevation","worldpoint","cosLatitude","parallelRadiusSq","parallelRadius","midX","midY","cosSouth","sinSouth","cosWest","sinWest","cosNorth","sinNorth","cosEast","sinEast","cosMidX","sinMidX","cosMidY","sinMidY","rMax","rMin","_worldBox","mx","my","gx","gy","cosLongitude","sinLongitude","sinLatitude","visitTileKey","subTileKey","hereTilingScheme","TilingScheme","mercatorTilingScheme","intersectsSlab","rayDir","axis","finv","t2","tmpVec","tmpT","rotationMatrix","newBox","matrix","frustumOrPlanes","planes","plane","distanceToPoint","dz","distanceToPointSquared","subVectors","lengths","getComponent","dd","parameters","shaderParams","DEFAULT_CIRCLE_SIZE","m_color","m_opacity","PriorityListGroup","foundIndex","GroupedPriorityList","getGroup","findGroup","otherGroup","normalizedPriority","LoggerManagerImpl","m_loggers","channel","ConsoleChannel","WorkerChannel","loggerName","m_levelSetForAll","Logger","config","ax","ay","bx","by","xmax","ymax","computeSquaredLineLength","squaredLineLength","xDiff","yDiff","distToSegmentSquared","px","py","l0x","l0y","l1x","l1y","lineLengthSuared","edge0","edge1","smootherStep","inMin","inMax","outMin","outMax","lowerBound","upperBound","startValue","endValue","derivedCtor","baseCtors","baseCtor","getOwnPropertyDescriptor","m_logger","headerMessage","m_headerLogged","createLogMethod","severity","rest","nowFunc","getTime","getNowFunc","cloneInternal","src","cached","flags","candidate","optionValue","uri","resolvers","originalUrl","f1","f2","maxXIndex","maxYIndex","xIndex","xIndexFloor","yIndex","yIndexFloor","swIndex","seIndex","nwIndex","neIndex","swElevation","seElevation","nwElevation","neElevation","xFrac","isInteger","xFracInverse","yFrac","yFracInverse","hasDisplacementMap","hasExtrusion","edgeColor","edgeColorMix","MIN_BUILDING_HEIGHT_SQUARED","extrusion_vertex","extrusion_normal_fragment_begin","extrusion_pars_fragment","extrusion_fragment","fading_vertex","fading_pars_fragment","fading_fragment","GroundAtmosphereShader","u_eyePositionWorld","u_lightDirectionWorld","u_modelViewProjection","u_atmosphereEnv","u_hsvCorrection","topColor","bottomColor","fogColor","fogNear","fogFar","GroundAtmosphereMaterial","FrontSide","enableLighting","cameraInfo","getCameraInfo","modelViewProjection","eyeHeight","cameraInSpace","outerRadius","needsUpdate0","needsUpdate1","reverse","modelMatrix","identity","viewMatrix","transpose","mvpMatrix","objectPos","updateTransparencyFeature","points_frag","DEFAULT_SIZE","DEFAULT_SCALE","uvTransform","Matrix3","LuminosityHighPassShader","luminosityThreshold","smoothWidth","AdditiveBlending","SepiaShader","amount","SkyAtmosphereShader","SkyAtmosphereMaterial","BackSide","LineCapsDefinesMapping","Square","Round","TriangleIn","TriangleOut","DefinesLineCapsMapping","lineCapsName","defineKey","LineDashesModes","LineDashesDefinesMapping","DASHES_SQUARE","DASHES_ROUND","Diamond","DASHES_DIAMOND","DefinesLineDashesMapping","lineDashesName","CAPS_MODE","DASHES_MODE","fogParam","opacityParam","merge","dashColor","outlineColor","extrusionWidth","DEFAULT_WIDTH","DEFAULT_OUTLINE_WIDTH","DEFAULT_OFFSET","DEFAULT_DRAW_RANGE_START","DEFAULT_DRAW_RANGE_END","DEFAULT_DASH_SIZE","DEFAULT_GAP_SIZE","UniformsLib","drawRangeStart","drawRangeEnd","invalidateFog","invalidateOpacity","capsMode","dashesMode","useTileClip","VignetteShader","darkness","operatorDescriptors","evaluator","m_partialEvaluation","previousEvaluationMode","fromValue","builtin","builtins","defineOperator","defineOperators","CastOperators","ComparisonOperators","MathOperators","StringOperators","ColorOperators","TypeOperators","MiscOperators","FlowOperators","ArrayOperators","InterpolationOperators","ObjectOperators","FeatureOperators","MapOperators","VectorOperators","VALID_ELEMENT_TYPES","checkElementTypes","ty","checkArray","operators","checkArrayLength","at","rgba","rgbaToHex","rgb","rgbToHex","hsl","euclideanModulo","hslToHex","compare","strict","isEnv","conditionalCast","any","none","boolean","number","string","interpolate","_interpolatedProperty","_mode","interpolatorType","base","stops","isConstantInterpolation","fromDefinition","_exponent","_stops","prepareInterpolateCallExpr","interpolatedProperty","_inputIsZoom","classifyStepCallExpr","Condition","first","last","hasConstantValues","literal","prepareStepCallExpr","Interpolant","i1","sampleValues","valueSize","offset1","offset0","weight1","weight0","pixels","ppi","ln","ln2","log10","pi","coalesce","LookupMode","lookupMember","lookupMode","memberName","in","downcase","toLocaleLowerCase","upcase","toLocaleUpperCase","typeof","isVector","ctor","toVector","VectorCtor","components","_value","vector4","emptyEnv","_context","preserve","newBranch","newCondition","deps","instantiatedBranch","Character","Token","isSpace","codepoint","Tab","Lf","Cr","Space","isNumber","_0","_9","isLetter","A","Z","isIdentChar","isLetterOrNumber","Dollar","Dot","LBracket","RBracket","tokenSpell","token","Eof","Identifier","Comma","LParen","RParen","Exclaim","TildeEqual","CaretEqual","DollarEqual","EqualEqual","ExclaimEqual","Less","Greater","LessEqual","GreaterEqual","BarBar","AmpAmp","Lexer","m_token","m_char","m_text","yylex","codePointAt","yyinp","ch","SingleQuote","DoubleQuote","Equal","Caret","Tilde","Bar","Amp","getEqualityOp","getRelationalOp","lex","parseLogicalOr","yyexpect","hasAttribute","parseLiteral","parseUnary","parsePrimary","parseRelational","parseEquality","expressions","parseLogicalAnd","isUnknownServiceError","isRequestMessage","Response","isRegisterIndexRequest","isUpdateIndexRequest","isTileRequest","abortController","isConfigurationMessage","isDecodeTileRequest","isTileInfoRequest","attrValue","defaultValue","evaluated","cachedExprResults","visitFunc","visit","VERTEX_POSITION_CACHE","SubdivisionModifier","subdivisionMode","m_projectedBox","m_maxLengthX","m_maxLengthY","m_maxLength","shouldSplitAB","shouldSplitEdge","shouldSplitBC","shouldSplitCA","ab","bc","ca","maxDistance","NoDiagonals","aa","bb","cc","beta","gamma","FontCatalog","fonts","unicodeBlocks","maxCodePointCount","m_replacementGlyph","m_glyphTextureCache","GlyphTextureCache","m_loadingJson","m_loadingPages","m_loadingGlyphs","m_loadedJson","m_loadedPages","m_loadedGlyphs","loadJSON","replacementDirUrl","replacementJson","replacementTexture","loadTexture","replacementFont","replacementGlyph","chars","xadvance","xoffset","yoffset","supportedBlocks","rawJSON","loadPages","assetsPath","getAssetsPath","jsonPath","jsonPromise","pagePromises","page","pages","loadPage","pagePath","charset","AllCaps","toUpperCase","glyphPromises","char","getFont","fontHash","glyphHash","fontGlyphMap","glyphPromise","createReplacementGlyph","charUnicodeBlock","loadAssets","loadedGlyph","shouldTransform","transformedCharacter","getGlyph","selectedFontName","textureBytes","loadedPage","loadBlock","sourceGlyphData","texturePath","pagePromise","fontStylePath","Bold","bold","Italic","italic","BoldItalic","boldItalic","entryWidth","entryHeight","nRows","m_cacheHeight","m_cacheWidth","m_textureSize","m_entryCache","initCacheEntries","m_rt","depthBuffer","stencilBuffer","m_copyTextureSet","m_copyTransform","m_copyPositions","m_copyMaterial","m_copyVertexBuffer","m_copyPositionAttribute","m_copyUVAttribute","m_copyGeometry","copyIndexBuffer","m_copyMesh","m_copyGeometryDrawCount","m_clearMaterial","m_clearPositionAttribute","m_clearGeometry","clearIndexBuffer","m_clearMesh","m_clearGeometryDrawCount","oldestEntry","oldest","clearCacheEntry","copyGlyphToCache","willClearGeometry","willCopyGeometry","srcPages","nCopies","pageIndex","dummyFont","lineGap","dummyGlyphData","dummyEntry","cacheLocation","copyTextureIndex","applyMatrix3","setXYZ","setXY","Entry","newer","older","cacheCapacity","sizeFunction","m_size","m_newest","m_oldest","m_capacity","m_sizeFunction","callbackfn","thisArg","newCapacity","evict","sizeMeasure","entrySize","promoteEntry","newest","cb","entryOlder","deleteEntry","evictOldest","itemToRemove","isOk","tempTextPosition","tempTextBounds","tempVertexBuffer","TextCanvas","m_fontCatalog","minGlyphCount","maxGlyphCount","m_ownsMaterial","createSdfTextMaterial","m_ownsBgMaterial","m_bgMaterial","m_defaultLayer","TextGeometry","m_layers","m_currentTextRenderStyle","m_currentTextLayoutStyle","m_lineTypesetter","LineTypesetter","m_pathTypesetter","PathTypesetter","bgMaterial","backgroundMesh","oldTarget","layerId","outputBounds","upperCaseArray","pathOrigin","textPathOverflow","targetLayer","tempLayer","addLayer","prevDrawCount","updatePosition","addPickingData","glyphArray","smallCapsEnabled","textBounds","storeStyles","computeTextBuffer","TextBufferObject","pick","glyphBounds","isPath","typesettingParams","smallCapsArray","vertexBuffer","arrangeGlyphs","m_tempTransform","m_tempCorners","m_tempLineDirection","m_tempRunDirection","m_tempPixelSize","m_tempPixelBgSize","m_tempScale","m_tempSmallCaps","m_currentParams","isOnlyMeasured","lineStartIdx","glyphWrapIdx","wordWrapIdx","lineStartX","lineCurrX","glyphWrapX","wordWrapX","lineCount","isBidirectionalLine","wrapPointIdx","wrapPointX","lineAlignment","placeLine","isBidirectional","placeRun","glyphDataArray","isRTL","runStart","neutralIdx","weakRunStart","weakGlyph","glyphFont","glyphFontMetrics","isBoldEmulated","isItalicEmulated","isSmallCaps","smallCapsScale","glyphScale","emulationWeight","isMirrored","verticalOffset","glyphVertexPosition","horizontalOffset","addToBuffer","m_tempPathPosition","m_tempPathLength","m_tempPathOffset","getLength","pathWidth","defaultGlyphRotation","normalDisplacement","textPoint","tangent","getTangent","ContextualForm","CombinedForm","m_singleCharactersMap","m_combinedCharactersMap","m_neutralCharacters","output","currentCodePoint","charCodeAt","isArabicCharacter","prevIndex","isNeutral","prevCodePoint","prevMap","getCharacterMap","Initial","Medial","nextIndex","nextCodePoint","nextMap","Final","combinedMap","getCombinedCharacterMap","fromCharCode","Connected","Isolated","m_getDisplacementRange","m_raycastStrategy","firstMaterial","isDisplacementFeature","isDisplacementMaterial","isDataTexture","isDataTextureMap","displacedGeometry","getDisplacedPositionAttribute","Field","maxVertexCount","m_vertexCount","m_oldestIdx","m_newestIdx","Count","vertexId","vertex","vertexIdx","getVertex","setVertex","newerIdx","getNewerIdx","olderIdx","getOlderIdx","setOlderIdx","setNewerIdx","OlderIdx","NewerIdx","X","Y","tmpSphere","tmpInverseMatrix","tmpRay","Ray","tmpLine1","Line3","tmpPlane","tmpV3","tmpV4","computeFeatureBoundingSphere","featureBeginIndex","featureEndIndex","pos","sphere","makeEmpty","intersectLine","vExtrusion","hWidth","hWidthSq","interPlane","outInterLine","extrLineT","intersectExtrudedLine","endCapT","startCapT","containsPoint","intersectClosestEndCap","distanceToSquared","closestPointToPoint","intersectFeature","localRay","halfWidth","lHalfWidth","lHalfWidthSq","beginIdx","bSphere","intersections","vExt","bitangent","intersectsSphere","manhattanLength","interLine","interLineWorld","singleFeatureStart","intersectGroup","firstFeatureIdx","groupEndIdx","bVolumes","boundingVolumes","isSolidLineMaterial","solidLineMaterial","localHalfWidth","localHalfWidthSq","featureIdx","lastFeatureIdx","bVolumeIdx","nextFeatureIdx","BoxBufferMesh","startElementCount","maxElementCount","resizeBuffer","pickInfos","internalMesh","indexAttribute","glyphCount","positionAttributeCount","colorAttributeCount","uvAttributeCount","indexAttributeCount","pickInfoCount","pickInfo","canAddElements","clearAttributes","isEmpty","pickInfoIndex","isPixelTransparent","forceResize","xScreenPos","yScreenPos","pixelIsTransparent","screenToUvCoordinates","pixel","getPixelFromImage","newPositionArray","newColorArray","newUvArray","numIndexValues","newIndexArray","getPixelFromImageBitmap","xPos","yPos","pixelData","getPixelFromImageData","imgData","strd","Uint8ClampedArray","getPixel","pickedColor","close","pixelsData","resortedGroups","numNotRendered","m_lengths","PathParam","curves","m_point","curve","lineCurve","curveLengths","getCurveLengths","diff","segmentLength","numSecondChanceLabels","tmpCachedDuplicate","getCacheKey","hasFeatureId","isBetterPathDuplicate","newCandidate","_newDistance","oldCandidate","_oldDistance","isBetterPointDuplicate","_newCandidate","newDistance","_oldCandidate","oldDistance","findDuplicateByText","elementState","candidates","maxSqDistError","getDedupSqDistTolerance","entryCount","elementPosition","duplicate","dupIndex","dupDistSquared","isBetterDuplicate","candidateEntry","cachedElement","areDiffType","areBothVisible","m_referenceMap","m_textMap","textElementFilter","updateElements","TextElementGroupState","m_sortedGroupStates","replaceCallback","replaceElement","anyEviction","updateFading","traverseVisibleElements","cacheResult","findDuplicate","cachedDuplicate","replacement","cachedEntries","duplicateIndex","findDuplicateById","m_visited","m_textElementStates","TextElementState","visibleElementsCallback","m_textRenderState","m_iconRenderStates","themeLayout","stateLayout","m_textLayoutState","isBaseTextPlacement","LayoutState","renderState","m_viewDistance","predecessor","initializeRenderStates","RenderState","_point","m_hAlign","m_vAlign","FadingState","DEFAULT_FADE_TIME","fadeTime","m_state","Undefined","FadingIn","FadingOut","FadedIn","FadedOut","fadingTime","textRenderStyles","textLayoutStyles","_index","styleCache","createRenderStyle","createLayoutStyle","DEFAULT_DYNAMIC_MSAA_SAMPLING_LEVEL","DEFAULT_STATIC_MSAA_SAMPLING_LEVEL","Level_4","antialiasSettings","msaaEnabled","strength","threshold","thickness","ghostExtrudedPolygons","m_width","m_height","m_renderPass","RenderPass","m_target1","m_target2","m_sepiaPass","ShaderPass","m_vignettePass","m_readBuffer","m_msaaPass","m_dynamicMsaaSamplingLevel","dynamicMsaaSamplingLevel","m_staticMsaaSamplingLevel","staticMsaaSamplingLevel","m_lowResPass","LowResRenderPass","isStaticFrame","usePostEffects","activeTarget","clearDepth","m_outlineEffect","OutlineEffect","nextEffectEnabled","m_bloomPass","BloomPass","m_savedWidth","m_savedHeight","m_defaultThickness","m_defaultColor","m_defaultAlpha","m_defaultKeepAlive","m_ghostExtrudedPolygons","m_removeThresholdCount","m_originalMaterials","m_originalOnBeforeRenders","m_shaderIDs","MeshLambertMaterial","MeshPhongMaterial","MeshToonMaterial","MeshPhysicalMaterial","m_uniformsChunk","outlineThickness","outlineAlpha","domElement","ghost","depth","stencil","updateStyle","setViewport","setScissor","setScissorTest","renderTarget","currentAutoClear","renderOutline","currentSceneAutoUpdate","autoUpdate","currentSceneBackground","currentShadowMapEnabled","setOutlineMaterial","restoreOriginalMaterial","cleanupCache","originalMaterial","shaderID","originalUniforms","originalVertexShader","ShaderLib","isRawShaderMaterial","createInvisibleMaterial","isShaderMaterial","vertexShaderChunk","vertexShaderChunk2","DECLARE_TRANSFORMED","skinning","morphTargets","morphNormals","used","keepAlive","getOutlineMaterialFromCache","updateOutlineMaterial","getOutlineMaterial","outlineParameters","BlurDirectionX","BlurDirectionY","resolution","m_renderTargetsHorizontal","m_renderTargetsVertical","m_nMips","m_separableBlurMaterials","m_basic","m_bloomTintColors","pars","resx","resy","m_renderTargetBright","generateMipmaps","renderTargetHorizonal","renderTargetVertical","m_highPassUniforms","m_materialHighPassFilter","kernelSizeArray","getSeperableBlurMaterial","m_compositeMaterial","getCompositeMaterial","m_copyUniforms","m_materialCopy","rt","inputRenderTarget","kernelRadius","KERNEL_RADIUS","SIGMA","colorTexture","texSize","nMips","NUM_MIPS","blurTexture1","blurTexture2","blurTexture3","blurTexture4","blurTexture5","dirtTexture","bloomStrength","bloomFactors","bloomTintColors","bloomRadius","tmpVectors3","tmpVector4","TileKeyEntry","longitudeOffset","m_extendedFrustumCulling","m_frustum","Frustum","m_viewProjectionMatrix","m_rootTileKeys","m_tileKeyEntries","m_mapTileCuller","MapTileCuller","projectionMatrixOverride","setFromProjectionMatrix","computeRequiredInitialRootTileKeys","viewportHeight","targetTileArea","useElevationRangeSource","tileBounds","uniqueZoomLevels","workList","tileKeyAndOffset","getElevationRange","FinalPrecise","computeTileAreaAndDistance","subTileEntry","frustumIntersectsTileBox","intersectsBox","projectedPoint","rootTileKey","worldGeoPoint","totalAngleRad","worldLengthHorizontal","worldLeftPoint","worldLeftGeoPoint","offsetRange","SQRT2","m_globalFrustumMin","m_globalFrustumMax","m_frustumCorners","frustumCorners","getFrustumCorners","MAX_VALUE","frustumCorner","globalFrustumMin","globalFrustumMax","invProjMatrix","cornerIndex","addPoint","enableFilterByKind","m_visibilityCounter","kinds","incrementVisibilityCounter","TileGeometryLoader","geometryLoader","enabledGeometryKinds","disabledGeometryKinds","m_tileUpdateCallback","updateTileObjectVisibility","addOrRemoveToEnabledSet","enableDisableKinds","addOrRemoveToDisabledSet","addOrRemoveToHiddenSet","visibilityHasChanged","oneKind","visibilityChange","addRemove","visibleKinds","tileKinds","availableGeometryKinds","needUpdate","nowVisible","addToSet","kindSet","kindsSet","m_isFinished","foundSet","compileGeometryKind","Label","m_availableGeometryKinds","prepareAvailableGeometryKinds","discardNeedlessTile","geometryCreationPending","compareGeometryKinds","processTechniques","setGeometryKinds","setDecodedTile","prepareForRender","m_enabledKinds","m_disabledKinds","m_timeout","loadingFinished","geometryCreator","createAllGeometries","geometryCreationTime","addMessage","finish","disposed","enabledSame","disabledSame","enabledEmpty","disabledEmpty","emptyTechniqueDescriptor","StyleConditionClassifier","_whenExpr","savedStyle","switchStyle","_style","enclosingExpr","matchVarStringComparison","_geometryType","saved","OptimizedSubSetKey","keyUpdateNeeded","envLayer","envGeometryType","updateKey","cachedStyleSet","makeDecodedTechnique","isVector2","isVector3","isVector4","m_techniques","m_exprPool","ExprPool","m_cachedResults","m_styleConditionClassifier","m_subStyleSetCache","m_definitionExprCache","m_tmpOptimizedSubSetKey","m_emptyEnv","m_featureDependencies","m_definitions","resolveStyleReferences","resolveReferences","techniqueRenderOrder","styleSetIndex","_styleSetIndex","computeDefaultRenderOrder","compileStyleSet","m_previousResult","m_previousEnv","optimizedSubSetKey","m_layer","m_geometryType","searchedStyleSet","getOptimizedStyleSet","currStyle","processStyle","techinque","subSetKey","optimizedStyleSet","createPreFilteredStyleSet","compileStyle","checkStyleDynamicAttributes","classify","intern","_minZoomLevelExpr","_maxZoomLevelExpr","checkZoomLevel","getTechniqueForStyleMatch","final","_dynamicTechniques","dynamicAttributes","evaluateTechniqueProperties","getDynamicTechniqueKey","createTechnique","_staticTechnique","dynamicAttrKey","_attrName","_dynamicTechniqueAttributes","_dynamicFeatureAttributes","_dynamicForwardedAttributes","_staticAttributes","dynamicFeatureAttributes","dynamicTechniqueAttributes","dynamicForwardedAttributes","targetStaticAttributes","techniqueDescriptor","processAttribute","_usesFeatureState","attrScope","secondaryCategory","labelProperty","instantiationContext","attrExpr","instantiate","dynamicAttrs","m_booleanLiterals","m_numberLiterals","m_stringLiterals","m_objectLiterals","m_arrayLiterals","m_varExprs","m_hasAttributeExprs","m_matchExprs","m_caseExprs","m_callExprs","branchesMatching","indexBuffer","vertexStride","contour","contourEdges","nSegments","vFootprint0","vRoof0","vFootprint1","vRoof1","currEdgeStart","currEdgeGoal","prevEdgeStart","prevEdgeGoal","polygonContour","polygonContourEdges","isExtruded","addFootprintEdges","wallEdgeSlope","prevEdgeIdx","v0x","v0y","v1x","v1y","vFoot0","ThreeBufferUtils","getBufferElementType","fromThreeBufferAttribute","bufferAttribute","fromThreeInterleavedBufferAttribute","fromThreeBufferGeometry","attributeNames","isOnScreen","ndc","projectVector","tempV3","ndcToScreen","tempV2","m_sky","m_projectionType","m_skyTexture","SkyGradientTexture","SkyCubemapTexture","isSameSkyType","DEFAULT_TEXTURE_SIZE","DEFAULT_MONOMIAL_POWER","cameraRight","cameraUp","m_faceCount","m_faces","fillTextureData","monomialPower","unpackAlignment","m_farClipPlaneDividedVertically","m_groundPlane","m_bottomMidFarPoint","m_topMidFarPoint","m_horizonPosition","m_farClipPlaneCorners","setHorizonPosition","updateTexturePosition","faceIdx","upDir","unproject","skyRatio","DEFAULT_FONT_CATALOG_NAME","m_catalogsLoading","defaultFontCatalogUrl","catalogCallback","fontCatalogConfig","fontCatalogPromise","m_renderedTilesChangeCheck","m_minGlyphCount","m_maxGlyphCount","CopyrightElementHandler","m_defaults","m_mapViews","mergedCopyrightInfo","staticInfo","m_element","display","defaults","deduped","innerHTML","htmlElement","UrlCopyrightProvider","CopyrightCoverageProvider","m_fetchURL","m_baseScheme","m_requestHeaders","m_cachedCopyrightResponse","fetchFunction","maxRetries","activeDownloadCount","downloadQueue","activeDownloads","defaultInstance","retryCount","status","waitFor","retryTimeout","fetchRepeatedly","milliseconds","downloadAs","download","arrayBuffer","maxParallelDownloads","deferred","DeferredPromise","doDownload","onDownloadDone","execDeferredDownload","future","converter","cacheKey","pendingFetch","newFetch","executor","resolveFunc","rejectFunc","ImageItem","AtmosphereVariant","AtmosphereShadingVariant","AtmosphereLightMode","clipPlanes","MapViewAtmosphere","m_sceneRoot","m_sceneCamera","m_projection","m_updateCallback","m_atmosphereVariant","SkyAndGround","m_materialVariant","ScatteringShader","m_clipPlanesEvaluator","m_lightDirection","Sky","createSkyGeometry","Ground","createGroundGeometry","addToScene","where","root","getObjectByName","SkyAtmosphereUserName","GroundAtmosphereUserName","m_skyMesh","m_groundMesh","isAdded","isPresent","removeFromScene","lightMode","dynamicLight","LightDynamic","m_groundMaterial","setDynamicLighting","m_skyMaterial","m_skyGeometry","m_groundGeometry","sceneRoot","createWorldAnchor","skyGeometry","SphereGeometry","SimpleColor","normalScale","setupSkyForRendering","groundGeometry","setupGroundForRendering","onBeforeCallback","overrideClipPlanes","onAfterRender","revertClipPlanes","rteCamera","sceneCam","anchor","pickable","ImageOrigin","m_textureLoader","requestHeaders","crossOrigin","loadWithThreeLoader","isJPEG","setCrossOrigin","m_wantsPoints","m_wantsLines","m_wantsAreas","m_wantsObject3D","wantsAll","wantsPoints","wantsLines","wantsAreas","wantsObject3D","visitObject","wantsFeature","visitMesh","BufferedGeometryLineAccessor","BufferedGeometryObject3dAccessor","IndexedBufferedGeometryLineAccessor","meshObject","geometryAccessor","featureStart","featureEnd","getBufferGeometry","getIndexedGeometryAccessor","getGeometryAccessor","getCount","setRange","visitPoint","visitLine","visitArea","visitObject3D","tmpNormal","tmpTangent0","tmpTangent1","tmpBitangent","LINE_VERTEX_ATTRIBUTES","NORMAL_UV_VERTEX_ATTRIBUTES","LINE_VERTEX_ATTRIBUTES_NUV","HP_LINE_VERTEX_ATTRIBUTES","HP_LINE_VERTEX_ATTRIBUTES_NUV","LineGeometry","getVertexDescriptor","hasNormalsAndUvs","highPrecision","createLineGeometry","polyline","colors","pointCount","segments","tangents","hasSegmentOffsets","hasTexCoords","sqrLength","lineCoverage","lineLength","isClosed","tmpVertices","addVertexPair","T1","T2","segment","extrusionCoord","highComp","lowComp","setComponent","computeBitangent","createSimpleLineGeometry","LineGroup","isSimple","vertexDescriptor","descr","createGeometry","isHighPrecisionPointsMaterial","dimensionality","setDimensionality","m_processLayersDefault","m_processPointsDefault","m_processLinesDefault","m_processPolygonsDefault","m_layersToProcess","m_layersToIgnore","m_pointsToProcess","m_ignoredPoints","m_linesToProcess","m_linesToIgnore","m_polygonsToProcess","m_polygonsToIgnore","m_kindsToProcess","m_kindsToIgnore","processLayersDefault","processPointsDefault","processLinesDefault","processPolygonsDefault","addItem","addItems","layersToProcess","layersToIgnore","pointsToProcess","pointsToIgnore","linesToProcess","linesToIgnore","polygonsToProcess","polygonsToIgnore","kindsToProcess","kindsToIgnore","items","layerName","matchLayer","geometryTypes","geomType","classes","featureClass","matchClass","featureAttribute","geomTypes","featureClasses","OmvGenericFeatureFilter","layerItems","layerItem","itemsToProcess","itemsToIgnore","defaultResult","filters","hasKindFilter","wantsLayer","wantsPointFeature","wantsLineFeature","wantsPolygonFeature","wantsKind","OmvGenericFeatureModifier","doProcessFeature","featureClassThing","matchItems","matchAttribute","getDataProvider","OmvRestClient","missingOmvDecoderServiceInfoEmitted","TileDataSource","tileFactory","TileFactory","concurrentDecoderServiceName","concurrentDecoderScriptUrl","copyrightProvider","m_decoderOptions","showMissingTechniques","filterDescription","filterDescr","gatherFeatureAttributes","featureModifierId","skipShortLabels","enableElevationOverlay","configureDecoder","configure","m_modelConstructor","m_tileFactory","m_isReady","m_decoder","getTileDecoder","concurrentDecoderWorkerCount","getCopyrights","TileInfoLoader","loaderState","debugMaterial","linewidth","NeverDepth","debugCircleMaterial","debugBlackCircleMaterial","OmvDebugLabelsTile","addLabelDebugInfo","debugTextPaths","debugTextPathsFull","tileGeometryCreator","colorMap","indexFilter","lineGeometry","lineIndices","redPointGeometry","redPointIndices","redPointPositions","blackPointGeometry","blackPointIndices","blackPointPositions","pointScale","elementIndex","pathIndex","isRedPoint","pointSize","labelElement","lineMesh","redPointMesh","blackPointMesh","missingTilerServiceInfoEmitted","m_registered","m_tiler","tiler","getTiler","workerTilerUrl","registerIndex","updateIndex"],"mappings":"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","file":"index.bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 121);\n","module.exports = THREE;","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nexport * from \"./index-common\";\nexport * from \"./lib/UrlPlatformUtils.web\";\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nexport * from \"./lib/ColorUtils\";\nexport * from \"./lib/Expr\";\nexport * from \"./lib/Techniques\";\nexport * from \"./lib/TechniqueParams\";\nexport * from \"./lib/Theme\";\nexport * from \"./lib/PostEffects\";\nexport * from \"./lib/InterpolatedProperty\";\nexport * from \"./lib/InterpolatedPropertyDefs\";\nexport * from \"./lib/WorkerServiceProtocol\";\nexport * from \"./lib/WorkerTilerProtocol\";\nexport * from \"./lib/WorkerDecoderProtocol\";\nexport * from \"./lib/ITileDecoder\";\nexport * from \"./lib/ITiler\";\nexport * from \"./lib/DecodedTile\";\nexport * from \"./lib/TileInfo\";\nexport * from \"./lib/GeoJsonDataType\";\nexport * from \"./lib/ThemeVisitor\";\nexport * from \"./lib/StringEncodedNumeral\";\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nexport * from \"./lib/coordinates/GeoBox\";\nexport * from \"./lib/coordinates/GeoBoxExtentLike\";\nexport * from \"./lib/coordinates/GeoCoordinatesLike\";\nexport * from \"./lib/coordinates/GeoCoordinates\";\nexport * from \"./lib/coordinates/GeoPointLike\";\nexport * from \"./lib/coordinates/LatLngLike\";\nexport * from \"./lib/projection/EarthConstants\";\nexport * from \"./lib/projection/EquirectangularProjection\";\nexport * from \"./lib/projection/IdentityProjection\";\nexport * from \"./lib/projection/Projection\";\nexport * from \"./lib/projection/MercatorProjection\";\nexport * from \"./lib/projection/TransverseMercatorProjection\";\nexport * from \"./lib/projection/SphereProjection\";\nexport * from \"./lib/tiling/FlatTileBoundingBoxGenerator\";\nexport * from \"./lib/tiling/HalfQuadTreeSubdivisionScheme\";\nexport * from \"./lib/tiling/QuadTreeSubdivisionScheme\";\nexport * from \"./lib/tiling/QuadTree\";\nexport * from \"./lib/tiling/SubTiles\";\nexport * from \"./lib/tiling/SubdivisionScheme\";\nexport * from \"./lib/tiling/TileKey\";\nexport * from \"./lib/tiling/TileKeyUtils\";\nexport * from \"./lib/tiling/TileTreeTraverse\";\nexport * from \"./lib/tiling/TilingScheme\";\nexport * from \"./lib/tiling/HereTilingScheme\";\nexport * from \"./lib/tiling/WebMercatorTilingScheme\";\nexport * from \"./lib/tiling/MercatorTilingScheme\";\nexport * from \"./lib/tiling/PolarTilingScheme\";\nexport * from \"./lib/math/Vector3Like\";\nexport * from \"./lib/math/Box3Like\";\nexport * from \"./lib/math/OrientedBox3Like\";\nexport * from \"./lib/math/MathUtils\";\nexport * from \"./lib/math/TransformLike\";\nexport * from \"./lib/math/OrientedBox3\";\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nexport * from \"./lib/CirclePointsMaterial\";\nexport * from \"./lib/CopyMaterial\";\nexport * from \"./lib/DisplacementFeature\";\nexport * from \"./lib/EdgeMaterial\";\nexport * from \"./lib/GroundAtmosphereMaterial\";\nexport * from \"./lib/HighPrecisionLineMaterial\";\nexport * from \"./lib/HighPrecisionPointMaterial\";\nexport * from \"./lib/IconMaterial\";\nexport * from \"./lib/LuminosityHighPassShader\";\nexport * from \"./lib/MapMeshMaterialsDefs\";\nexport * from \"./lib/MapMeshMaterials\";\nexport * from \"./lib/MSAAMaterial\";\nexport * from \"./lib/SepiaShader\";\nexport * from \"./lib/SkyAtmosphereMaterial\";\nexport * from \"./lib/SolidLineMaterial\";\nexport * from \"./lib/Utils\";\nexport * from \"./lib/VignetteShader\";\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { Env, Value } from \"./Env\";\nimport { ExprEvaluator, ExprEvaluatorContext, OperatorDescriptor } from \"./ExprEvaluator\";\nimport { ExprInstantiator, InstantiationContext } from \"./ExprInstantiator\";\nimport { ExprParser } from \"./ExprParser\";\nimport { ExprPool } from \"./ExprPool\";\nimport {\n    interpolatedPropertyDefinitionToJsonExpr,\n    isInterpolatedPropertyDefinition\n} from \"./InterpolatedPropertyDefs\";\nimport { Definitions, isBoxedDefinition, isLiteralDefinition } from \"./Theme\";\n\nimport * as THREE from \"three\";\n\nexport * from \"./Env\";\n\nconst exprEvaluator = new ExprEvaluator();\n\nconst exprInstantiator = new ExprInstantiator();\n\nexport interface ExprVisitor<Result, Context> {\n    visitNullLiteralExpr(expr: NullLiteralExpr, context: Context): Result;\n    visitBooleanLiteralExpr(expr: BooleanLiteralExpr, context: Context): Result;\n    visitNumberLiteralExpr(expr: NumberLiteralExpr, context: Context): Result;\n    visitStringLiteralExpr(expr: StringLiteralExpr, context: Context): Result;\n    visitObjectLiteralExpr(expr: ObjectLiteralExpr, context: Context): Result;\n    visitVarExpr(expr: VarExpr, context: Context): Result;\n    visitHasAttributeExpr(expr: HasAttributeExpr, context: Context): Result;\n    visitCallExpr(expr: CallExpr, context: Context): Result;\n    visitMatchExpr(expr: MatchExpr, context: Context): Result;\n    visitCaseExpr(expr: CaseExpr, context: Context): Result;\n}\n\n/**\n * The dependencies of an [[Expr]].\n */\nexport class ExprDependencies {\n    /**\n     * The properties needed to evaluate the [[Expr]].\n     */\n    readonly properties = new Set<string>();\n\n    /**\n     * `true` if the expression depends on the feature state.\n     */\n    featureState?: boolean;\n}\n\nclass ComputeExprDependencies implements ExprVisitor<void, ExprDependencies> {\n    static instance = new ComputeExprDependencies();\n\n    /**\n     * Gets the dependencies of an [[Expr]].\n     *\n     * @param expr The [[Expr]] to process.\n     * @param scope The evaluation scope. Defaults to [[ExprScope.Value]].\n     * @param dependencies The output [[Set]] of dependency names.\n     */\n    static of(expr: Expr) {\n        const dependencies = new ExprDependencies();\n        expr.accept(this.instance, dependencies);\n        return dependencies;\n    }\n\n    visitNullLiteralExpr(expr: NullLiteralExpr, context: ExprDependencies): void {\n        // nothing to do\n    }\n\n    visitBooleanLiteralExpr(expr: BooleanLiteralExpr, context: ExprDependencies): void {\n        // nothing to do\n    }\n\n    visitNumberLiteralExpr(expr: NumberLiteralExpr, context: ExprDependencies): void {\n        // nothing to do\n    }\n\n    visitStringLiteralExpr(expr: StringLiteralExpr, context: ExprDependencies): void {\n        // nothing to do\n    }\n\n    visitObjectLiteralExpr(expr: ObjectLiteralExpr, context: ExprDependencies): void {\n        // nothing to do\n    }\n\n    visitVarExpr(expr: VarExpr, context: ExprDependencies): void {\n        context.properties.add(expr.name);\n    }\n\n    visitHasAttributeExpr(expr: HasAttributeExpr, context: ExprDependencies): void {\n        context.properties.add(expr.name);\n    }\n\n    visitCallExpr(expr: CallExpr, context: ExprDependencies): void {\n        expr.args.forEach(childExpr => childExpr.accept(this, context));\n\n        switch (expr.op) {\n            case \"feature-state\":\n                context.featureState = true;\n                context.properties.add(\"$state\");\n                break;\n            case \"id\":\n                context.properties.add(\"$id\");\n                break;\n            case \"geometry-type\":\n                context.properties.add(\"$geometryType\");\n                break;\n            default:\n                break;\n        }\n    }\n\n    visitMatchExpr(expr: MatchExpr, context: ExprDependencies): void {\n        expr.value.accept(this, context);\n        expr.branches.forEach(([_, branch]) => branch.accept(this, context));\n        expr.fallback.accept(this, context);\n    }\n\n    visitCaseExpr(expr: CaseExpr, context: ExprDependencies): void {\n        expr.branches.forEach(([condition, branch]) => {\n            condition.accept(this, context);\n            branch.accept(this, context);\n        });\n        expr.fallback.accept(this, context);\n    }\n}\n\n/**\n * A type represeting JSON values.\n */\nexport type JsonValue = null | boolean | number | string | JsonObject | JsonArray;\n\n/**\n * A type representing JSON arrays.\n */\nexport interface JsonArray extends Array<JsonValue> {}\n\n/**\n * A type representing JSON objects.\n */\nexport interface JsonObject {\n    [name: string]: JsonValue;\n}\n\n/**\n * The JSON representation of an [[Expr]] object.\n */\nexport type JsonExpr = JsonArray;\n\nexport function isJsonExpr(v: any): v is JsonExpr {\n    return Array.isArray(v) && v.length > 0 && typeof v[0] === \"string\";\n}\n\n/**\n * Internal state needed by [[Expr.fromJSON]] to resolve `\"ref\"` expressions.\n * @hidden\n */\ninterface ReferenceResolverState {\n    definitions: Definitions;\n    lockedNames: Set<string>;\n    cache: Map<string, Expr>;\n}\n\n/**\n * The evaluation scope of an [[Expr]].\n */\nexport enum ExprScope {\n    /**\n     * The scope of an [[Expr]] used as value of an attribute.\n     */\n    Value,\n\n    /**\n     * The scope of an [[Expr]] used in a [[Technique]] `when` condition.\n     */\n    Condition,\n\n    /**\n     * The scope of an [[Expr]] used as dynamic property attribute value.\n     */\n    Dynamic\n}\n\n/**\n * Abstract class defining a shape of a [[Theme]]'s expression\n */\nexport abstract class Expr {\n    /**\n     * Tests of given value is an [[Expr]].\n     *\n     * @param value The object to test.\n     */\n    static isExpr(value: any): value is Expr {\n        return value instanceof Expr;\n    }\n\n    /**\n     * Creates an expression from the given `code`.\n     *\n     * @param code The code to parse.\n     * @returns The parsed [[Expr]].\n     * @deprecated\n     */\n    static parse(code: string): Expr | never {\n        const parser = new ExprParser(code);\n        const expr = parser.parse();\n        return expr;\n    }\n\n    /**\n     * Parse expression in JSON form.\n     *\n     * If `definitions` are defined, then references (`['ref', name]`) are resolved.\n     *\n     * Pass `definitionExprCache` to reuse `Expr` instances created from definitions across\n     * many `fromJSON` calls.\n     *\n     * @param node expression in JSON format to parse\n     * @param definitions optional set of definitions needed definition resolved by `ref` operator\n     * @param definitionExprCache optional cache of `Expr` instances derived from `definitions`\n     */\n    static fromJSON(\n        node: JsonValue,\n        definitions?: Definitions,\n        definitionExprCache?: Map<string, Expr>\n    ) {\n        const referenceResolverState: ReferenceResolverState | undefined =\n            definitions !== undefined\n                ? {\n                      definitions,\n                      lockedNames: new Set(),\n                      cache: definitionExprCache || new Map<string, Expr>()\n                  }\n                : undefined;\n\n        return parseNode(node, referenceResolverState);\n    }\n\n    private m_dependencies?: ExprDependencies;\n    private m_isDynamic?: boolean;\n\n    /**\n     * Evaluate an expression returning a [[Value]] object.\n     *\n     * @param env The [[Env]] used to lookup symbols.\n     * @param scope The evaluation scope. Defaults to [[ExprScope.Value]].\n     * @param cache A cache of previously computed results.\n     */\n    evaluate(\n        env: Env,\n        scope: ExprScope = ExprScope.Value,\n        cache?: Map<Expr, Value>\n    ): Value | never {\n        return this.accept(\n            exprEvaluator,\n            new ExprEvaluatorContext(exprEvaluator, env, scope, cache)\n        );\n    }\n\n    /**\n     * Instantiates this [[Expr]] by resolving references to the `get` and\n     * `has` operator using the given instantiation context.\n     *\n     * @param context The [[InstantationContext]] used to resolve names.\n     */\n    instantiate(context: InstantiationContext): Expr {\n        return this.accept(exprInstantiator, context);\n    }\n\n    /**\n     * Gets the dependencies of this [[Expr]].\n     */\n    dependencies(): ExprDependencies {\n        if (!this.m_dependencies) {\n            this.m_dependencies = ComputeExprDependencies.of(this);\n        }\n        return this.m_dependencies;\n    }\n\n    /**\n     * Create a unique object that is structurally equivalent to this [[Expr]].\n     *\n     * @param pool The [[ExprPool]] used to create a unique\n     * equivalent object of this [[Expr]].\n     */\n    intern(pool: ExprPool): Expr {\n        return pool.add(this);\n    }\n\n    toJSON(): JsonValue {\n        return new ExprSerializer().serialize(this);\n    }\n\n    /**\n     * Returns `true` if a dynamic execution context is required to evaluate this [[Expr]].\n     */\n    isDynamic(): boolean {\n        if (this.m_isDynamic === undefined) {\n            this.m_isDynamic = this.exprIsDynamic();\n        }\n        return this.m_isDynamic;\n    }\n\n    abstract accept<Result, Context>(\n        visitor: ExprVisitor<Result, Context>,\n        context: Context\n    ): Result;\n\n    /**\n     * Update the dynamic state of this [[Expr]].\n     *\n     * [[exprIsDynamic]] must never be called directly.\n     *\n     * @hidden\n     */\n    protected abstract exprIsDynamic(): boolean;\n}\n\n/**\n * @hidden\n */\nexport type RelationalOp = \"<\" | \">\" | \"<=\" | \">=\";\n\n/**\n * @hidden\n */\nexport type EqualityOp = \"~=\" | \"^=\" | \"$=\" | \"==\" | \"!=\";\n\n/**\n * @hidden\n */\nexport type BinaryOp = RelationalOp | EqualityOp;\n\n/**\n * Var expression.\n * @hidden\n */\nexport class VarExpr extends Expr {\n    constructor(readonly name: string) {\n        super();\n    }\n\n    /** @override */\n    accept<Result, Context>(visitor: ExprVisitor<Result, Context>, context: Context): Result {\n        return visitor.visitVarExpr(this, context);\n    }\n\n    /** @override */\n    protected exprIsDynamic() {\n        return false;\n    }\n}\n\nexport abstract class LiteralExpr extends Expr {\n    /**\n     * Create a [[LiteralExpr]] from the given value.\n     *\n     * @param value A constant value.\n     */\n    static fromValue(value: Value): Expr {\n        switch (typeof value) {\n            case \"boolean\":\n                return new BooleanLiteralExpr(value);\n            case \"number\":\n                return new NumberLiteralExpr(value);\n            case \"string\":\n                return new StringLiteralExpr(value);\n            case \"object\":\n                return value === null ? NullLiteralExpr.instance : new ObjectLiteralExpr(value);\n            default:\n                throw new Error(`failed to create a literal from '${value}'`);\n        } // switch\n    }\n\n    abstract get value(): Value;\n\n    /** @override */\n    protected exprIsDynamic() {\n        return false;\n    }\n}\n\n/**\n * Null literal expression.\n * @hidden\n */\nexport class NullLiteralExpr extends LiteralExpr {\n    static instance = new NullLiteralExpr();\n    /** @override */\n    readonly value: Value = null;\n\n    protected constructor() {\n        super();\n    }\n\n    /** @override */\n    accept<Result, Context>(visitor: ExprVisitor<Result, Context>, context: Context): Result {\n        return visitor.visitNullLiteralExpr(this, context);\n    }\n\n    /** @override */\n    protected exprIsDynamic() {\n        return false;\n    }\n}\n\n/**\n * Boolean literal expression.\n * @hidden\n */\nexport class BooleanLiteralExpr extends LiteralExpr {\n    constructor(readonly value: boolean) {\n        super();\n    }\n\n    /** @override */\n    accept<Result, Context>(visitor: ExprVisitor<Result, Context>, context: Context): Result {\n        return visitor.visitBooleanLiteralExpr(this, context);\n    }\n}\n\n/**\n * Number literal expression.\n * @hidden\n */\nexport class NumberLiteralExpr extends LiteralExpr {\n    constructor(readonly value: number) {\n        super();\n    }\n\n    /** @override */\n    accept<Result, Context>(visitor: ExprVisitor<Result, Context>, context: Context): Result {\n        return visitor.visitNumberLiteralExpr(this, context);\n    }\n}\n\n/**\n * String literal expression.\n * @hidden\n */\nexport class StringLiteralExpr extends LiteralExpr {\n    constructor(readonly value: string) {\n        super();\n    }\n\n    /** @override */\n    accept<Result, Context>(visitor: ExprVisitor<Result, Context>, context: Context): Result {\n        return visitor.visitStringLiteralExpr(this, context);\n    }\n}\n\n/**\n * Object literal expression.\n * @hidden\n */\nexport class ObjectLiteralExpr extends LiteralExpr {\n    constructor(readonly value: object) {\n        super();\n    }\n\n    get isArrayLiteral() {\n        return Array.isArray(this.value);\n    }\n\n    /** @override */\n    accept<Result, Context>(visitor: ExprVisitor<Result, Context>, context: Context): Result {\n        return visitor.visitObjectLiteralExpr(this, context);\n    }\n}\n\n/**\n * A has expression with an attribute, for example `has(ref)`.\n * @hidden\n */\nexport class HasAttributeExpr extends Expr {\n    constructor(readonly name: string) {\n        super();\n    }\n\n    /** @override */\n    accept<Result, Context>(visitor: ExprVisitor<Result, Context>, context: Context): Result {\n        return visitor.visitHasAttributeExpr(this, context);\n    }\n\n    /** @override */\n    protected exprIsDynamic() {\n        return false;\n    }\n}\n\n/**\n * @hidden\n */\nexport class CallExpr extends Expr {\n    descriptor?: OperatorDescriptor;\n\n    constructor(readonly op: string, readonly args: Expr[]) {\n        super();\n    }\n\n    /**\n     * Returns the child nodes of this [[Expr]].\n     * @deprecated\n     */\n    get children() {\n        return this.args;\n    }\n\n    /** @override */\n    accept<Result, Context>(visitor: ExprVisitor<Result, Context>, context: Context): Result {\n        return visitor.visitCallExpr(this, context);\n    }\n\n    /** @override */\n    protected exprIsDynamic() {\n        const descriptor = this.descriptor || ExprEvaluator.getOperator(this.op);\n\n        if (descriptor && descriptor.isDynamicOperator && descriptor.isDynamicOperator(this)) {\n            return true;\n        }\n\n        return this.args.some(e => e.isDynamic());\n    }\n}\n\n/**\n * @hidden\n */\nexport type MatchLabel = number | string | number[] | string[];\n\n/**\n * @hidden\n */\nexport class MatchExpr extends Expr {\n    /**\n     * Tests if the given JSON node is a valid label for the `\"match\"` operator.\n     *\n     * @param node A JSON value.\n     */\n    static isValidMatchLabel(node: JsonValue): node is MatchLabel {\n        switch (typeof node) {\n            case \"number\":\n            case \"string\":\n                return true;\n            case \"object\":\n                if (!Array.isArray(node) || node.length === 0) {\n                    return false;\n                }\n                const elementTy = typeof node[0];\n                if (elementTy === \"number\" || elementTy === \"string\") {\n                    return node.every(t => typeof t === elementTy);\n                }\n                return false;\n            default:\n                return false;\n        } // switch\n    }\n\n    constructor(\n        readonly value: Expr,\n        readonly branches: Array<[MatchLabel, Expr]>,\n        readonly fallback: Expr\n    ) {\n        super();\n    }\n\n    /** @override */\n    accept<Result, Context>(visitor: ExprVisitor<Result, Context>, context: Context): Result {\n        return visitor.visitMatchExpr(this, context);\n    }\n\n    /** @override */\n    protected exprIsDynamic() {\n        return (\n            this.value.isDynamic() ||\n            this.branches.some(([_, branch]) => branch.isDynamic()) ||\n            this.fallback.isDynamic()\n        );\n    }\n}\n\n/**\n * @hidden\n */\nexport class CaseExpr extends Expr {\n    constructor(readonly branches: Array<[Expr, Expr]>, readonly fallback: Expr) {\n        super();\n    }\n\n    /** @override */\n    accept<Result, Context>(visitor: ExprVisitor<Result, Context>, context: Context): Result {\n        return visitor.visitCaseExpr(this, context);\n    }\n\n    /** @override */\n    protected exprIsDynamic() {\n        return (\n            this.branches.some(([cond, branch]) => cond.isDynamic() || branch.isDynamic()) ||\n            this.fallback.isDynamic()\n        );\n    }\n}\n\n/**\n * @hidden\n */\nclass ExprSerializer implements ExprVisitor<JsonValue, void> {\n    serialize(expr: Expr): JsonValue {\n        return expr.accept(this, undefined);\n    }\n\n    visitNullLiteralExpr(expr: NullLiteralExpr, context: void): JsonValue {\n        return null;\n    }\n\n    visitBooleanLiteralExpr(expr: BooleanLiteralExpr, context: void): JsonValue {\n        return expr.value;\n    }\n\n    visitNumberLiteralExpr(expr: NumberLiteralExpr, context: void): JsonValue {\n        return expr.value;\n    }\n\n    visitStringLiteralExpr(expr: StringLiteralExpr, context: void): JsonValue {\n        return expr.value;\n    }\n\n    visitObjectLiteralExpr(expr: ObjectLiteralExpr, context: void): JsonValue {\n        if (expr.value instanceof THREE.Vector2) {\n            return [\"make-vector\", expr.value.x, expr.value.y];\n        } else if (expr.value instanceof THREE.Vector3) {\n            return [\"make-vector\", expr.value.x, expr.value.y, expr.value.z];\n        } else if (expr.value instanceof THREE.Vector4) {\n            return [\"make-vector\", expr.value.x, expr.value.y, expr.value.z, expr.value.w];\n        }\n        return [\"literal\", expr.value as JsonObject];\n    }\n\n    visitVarExpr(expr: VarExpr, context: void): JsonValue {\n        return [\"get\", expr.name];\n    }\n\n    visitHasAttributeExpr(expr: HasAttributeExpr, context: void): JsonValue {\n        return [\"has\", expr.name];\n    }\n\n    visitCallExpr(expr: CallExpr, context: void): JsonValue {\n        return [expr.op, ...expr.args.map(childExpr => this.serialize(childExpr))];\n    }\n\n    visitMatchExpr(expr: MatchExpr, context: void): JsonValue {\n        const branches: JsonValue[] = [];\n        for (const [label, body] of expr.branches) {\n            branches.push(label, this.serialize(body));\n        }\n        return [\"match\", this.serialize(expr.value), ...branches, this.serialize(expr.fallback)];\n    }\n\n    visitCaseExpr(expr: CaseExpr, context: void): JsonValue {\n        const branches: JsonValue[] = [];\n        for (const [condition, body] of expr.branches) {\n            branches.push(this.serialize(condition), this.serialize(body));\n        }\n        return [\"case\", ...branches, this.serialize(expr.fallback)];\n    }\n}\n\nfunction parseNode(\n    node: JsonValue,\n    referenceResolverState: ReferenceResolverState | undefined\n): Expr {\n    if (Array.isArray(node)) {\n        return parseCall(node, referenceResolverState);\n    } else if (node === null) {\n        return NullLiteralExpr.instance;\n    } else if (typeof node === \"boolean\") {\n        return new BooleanLiteralExpr(node);\n    } else if (typeof node === \"number\") {\n        return new NumberLiteralExpr(node);\n    } else if (typeof node === \"string\") {\n        return new StringLiteralExpr(node);\n    }\n    throw new Error(`failed to create expression from: ${JSON.stringify(node)}`);\n}\n\nfunction parseCall(node: JsonArray, referenceResolverState?: ReferenceResolverState): Expr {\n    const op = node[0];\n\n    if (typeof op !== \"string\") {\n        throw new Error(\"expected a builtin function name\");\n    }\n\n    switch (op) {\n        case \"!has\":\n        case \"!in\":\n            return new CallExpr(\"!\", [parseCall([op.slice(1), ...node.slice(1)])]);\n\n        case \"ref\":\n            return resolveReference(node, referenceResolverState);\n\n        case \"get\":\n            return parseGetExpr(node, referenceResolverState);\n\n        case \"has\":\n            return parseHasExpr(node, referenceResolverState);\n\n        case \"literal\":\n            return parseLiteralExpr(node);\n\n        case \"match\":\n            return parseMatchExpr(node, referenceResolverState);\n\n        case \"case\":\n            return parseCaseExpr(node, referenceResolverState);\n\n        default:\n            return makeCallExpr(op, node, referenceResolverState);\n    } // switch\n}\n\nfunction parseGetExpr(node: JsonArray, referenceResolverState: ReferenceResolverState | undefined) {\n    if (node[2] !== undefined) {\n        return makeCallExpr(\"get\", node, referenceResolverState);\n    }\n    const name = node[1];\n    if (typeof name !== \"string\") {\n        throw new Error(`expected the name of an attribute`);\n    }\n    return new VarExpr(name);\n}\n\nfunction parseHasExpr(node: JsonArray, referenceResolverState: ReferenceResolverState | undefined) {\n    if (node[2] !== undefined) {\n        return makeCallExpr(\"has\", node, referenceResolverState);\n    }\n    const name = node[1];\n    if (typeof name !== \"string\") {\n        throw new Error(`expected the name of an attribute`);\n    }\n    return new HasAttributeExpr(name);\n}\n\nfunction parseLiteralExpr(node: JsonArray) {\n    const obj = node[1];\n    if (obj === null || typeof obj !== \"object\") {\n        throw new Error(\"expected an object or array literal\");\n    }\n    return new ObjectLiteralExpr(obj);\n}\n\nfunction parseMatchExpr(\n    node: JsonArray,\n    referenceResolverState: ReferenceResolverState | undefined\n) {\n    if (node.length < 4) {\n        throw new Error(\"not enough arguments\");\n    }\n    if (!(node.length % 2)) {\n        throw new Error(\"fallback is missing in 'match' expression\");\n    }\n    const value = parseNode(node[1], referenceResolverState);\n    const conditions: Array<[MatchLabel, Expr]> = [];\n    for (let i = 2; i < node.length - 1; i += 2) {\n        const label = node[i];\n        if (!MatchExpr.isValidMatchLabel(label)) {\n            throw new Error(`'${JSON.stringify(label)}' is not a valid label for 'match'`);\n        }\n        const expr = parseNode(node[i + 1], referenceResolverState);\n        conditions.push([label, expr]);\n    }\n    const fallback = parseNode(node[node.length - 1], referenceResolverState);\n    return new MatchExpr(value, conditions, fallback);\n}\n\nfunction parseCaseExpr(\n    node: JsonArray,\n    referenceResolverState: ReferenceResolverState | undefined\n) {\n    if (node.length < 3) {\n        throw new Error(\"not enough arguments\");\n    }\n    if (node.length % 2) {\n        throw new Error(\"fallback is missing in 'case' expression\");\n    }\n    const branches: Array<[Expr, Expr]> = [];\n    for (let i = 1; i < node.length - 1; i += 2) {\n        const condition = parseNode(node[i], referenceResolverState);\n        const expr = parseNode(node[i + 1], referenceResolverState);\n        branches.push([condition, expr]);\n    }\n    const caseFallback = parseNode(node[node.length - 1], referenceResolverState);\n    return new CaseExpr(branches, caseFallback);\n}\n\nfunction makeCallExpr(\n    op: string,\n    node: any[],\n    referenceResolverState?: ReferenceResolverState\n): Expr {\n    return new CallExpr(\n        op,\n        node.slice(1).map(childExpr => parseNode(childExpr, referenceResolverState))\n    );\n}\n\nfunction resolveReference(node: JsonArray, referenceResolverState?: ReferenceResolverState) {\n    if (typeof node[1] !== \"string\") {\n        throw new Error(`expected the name of an attribute`);\n    }\n    if (referenceResolverState === undefined) {\n        throw new Error(`ref used with no definitions`);\n    }\n    const name = node[1] as string;\n\n    if (referenceResolverState.lockedNames.has(name)) {\n        throw new Error(`circular referene to '${name}'`);\n    }\n\n    if (!(name in referenceResolverState.definitions)) {\n        throw new Error(`definition '${name}' not found`);\n    }\n\n    const cachedEntry = referenceResolverState.cache.get(name);\n    if (cachedEntry !== undefined) {\n        return cachedEntry;\n    }\n    let definitionEntry = referenceResolverState.definitions[name] as any;\n    let result: Expr;\n    if (isLiteralDefinition(definitionEntry)) {\n        return Expr.fromJSON(definitionEntry);\n    } else if (isBoxedDefinition(definitionEntry)) {\n        if (isInterpolatedPropertyDefinition(definitionEntry.value)) {\n            // found a reference to an interpolation using\n            // the deprecated object-like syntax.\n            return Expr.fromJSON(interpolatedPropertyDefinitionToJsonExpr(definitionEntry.value));\n        } else if (isJsonExpr(definitionEntry.value)) {\n            definitionEntry = definitionEntry.value;\n        } else {\n            return Expr.fromJSON(definitionEntry.value);\n        }\n    }\n\n    if (isJsonExpr(definitionEntry)) {\n        referenceResolverState.lockedNames.add(name);\n        try {\n            result = parseNode(definitionEntry, referenceResolverState);\n        } finally {\n            referenceResolverState.lockedNames.delete(name);\n        }\n    } else {\n        throw new Error(`unsupported definition ${name}`);\n    }\n    referenceResolverState.cache.set(name, result);\n    return result;\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nexport * from \"./lib/rendering/FontCatalog\";\nexport * from \"./lib/rendering/GlyphData\";\nexport * from \"./lib/rendering/TextStyle\";\nexport * from \"./lib/rendering/TextBufferObject\";\nexport * from \"./lib/TextCanvas\";\n\nexport * from \"./lib/utils/ContextualArabicConverter\";\nexport * from \"./lib/utils/MaterialUtils\";\nexport * from \"./lib/utils/TypesettingUtils\";\nexport * from \"./lib/utils/UnicodeUtils\";\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { GeoCoordinatesLike, isGeoCoordinatesLike } from \"./GeoCoordinatesLike\";\nimport { GeoPointLike, isGeoPointLike } from \"./GeoPointLike\";\nimport { isLatLngLike, LatLngLike } from \"./LatLngLike\";\n\nimport * as THREE from \"three\";\n\n/**\n * Represents an object in different geo coordinate formats\n */\nexport type GeoCoordLike = GeoPointLike | GeoCoordinatesLike | LatLngLike;\n\n/**\n * `GeoCoordinates` is used to represent geo positions.\n */\nexport class GeoCoordinates implements GeoCoordinatesLike {\n    /**\n     * Returns a `GeoCoordinates` from the given latitude, longitude, and optional altitude.\n     *\n     * @param latitude Latitude in degrees.\n     * @param longitude Longitude in degrees.\n     * @param altitude Altitude in meters.\n     */\n    static fromDegrees(latitude: number, longitude: number, altitude?: number): GeoCoordinates {\n        return new GeoCoordinates(latitude, longitude, altitude);\n    }\n\n    /**\n     * Returns a `GeoCoordinates` from the given latitude, longitude, and optional altitude.\n     *\n     * @param latitude Latitude in radians.\n     * @param longitude Longitude in radians.\n     * @param altitude Altitude in meters.\n     */\n    static fromRadians(latitude: number, longitude: number, altitude?: number): GeoCoordinates {\n        return new GeoCoordinates(\n            THREE.MathUtils.radToDeg(latitude),\n            THREE.MathUtils.radToDeg(longitude),\n            altitude\n        );\n    }\n\n    /**\n     * Creates a [[GeoCoordinates]] from a [[LatLngLike]] literal.\n     * ```typescript\n     * const center = { lat: 53.3, lng: 13.4 };\n     * mapView.geoCenter = GeoCoordinates.fromLatLng(center);\n     * ```\n     * @param latLng A [[LatLngLike]] object literal.\n     */\n    static fromLatLng(latLng: LatLngLike) {\n        return new GeoCoordinates(latLng.lat, latLng.lng);\n    }\n\n    /**\n     * Creates a [[GeoCoordinates]] from a [[GeoPointLike]] tuple.\n     *\n     * Example:\n     * ```typescript\n     * mapView.geoCenter = GeoCoordinates.fromGeoPoint([longitude, latitude]);\n     *\n     * let geoCoords: number[] = ...;\n     *\n     * if (isGeoPointLike(geoCoords)) {\n     *     const p = GeoCoordinates.fromGeoPoint(geoCoords);\n     * }\n     * ```\n     * @param geoPoint An [[Array]] of at least two elements following the order\n     * longitude, latitude, altitude.\n     */\n    static fromGeoPoint(geoPoint: GeoPointLike): GeoCoordinates {\n        return new GeoCoordinates(geoPoint[1], geoPoint[0], geoPoint[2]);\n    }\n\n    /**\n     * Creates a [[GeoCoordinates]] from different types of geo coordinate objects.\n     *\n     * Example:\n     * ```typescript\n     * const fromGeoPointLike = GeoCoordinates.fromObject([longitude, latitude]);\n     * const fromGeoCoordinateLike = GeoCoordinates.fromObject({ longitude, latitude });\n     * const fromGeoCoordinate = GeoCoordinates.fromObject(new GeoCoordinates(latitude, longitude));\n     * const fromLatLngLike = GeoCoordinates.fromObject({ lat: latitude , lng: longitude });\n     * ```\n     *\n     * @param geoPoint Either [[GeoPointLike]], [[GeoCoordinatesLike]]\n     * or [[LatLngLike]] object literal.\n     */\n    static fromObject(geoPoint: GeoCoordLike): GeoCoordinates {\n        if (isGeoPointLike(geoPoint)) {\n            return GeoCoordinates.fromGeoPoint(geoPoint);\n        } else if (isGeoCoordinatesLike(geoPoint)) {\n            return GeoCoordinates.fromDegrees(\n                geoPoint.latitude,\n                geoPoint.longitude,\n                geoPoint.altitude\n            );\n        } else if (isLatLngLike(geoPoint)) {\n            return GeoCoordinates.fromDegrees(geoPoint.lat, geoPoint.lng);\n        }\n\n        throw new Error(\"Invalid input coordinate format.\");\n    }\n\n    /**\n     * Creates a `GeoCoordinates` from the given latitude, longitude, and optional altitude.\n     *\n     * @param latitude Latitude in degrees.\n     * @param longitude Longitude in degrees.\n     * @param altitude Altitude in meters.\n     */\n    constructor(public latitude: number, public longitude: number, public altitude?: number) {}\n\n    /**\n     * Returns the latitude in radians.\n     */\n    get latitudeInRadians(): number {\n        return THREE.MathUtils.degToRad(this.latitude);\n    }\n\n    /**\n     * Returns the longitude in radians.\n     */\n    get longitudeInRadians(): number {\n        return THREE.MathUtils.degToRad(this.longitude);\n    }\n\n    /**\n     * Returns the latitude in degrees.\n     * @deprecated Use the [[latitude]] property instead.\n     */\n    get latitudeInDegrees(): number {\n        return this.latitude;\n    } // compat api\n\n    /**\n     * Returns the longitude in degrees.\n     * @deprecated Use the [[longitude]] property instead.\n     */\n    get longitudeInDegrees(): number {\n        return this.longitude;\n    } // compat api\n\n    /**\n     * The latitude in the degrees.\n     */\n    get lat() {\n        return this.latitude;\n    }\n\n    /**\n     * The longitude in the degrees.\n     */\n    get lng() {\n        return this.longitude;\n    }\n\n    /**\n     * Returns `true` if this `GeoCoordinates` is valid; returns `false` otherwise.\n     */\n    isValid(): boolean {\n        return !isNaN(this.latitude) && !isNaN(this.longitude);\n    }\n\n    /**\n     * Returns the normalized `GeoCoordinates`.\n     */\n    normalized(): GeoCoordinates {\n        let { latitude, longitude } = this;\n\n        if (isNaN(latitude) || isNaN(longitude)) {\n            return this;\n        }\n\n        if (latitude > 90) {\n            let wrapped = (latitude + 90) % 360;\n            if (wrapped >= 180) {\n                longitude += 180;\n                wrapped = 360 - wrapped;\n            }\n\n            latitude = wrapped - 90;\n        }\n\n        if (latitude < -90) {\n            let wrapped = (latitude - 90) % 360;\n            if (wrapped <= -180) {\n                longitude += 180;\n                wrapped = -360 - wrapped;\n            }\n\n            latitude = wrapped + 90;\n        }\n\n        if (longitude < -180 || longitude > 180) {\n            const sign = Math.sign(longitude);\n            longitude = (((longitude % 360) + 180 * sign) % 360) - 180 * sign;\n        }\n\n        if (latitude === this.latitude && longitude === this.longitude) {\n            return this;\n        }\n\n        return new GeoCoordinates(latitude, longitude, this.altitude);\n    }\n\n    /**\n     * Returns `true` if this `GeoCoordinates` is equal to the other.\n     *\n     * @param other GeoCoordinatesLike to compare to.\n     */\n    equals(other: GeoCoordinatesLike): boolean {\n        return (\n            this.latitude === other.latitude &&\n            this.longitude === other.longitude &&\n            this.altitude === other.altitude\n        );\n    }\n\n    /**\n     * Copy values from the other.\n     *\n     * @param other GeoCoordinatesLike to copy all values from.\n     */\n    copy(other: GeoCoordinatesLike): GeoCoordinates {\n        this.latitude = other.latitude;\n        this.longitude = other.longitude;\n        this.altitude = other.altitude;\n        return this;\n    }\n\n    /**\n     * Clones this `GeoCoordinates`.\n     */\n    clone(): GeoCoordinates {\n        return new GeoCoordinates(this.latitude, this.longitude, this.altitude);\n    }\n\n    /**\n     * Returns this [[GeoCoordinates]] as [[LatLngLike]] literal.\n     */\n    toLatLng(): LatLngLike {\n        return { lat: this.latitude, lng: this.longitude };\n    }\n\n    /**\n     * Converts this [[GeoCoordinates]] to a [[GeoPointLike]].\n     */\n    toGeoPoint(): GeoPointLike {\n        return this.altitude !== undefined\n            ? [this.longitude, this.latitude, this.altitude]\n            : [this.longitude, this.latitude];\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { Box3Like } from \"./Box3Like\";\nimport { Vector3Like } from \"./Vector3Like\";\n\nimport * as THREE from \"three\";\n\nexport namespace MathUtils {\n    /**\n     * Creates a new empty bounding box.\n     * @deprecated\n     */\n    export function newEmptyBox3(): Box3Like {\n        return {\n            min: { x: Infinity, y: Infinity, z: Infinity },\n            max: { x: -Infinity, y: -Infinity, z: -Infinity }\n        };\n    }\n\n    /**\n     * Creates a new [Vector3Like] instance.\n     *\n     * @param x The x component.\n     * @param y The y component.\n     * @param z The z component.\n     */\n    export function newVector3(x: number, y: number, z: number): Vector3Like;\n\n    /**\n     * Creates a new [Vector3Like] instance.\n     *\n     * @param x The x component.\n     * @param y The y component.\n     * @param z The z component.\n     * @param v The resulting [Vector3Like] instance.\n     */\n    export function newVector3<Vector extends Vector3Like>(\n        x: number,\n        y: number,\n        z: number,\n        v: Vector\n    ): Vector;\n\n    /**\n     * Set the components of the given [Vector3Like] instance.\n     *\n     * @param x The x component.\n     * @param y The y component.\n     * @param z The z component.\n     * @param v The [Vector3Like]\n     */\n    export function newVector3(x: number, y: number, z: number, v?: Vector3Like): Vector3Like {\n        if (v === undefined) {\n            return { x, y, z };\n        }\n        v.x = x;\n        v.y = y;\n        v.z = z;\n        return v;\n    }\n\n    /**\n     * Converts an angle measured in degrees to an equivalent value in radians.\n     *\n     * @param degrees Value in degrees.\n     * @returns Value in radians.\n     * @deprecated use THREE.MathUtils.degToRad instead\n     */\n    export const degToRad = THREE.MathUtils.degToRad;\n\n    /**\n     * Converts an angle measured in radians to an equivalent value in degrees.\n     *\n     * @param degrees Value in radians.\n     * @returns Value in degrees.\n     * @deprecated\n     */\n    export const radToDeg = THREE.MathUtils.radToDeg;\n\n    /**\n     * Ensures that input value fits in a given range.\n     *\n     * @param value The value to be clamped.\n     * @param min Minimum value.\n     * @param max Maximum value.\n     * @returns Clamped value.\n     * @deprecated\n     */\n    export const clamp = THREE.MathUtils.clamp;\n\n    /**\n     * Normalize angle in degrees to range `[0, 360)`.\n     *\n     * @param a Angle in degrees.\n     * @returns Angle in degrees in range `[0, 360)`.\n     */\n    export function normalizeAngleDeg(a: number): number {\n        a = a % 360;\n        if (a < 0) {\n            a = a + 360;\n        }\n        return a;\n    }\n\n    /**\n     * Normalize latitude angle in degrees to range `[-180, 180]`.\n     *\n     * @param a Latitude angle in degrees.\n     * @returns Latitude angle in degrees in range `[-180, 180]`.\n     */\n    export function normalizeLongitudeDeg(a: number): number {\n        a = normalizeAngleDeg(a);\n        if (a > 180) {\n            a = a - 360;\n        }\n        return a;\n    }\n\n    /**\n     * Return the minimal delta between angles `a` and `b` given in degrees.\n     *\n     * Equivalent to `a - b` in coordinate space with exception vector direction can be reversed\n     * that if `abs(a-b) > 180` because trip is shorter in 'other' direction.\n     *\n     * Useful when interpolating between `b` and `a` in angle space.\n     *\n     * @param a Start angle in degrees.\n     * @param b End angle in degrees.\n     * @returns Angle that that satisfies condition `a - b - d = 0` in angle space.\n     */\n    export function angleDistanceDeg(a: number, b: number): number {\n        a = normalizeAngleDeg(a);\n        b = normalizeAngleDeg(b);\n\n        const d = a - b;\n        if (d > 180) {\n            return d - 360;\n        } else if (d <= -180) {\n            return d + 360;\n        } else {\n            return d;\n        }\n    }\n\n    /**\n     * Interpolate linearly between two angles given in degrees.\n     *\n     * @param p0 Angle from in degrees\n     * @param p1 Angle to in degrees\n     * @param t Interpolation factor (alpha), in range `0-1`.\n     */\n    export function interpolateAnglesDeg(p0: number, p1: number, t: number): number {\n        // hand crafted version,\n        // see stack for maybe better versions:\n        //    https://stackoverflow.com/questions/2708476/rotation-interpolation\n\n        const d = angleDistanceDeg(p1, p0);\n        const r = (p0 + d * t) % 360;\n        return r;\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { assert } from \"@here/harp-utils\";\nimport * as THREE from \"three\";\n\n/**\n * Values for boolean shader defines\n */\nexport const DEFINE_BOOL_TRUE = \"\";\nexport const DEFINE_BOOL_FALSE = undefined;\n\n/**\n * Insert shader includes after another shader include.\n *\n * @param shaderContent Original string.\n * @param shaderName String to append to.\n * @param insertedShaderName String to append after string `shaderA`.\n * @param addTab If `true`, a tab character will be inserted before `shaderB`.\n */\nexport function insertShaderInclude(\n    shaderContent: string,\n    shaderName: string,\n    insertedShaderName: string,\n    addTab?: boolean\n): string {\n    const tabChar = addTab === true ? \"\\t\" : \"\";\n\n    const result = shaderContent.replace(\n        `#include <${shaderName}>`,\n        `#include <${shaderName}>\n${tabChar}#include <${insertedShaderName}>`\n    );\n    return result;\n}\n\nexport interface ForcedBlending {\n    /**\n     * This material has `blending` always enabled regardless of `opacity` setting.s\n     */\n    forcedBlending?: true;\n}\n\n/**\n * THREE.js is enabling blending only when transparent is `true` or when a blend mode\n * different than `NormalBlending` is set.\n * Since we don't want to set transparent to true and mess up the render order we set\n * `CustomBlending` with the same parameters as the `NormalBlending`.\n\n * @param material `Material` that should use blending\n * @note This function should not be used in frame update after material has been passed to WebGL.\n * In such cases use [[enableBlending]] instead.\n */\nexport function enforceBlending(\n    material: (THREE.Material | THREE.ShaderMaterialParameters) & ForcedBlending\n) {\n    if (material.transparent) {\n        // Nothing to do\n        return;\n    }\n\n    enableBlending(material);\n    material.forcedBlending = true;\n}\n\n/**\n * Enable alpha blending using THREE.CustomBlending setup.\n *\n * Function enables blending using one of predefined modes, for both color and alpha components:\n * - Src: [[THREE.SrcAlphaFactor]], Dst: [[THREE.OneMinusSrcAlphaFactor]]\n * - Src: [[THREE.OneFactor]], Dst: [[THREE.OneMinusSrcAlphaFactor]]\n * The second blending equation is used when [[THREE.Material.premultipliedAlpha]] is enabled\n * for this material.\n * @note Blending mode change does not require material update.\n * @see THREE.Material.needsUpdate.\n * @param material The material or material parameters to modify.\n */\nexport function enableBlending(\n    material: (THREE.Material | THREE.ShaderMaterialParameters) & ForcedBlending\n) {\n    if (material.transparent || material.forcedBlending) {\n        // Nothing to do\n        return;\n    }\n\n    material.blending = THREE.CustomBlending;\n    if (material.premultipliedAlpha === true) {\n        material.blendSrc = THREE.OneFactor;\n        material.blendDst = THREE.OneMinusSrcAlphaFactor;\n        material.blendSrcAlpha = THREE.OneFactor;\n        material.blendDstAlpha = THREE.OneMinusSrcAlphaFactor;\n    } else {\n        material.blendSrc = THREE.SrcAlphaFactor;\n        material.blendDst = THREE.OneMinusSrcAlphaFactor;\n        material.blendSrcAlpha = THREE.OneFactor;\n        material.blendDstAlpha = THREE.OneMinusSrcAlphaFactor;\n    }\n}\n\n/**\n * Disable alpha blending using THREE.CustomBlending mode, switches to [[THREE.NormalBlending]].\n *\n * @note Blending mode change does not require material update.\n * @see THREE.Material.needsUpdate.\n * @see enableBlending.\n * @param material The material or material parameters to modify.\n */\nexport function disableBlending(\n    material: (THREE.Material | THREE.ShaderMaterialParameters) & ForcedBlending\n) {\n    if (material.transparent || material.forcedBlending) {\n        // Nothing to do\n        return;\n    }\n\n    material.blending = THREE.NormalBlending;\n}\n\n/**\n * Setup material shader _define_ using two allowable semantics.\n *\n * Function accepts two types of values for shader preprocessor _define_:\n * - [[boolean]], simple [[true]] or [[false]] which causes _define_ to be set with empty string,\n * such defines may be handled in the shader using __#ifdef__ semantics:\n * ```\n * #ifdef SOME_DEFINE && !defined(OTHER_DEFINE)\n * // do something\n * #endif\n * ```\n *\n * - [[number]] which sets _define_ to explicit value. You may use it to enable/disable some\n * code or even set compile time constants affecting shaders math:\n * ```\n * #if SOME_DEFINE_SWITCH && OTHER_DEFINE_SWITCH == 0\n * gl_FragColor = vec4(1, 1, 1, DEFINE_ALPHA)\n * #endif\n * ```\n * @note Setting _define_ with `false` value is not the same as setting is with number value of `0`.\n *\n * @param material The [[THREE.ShaderMaterial]] which shader _define_ will be set.\n * @param key Name of shader _define_ as used in shader, i.e. `USE_FOG`, `COLOR_ALPHA`, etc.\n * @param value The value to be set as number or boolean specifying if preprocessor define\n * should be defined or not.\n * @returns [[true]] if material has been forced to update (re-compile) due to define changes,\n * return [[false]] whenever define has not been changed.\n */\nexport function setShaderMaterialDefine(\n    material: THREE.ShaderMaterial,\n    key: string,\n    value: boolean | number\n): boolean {\n    assert(\n        material.defines !== undefined,\n        \"Do not use this function in ShaderMaterial derived c-tor.\"\n    );\n    const semanticValue = getShaderMaterialDefine(material, key);\n    const needsUpdate = value !== semanticValue;\n    // Nothing to change - early exit\n    if (!needsUpdate) {\n        return false;\n    }\n    setShaderDefine(material.defines, key, value);\n    material.needsUpdate = needsUpdate;\n    return true;\n}\n\n/**\n * Acquire value of [[THREE.ShaderMaterial]] GPU shader preprocessor define.\n *\n * The semantic used in entire engine assumes that preprocessor defines may have only binary\n * (defined / not defined) or numerical values, this ensures consistency in the shaders and\n * materials code.\n * @note If _define_ with [[key]] is _undefined_ function returns [[false]], if defined but\n * not numerical value it returns [[true]], otherwise returns number.\n * @see setShaderMaterialDefine.\n *\n * @param material The material which shader defines are accessed.\n * @param key The _define_ name (identifier).\n * @param fallbackValue The value returned when material `defines` are not initialized yet,\n * specified by default as [[false]], provide your own default if you expect numeric value.\n */\nexport function getShaderMaterialDefine(\n    material: THREE.ShaderMaterial,\n    key: string,\n    fallbackValue: boolean | number = false\n): boolean | number {\n    if (material.defines === undefined) {\n        return fallbackValue;\n    }\n    return getShaderDefine(material.defines, key);\n}\n\n/**\n * Sets new value of 'define' regardless of current value set.\n *\n * Update `defines` map with new key and value, if key is already occupied it overrides its value.\n * Helper function that may be used to setup [[THREE.ShaderMaterialParameters]] before\n * material is create (i.e. in c-tor).\n *\n * @param defines Shader `defines` stored in key-value map.\n * @param key The key used to identify _define_.\n * @param value The value to be stored.\n * @returns [[true]] if define has actually changed, false is stayed the same.\n * @see setShaderMaterialDefine.\n */\nexport function setShaderDefine(\n    defines: { [key: string]: any },\n    key: string,\n    value: boolean | number\n): boolean {\n    let updated = false;\n    if (typeof value === \"number\") {\n        updated = defines[key] !== value;\n        defines[key] = value;\n    } else if (value === true) {\n        updated = defines[key] !== DEFINE_BOOL_TRUE;\n        defines[key] = DEFINE_BOOL_TRUE;\n    } else if (value === false && defines[key] !== undefined) {\n        // Sets to DEFINE_BOOL_FALSE === undefined\n        delete defines[key];\n        updated = true;\n    }\n    return updated;\n}\n\n/**\n * Acquire shader 'define' value from `defines` map.\n *\n * If there is no value under [[key]] specified, function returns false, otherwise result is\n * true or numeric value if there is a number stored.\n * @param defines The `defines` map.\n * @param key The identifier of the _define_.\n */\nexport function getShaderDefine(defines: { [key: string]: any }, key: string): boolean | number {\n    const currentValue = defines[key];\n    const semanticValue =\n        currentValue === DEFINE_BOOL_FALSE\n            ? false\n            : currentValue === DEFINE_BOOL_TRUE\n            ? true\n            : currentValue;\n    return semanticValue;\n}\n","/*\n * Copyright (C) 2017-2020 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport * as THREE from \"three\";\n\nimport {\n    GeoBox,\n    GeoCoordinates,\n    GeoCoordLike,\n    MathUtils,\n    Projection,\n    ProjectionType,\n    TileKey\n} from \"@here/harp-geoutils\";\nimport { EarthConstants } from \"@here/harp-geoutils/lib/projection/EarthConstants\";\nimport { MapMeshBasicMaterial, MapMeshStandardMaterial } from \"@here/harp-materials\";\nimport { assert, LoggerManager } from \"@here/harp-utils\";\nimport { ElevationProvider } from \"./ElevationProvider\";\nimport { LodMesh } from \"./geometry/LodMesh\";\nimport { MapView } from \"./MapView\";\nimport { getFeatureDataSize, TileFeatureData } from \"./Tile\";\n\nconst logger = LoggerManager.instance.create(\"MapViewUtils\");\n\n// Estimation of the size of an Object3D with all the simple properties, like matrices and flags.\n// There may be cases where it is possible to construct Object3Ds with considerable less memory\n// consumption, but this value is used to simplify the estimation.\nconst MINIMUM_OBJECT3D_SIZE_ESTIMATION = 1000;\n\nconst MINIMUM_ATTRIBUTE_SIZE_ESTIMATION = 56;\n\n/**\n * Zoom level to request terrain tiles for getting the height of the camera above terrain.\n */\nconst TERRAIN_ZOOM_LEVEL = 4;\n\n// Caching those for performance reasons.\nconst groundNormalPlanarProj = new THREE.Vector3(0, 0, 1);\nconst groundPlane = new THREE.Plane(groundNormalPlanarProj.clone());\nconst groundSphere = new THREE.Sphere(undefined, EarthConstants.EQUATORIAL_RADIUS);\nconst rayCaster = new THREE.Raycaster();\nconst epsilon = 1e-5;\n\n/**\n * Cached ThreeJS instances for realtime maths.\n */\nconst space = {\n    x: new THREE.Vector3(),\n    y: new THREE.Vector3(),\n    z: new THREE.Vector3()\n};\nconst tangentSpace = {\n    x: new THREE.Vector3(),\n    y: new THREE.Vector3(),\n    z: new THREE.Vector3()\n};\nconst cache = {\n    quaternions: [new THREE.Quaternion(), new THREE.Quaternion()],\n    vector3: [new THREE.Vector3(), new THREE.Vector3(), new THREE.Vector3()],\n    matrix4: [new THREE.Matrix4(), new THREE.Matrix4()],\n    transforms: [\n        {\n            xAxis: new THREE.Vector3(),\n            yAxis: new THREE.Vector3(),\n            zAxis: new THREE.Vector3(),\n            position: new THREE.Vector3()\n        }\n    ]\n};\n\nexport namespace MapViewUtils {\n    export const MAX_TILT_DEG = 89;\n    export const MAX_TILT_RAD = MAX_TILT_DEG * THREE.MathUtils.DEG2RAD;\n\n    /**\n     * The anti clockwise rotation of an object along the axes of its tangent space, with itself\n     * as origin.\n     */\n    export interface Attitude {\n        /**\n         * Rotation of the object along its vertical axis.\n         */\n        yaw: number;\n\n        /**\n         * Rotation of the object along its horizontal axis.\n         */\n        pitch: number;\n\n        /**\n         * Rotation of the object along its forward axis.\n         */\n        roll: number;\n    }\n\n    /**\n     * Describes estimated usage of memory on heap and GPU.\n     */\n    export interface MemoryUsage {\n        heapSize: number;\n        gpuSize: number;\n    }\n\n    /**\n     * Zooms and moves the map in such a way that the given target position remains at the same\n     * position after the zoom.\n     *\n     * @param mapView Instance of MapView.\n     * @param targetNDCx Target x position in NDC space.\n     * @param targetNDCy Target y position in NDC space.\n     * @param zoomLevel The desired zoom level.\n     * @param maxTiltAngle The maximum tilt angle to comply by, in globe projection, in radian.\n     */\n    export function zoomOnTargetPosition(\n        mapView: MapView,\n        targetNDCx: number,\n        targetNDCy: number,\n        zoomLevel: number,\n        maxTiltAngle: number = MAX_TILT_RAD\n    ): void {\n        const { elevationProvider, camera } = mapView;\n\n        // Use for now elevation at camera position. See getTargetAndDistance.\n        const elevation = elevationProvider\n            ? elevationProvider.getHeight(\n                  mapView.projection.unprojectPoint(camera.position),\n                  TERRAIN_ZOOM_LEVEL\n              )\n            : undefined;\n\n        // Get current target position in world space before we zoom.\n        const worldTarget = rayCastWorldCoordinates(mapView, targetNDCx, targetNDCy, elevation);\n        const groundDistance = calculateDistanceToGroundFromZoomLevel(mapView, zoomLevel);\n        const cameraHeight = groundDistance + (elevation ?? 0);\n\n        // Set the cameras height according to the given zoom level.\n        if (mapView.projection.type === ProjectionType.Planar) {\n            camera.position.setZ(cameraHeight);\n        } else if (mapView.projection.type === ProjectionType.Spherical) {\n            camera.position.setLength(EarthConstants.EQUATORIAL_RADIUS + cameraHeight);\n        }\n\n        // In sphere, we may have to also orbit the camera around the position located at the\n        // center of the screen, in order to limit the tilt to `maxTiltAngle`, as we change\n        // this tilt by changing the camera's height above.\n        if (mapView.projection.type === ProjectionType.Spherical) {\n            // FIXME: We cannot use mapView.tilt here b/c it does not reflect the latest camera\n            // changes.\n            // tslint:disable-next-line: deprecation\n            const tilt = extractCameraTilt(camera, mapView.projection);\n            const deltaTilt = tilt - maxTiltAngle;\n            if (deltaTilt > 0) {\n                orbitFocusPoint(mapView, 0, deltaTilt, maxTiltAngle);\n            }\n        }\n\n        // Get new target position after the zoom\n        const newWorldTarget = rayCastWorldCoordinates(mapView, targetNDCx, targetNDCy, elevation);\n        if (!worldTarget || !newWorldTarget) {\n            return;\n        }\n\n        if (mapView.projection.type === ProjectionType.Planar) {\n            // Calculate the difference and pan the map to maintain the map relative to the target\n            // position.\n            worldTarget.sub(newWorldTarget);\n            panCameraAboveFlatMap(mapView, worldTarget.x, worldTarget.y);\n        } else if (mapView.projection.type === ProjectionType.Spherical) {\n            panCameraAroundGlobe(mapView, worldTarget, newWorldTarget);\n        }\n    }\n\n    /**\n     * Orbits the camera around the focus point of the camera.\n     *\n     * @param mapView The [[MapView]] instance to manipulate.\n     * @param deltaAzimuthDeg Delta azimuth in degrees.\n     * @param deltaTiltDeg Delta tilt in degrees.\n     * @param maxTiltAngleRad The maximum tilt between the camera and its target in radian.\n     */\n    export function orbitFocusPoint(\n        mapView: MapView,\n        deltaAzimuthDeg: number,\n        deltaTiltDeg: number,\n        maxTiltAngleRad = MAX_TILT_RAD\n    ) {\n        const target = mapView.target;\n        const sphericalCoordinates = extractSphericalCoordinatesFromLocation(\n            mapView,\n            mapView.camera,\n            target\n        );\n        const tilt = Math.max(\n            Math.min(\n                THREE.MathUtils.radToDeg(maxTiltAngleRad),\n                deltaTiltDeg + THREE.MathUtils.radToDeg(sphericalCoordinates.tilt)\n            ),\n            0\n        );\n        const heading =\n            THREE.MathUtils.radToDeg(sphericalCoordinates.azimuth + Math.PI) + deltaAzimuthDeg;\n        mapView.lookAt({\n            target,\n            distance: mapView.targetDistance,\n            tilt,\n            heading\n        });\n    }\n\n    /**\n     * Calculate target (focus) point geo-coordinates for given camera.\n     * @see getTargetPositionFromCamera\n     *\n     * @param camera The camera looking on target point.\n     * @param projection The geo-projection used.\n     * @param elevation Optional elevation above (or below) sea level measured in world units.\n     *\n     * @deprecated This function is for internal use only and will be removed in the future. Use\n     * MapView.worldTarget instead.\n     */\n    export function getGeoTargetFromCamera(\n        camera: THREE.Camera,\n        projection: Projection,\n        elevation?: number\n    ): GeoCoordinates | null {\n        // This function does almost the same as:\n        // rayCastGeoCoordinates(mapView, 0, 0)\n        // but in more gentle and performance wise manner\n        // tslint:disable-next-line: deprecation\n        const targetWorldPos = getWorldTargetFromCamera(camera, projection, elevation);\n        if (targetWorldPos !== null) {\n            return projection.unprojectPoint(targetWorldPos);\n        }\n        return null;\n    }\n\n    /**\n     * Calculate target (focus) point world coordinates for given camera position and orientation.\n     * @param camera The camera looking on target point.\n     * @param projection The geo-projection used.\n     * @param elevation Optional elevation above (or below) sea level in world units.\n     *\n     * @deprecated This function is for internal use only and will be removed in the future.\n     */\n    export function getWorldTargetFromCamera(\n        camera: THREE.Camera,\n        projection: Projection,\n        elevation?: number\n    ): THREE.Vector3 | null {\n        const cameraPos = cache.vector3[0].copy(camera.position);\n        const cameraLookAt = camera.getWorldDirection(cache.vector3[1]);\n        rayCaster.set(cameraPos, cameraLookAt);\n        if (elevation !== undefined) {\n            groundPlane.constant -= elevation;\n            groundSphere.radius += elevation;\n        }\n        const targetWorldPos = new THREE.Vector3();\n        const result =\n            projection.type === ProjectionType.Planar\n                ? rayCaster.ray.intersectPlane(groundPlane, targetWorldPos)\n                : rayCaster.ray.intersectSphere(groundSphere, targetWorldPos);\n        if (elevation !== undefined) {\n            groundPlane.constant = 0;\n            groundSphere.radius = EarthConstants.EQUATORIAL_RADIUS;\n        }\n        return result;\n    }\n\n    /**\n     * Returns the height of the camera above the earths surface.\n     *\n     * If there is an ElevationProvider, this is used. Otherwise the projection is used to determine\n     * how high the camera is above the surface.\n     *\n     * @param level Which level to request the surface height from.\n     * @return Height in world units.\n     */\n    function getHeightAboveTerrain(\n        location: THREE.Vector3,\n        projection: Projection,\n        elevationProvider?: ElevationProvider,\n        level?: number\n    ): number {\n        if (elevationProvider !== undefined) {\n            const geoLocation = projection.unprojectPoint(location);\n            const heightAboveTerrain = elevationProvider.getHeight(geoLocation, level);\n            if (heightAboveTerrain !== undefined) {\n                const height = projection.unprojectAltitude(location) - heightAboveTerrain;\n                return Math.max(height, 1);\n            }\n        }\n        return Math.abs(projection.groundDistance(location));\n    }\n\n    /**\n     * @internal\n     * @deprecated This method will be moved to MapView.\n     */\n    export function getTargetAndDistance(\n        projection: Projection,\n        camera: THREE.Camera,\n        elevationProvider?: ElevationProvider\n    ): { target: THREE.Vector3; distance: number } {\n        const cameraPitch = extractAttitude({ projection }, camera).pitch;\n\n        //FIXME: For now we keep the old behaviour when terrain is enabled (i.e. use the camera\n        //       height above terrain to deduce the target distance).\n        //       This leads to zoomlevel changes while panning. We have to find a proper solution\n        //       for terrain (e.g. raycast with the ground surfcae that is elevated by the average\n        //       elevation in the scene)\n        const elevation = elevationProvider\n            ? elevationProvider.getHeight(\n                  projection.unprojectPoint(camera.position),\n                  TERRAIN_ZOOM_LEVEL\n              )\n            : undefined;\n\n        // Even for a tilt of 90° raycastTargetFromCamera is returning some point almost at\n        // infinity.\n        const target =\n            cameraPitch < MAX_TILT_RAD\n                ? // tslint:disable-next-line: deprecation\n                  getWorldTargetFromCamera(camera, projection, elevation)\n                : null;\n        if (target !== null) {\n            const distance = camera.position.distanceTo(target);\n            return { target, distance };\n        } else {\n            // We either reached the [[PITCH_LIMIT]] or we did not hit the ground surface.\n            // In this case we do the reverse, i.e. compute some fallback distance and\n            // use it to compute the tagret point by using the camera direction.\n            const cameraPosZ = getHeightAboveTerrain(\n                camera.position,\n                projection,\n                elevationProvider,\n                TERRAIN_ZOOM_LEVEL\n            );\n\n            //For flat projection we fallback to the target distance at 89 degree pitch.\n            //For spherical projection we fallback to the tangent line distance\n            const distance =\n                projection.type === ProjectionType.Planar\n                    ? cameraPosZ / Math.cos(Math.min(cameraPitch, MAX_TILT_RAD))\n                    : Math.sqrt(\n                          Math.pow(cameraPosZ + EarthConstants.EQUATORIAL_RADIUS, 2) -\n                              Math.pow(EarthConstants.EQUATORIAL_RADIUS, 2)\n                      );\n            const cameraDir = camera.getWorldDirection(cache.vector3[0]);\n            cameraDir.multiplyScalar(distance);\n            const fallbackTarget = cache.vector3[1];\n            fallbackTarget.copy(camera.position).add(cameraDir);\n            return { target: fallbackTarget, distance };\n        }\n    }\n\n    /**\n     * Returns the [[GeoCoordinates]] of the camera, given its target coordinates on the map and its\n     * zoom, yaw and pitch.\n     *\n     * @param targetCoordinates Coordinates of the center of the view.\n     * @param distance Distance to the target in meters.\n     * @param yawDeg Camera yaw in degrees.\n     * @param pitchDeg Camera pitch in degrees.\n     * @param projection Active MapView, needed to get the camera fov and map projection.\n     * @param result Optional output vector.\n     * @returns Camera position in world space.\n     */\n    export function getCameraPositionFromTargetCoordinates(\n        targetCoordinates: GeoCoordinates,\n        distance: number,\n        yawDeg: number,\n        pitchDeg: number,\n        projection: Projection,\n        result: THREE.Vector3 = new THREE.Vector3()\n    ): THREE.Vector3 {\n        const pitchRad = THREE.MathUtils.degToRad(pitchDeg);\n        const altitude = Math.cos(pitchRad) * distance;\n        const yawRad = THREE.MathUtils.degToRad(yawDeg);\n        projection.projectPoint(targetCoordinates, result);\n        const groundDistance = distance * Math.sin(pitchRad);\n        if (projection.type === ProjectionType.Planar) {\n            result.x = result.x + Math.sin(yawRad) * groundDistance;\n            result.y = result.y - Math.cos(yawRad) * groundDistance;\n            result.z = result.z + altitude;\n        } else if (projection.type === ProjectionType.Spherical) {\n            // In globe yaw and pitch are understood to be in tangent space. The approach below is\n            // to find the Z and Y tangent space axes, then rotate Y around Z by the given yaw, and\n            // set its new length (groundDistance). Finally the up vector's length is set to the\n            // camera height and added to the transformed Y above.\n\n            // Get the Z axis in tangent space: it is the normalized position vector of the target.\n            tangentSpace.z.copy(result).normalize();\n\n            // Get the Y axis (north axis in tangent space):\n            tangentSpace.y\n                .set(0, 0, 1)\n                .projectOnPlane(tangentSpace.z)\n                .normalize();\n\n            // Rotate this north axis by the given yaw, giving the camera direction relative to\n            // the target.\n            cache.quaternions[0].setFromAxisAngle(tangentSpace.z, yawRad - Math.PI);\n            tangentSpace.y.applyQuaternion(cache.quaternions[0]);\n\n            // Push the camera to the specified distance.\n            tangentSpace.y.setLength(groundDistance);\n\n            // Now get the actual camera position vector: from the target position, add the\n            // previous computation to get the projection of the camera on the ground, then add\n            // the height of the camera in the tangent space.\n            const height = distance * Math.cos(pitchRad);\n            result.add(tangentSpace.y).add(tangentSpace.z.setLength(height));\n\n            const a = EarthConstants.EQUATORIAL_RADIUS + altitude;\n            const b = Math.sin(pitchRad) * distance;\n            const cameraHeight = Math.sqrt(a * a + b * b);\n            result.setLength(cameraHeight);\n        }\n\n        return result;\n    }\n\n    /**\n     * @hidden\n     * @internal\n     *\n     * Add offset to geo points for minimal view box in flat projection with tile wrapping.\n     *\n     * In flat projection, with wrap around enabled, we should detect clusters of points around that\n     * wrap antimeridian.\n     *\n     * Here, we fit points into minimal geo box taking world wrapping into account.\n     */\n    export function wrapGeoPointsToScreen(\n        points: GeoCoordLike[],\n        startPosition?: GeoCoordinates\n    ): GeoCoordinates[] {\n        let startIndex = 0;\n        if (startPosition === undefined) {\n            startPosition = GeoCoordinates.fromObject(points[0]);\n            startIndex = 1;\n        }\n        let north = startPosition.latitude;\n        let south = startPosition.latitude;\n        let lonCenter = MathUtils.normalizeLongitudeDeg(startPosition.longitude);\n        let lonSpan = 0;\n        let east = startPosition.longitude;\n        let west = startPosition.longitude;\n\n        const result: GeoCoordinates[] = [];\n        result.push(new GeoCoordinates(north, lonCenter));\n        for (let i = startIndex; i < points.length; i++) {\n            const p = GeoCoordinates.fromObject(points[i]);\n            if (p.latitude > north) {\n                north = p.latitude;\n            } else if (p.latitude < south) {\n                south = p.latitude;\n            }\n\n            let longitude = MathUtils.normalizeLongitudeDeg(p.longitude);\n\n            const relToCenter = MathUtils.angleDistanceDeg(lonCenter, longitude);\n            longitude = lonCenter - relToCenter;\n            if (relToCenter < 0 && -relToCenter > lonSpan / 2) {\n                east = Math.max(east, lonCenter - relToCenter);\n                lonSpan = east - west;\n                lonCenter = (east + west) / 2;\n            } else if (relToCenter > 0 && relToCenter > lonSpan / 2) {\n                west = Math.min(west, longitude);\n                lonSpan = east - west;\n                lonCenter = (east + west) / 2;\n            }\n            result.push(new GeoCoordinates(p.latitude, longitude));\n        }\n        return result;\n    }\n\n    /**\n     * @hidden\n     * @internal\n     *\n     * Given `cameraPos`, force all points that lie on non-visible sphere half to be \"near\" max\n     * possible viewable circle from given camera position.\n     *\n     * Assumes that shpere projection with world center is in `(0, 0, 0)`.\n     */\n    export function wrapWorldPointsToView(points: THREE.Vector3[], cameraPos: THREE.Vector3) {\n        const cameraPosNormalized = cameraPos.clone().normalize();\n        for (const point of points) {\n            if (point.angleTo(cameraPos) > Math.PI / 2) {\n                // Point is on other side of sphere, we \"clamp it to\" max possible viewable circle\n                // from given camera position\n\n                const pointLen = point.length();\n\n                point.projectOnPlane(cameraPosNormalized).setLength(pointLen);\n            }\n        }\n    }\n\n    /**\n     * @hidden\n     * @internal\n     *\n     * Return [[GeoPoints]] bounding [[GeoBox]] applicable for [[getFitBoundsDistance]].\n     *\n     * @returns [[GeoCoordinates]] set that covers `box`\n     */\n    export function geoBoxToGeoPoints(box: GeoBox): GeoCoordinates[] {\n        const center = box.center;\n        return [\n            new GeoCoordinates(box.north, box.west),\n            new GeoCoordinates(box.north, box.east),\n            new GeoCoordinates(center.latitude, box.west),\n            new GeoCoordinates(center.latitude, box.east),\n            new GeoCoordinates(box.south, box.west),\n            new GeoCoordinates(box.south, box.east),\n            new GeoCoordinates(box.north, center.longitude),\n            new GeoCoordinates(box.south, center.longitude)\n        ];\n    }\n\n    /**\n     * @hidden\n     * @internal\n     *\n     * Get minimal distance required for `camera` looking at `worldTarget` to cover `points`.\n     *\n     * All dimensions belong to world space.\n     *\n     * @param points points which shall are to be covered by view\n     *\n     * @param worldTarget readonly, world target of [[MapView]]\n     * @param camera readonly, camera with proper `position` and rotation set\n     * @returns new distance to camera to be used with [[MapView.lookAt]]\n     */\n    export function getFitBoundsDistance(\n        points: THREE.Vector3[],\n        worldTarget: THREE.Vector3,\n        camera: THREE.PerspectiveCamera\n    ): number {\n        const cameraRotationMatrix = new THREE.Matrix4();\n        cameraRotationMatrix.extractRotation(camera.matrixWorld);\n        const screenUpVector = new THREE.Vector3(0, 1, 0).applyMatrix4(cameraRotationMatrix);\n        const screenSideVector = new THREE.Vector3(1, 0, 0).applyMatrix4(cameraRotationMatrix);\n        const screenVertMidPlane = new THREE.Plane().setFromCoplanarPoints(\n            camera.position,\n            worldTarget,\n            worldTarget.clone().add(screenUpVector)\n        );\n        const screenHorzMidPlane = new THREE.Plane().setFromCoplanarPoints(\n            camera.position,\n            worldTarget,\n            worldTarget.clone().add(screenSideVector)\n        );\n\n        const cameraPos = cache.vector3[0];\n        cameraPos.copy(camera.position);\n\n        const halfVertFov = THREE.MathUtils.degToRad(camera.fov / 2);\n        const halfHorzFov = THREE.MathUtils.degToRad((camera.fov / 2) * camera.aspect);\n\n        // tan(fov/2)\n        const halfVertFovTan = 1 / Math.tan(halfVertFov);\n        const halfHorzFovTan = 1 / Math.tan(halfHorzFov);\n\n        const cameraToTarget = cache.vector3[1];\n        cameraToTarget\n            .copy(cameraPos)\n            .sub(worldTarget)\n            .negate();\n\n        const cameraToTargetNormalized = new THREE.Vector3().copy(cameraToTarget).normalize();\n\n        const offsetVector = new THREE.Vector3();\n\n        const cameraToPointOnRefPlane = new THREE.Vector3();\n        const pointOnRefPlane = new THREE.Vector3();\n\n        function checkAngle(\n            point: THREE.Vector3,\n            referencePlane: THREE.Plane,\n            maxAngle: number,\n            fovFactor: number\n        ) {\n            referencePlane.projectPoint(point, pointOnRefPlane);\n            cameraToPointOnRefPlane\n                .copy(cameraPos)\n                .sub(pointOnRefPlane)\n                .negate();\n\n            const viewAngle = cameraToTarget.angleTo(cameraToPointOnRefPlane);\n\n            if (viewAngle <= maxAngle) {\n                return;\n            }\n\n            const cameraToPointLen = cameraToPointOnRefPlane.length();\n            const cameraToTargetLen = cameraToTarget.length();\n\n            const newCameraDistance =\n                cameraToPointLen * (Math.sin(viewAngle) * fovFactor - Math.cos(viewAngle)) +\n                cameraToTargetLen;\n\n            offsetVector\n                .copy(cameraToTargetNormalized)\n                .multiplyScalar(cameraToTargetLen - newCameraDistance);\n\n            cameraPos.add(offsetVector);\n            cameraToTarget.sub(offsetVector);\n        }\n\n        for (const point of points) {\n            checkAngle(point, screenVertMidPlane, halfVertFov, halfVertFovTan);\n            checkAngle(point, screenHorzMidPlane, halfHorzFov, halfHorzFovTan);\n        }\n\n        return cameraToTarget.length();\n    }\n\n    /**\n     * @hidden\n     * @internal\n     *\n     * Paremeters for [[getFitBoundsLookAtParams]] function.\n     */\n    export interface FitPointParams {\n        tilt: number;\n        heading: number;\n        projection: Projection;\n        minDistance: number;\n        camera: THREE.PerspectiveCamera;\n    }\n\n    /**\n     * @hidden\n     * @internal\n     *\n     * Get [[LookAtParams]] that fit all `worldPoints` giving that [[MapView]] will target at\n     * `geoTarget`.\n     *\n     * @param geoTarget desired target (see [[MapView.target]]) as geo point\n     * @param worldTarget same as `geoTarget` but in world space\n     * @param worldPoints points we want to see\n     * @param params - other params derived from [[MapView]].\n     */\n    export function getFitBoundsLookAtParams(\n        geoTarget: GeoCoordinates,\n        worldTarget: THREE.Vector3,\n        worldPoints: THREE.Vector3[],\n        params: FitPointParams\n    ) {\n        const { tilt, heading, projection } = params;\n        const startDistance = params.minDistance;\n        const tmpCamera = params.camera.clone();\n\n        getCameraRotationAtTarget(projection, geoTarget, -heading, tilt, tmpCamera.quaternion);\n        getCameraPositionFromTargetCoordinates(\n            geoTarget,\n            startDistance,\n            -heading,\n            tilt,\n            projection,\n            tmpCamera.position\n        );\n        tmpCamera.updateMatrixWorld(true);\n\n        if (projection.type === ProjectionType.Spherical) {\n            wrapWorldPointsToView(worldPoints, tmpCamera.position);\n        }\n        const distance = getFitBoundsDistance(worldPoints, worldTarget, tmpCamera);\n        return {\n            target: geoTarget,\n            distance,\n            heading,\n            tilt\n        };\n    }\n\n    /**\n     * @deprecated use getCameraPositionFromTargetCoordinates instead\n     */\n    export function getCameraCoordinatesFromTargetCoordinates(\n        targetCoordinates: GeoCoordinates,\n        distance: number,\n        yawDeg: number,\n        pitchDeg: number,\n        mapView: MapView\n    ): GeoCoordinates {\n        return mapView.projection.unprojectPoint(\n            getCameraPositionFromTargetCoordinates(\n                targetCoordinates,\n                distance,\n                yawDeg,\n                pitchDeg,\n                mapView.projection,\n                cache.vector3[1]\n            )\n        );\n    }\n\n    /**\n     * Casts a ray in NDC space from the current map view and returns the intersection point of that\n     * ray wih the map in world space.\n     *\n     * @param mapView Instance of MapView.\n     * @param pointOnScreenXinNDC X coordinate in NDC space.\n     * @param pointOnScreenYinNDC Y coordinate in NDC space.\n     * @param elevation Optional param used to offset the ground plane. Used when wanting to pan\n     * based on a plane at some altitude. Necessary for example when panning with terrain.\n     *\n     * @returns Intersection coordinates, or `null` if raycast failed.\n     */\n    export function rayCastWorldCoordinates(\n        mapView: MapView,\n        pointOnScreenXinNDC: number,\n        pointOnScreenYinNDC: number,\n        elevation?: number\n    ): THREE.Vector3 | null {\n        const pointInNDCPosition = cache.vector3[0].set(\n            pointOnScreenXinNDC,\n            pointOnScreenYinNDC,\n            0\n        );\n        const cameraPos = cache.vector3[1].copy(mapView.camera.position);\n\n        cache.matrix4[0].extractRotation(mapView.camera.matrixWorld);\n\n        // Prepare the unprojection matrix which projects from NDC space to camera space\n        // and takes the current rotation of the camera into account.\n        cache.matrix4[1].multiplyMatrices(\n            cache.matrix4[0],\n            cache.matrix4[1].getInverse(mapView.camera.projectionMatrix)\n        );\n        // Unproject the point via the unprojection matrix.\n        const pointInCameraSpace = pointInNDCPosition.applyMatrix4(cache.matrix4[1]);\n        // Use the point in camera space as the vector towards this point.\n        rayCaster.set(cameraPos, pointInCameraSpace.normalize());\n        if (elevation !== undefined) {\n            groundPlane.constant -= elevation;\n            groundSphere.radius += elevation;\n        }\n\n        const worldPosition = new THREE.Vector3();\n        const result =\n            mapView.projection.type === ProjectionType.Planar\n                ? rayCaster.ray.intersectPlane(groundPlane, worldPosition)\n                : rayCaster.ray.intersectSphere(groundSphere, worldPosition);\n\n        if (elevation !== undefined) {\n            groundPlane.constant = 0;\n            groundSphere.radius = EarthConstants.EQUATORIAL_RADIUS;\n        }\n        return result;\n    }\n\n    /**\n     * Pans the camera according to the projection.\n     *\n     * @param mapView Instance of MapView.\n     * @param xOffset In world space. Value > 0 will pan the map to the right, value < 0 will pan\n     * the map to the left in default camera orientation.\n     * @param yOffset In world space. Value > 0 will pan the map upwards, value < 0 will pan the map\n     * downwards in default camera orientation.\n     */\n    export function panCameraAboveFlatMap(\n        mapView: MapView,\n        offsetX: number,\n        offsetY: number\n    ): void {\n        mapView.camera.position.x += offsetX;\n        mapView.camera.position.y += offsetY;\n    }\n\n    /**\n     * The function doing a pan in the spherical space when [[MapView]]'s active [[ProjectionType]]\n     * is spherical. In other words, the function that rotates the camera around the globe.\n     *\n     * @param mapView MapView instance.\n     * @param fromWorld Start vector representing the scene position of a geolocation.\n     * @param toWorld End vector representing the scene position of a geolocation.\n     */\n    export function panCameraAroundGlobe(\n        mapView: MapView,\n        fromWorld: THREE.Vector3,\n        toWorld: THREE.Vector3\n    ) {\n        cache.quaternions[0]\n            .setFromUnitVectors(fromWorld.normalize(), toWorld.normalize())\n            .inverse();\n        cache.matrix4[0].makeRotationFromQuaternion(cache.quaternions[0]);\n        mapView.camera.applyMatrix4(cache.matrix4[0]);\n        mapView.camera.updateMatrixWorld();\n    }\n\n    /**\n     * Rotates the camera by the given delta yaw and delta pitch. The pitch will be clamped to the\n     * maximum possible tilt to the new target, and under the horizon in sphere projection.\n     *\n     * @param mapView The [[MapView]] instance in use.\n     * @param deltaYawDeg Delta yaw in degrees.\n     * @param deltaPitchDeg Delta pitch in degrees.\n     * @param maxTiltAngleRad Max tilt angle in radians.\n     */\n    export function rotate(\n        mapView: MapView,\n        deltaYawDeg: number,\n        deltaPitchDeg: number = 0,\n        maxTiltAngleRad = Math.PI / 4\n    ) {\n        // 1. Apply yaw: rotate around the vertical axis.\n        mapView.camera.rotateOnWorldAxis(\n            mapView.projection.type === ProjectionType.Spherical\n                ? cache.vector3[0].copy(mapView.camera.position).normalize()\n                : cache.vector3[0].set(0, 0, 1),\n            THREE.MathUtils.degToRad(-deltaYawDeg)\n        );\n        mapView.camera.updateMatrixWorld();\n\n        // 2. Apply pitch: rotate around the camera's local X axis.\n        if (deltaPitchDeg === 0) {\n            return;\n        }\n        const pitch = MapViewUtils.extractAttitude(mapView, mapView.camera).pitch;\n        // `maxTiltAngle` is equivalent to a `maxPitchAngle` in flat projections.\n        let newPitch = THREE.MathUtils.clamp(\n            pitch + THREE.MathUtils.degToRad(deltaPitchDeg),\n            0,\n            maxTiltAngleRad\n        );\n        // In sphere projection, the value of a maximum pitch is smaller than the value of the\n        // maximum tilt, as the curvature of the surface adds up to it.\n        if (mapView.projection.type === ProjectionType.Spherical) {\n            // Deduce max pitch from max tilt. To this end the sine law of triangles is used below.\n            const maxPitch = Math.asin(\n                (EarthConstants.EQUATORIAL_RADIUS * Math.sin(Math.PI - maxTiltAngleRad)) /\n                    mapView.camera.position.length()\n            );\n            newPitch = Math.min(newPitch, maxPitch);\n        }\n        mapView.camera.rotateX(newPitch - pitch);\n    }\n\n    /**\n     * Computes the rotation of the camera according to yaw and pitch in degrees. The computations\n     * hinge on the current `projection` and `target`, because yaw and pitch are defined in\n     * tangent space of the target point.\n     *\n     * **Note:** `yaw == 0 && pitch == 0` will north up the map and you will look downwards onto the\n     * map.\n     *\n     * @param projection Current projection.\n     * @param target The camera target.\n     * @param yawDeg Yaw in degrees, counter-clockwise (as opposed to azimuth), starting north.\n     * @param pitchDeg Pitch in degrees.\n     */\n    export function getCameraRotationAtTarget(\n        projection: Projection,\n        target: GeoCoordinates,\n        yawDeg: number,\n        pitchDeg: number,\n        result: THREE.Quaternion = new THREE.Quaternion()\n    ): THREE.Quaternion {\n        const transform = cache.transforms[0];\n        projection.localTangentSpace(target, transform);\n\n        cache.matrix4[0].makeBasis(transform.xAxis, transform.yAxis, transform.zAxis);\n        result.setFromRotationMatrix(cache.matrix4[0]);\n\n        cache.quaternions[0].setFromAxisAngle(\n            cache.vector3[1].set(0, 0, 1),\n            THREE.MathUtils.degToRad(yawDeg)\n        );\n        cache.quaternions[1].setFromAxisAngle(\n            cache.vector3[1].set(1, 0, 0),\n            THREE.MathUtils.degToRad(pitchDeg)\n        );\n\n        result.multiply(cache.quaternions[0]);\n        result.multiply(cache.quaternions[1]);\n        return result;\n    }\n\n    /**\n     * Sets the rotation of the camera according to yaw and pitch in degrees. The computations hinge\n     * on the current projection and `geoCenter`, because yaw and pitch are defined in tangent\n     * space. In particular, `MapView#geoCenter` needs to be set before calling `setRotation`.\n     *\n     * **Note:** `yaw == 0 && pitch == 0` will north up the map and you will look downwards onto the\n     * map.\n     *\n     * @param mapView Instance of MapView.\n     * @param yawDeg Yaw in degrees, counter-clockwise (as opposed to azimuth), starting north.\n     * @param pitchDeg Pitch in degrees.\n     */\n    export function setRotation(mapView: MapView, yawDeg: number, pitchDeg: number) {\n        getCameraRotationAtTarget(\n            mapView.projection,\n            mapView.geoCenter,\n            yawDeg,\n            pitchDeg,\n            mapView.camera.quaternion\n        );\n    }\n\n    /**\n     * Extracts current camera tilt angle in radians.\n     *\n     * @param camera The [[Camera]] in use.\n     * @param projection The [[Projection]] used to convert between geo and world coordinates.\n     *\n     * @deprecated Use MapView.tilt\n     */\n    export function extractCameraTilt(camera: THREE.Camera, projection: Projection): number {\n        // For planar projections the camera target point local tangent is the same\n        // at every point on the ground (ignoring terrain fluctuations), so we may\n        // simply use inverted ground normal for tilt calculation. This simplifies\n        // the more generic calculus used for spherical projections.\n        if (projection.type === ProjectionType.Planar) {\n            const lookAt: THREE.Vector3 = camera.getWorldDirection(cache.vector3[0]).normalize();\n            const normal: THREE.Vector3 = projection\n                .surfaceNormal(camera.position, cache.vector3[1])\n                .negate();\n            const cosTheta = lookAt.dot(normal);\n            return Math.acos(THREE.MathUtils.clamp(cosTheta, -1, 1));\n        } else {\n            // Sanity check if new projection type is introduced.\n            assert(projection.type === ProjectionType.Spherical);\n            // tslint:disable-next-line: deprecation\n            const targetGeoCoords = MapViewUtils.getGeoTargetFromCamera(camera, projection);\n            // If focus point is lost we then expose maximum allowable tilt value.\n            if (targetGeoCoords !== null) {\n                return MapViewUtils.extractTiltAngleFromLocation(\n                    projection,\n                    camera,\n                    targetGeoCoords\n                );\n            } else {\n                logger.warn(\n                    \"MapView camera is pointing in the void, using maxTilt: \",\n                    MAX_TILT_RAD\n                );\n                return MAX_TILT_RAD;\n            }\n        }\n    }\n\n    /**\n     * Extracts yaw, pitch, and roll rotation in radians.\n     * - Yaw : Rotation around the vertical axis, counter-clockwise (as opposed to azimuth),\n     * starting north.\n     * - Pitch :Rotation around the horizontal axis.\n     * - Roll : Rotation around the view axis.\n     *\n     * @see https://en.wikipedia.org/wiki/Conversion_between_quaternions_and_Euler_angles\n     *\n     * @param options Subset of necessary [[MapView]] properties.\n     * @param object The [[THREE.Object3D]] instance to extract the rotations from.\n     */\n    export function extractAttitude(\n        options: { projection: Projection },\n        object: THREE.Object3D\n    ): Attitude {\n        // 1. Build the matrix of the tangent space of the object.\n        cache.vector3[1].setFromMatrixPosition(object.matrixWorld); // Ensure using world position.\n        options.projection.localTangentSpace(options.projection.unprojectPoint(cache.vector3[1]), {\n            xAxis: tangentSpace.x,\n            yAxis: tangentSpace.y,\n            zAxis: tangentSpace.z,\n            position: cache.vector3[0]\n        });\n        cache.matrix4[1].makeBasis(tangentSpace.x, tangentSpace.y, tangentSpace.z);\n\n        // 2. Change the basis of matrixWorld to the tangent space to get the new base axes.\n        cache.matrix4[0].getInverse(cache.matrix4[1]).multiply(object.matrixWorld);\n        space.x.setFromMatrixColumn(cache.matrix4[0], 0);\n        space.y.setFromMatrixColumn(cache.matrix4[0], 1);\n        space.z.setFromMatrixColumn(cache.matrix4[0], 2);\n\n        // 3. Deduce orientation from the base axes.\n        let yaw = 0;\n        let pitch = 0;\n        let roll = 0;\n\n        // Decompose rotation matrix into Z0 X Z1 Euler angles.\n        const d = space.z.dot(cache.vector3[1].set(0, 0, 1));\n        if (d < 1.0 - epsilon) {\n            if (d > -1.0 + epsilon) {\n                yaw = Math.atan2(space.z.x, -space.z.y);\n                pitch = Math.acos(space.z.z);\n                roll = Math.atan2(space.x.z, space.y.z);\n            } else {\n                // Looking bottom-up with space.z.z == -1.0\n                yaw = -Math.atan2(-space.y.x, space.x.x);\n                pitch = 180;\n                roll = 0;\n            }\n        } else {\n            // Looking top-down with space.z.z == 1.0\n            yaw = Math.atan2(-space.y.x, space.x.x);\n            pitch = 0.0;\n            roll = 0.0;\n        }\n\n        return {\n            yaw,\n            pitch,\n            roll\n        };\n    }\n\n    /**\n     * Gets the spherical coordinates in radian of the object to the coordinates of `point`.\n     *\n     * Note: this method can be used to get the direction that an object points to, when `location`\n     * is the target of that object, by adding PI to it. Otherwise it only returns the spherical\n     * coordinates of `object` in the tangent space of `location`.\n     *\n     * @param mapView The [[MapView]] instance to consider.\n     * @param object The object to get the coordinates from.\n     * @param location The reference point.\n     */\n    export function extractSphericalCoordinatesFromLocation(\n        mapView: MapView,\n        object: THREE.Object3D,\n        location: GeoCoordinates\n    ): { azimuth: number; tilt: number } {\n        mapView.projection.localTangentSpace(location, {\n            xAxis: tangentSpace.x,\n            yAxis: tangentSpace.y,\n            zAxis: tangentSpace.z,\n            position: cache.vector3[0]\n        });\n\n        let tilt = 0;\n        let azimuth = 0;\n\n        // Get point to object vector in `cache.vector3[1]` and deduce `tilt` from the angle with\n        // tangent Z.\n        cache.vector3[1]\n            .copy(object.position)\n            .sub(cache.vector3[0])\n            .normalize();\n        if (cache.vector3[1].dot(tangentSpace.z) > 1 - epsilon) {\n            // Top down view: the azimuth of the object would be opposite the yaw, and clockwise.\n            azimuth = Math.PI - extractAttitude(mapView, object).yaw;\n            // Wrap between -PI and PI.\n            azimuth = Math.atan2(Math.sin(azimuth), Math.cos(azimuth));\n            tilt = 0;\n            return { tilt, azimuth };\n        }\n        tilt = cache.vector3[1].angleTo(tangentSpace.z);\n        // Tilted view: the azimuth is the direction of the object from the origin.\n        cache.vector3[1]\n            .copy(object.position)\n            .sub(cache.vector3[0])\n            .projectOnPlane(tangentSpace.z)\n            .normalize();\n        azimuth = cache.vector3[1].angleTo(tangentSpace.y);\n        if (cache.vector3[1].cross(tangentSpace.y).dot(tangentSpace.z) < 0) {\n            azimuth = -azimuth;\n        }\n        return { tilt, azimuth };\n    }\n\n    /**\n     * Gets the tilt angle (in radians) of the object relative to the coordinates of `location`.\n     *\n     * Note: this method can be used to get the direction that an object points to, when `location`\n     * is the target of that object, by adding PI to it. Otherwise it only returns the tilt angle\n     * (in radians) of `object` in the tangent space of `location`.\n     *\n     * @param projection The [[Projection]] used when converting from geo to world coordinates.\n     * @param object The object to get the coordinates from.\n     * @param location The reference point.\n     */\n    export function extractTiltAngleFromLocation(\n        projection: Projection,\n        object: THREE.Object3D,\n        location: GeoCoordinates\n    ): number {\n        projection.localTangentSpace(location, {\n            xAxis: tangentSpace.x,\n            yAxis: tangentSpace.y,\n            zAxis: tangentSpace.z,\n            position: cache.vector3[0]\n        });\n\n        // Get point to object vector (dirVec) and compute the `tilt` as the angle with tangent Z.\n        const dirVec = cache.vector3[1].copy(object.position).sub(cache.vector3[0]);\n        const dirLen = dirVec.length();\n        if (dirLen < epsilon) {\n            logger.error(\"Can not calculate tilt for the zero length vector!\");\n            return 0;\n        }\n        dirVec.divideScalar(dirLen);\n\n        const cosTheta = dirVec.dot(tangentSpace.z);\n        if (cosTheta > 1 - epsilon) {\n            // Top down view.\n            return 0;\n        }\n        return Math.acos(THREE.MathUtils.clamp(cosTheta, -1, 1));\n    }\n\n    /**\n     * Get perspective camera frustum planes distances.\n     * @return all plane distances in helper object.\n     */\n    export function getCameraFrustumPlanes(\n        camera: THREE.PerspectiveCamera\n    ): { left: number; right: number; top: number; bottom: number; near: number; far: number } {\n        const near = camera.near;\n        const far = camera.far;\n        let top = (near * Math.tan(THREE.MathUtils.degToRad(0.5 * camera.fov))) / camera.zoom;\n        let height = 2 * top;\n        let width = camera.aspect * height;\n        let left = -0.5 * width;\n\n        const view = camera.view;\n        if (view !== null && view.enabled) {\n            const fullWidth = view.fullWidth;\n            const fullHeight = view.fullHeight;\n\n            left += (view.offsetX * width) / fullWidth;\n            top -= (view.offsetY * height) / fullHeight;\n            width *= view.width / fullWidth;\n            height *= view.height / fullHeight;\n        }\n\n        // Correct by skew factor\n        left += camera.filmOffset !== 0 ? (near * camera.filmOffset) / camera.getFilmWidth() : 0;\n\n        return {\n            left,\n            right: left + width,\n            top,\n            bottom: top - height,\n            near,\n            far\n        };\n    }\n\n    /**\n     * Casts a ray in NDC space from the current view of the camera and returns the intersection\n     * point of that ray against the map in geo coordinates. The return value can be `null` when\n     * the raycast is above the horizon.\n     *\n     * @param mapView Instance of MapView.\n     * @param pointOnScreenXNDC  Abscissa in NDC space.\n     * @param pointOnScreenYNDC  Ordinate in NDC space.\n     * @returns Intersection geo coordinates, or `null` if raycast is above the horizon.\n     */\n    export function rayCastGeoCoordinates(\n        mapView: MapView,\n        pointOnScreenXinNDC: number,\n        pointOnScreenYinNDC: number\n    ): GeoCoordinates | null {\n        const worldCoordinates = rayCastWorldCoordinates(\n            mapView,\n            pointOnScreenXinNDC,\n            pointOnScreenYinNDC\n        );\n\n        if (!worldCoordinates) {\n            return null;\n        }\n\n        return mapView.projection.unprojectPoint(worldCoordinates);\n    }\n\n    /**\n     * Calculates and returns the distance from the ground, which is needed to put the camera to\n     * this height, to see the size of the area that would be covered by one tile for the given zoom\n     * level.\n     *\n     * @param mapView Instance of MapView.\n     * @param options Subset of necessary [[MapView]] properties.\n     */\n    export function calculateDistanceToGroundFromZoomLevel(\n        options: { projection: Projection; focalLength: number; camera: THREE.Object3D },\n        zoomLevel: number\n    ): number {\n        const cameraPitch = extractAttitude(options, options.camera).pitch;\n        const tileSize = EarthConstants.EQUATORIAL_CIRCUMFERENCE / Math.pow(2, zoomLevel);\n        return ((options.focalLength * tileSize) / 256) * Math.cos(cameraPitch);\n    }\n\n    /**\n     * Calculates and returns the distance to the target point.\n     *\n     * @param options Necessary subset of MapView properties to compute the distance.\n     * @param zoomLevel The zoom level to get the equivalent height to.\n     */\n    export function calculateDistanceFromZoomLevel(\n        options: { focalLength: number },\n        zoomLevel: number\n    ): number {\n        const tileSize = EarthConstants.EQUATORIAL_CIRCUMFERENCE / Math.pow(2, zoomLevel);\n        return (options.focalLength * tileSize) / 256;\n    }\n\n    /**\n     * Calculates the zoom level, which corresponds to the current distance from\n     * camera to lookAt point.\n     * Therefore the zoom level is a `float` and not an `int`. The height of the camera can be in\n     * between zoom levels. By setting the zoom level, you change the height position of the camera\n     * in away that the field of view of the camera should be able to cover one tile for the given\n     * zoom level.\n     *\n     * As an example for this, when you have a tile of zoom level 14 in front of the camera and you\n     * set the zoom level of the camera to 14, then you are able to see the whole tile in front of\n     * you.\n     *\n     * @param options Subset of necessary [[MapView]] properties.\n     * @param distance The distance in meters, which are scene units in [[MapView]].\n     */\n    export function calculateZoomLevelFromDistance(\n        options: { focalLength: number; minZoomLevel: number; maxZoomLevel: number },\n        distance: number\n    ): number {\n        const tileSize = (256 * distance) / options.focalLength;\n        const zoomLevel = THREE.MathUtils.clamp(\n            Math.log2(EarthConstants.EQUATORIAL_CIRCUMFERENCE / tileSize),\n            options.minZoomLevel,\n            options.maxZoomLevel\n        );\n        // Round to avoid modify the zoom level without distance change, with the imprecision\n        // introduced by ray-casting and distance calculus.\n        // NOTE: Using 10 fractional digits as rounding precision, this solves HARP-8523.\n        return roundZoomLevel(zoomLevel);\n    }\n\n    /**\n     * Translates a linear clip-space distance value to the actual value stored in the depth buffer.\n     * This is useful as the depth values are not stored in the depth buffer linearly, and this can\n     * lead into confusing behavior when not taken into account.\n     *\n     * @param clipDistance Distance from the camera in clip space (range: [0, 1]).\n     * @param camera Camera applying the perspective projection.\n     */\n    export function calculateDepthFromClipDistance(\n        clipDistance: number,\n        camera: THREE.Camera\n    ): number {\n        const perspCam = camera as THREE.PerspectiveCamera;\n        const cameraRange = perspCam.far - perspCam.near;\n        const viewSpaceDistance = clipDistance * perspCam.far;\n\n        return (1.0 - perspCam.near / viewSpaceDistance) * (perspCam.far / cameraRange);\n    }\n\n    /**\n     * Translates a linear distance value [0..1], where 1 is the distance to the far plane, into\n     * [0..cameraFar].\n     *\n     * @param distance Distance from the camera (range: [0, 1]).\n     * @param camera Camera applying the perspective projection.\n     */\n    export function cameraToWorldDistance(distance: number, camera: THREE.Camera): number {\n        const perspCam = camera as THREE.PerspectiveCamera;\n        return distance * perspCam.far;\n    }\n\n    /**\n     * Calculates vertical field of view for given horizontal field of vision and aspect ratio.\n     *\n     * @param hFov Horizontal field of view in rad.\n     * @param aspect Aspect ratio.\n     */\n    export function calculateVerticalFovByHorizontalFov(hFov: number, aspect: number): number {\n        return 2 * Math.atan(Math.tan(hFov / 2) / aspect);\n    }\n\n    /**\n     * Calculates horizontal field of view for given vertical field of vision and aspect ratio.\n     *\n     * @param hFov Vertical field of view in rad.\n     * @param aspect Aspect ratio.\n     */\n    export function calculateHorizontalFovByVerticalFov(vFov: number, aspect: number): number {\n        return 2 * Math.atan(Math.tan(vFov / 2) * aspect);\n    }\n\n    /**\n     * Calculates the focal length based on the vertical FOV and height.\n     *\n     * @param vFov Vertical field of view in rad.\n     * @param height Height of canvas in pixels.\n     */\n    export function calculateFocalLengthByVerticalFov(vFov: number, height: number): number {\n        return height / 2 / Math.tan(vFov / 2);\n    }\n\n    /**\n     * Calculates the vertical field of view based on the focal length and the height.\n     *\n     * @param focalLength Focal length in pixels (see [[calculateFocalLengthByVerticalFov]])\n     * @param height Height of canvas in pixels.\n     */\n    export function calculateFovByFocalLength(focalLength: number, height: number): number {\n        return THREE.MathUtils.radToDeg(2 * Math.atan(height / 2 / focalLength));\n    }\n\n    /**\n     * Calculates object's screen size based on the focal length and it's camera distance.\n     *\n     * @param focalLength Focal length in pixels (see [[calculateFocalLengthByVerticalFov]])\n     * @param distance Object distance in world space.\n     * @param worldSize Object size in world space.\n     * @return object size in screen space.\n     */\n    export function calculateScreenSizeByFocalLength(\n        focalLength: number,\n        distance: number,\n        worldSize: number\n    ): number {\n        return (focalLength * worldSize) / distance;\n    }\n\n    /**\n     * Calculates object's world size based on the focal length and it's camera distance.\n     *\n     * @param focalLength Focal length in pixels (see [[calculateFocalLengthByVerticalFov]])\n     * @param distance Object distance in world space.\n     * @param screenSize Object size in screen space.\n     * @return object size in world space.\n     */\n    export function calculateWorldSizeByFocalLength(\n        focalLength: number,\n        distance: number,\n        screenSize: number\n    ): number {\n        return (distance * screenSize) / focalLength;\n    }\n\n    /**\n     * Function performs zoom level rounding to 10-th place after comma.\n     *\n     * Inaccuracies on the 13-th fractional digit may be observed when doing small\n     * tilt changes, thus causing the zoom level to be discretized to smaller value then real\n     * one, for example when acquiring tiles storage level or visibility level.\n     * This causes zoom level jitter and displaying wrong tile set (with different zoom level)\n     * for a certain camera arrangements (angles).\n     *\n     * @note Rounding function is used to limit zoom level jitter and fluctuations.\n     *\n     * @param zoomLevel Input zoom level from based on camera distance.\n     * @return The resulting zoom level rounded to 10-th place after comma.\n     */\n    export function roundZoomLevel(zoomLevel: number) {\n        // Here 10 digits gives quite big safety margin, yet still giving enough precision for\n        // zoom level based interpolations.\n        return Math.round(zoomLevel * 10e10) / 10e10;\n    }\n\n    /**\n     * Computes estimate for size of a THREE.Object3D object and its children. Shared materials\n     * and/or attributes will be counted multiple times.\n     *\n     * @param object The mesh object to evaluate\n     * @param size The [[MemoryUsage]] to update.\n     * @param visitedObjects Optional map to store large objects that could be shared.\n     *\n     * @returns Estimate of object size in bytes for heap and GPU.\n     */\n    export function estimateObject3dSize(\n        object: THREE.Object3D,\n        parentSize?: MemoryUsage,\n        visitedObjects?: Map<string, boolean>\n    ): MemoryUsage {\n        const size =\n            parentSize !== undefined\n                ? parentSize\n                : {\n                      heapSize: 0,\n                      gpuSize: 0\n                  };\n\n        if (visitedObjects === undefined) {\n            visitedObjects = new Map();\n        }\n\n        estimateMeshSize(object, size, visitedObjects);\n\n        if (object.children.length > 0) {\n            for (const child of object.children) {\n                estimateObject3dSize(child, size, visitedObjects);\n            }\n        }\n        return size;\n    }\n\n    /**\n     * Check if tiles or other content is currently being loaded.\n     *\n     * This method can be removed once HARP-7932 is implemented.\n     *\n     * @returns `true` if MapView has visible tiles or other content that is being loaded.\n     */\n    export function mapViewIsLoading(mapView: MapView) {\n        let numTilesLoading = 0;\n\n        for (const tileList of mapView.visibleTileSet.dataSourceTileList) {\n            numTilesLoading += tileList.numTilesLoading;\n\n            for (const tile of tileList.visibleTiles) {\n                if (tile.tileLoader !== undefined && !tile.tileLoader.isFinished) {\n                    numTilesLoading++;\n                }\n                if (tile.tileGeometryLoader !== undefined && !tile.tileGeometryLoader.isFinished) {\n                    numTilesLoading++;\n                }\n            }\n        }\n        let isLoading = numTilesLoading > 0;\n\n        if (mapView.textElementsRenderer !== undefined) {\n            isLoading = isLoading || mapView.textElementsRenderer.loading;\n        }\n\n        isLoading =\n            isLoading ||\n            !mapView.poiTableManager.finishedLoading ||\n            !mapView.visibleTileSet.allVisibleTilesLoaded;\n\n        return isLoading;\n    }\n\n    function estimateTextureSize(\n        texture: THREE.Texture | null,\n        objectSize: MemoryUsage,\n        visitedObjects: Map<string, boolean>\n    ): void {\n        if (texture === null || texture === undefined || texture.image === undefined) {\n            return;\n        }\n\n        if (texture.uuid !== undefined && visitedObjects.get(texture.uuid) === true) {\n            return;\n        }\n        visitedObjects.set(texture.uuid, true);\n\n        // May be HTMLImage or ImageData\n        const image = texture.image;\n        // Assuming RGBA\n        const imageBytes = 4 * image.width * image.height;\n        objectSize.heapSize += imageBytes;\n        objectSize.gpuSize += imageBytes;\n    }\n\n    function estimateMaterialSize(\n        material: THREE.Material,\n        objectSize: MemoryUsage,\n        visitedObjects: Map<string, boolean>\n    ): void {\n        if (material.uuid !== undefined && visitedObjects.get(material.uuid) === true) {\n            return;\n        }\n        visitedObjects.set(material.uuid, true);\n\n        if (\n            material instanceof THREE.RawShaderMaterial ||\n            material instanceof THREE.ShaderMaterial\n        ) {\n            const rawMaterial = material;\n            for (const name in rawMaterial.uniforms) {\n                if (rawMaterial.uniforms[name] !== undefined) {\n                    const uniform = rawMaterial.uniforms[name];\n                    if (uniform instanceof THREE.Texture) {\n                        estimateTextureSize(uniform, objectSize, visitedObjects);\n                    }\n                }\n            }\n        } else if (\n            material instanceof THREE.MeshBasicMaterial ||\n            material instanceof MapMeshBasicMaterial\n        ) {\n            const meshMaterial = material;\n            estimateTextureSize(meshMaterial.map, objectSize, visitedObjects);\n            estimateTextureSize(meshMaterial.aoMap, objectSize, visitedObjects);\n            estimateTextureSize(meshMaterial.specularMap, objectSize, visitedObjects);\n            estimateTextureSize(meshMaterial.alphaMap, objectSize, visitedObjects);\n            estimateTextureSize(meshMaterial.envMap, objectSize, visitedObjects);\n        } else if (material instanceof MapMeshStandardMaterial) {\n            const standardMaterial = material;\n\n            estimateTextureSize(standardMaterial.map, objectSize, visitedObjects);\n            estimateTextureSize(standardMaterial.lightMap, objectSize, visitedObjects);\n            estimateTextureSize(standardMaterial.aoMap, objectSize, visitedObjects);\n            estimateTextureSize(standardMaterial.emissiveMap, objectSize, visitedObjects);\n            estimateTextureSize(standardMaterial.bumpMap, objectSize, visitedObjects);\n            estimateTextureSize(standardMaterial.normalMap, objectSize, visitedObjects);\n            estimateTextureSize(standardMaterial.displacementMap, objectSize, visitedObjects);\n            estimateTextureSize(standardMaterial.roughnessMap, objectSize, visitedObjects);\n            estimateTextureSize(standardMaterial.metalnessMap, objectSize, visitedObjects);\n            estimateTextureSize(standardMaterial.alphaMap, objectSize, visitedObjects);\n            estimateTextureSize(standardMaterial.envMap, objectSize, visitedObjects);\n        } else if (\n            material instanceof THREE.LineBasicMaterial ||\n            material instanceof THREE.LineDashedMaterial\n        ) {\n            // Nothing to be done here\n        } else {\n            logger.warn(\"estimateMeshSize: unidentified material: \", material);\n        }\n    }\n\n    function estimateAttributeSize(\n        attribute: any,\n        attrName: string,\n        objectSize: MemoryUsage,\n        visitedObjects: Map<string, boolean>\n    ): void {\n        // Attributes (apparently) do not have their uuid set up.\n        if (attribute.uuid === undefined) {\n            attribute.uuid = THREE.MathUtils.generateUUID();\n        }\n\n        if (visitedObjects.get(attribute.uuid) === true) {\n            return;\n        }\n        visitedObjects.set(attribute.uuid, true);\n\n        let attrBytes = 0;\n        let bytesPerElement = 4;\n        if (attribute.array.BYTES_PER_ELEMENT !== undefined) {\n            bytesPerElement = attribute.array.BYTES_PER_ELEMENT;\n        }\n        if (\n            attribute instanceof THREE.InterleavedBufferAttribute ||\n            attribute instanceof THREE.BufferAttribute\n        ) {\n            attrBytes = bytesPerElement * attribute.count * attribute.itemSize;\n        } else {\n            logger.warn(\"estimateMeshSize: unidentified attribute: \", attrName);\n        }\n\n        objectSize.heapSize += attrBytes + MINIMUM_ATTRIBUTE_SIZE_ESTIMATION;\n        objectSize.gpuSize += attrBytes;\n    }\n\n    function estimateGeometrySize(\n        geometry: THREE.Geometry | THREE.BufferGeometry,\n        objectSize: MemoryUsage,\n        visitedObjects: Map<string, boolean>\n    ): void {\n        const isNewObject =\n            geometry.uuid === undefined || visitedObjects.get(geometry.uuid) !== true;\n\n        if (!isNewObject) {\n            return;\n        }\n        visitedObjects.set(geometry.uuid, true);\n\n        let bufferGeometry: THREE.BufferGeometry | undefined;\n\n        if (geometry instanceof THREE.Geometry) {\n            // Each vertex is represented as 3 floats vector (24 bytes).\n            objectSize.heapSize += geometry.vertices.length * 24;\n            // Face: 3 indices (24 byte), 1 normal (3 floats = 24). Vertex normals and\n            // colors are not counted here.\n            objectSize.heapSize += geometry.faces.length * (24 + 24);\n            // Additionally, the internal _bufferGeometry is also counted:\n            bufferGeometry = (geometry as any)._bufferGeometry;\n        } else if (geometry instanceof THREE.BufferGeometry) {\n            bufferGeometry = geometry;\n        }\n\n        if (bufferGeometry === undefined) {\n            // Nothing more to calculate.\n            return;\n        }\n\n        const attributes = bufferGeometry.attributes;\n        if (attributes === undefined) {\n            logger.warn(\"estimateGeometrySize: unidentified geometry: \", geometry);\n            return;\n        }\n\n        for (const property in attributes) {\n            if (attributes[property] !== undefined) {\n                estimateAttributeSize(attributes[property], property, objectSize, visitedObjects);\n            }\n        }\n        if (bufferGeometry.index !== null) {\n            estimateAttributeSize(bufferGeometry.index, \"index\", objectSize, visitedObjects);\n        }\n    }\n\n    function estimateMeshSize(\n        object: THREE.Object3D,\n        objectSize: MemoryUsage,\n        visitedObjects: Map<string, boolean>\n    ): void {\n        if (!object.isObject3D || object instanceof THREE.Scene) {\n            return;\n        }\n\n        if (object.uuid !== undefined && visitedObjects.get(object.uuid) === true) {\n            return;\n        }\n        visitedObjects.set(object.uuid, true);\n\n        if ((object as any).isMesh || (object as any).isLine || (object as any).isPoints) {\n            // Estimated minimum impact on heap.\n            let heapSize = MINIMUM_OBJECT3D_SIZE_ESTIMATION;\n            const gpuSize = 0;\n\n            // Cast to LodMesh class which contains the minimal required properties sub-set.\n            const mesh = object as LodMesh;\n\n            // Calculate material(s) impact.\n            if (mesh.material !== undefined) {\n                if (Array.isArray(mesh.material)) {\n                    const materials = mesh.material as THREE.Material[];\n                    for (const material of materials) {\n                        estimateMaterialSize(material, objectSize, visitedObjects);\n                    }\n                } else {\n                    const material = mesh.material as THREE.Material;\n                    estimateMaterialSize(material, objectSize, visitedObjects);\n                }\n            }\n\n            // Calculate cost of geometry.\n            if (mesh.geometries !== undefined) {\n                for (const geometry of mesh.geometries) {\n                    estimateGeometrySize(geometry, objectSize, visitedObjects);\n                }\n            } else if (mesh.geometry !== undefined) {\n                estimateGeometrySize(mesh.geometry, objectSize, visitedObjects);\n            }\n\n            // Add info that is required for picking (parts of) objects and match them to\n            // the featureID in the map data.\n            const featureData: TileFeatureData | undefined =\n                object.userData !== undefined\n                    ? (object.userData.feature as TileFeatureData)\n                    : undefined;\n\n            if (featureData !== undefined) {\n                heapSize += getFeatureDataSize(featureData);\n            }\n\n            objectSize.heapSize += heapSize;\n            objectSize.gpuSize += gpuSize;\n        } else {\n            logger.warn(\"estimateMeshSize: unidentified object\", object);\n        }\n    }\n\n    /**\n     * Gets language list used by the browser\n     *\n     * @returns Array of iso language codes\n     */\n    export function getBrowserLanguages(): string[] | undefined {\n        if (navigator.languages !== undefined && navigator.languages.length > 0) {\n            const languageList = [];\n            for (const lang of navigator.languages) {\n                languageList.push(getIsoLanguageCode(lang));\n            }\n            return languageList;\n        }\n        if (navigator.language !== undefined) {\n            return [getIsoLanguageCode(navigator.language)];\n        }\n        return undefined;\n    }\n\n    /**\n     * Gets ISO-639-1 language code from browser's code (ex. en for en-US)\n     */\n    function getIsoLanguageCode(language: string) {\n        return language.substring(0, 2);\n    }\n}\n\n/** @hidden */\nconst powerOfTwo = [\n    0x1,\n    0x2,\n    0x4,\n    0x8,\n    0x10,\n    0x20,\n    0x40,\n    0x80,\n    0x100,\n    0x200,\n    0x400,\n    0x800,\n    0x1000,\n    0x2000,\n    0x4000,\n    0x8000,\n    0x10000,\n    0x20000,\n    0x40000,\n    0x80000,\n    0x100000,\n    0x200000,\n    0x400000,\n    0x800000,\n    0x1000000,\n    0x2000000,\n    0x4000000,\n    0x8000000,\n    0x10000000,\n    0x20000000,\n    0x40000000,\n    0x80000000,\n    0x100000000,\n    0x200000000,\n    0x400000000,\n    0x800000000,\n    0x1000000000,\n    0x2000000000,\n    0x4000000000,\n    0x8000000000,\n    0x10000000000,\n    0x20000000000,\n    0x40000000000,\n    0x80000000000,\n    0x100000000000,\n    0x200000000000,\n    0x400000000000,\n    0x800000000000,\n    0x1000000000000,\n    0x2000000000000,\n    0x4000000000000,\n    0x8000000000000,\n    0x10000000000000\n];\n\nexport namespace TileOffsetUtils {\n    /**\n     * Creates a unique key based on the supplied parameters. Note, the uniqueness is bounded by the\n     * bitshift. The [[TileKey.mortonCode()]] supports currently up to 26 levels (this is because\n     * 26*2 equals 52, and 2^52 is the highest bit that can be set in an integer in Javascript), the\n     * bitshift reduces this accordingly, so given the default bitshift of four, we support up to 24\n     * levels. Given the current support up to level 19 this should be fine.\n     *\n     * @param tileKey The unique [[TileKey]] from which to compute the unique key.\n     * @param offset How much the given [[TileKey]] is offset\n     * @param bitshift How much space we have to store the offset. The default of 4 means we have\n     *      enough space to store 16 unique tiles in a single view.\n     */\n    export function getKeyForTileKeyAndOffset(\n        tileKey: TileKey,\n        offset: number,\n        bitshift: number = 4\n    ) {\n        const shiftedOffset = getShiftedOffset(offset, bitshift);\n        return tileKey.mortonCode() + shiftedOffset;\n    }\n\n    /**\n     * Extracts the offset and morton key from the given key (must be created by:\n     * [[getKeyForTileKeyAndOffset]])\n     *\n     * Note, we can't use bitshift operators in Javascript because they work on 32-bit integers, and\n     * would truncate the numbers, hence using powers of two.\n     *\n     * @param key Key to extract offset and morton key.\n     * @param bitshift How many bits to shift by, must be the same as was used when creating the\n     * key.\n     */\n    export function extractOffsetAndMortonKeyFromKey(key: number, bitshift: number = 4) {\n        let offset = 0;\n        let mortonCode = key;\n        let i = 0;\n        // Compute the offset\n        for (; i < bitshift; i++) {\n            // Note, we use 52, because 2^53-1 is the biggest value, the highest value\n            // that can be set is the bit in the 52th position.\n            const num = powerOfTwo[52 - i];\n            if (mortonCode >= num) {\n                mortonCode -= num;\n                offset += powerOfTwo[bitshift - 1 - i];\n            }\n        }\n        // We subtract half of the total amount, this undoes what is computed in getShiftedOffset\n        offset -= powerOfTwo[bitshift - 1];\n        return { offset, mortonCode };\n    }\n\n    /**\n     * Returns the key of the parent. Key must have been computed using the function\n     * [[getKeyForTileKeyAndOffset]].\n     *\n     * @param calculatedKey Key to decompose\n     * @param bitshift Bit shift used to create the key\n     */\n    export function getParentKeyFromKey(calculatedKey: number, bitshift: number = 4) {\n        const { offset, mortonCode } = extractOffsetAndMortonKeyFromKey(calculatedKey, bitshift);\n        const parentTileKey = TileKey.fromMortonCode(TileKey.parentMortonCode(mortonCode));\n        return getKeyForTileKeyAndOffset(parentTileKey, offset, bitshift);\n    }\n\n    /**\n     * Packs the supplied offset into the high bits, where the highbits are between 2^52 and\n     * 2^(52-bitshift).\n     *\n     * Offsets are wrapped around, to fit in the offsetBits. In practice, this doesn't really\n     * matter, this is primarily used to find a unique id, if there is an offset 10, which is\n     * wrapped to 2, it doesn't matter, because the offset of 10 is still stored in the tile.\n     * What can be a problem though is that the cache gets filled up and isn't emptied.\n     *\n     * Note, because bit shifting in JavaScript works on 32 bit integers, we use powers of 2 to set\n     * the high bits instead.\n     *\n     * @param offset Offset to pack into the high bits.\n     * @param offsetBits How many bits to use to pack the offset.\n     */\n    function getShiftedOffset(offset: number, offsetBits: number = 4) {\n        let result = 0;\n        const totalOffsetsToStore = powerOfTwo[offsetBits];\n        //Offsets are stored by adding half 2 ^ (bitshift - 1), i.e.half of the max amount stored,\n        //and then wrapped based on this value.For example, given a bitshift of 3, and an offset -\n        //3, it would have 4 added(half of 2 ^ 3), and be stored as 1, 3 would have 4 added and be\n        //stored as 7, 4 would be added with 4 and be stored as 0 (it wraps around).\n        offset += totalOffsetsToStore / 2;\n        while (offset < 0) {\n            offset += totalOffsetsToStore;\n        }\n        while (offset >= totalOffsetsToStore) {\n            offset -= totalOffsetsToStore;\n        }\n        // Offset is now a number between >= 0 and < totalOffsetsToStore\n        for (let i = 0; i < offsetBits && offset > 0; i++) {\n            // tslint:disable: no-bitwise\n            // 53 is used because 2^53-1 is the biggest number that Javascript can represent as an\n            // integer safely.\n            if (offset & 0x1) {\n                result += powerOfTwo[53 - offsetBits + i];\n            }\n            offset >>>= 1;\n            // tslint:enable: no-bitwise\n        }\n        assert(offset === 0);\n        return result;\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nexport class EarthConstants {\n    /** The equatorial circumference in meters. */\n    static EQUATORIAL_CIRCUMFERENCE: number = 40075016.6855784861531768177614;\n\n    /** The equatorial radius in meters. */\n    static EQUATORIAL_RADIUS: number = 6378137.0;\n\n    /** The lowest point on earth (Dead Sea) in meters. */\n    static MIN_ELEVATION: number = -433.0;\n\n    /** The highest point on earth (Mt. Everest) in meters. */\n    static MAX_ELEVATION: number = 8848.0;\n\n    /** The highest artificial structure (building) on earth, Burj Khalifa tower in Dubai */\n    static MAX_BUILDING_HEIGHT: number = 828;\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { Vector3Like } from \"./Vector3Like\";\n\n/**\n * An interface representing bounding box in world coordinates.\n */\nexport interface Box3Like {\n    /**\n     * The minimum position in world coordinates of this bounding box.\n     */\n    readonly min: Vector3Like;\n\n    /**\n     * The maximum position in world coordinates of this bounding box.\n     */\n    readonly max: Vector3Like;\n}\n\n/**\n * Returns true if the given object implements the [[Box3Like]] interface.\n *\n * @param object A valid object.\n */\nexport function isBox3Like(object: {}): object is Box3Like {\n    const box3 = object as Partial<Box3Like>;\n    return box3.min !== undefined && box3.max !== undefined;\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { TransformLike } from \"./TransformLike\";\nimport { Vector3Like } from \"./Vector3Like\";\n\n/**\n * The interface [[OrientedBox3Like]] is used to represent oriented bounding box.\n */\nexport interface OrientedBox3Like extends TransformLike {\n    /**\n     * The extents of this bounding box.\n     */\n    readonly extents: Vector3Like;\n}\n\n/**\n * Returns true if the given object implements the interface [[OrientedBox3Like]].\n *\n * @param object The object.\n */\nexport function isOrientedBox3Like(object: {}): object is OrientedBox3Like {\n    const obb = object as Partial<OrientedBox3Like>;\n    return (\n        obb.position !== undefined &&\n        obb.xAxis !== undefined &&\n        obb.yAxis !== undefined &&\n        obb.zAxis !== undefined &&\n        obb.extents !== undefined\n    );\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { GeoBox } from \"../coordinates/GeoBox\";\nimport { GeoCoordinates } from \"../coordinates/GeoCoordinates\";\nimport { GeoCoordinatesLike } from \"../coordinates/GeoCoordinatesLike\";\nimport { Box3Like } from \"../math/Box3Like\";\nimport { MathUtils } from \"../math/MathUtils\";\nimport { OrientedBox3Like } from \"../math/OrientedBox3Like\";\nimport { TransformLike } from \"../math/TransformLike\";\nimport { Vector3Like } from \"../math/Vector3Like\";\n\n/**\n * The type of projection.\n */\nexport enum ProjectionType {\n    /**\n     * A type of [Projection] with zero curvature.\n     */\n    Planar,\n\n    /**\n     * A spherical [Projection].\n     */\n    Spherical\n}\n\n/**\n * `Projection` is used to convert positions from geo coordinates to world coordinates and vice\n * versa.\n */\nexport abstract class Projection {\n    /**\n     * The type of this [Projection].\n     */\n    abstract get type(): ProjectionType;\n\n    /**\n     * Constructs the Projection\n     *\n     * @param unitScale How to transform the projected coordinates to world units.\n     */\n    constructor(readonly unitScale: number) {\n        //Prevent empty constructor error.\n    }\n\n    /**\n     * Returns the world extents in world coordinates.\n     *\n     * @param minElevation The minimum elevation in meters.\n     * @param maxElevation The maximum elevation in meters.\n     * @param result The optional object that will be used to create the resulting bounding box.\n     */\n    abstract worldExtent<Bounds extends Box3Like>(\n        minElevation: number,\n        maxElevation: number,\n        result?: Bounds\n    ): Bounds;\n\n    /**\n     * Projects a point from geo coordinates (latitude, longitude, altitude) to world coordinates\n     * (x,y,z).\n     *\n     * Example:\n     * ```typescript\n     * const worldPos = new THREE.Vector3();\n     * projection.projectPoint(geoPos, worldPos);\n     * ```\n     *\n     * @param geoPoint The position in geo coordinates.\n     * @param result The optional object used to store the resulting world position, result must\n     * implement [[Vector3Like]].\n     */\n    abstract projectPoint<WorldCoordinates extends Vector3Like>(\n        geoPoint: GeoCoordinatesLike,\n        result?: WorldCoordinates\n    ): WorldCoordinates;\n\n    /**\n     * Gets the [[TransformLike]] of the local tangent space at the given geo coordinates.\n     *\n     * @param geoPoint The geo coordinates.\n     * @param result The [[TransformLike]].\n     */\n    localTangentSpace(geoPoint: GeoCoordinatesLike, result: TransformLike): TransformLike {\n        this.projectPoint(geoPoint, result.position);\n        MathUtils.newVector3(1, 0, 0, result.xAxis);\n        MathUtils.newVector3(0, 1, 0, result.yAxis);\n        MathUtils.newVector3(0, 0, 1, result.zAxis);\n        return result;\n    }\n\n    /**\n     * Returns the geo coordinates (latitude, longitude, altitude) from the given world position\n     * (x,y,z).\n     *\n     * Example:\n     * ```typescript\n     * const geoPos = projection.unprojectPoint(worldPos);\n     * console.log(geoPos.latitude, geoPos.longitude, geoPos.altitude);\n     * ```\n     *\n     * @param worldPoint The position in world coordinates.\n     */\n    abstract unprojectPoint(worldPoint: Vector3Like): GeoCoordinates;\n\n    /**\n     * Returns the altitude at the given world position (x,y,z) in meters.\n     *\n     * @param worldPoint The position in world coordinates.\n     */\n    abstract unprojectAltitude(worldPoint: Vector3Like): number;\n\n    /**\n     * Projects bounds in geo coordinates to a bounding box in world coordinates.\n     *\n     * Example:\n     * ```typescript\n     * const bounds = projection.projectBox(geoBox);\n     * console.log(bounds.min, bounds.max);\n     * ```\n     *\n     * @param geoBox The bounding box in geo coordinates.\n     */\n    abstract projectBox(geoBox: GeoBox): Box3Like;\n\n    /**\n     * Projects bounds in geo coordinates to a bounding box in world coordinates.\n     *\n     * Example:\n     * ```typescript\n     * const bounds = projection.projectBox(geoBox, new THREE.Box3());\n     * console.log(bounds.min, bounds.max);\n     * ```\n     *\n     * @param geoBox The bounding box in geo coordinates.\n     * @param result The resulting [[OrientedBox3Like]].\n     */\n    abstract projectBox<WorldBoundingBox extends Box3Like | OrientedBox3Like>(\n        geoBox: GeoBox,\n        result: WorldBoundingBox\n    ): WorldBoundingBox;\n\n    /**\n     * Converts a bounding box in world coordinates to a bounding box in geo coordinates.\n     *\n     * Example:\n     * ```typescript\n     * const geoPos = projection.unprojectPoint(worldPos);\n     * console.log(geoPos.latitude, geoPos.longitude, geoPos.altitude);\n     * ```\n     *\n     * @param worldBox The bounding box in world coordinates.\n     */\n    abstract unprojectBox(worldBox: Box3Like): GeoBox;\n\n    /**\n     * Returns the scaling factor that must be used to convert the units used by `worldPoint` to\n     * meters.\n     *\n     * @param worldPoint The position in world coordinates.\n     */\n    abstract getScaleFactor(worldPoint: Vector3Like): number;\n\n    /**\n     * Returns the surface normal at the given world position.\n     *\n     * @param worldPoint The position in world coordinates.\n     */\n    abstract surfaceNormal(worldPoint: Vector3Like): Vector3Like;\n\n    /**\n     * Returns the surface normal at the given world position.\n     *\n     * @param worldPoint The position in world coordinates.\n     * @returns The resulting normal vector.\n     */\n    abstract surfaceNormal<Normal extends Vector3Like>(\n        worldPoint: Vector3Like,\n        result: Normal\n    ): Normal;\n\n    /**\n     * Returns the signed distance between the given coordinates and\n     * the closest point on the surface.\n     *\n     * @param worldPoint The position in world coordinates.\n     */\n    abstract groundDistance(worldPoint: Vector3Like): number;\n\n    /**\n     * Scales the given world coordinates to the surface.\n     *\n     * @param worldPoint The position in world coordinates.\n     */\n    abstract scalePointToSurface(worldPoint: Vector3Like): Vector3Like;\n\n    /**\n     * Reproject a world position from the given source [[Projection]].\n     *\n     * @param sourceProjection The source projection.\n     * @param worldPos A valid world position for the given source projection.\n     * @returns The world position reprojected using this [[Projection]].\n     */\n    reprojectPoint(sourceProjection: Projection, worldPos: Vector3Like): Vector3Like;\n\n    /**\n     * Reproject a world position from the given source [[Projection]].\n     *\n     * @param sourceProjection The source projection.\n     * @param worldPos A valid position in the world space defined by the source projection.\n     * @param result The resulting position reprojected using this [[Projection]].\n     */\n    reprojectPoint<WorldCoordinates extends Vector3Like>(\n        sourceProjection: Projection,\n        worldPos: Vector3Like,\n        result: WorldCoordinates\n    ): typeof result;\n\n    /**\n     * Reproject a world position from the given source [[Projection]].\n     * Implementations should be aware of worldPos and result may be one object\n     *\n     * @param sourceProjection The source projection.\n     * @param worldPos A valid position in the world space defined by the source projection.\n     * @param result The resulting position reprojected using this [[Projection]].\n     * @hidden\n     */\n    reprojectPoint(\n        sourceProjection: Projection,\n        worldPos: Vector3Like,\n        result?: Vector3Like\n    ): Vector3Like {\n        if (sourceProjection === this) {\n            if (result === undefined) {\n                return { x: worldPos.x, y: worldPos.y, z: worldPos.z };\n            }\n            result.x = worldPos.x;\n            result.y = worldPos.y;\n            result.z = worldPos.z;\n            return result;\n        }\n        return this.projectPoint(sourceProjection.unprojectPoint(worldPos), result);\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nexport * from \"./lib/AnimatedExtrusionHandler\";\nexport * from \"./lib/CameraMovementDetector\";\nexport * from \"./lib/ClipPlanesEvaluator\";\nexport * from \"./lib/ColorCache\";\nexport * from \"./lib/composing\";\nexport * from \"./lib/ConcurrentDecoderFacade\";\nexport * from \"./lib/ConcurrentDecoderFacade\";\nexport * from \"./lib/ConcurrentTilerFacade\";\nexport * from \"./lib/ConcurrentTilerFacade\";\nexport * from \"./lib/copyrights/CopyrightElementHandler\";\nexport * from \"./lib/copyrights/CopyrightInfo\";\nexport * from \"./lib/copyrights/CopyrightProvider\";\nexport * from \"./lib/copyrights/CopyrightCoverageProvider\";\nexport * from \"./lib/copyrights/UrlCopyrightProvider\";\nexport * from \"./lib/DataSource\";\nexport * from \"./lib/PolarTileDataSource\";\nexport * from \"./lib/DecodedTileHelpers\";\nexport * from \"./lib/DepthPrePass\";\nexport * from \"./lib/DisplacementMap\";\nexport * from \"./lib/ElevationProvider\";\nexport * from \"./lib/ElevationRangeSource\";\nexport * from \"./lib/image/Image\";\nexport * from \"./lib/image/ImageCache\";\nexport * from \"./lib/image/MapViewImageCache\";\nexport * from \"./lib/MapView\";\nexport * from \"./lib/MapViewAtmosphere\";\nexport * from \"./lib/MapViewFog\";\nexport * from \"./lib/MapViewPoints\";\nexport * from \"./lib/PickHandler\";\nexport * from \"./lib/poi/Poi\";\nexport * from \"./lib/poi/PoiManager\";\nexport * from \"./lib/poi/PoiTableManager\";\nexport * from \"./lib/Statistics\";\nexport * from \"./lib/text/TextElement\";\nexport * from \"./lib/text/TextElementsRenderer\";\nexport * from \"./lib/text/TextStyleCache\";\nexport * from \"./lib/TextureLoader\";\nexport * from \"./lib/ThemeLoader\";\nexport * from \"./lib/Tile\";\nexport * from \"./lib/geometry/TileDataAccessor\";\nexport * from \"./lib/geometry/TileGeometry\";\nexport * from \"./lib/Utils\";\nexport * from \"./lib/VisibleTileSet\";\nexport * from \"./lib/WorkerBasedDecoder\";\nexport * from \"./lib/WorkerBasedTiler\";\nexport * from \"./lib/workers/WorkerLoader\";\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport * as THREE from \"three\";\n\n/**\n * Unit of measurement used to specify a font's size.\n */\nexport enum FontUnit {\n    Em,\n    Pixel,\n    Point,\n    Percent\n}\n\n/**\n * Pair of unit and size specifying a font's size.\n */\nexport interface FontSize {\n    unit: FontUnit;\n    size: number;\n    backgroundSize: number;\n}\n\n/**\n * Style to be used when rendering glyphs.\n */\nexport enum FontStyle {\n    Regular,\n    Bold,\n    Italic,\n    BoldItalic\n}\n\n/**\n * Variant to be used when rendering.\n */\nexport enum FontVariant {\n    Regular,\n    AllCaps,\n    SmallCaps\n}\n\n/**\n * Vertical alignment to be used when placing text.\n */\nexport enum VerticalAlignment {\n    Above = 0.0,\n    Center = -0.5,\n    Below = -1.0\n}\n\n/**\n * Horizontal alignment to be used when placing text.\n */\nexport enum HorizontalAlignment {\n    Left = 0.0,\n    Center = -0.5,\n    Right = -1.0\n}\n\n/**\n * Text wrapping rule used when `lineWidth` is reached.\n */\nexport enum WrappingMode {\n    None,\n    Character,\n    Word\n}\n\n/**\n * Namespace containing default values for all members of [[TextRenderParameters]] and\n * [[TextLayoutParameters]].\n */\nexport namespace DefaultTextStyle {\n    export const DEFAULT_FONT_NAME: string = \"\";\n    export const DEFAULT_FONT_SIZE: FontSize = {\n        unit: Object.freeze(FontUnit.Pixel),\n        size: Object.freeze(16.0),\n        backgroundSize: Object.freeze(0.0)\n    };\n    export const DEFAULT_FONT_STYLE: FontStyle = FontStyle.Regular;\n    export const DEFAULT_FONT_VARIANT: FontVariant = FontVariant.Regular;\n    export const DEFAULT_ROTATION: number = 0.0;\n    export const DEFAULT_COLOR: THREE.Color = new THREE.Color(0x000000);\n    export const DEFAULT_OPACITY: number = 1.0;\n    export const DEFAULT_BACKGROUND_COLOR: THREE.Color = new THREE.Color(0x000000);\n    export const DEFAULT_BACKGROUND_OPACITY: number = 0.0;\n\n    export const DEFAULT_TRACKING: number = 0.0;\n    export const DEFAULT_LEADING: number = 0.0;\n    export const DEFAULT_MAX_LINES: number = Infinity;\n    export const DEFAULT_LINE_WIDTH: number = Infinity;\n    export const DEFAULT_CANVAS_ROTATION: number = 0.0;\n    export const DEFAULT_LINE_ROTATION: number = 0.0;\n    export const DEFAULT_WRAPPING_MODE: WrappingMode = WrappingMode.Word;\n    export const DEFAULT_VERTICAL_ALIGNMENT: VerticalAlignment = VerticalAlignment.Above;\n    export const DEFAULT_HORIZONTAL_ALIGNMENT: HorizontalAlignment = HorizontalAlignment.Left;\n}\n\n/**\n * [[TextCanvas]] text rendering parameters.\n */\nexport interface TextRenderParameters {\n    fontName?: string;\n    fontSize?: FontSize;\n    fontStyle?: FontStyle;\n    fontVariant?: FontVariant;\n    rotation?: number;\n    color?: THREE.Color;\n    backgroundColor?: THREE.Color;\n    opacity?: number;\n    backgroundOpacity?: number;\n}\n\n/**\n * [[TextCanvas]] text rendering style.\n */\nexport class TextRenderStyle {\n    private m_params: TextRenderParameters;\n\n    /**\n     * Creates a new `TextRenderStyle`.\n     *\n     * @param params Input [[TextRenderParameters]].\n     *\n     * @returns New `TextRenderStyle`.\n     */\n    constructor(params: TextRenderParameters = {}) {\n        this.m_params = {\n            fontName:\n                params.fontName !== undefined\n                    ? params.fontName\n                    : DefaultTextStyle.DEFAULT_FONT_NAME,\n            fontSize:\n                params.fontSize !== undefined\n                    ? { ...params.fontSize }\n                    : {\n                          unit: DefaultTextStyle.DEFAULT_FONT_SIZE.unit,\n                          size: DefaultTextStyle.DEFAULT_FONT_SIZE.size,\n                          backgroundSize: DefaultTextStyle.DEFAULT_FONT_SIZE.backgroundSize\n                      },\n            fontStyle:\n                params.fontStyle !== undefined\n                    ? params.fontStyle\n                    : DefaultTextStyle.DEFAULT_FONT_STYLE,\n            fontVariant:\n                params.fontVariant !== undefined\n                    ? params.fontVariant\n                    : DefaultTextStyle.DEFAULT_FONT_VARIANT,\n            rotation:\n                params.rotation !== undefined ? params.rotation : DefaultTextStyle.DEFAULT_ROTATION,\n            color:\n                params.color !== undefined\n                    ? params.color.clone()\n                    : DefaultTextStyle.DEFAULT_COLOR.clone(),\n            opacity:\n                params.opacity !== undefined ? params.opacity : DefaultTextStyle.DEFAULT_OPACITY,\n            backgroundColor:\n                params.backgroundColor !== undefined\n                    ? params.backgroundColor.clone()\n                    : DefaultTextStyle.DEFAULT_BACKGROUND_COLOR.clone(),\n            backgroundOpacity:\n                params.backgroundOpacity !== undefined\n                    ? params.backgroundOpacity\n                    : DefaultTextStyle.DEFAULT_BACKGROUND_OPACITY\n        };\n    }\n\n    /**\n     * Current [[TextRenderParameters]] for this style.\n     */\n    get params(): TextRenderParameters {\n        return this.m_params;\n    }\n    set params(value: TextRenderParameters) {\n        this.m_params = { ...this.m_params, ...value };\n    }\n\n    /**\n     * Name of the preferred [[Font]] to be used when rendering.\n     */\n    get fontName(): string {\n        return this.m_params.fontName!;\n    }\n    set fontName(value: string) {\n        this.m_params.fontName = value;\n    }\n\n    /**\n     * Collection of unit and sizes to apply for the currently active [[Font]].\n     */\n    get fontSize(): FontSize {\n        return this.m_params.fontSize!;\n    }\n    set fontSize(value: FontSize) {\n        this.m_params.fontSize = { ...value };\n    }\n\n    /**\n     * Glyph style to apply for the currently active [[Font]].\n     */\n    get fontStyle(): FontStyle {\n        return this.m_params.fontStyle!;\n    }\n    set fontStyle(value: FontStyle) {\n        this.m_params.fontStyle = value;\n    }\n\n    /**\n     * Glyph variant to apply for the currently active [[Font]].\n     */\n    get fontVariant(): FontVariant {\n        return this.m_params.fontVariant!;\n    }\n    set fontVariant(value: FontVariant) {\n        this.m_params.fontVariant = value;\n    }\n\n    /**\n     * Glyph local rotation (radians).\n     */\n    get rotation(): number {\n        return this.m_params.rotation!;\n    }\n    set rotation(value: number) {\n        this.m_params.rotation = value;\n    }\n\n    /**\n     * Glyph color.\n     */\n    get color(): THREE.Color {\n        return this.m_params.color!;\n    }\n    set color(value: THREE.Color) {\n        this.m_params.color!.copy(value);\n    }\n\n    /**\n     * Glyph background color.\n     */\n    get backgroundColor(): THREE.Color {\n        return this.m_params.backgroundColor!;\n    }\n    set backgroundColor(value: THREE.Color) {\n        this.m_params.backgroundColor!.copy(value);\n    }\n\n    /**\n     * Glyph opacity.\n     */\n    get opacity(): number {\n        return this.m_params.opacity!;\n    }\n    set opacity(value: number) {\n        this.m_params.opacity = value;\n    }\n\n    /**\n     * Glyph background opacity.\n     */\n    get backgroundOpacity(): number {\n        return this.m_params.backgroundOpacity!;\n    }\n    set backgroundOpacity(value: number) {\n        this.m_params.backgroundOpacity = value;\n    }\n\n    /**\n     * Clone this [[TextRenderStyle]].\n     *\n     * @param params Input [[TextRenderParameters]].\n     *\n     * @returns Cloned [[TextRenderStyle]].\n     */\n    clone(params: TextRenderParameters = {}): TextRenderStyle {\n        return new TextRenderStyle({ ...this.m_params, ...params });\n    }\n\n    /**\n     * Copy other [[TextRenderStyle]] properties into this object instance.\n     *\n     * @param source The source object to be copied.\n     *\n     * @returns reference to `this` object.\n     */\n    copy(source: TextRenderStyle): TextRenderStyle {\n        // Given that all source and this params are always defined:\n        this.m_params.fontName = source.fontName;\n        this.m_params.fontSize = { ...source.fontSize };\n        this.m_params.fontStyle = source.fontStyle;\n        this.m_params.fontVariant = source.fontVariant;\n        this.m_params.rotation = source.rotation;\n        this.m_params.color!.copy(source.color);\n        this.m_params.backgroundColor!.copy(source.backgroundColor);\n        this.m_params.opacity = source.opacity;\n        this.m_params.backgroundOpacity = source.backgroundOpacity;\n        return this;\n    }\n}\n\n/**\n * [[TextCanvas]] text layout parameters.\n */\nexport interface TextLayoutParameters {\n    tracking?: number;\n    leading?: number;\n    maxLines?: number;\n    lineWidth?: number;\n    canvasRotation?: number;\n    lineRotation?: number;\n    wrappingMode?: WrappingMode;\n    verticalAlignment?: VerticalAlignment;\n    horizontalAlignment?: HorizontalAlignment;\n}\n\n/**\n * [[TextCanvas]] text rendering style.\n */\nexport class TextLayoutStyle {\n    private m_params: TextLayoutParameters;\n\n    /**\n     * Creates a new `TextLayoutStyle`.\n     *\n     * @param params Input [[TextLayoutParameters]].\n     *\n     * @returns New `TextLayoutStyle`.\n     */\n    constructor(params: TextLayoutParameters = {}) {\n        this.m_params = {\n            tracking:\n                params.tracking !== undefined ? params.tracking : DefaultTextStyle.DEFAULT_TRACKING,\n            leading:\n                params.leading !== undefined ? params.leading : DefaultTextStyle.DEFAULT_LEADING,\n            maxLines:\n                params.maxLines !== undefined\n                    ? params.maxLines\n                    : DefaultTextStyle.DEFAULT_MAX_LINES,\n            lineWidth:\n                params.lineWidth !== undefined\n                    ? params.lineWidth\n                    : DefaultTextStyle.DEFAULT_LINE_WIDTH,\n            canvasRotation:\n                params.canvasRotation !== undefined\n                    ? params.canvasRotation\n                    : DefaultTextStyle.DEFAULT_CANVAS_ROTATION,\n            lineRotation:\n                params.lineRotation !== undefined\n                    ? params.lineRotation\n                    : DefaultTextStyle.DEFAULT_LINE_ROTATION,\n            wrappingMode:\n                params.wrappingMode !== undefined\n                    ? params.wrappingMode\n                    : DefaultTextStyle.DEFAULT_WRAPPING_MODE,\n            verticalAlignment:\n                params.verticalAlignment !== undefined\n                    ? params.verticalAlignment\n                    : DefaultTextStyle.DEFAULT_VERTICAL_ALIGNMENT,\n            horizontalAlignment:\n                params.horizontalAlignment !== undefined\n                    ? params.horizontalAlignment\n                    : DefaultTextStyle.DEFAULT_HORIZONTAL_ALIGNMENT\n        };\n    }\n\n    /**\n     * Current [[TextLayoutParameters]] for this style.\n     */\n    get params(): TextLayoutParameters {\n        return this.m_params;\n    }\n    set params(value: TextLayoutParameters) {\n        this.m_params = { ...this.m_params, ...value };\n    }\n\n    /**\n     * Inter-glyph spacing (pixels). Scaled by [[FontSize]].\n     */\n    get tracking(): number {\n        return this.m_params.tracking!;\n    }\n    set tracking(value: number) {\n        this.m_params.tracking = value;\n    }\n\n    /**\n     * Inter-line spacing (pixels). Scaled by [[FontSize]].\n     */\n    get leading(): number {\n        return this.m_params.leading!;\n    }\n    set leading(value: number) {\n        this.m_params.leading = value;\n    }\n\n    /**\n     * Maximum number of lines to be considered when using [[TextCanvas]].\n     */\n    get maxLines(): number {\n        return this.m_params.maxLines!;\n    }\n    set maxLines(value: number) {\n        this.m_params.maxLines = value;\n    }\n\n    /**\n     * Maximum line width (pixels).\n     */\n    get lineWidth(): number {\n        return this.m_params.lineWidth!;\n    }\n    set lineWidth(value: number) {\n        this.m_params.lineWidth = value;\n    }\n\n    /**\n     * [[TextCanvas]] rotation (radians).\n     */\n    get canvasRotation(): number {\n        return this.m_params.canvasRotation!;\n    }\n    set canvasRotation(value: number) {\n        this.m_params.canvasRotation = value;\n    }\n\n    /**\n     * Line typesetting rotation (radians).\n     */\n    get lineRotation(): number {\n        return this.m_params.lineRotation!;\n    }\n    set lineRotation(value: number) {\n        this.m_params.lineRotation = value;\n    }\n\n    /**\n     * Wrapping (line-breaking) mode.\n     */\n    get wrappingMode(): WrappingMode {\n        return this.m_params.wrappingMode!;\n    }\n    set wrappingMode(value: WrappingMode) {\n        this.m_params.wrappingMode = value;\n    }\n\n    /**\n     * Text position regarding the baseline.\n     */\n    get verticalAlignment(): VerticalAlignment {\n        return this.m_params.verticalAlignment!;\n    }\n    set verticalAlignment(value: VerticalAlignment) {\n        this.m_params.verticalAlignment = value;\n    }\n\n    /**\n     * Text position inside a line.\n     */\n    get horizontalAlignment(): HorizontalAlignment {\n        return this.m_params.horizontalAlignment!;\n    }\n    set horizontalAlignment(value: HorizontalAlignment) {\n        this.m_params.horizontalAlignment = value;\n    }\n\n    /**\n     * Clone this [[TextLayoutStyle]].\n     *\n     * @param params Input [[TextLayoutParameters]].\n     *\n     * @returns Cloned [[TextLayoutStyle]].\n     */\n    clone(params: TextLayoutParameters = {}): TextLayoutStyle {\n        return new TextLayoutStyle({ ...this.m_params, ...params });\n    }\n\n    /**\n     * Copy other [[TextLayoutStyle]] properties into this object instance.\n     *\n     * @param other The object to be copied.\n     *\n     * @returns reference to `this` object.\n     */\n    copy(other: TextLayoutStyle): TextLayoutStyle {\n        this.params = { ...other.params };\n        return this;\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport {\n    GeometryKind,\n    GeometryKindSet,\n    ImageTexture,\n    LineMarkerTechnique,\n    PoiStackMode,\n    PoiTechnique\n} from \"@here/harp-datasource-protocol\";\nimport {\n    GlyphData,\n    TextBufferObject,\n    TextLayoutParameters,\n    TextLayoutStyle,\n    TextRenderParameters,\n    TextRenderStyle\n} from \"@here/harp-text-canvas\";\nimport { Math2D, MathUtils } from \"@here/harp-utils\";\n\nimport * as THREE from \"three\";\n\nimport { ImageItem } from \"../image/Image\";\nimport { PickResult } from \"../PickHandler\";\nimport { TextElementType } from \"./TextElementType\";\n\n/**\n * Additional information for an icon that is to be rendered along with a [[TextElement]].\n */\nexport interface PoiInfo {\n    /**\n     * Technique defining the POI or LineMarker\n     */\n    technique: PoiTechnique | LineMarkerTechnique;\n\n    /**\n     * Name of the [[ImageTexture]].\n     */\n    imageTextureName: string;\n\n    /**\n     * Name of the POI table [[PoiTable]].\n     */\n    poiTableName?: string;\n\n    /**\n     * Name of the POI description in the [[PoiTable]].\n     */\n    poiName?: string;\n\n    /**\n     * Specify stack mode. Defaults to `ShowInStack`.\n     */\n    stackMode?: PoiStackMode;\n\n    /**\n     * Minimum zoomLevel at which to display the label icon. No default.\n     */\n    iconMinZoomLevel?: number;\n\n    /**\n     * Maximum zoomLevel at which to display the label icon. No default.\n     */\n    iconMaxZoomLevel?: number;\n\n    /**\n     * Minimum zoomLevel at which to display the label text. No default.\n     */\n    textMinZoomLevel?: number;\n\n    /**\n     * Maximum zoomLevel at which to display the label text. No default.\n     */\n    textMaxZoomLevel?: number;\n\n    /**\n     * If true, the text icon will appear even if the text part is blocked by other labels. Defaults\n     * to `false`.\n     */\n    textIsOptional?: boolean;\n\n    /**\n     * If true, the text will appear even if the icon cannot be rendered because of missing icon\n     * graphics. Defaults to `true`.\n     */\n    iconIsOptional?: boolean;\n\n    /**\n     * If `true`, icon is allowed to overlap other labels or icons of lower priority.\n     */\n    mayOverlap?: boolean;\n\n    /**\n     * If `true`, icon will reserve screen space, other markers of lower priority will not be\n     * able to overlap.\n     */\n    reserveSpace?: boolean;\n\n    /**\n     * If isValid is `false`, the icon will no longer be placed or rendered. The reason may be a\n     * missing resource.\n     */\n    isValid?: boolean;\n\n    /**\n     * ID to identify the (POI) icon.\n     */\n    featureId?: number;\n\n    /**\n     * Reference back to owning [[TextElement]].\n     */\n    textElement: TextElement;\n\n    /**\n     * @hidden\n     * If false, text will not be rendered during camera movements. Defaults to `true`;\n     */\n    renderTextDuringMovements?: boolean;\n\n    /**\n     * @hidden\n     * Direct access to [[ImageItem]] once it is resolved.\n     */\n    imageItem?: ImageItem;\n\n    /**\n     * @hidden\n     * Direct access to [[ImageTexture]] once it is resolved.\n     */\n    imageTexture?: ImageTexture;\n\n    /**\n     * @hidden\n     * Layout help: A shield group is for all [[LineMarker]]s that have the same icon and text,\n     * making them the same road shield icon.\n     */\n    shieldGroupIndex?: number;\n\n    /**\n     * @hidden\n     * Internal reference to a render batch, made up of all icons that use the same Material.\n     */\n    poiRenderBatch?: number;\n\n    /**\n     * @hidden\n     * Should be computed during loading/initializing of `ImageTexture`.\n     */\n    computedWidth?: number;\n\n    /**\n     * @hidden\n     * Should be computed during loading/initializing of `ImageTexture`.\n     */\n    computedHeight?: number;\n\n    /**\n     * @hidden\n     * Should be computed during loading/initializing of `ImageTexture`.\n     */\n    uvBox?: Math2D.UvBox;\n\n    /**\n     * @hidden\n     * Computed from owning [[TextElement]]. Value is set when `PoiInfo` is assigned to\n     * [[TextElement]].\n     */\n    renderOrder?: number;\n}\n\n/**\n * Return 'true' if the POI has been successfully prepared for rendering.\n *\n * @param poiInfo PoiInfo containing information for rendering the POI icon.\n */\nexport function poiIsRenderable(poiInfo: PoiInfo): boolean {\n    return poiInfo.poiRenderBatch !== undefined;\n}\n\nexport interface TextPickResult extends PickResult {\n    /**\n     * Text of the picked [[TextElement]]\n     */\n    text?: string;\n}\n\n/**\n * State of loading.\n */\nexport enum LoadingState {\n    Requested,\n    Loaded,\n    Initialized\n}\n\n/**\n * `TextElement` is used to create 2D text elements (for example, labels).\n */\nexport class TextElement {\n    /**\n     * Text elements with this priority are placed on screen before any others.\n     */\n    static readonly HIGHEST_PRIORITY = Number.MAX_SAFE_INTEGER;\n\n    /**\n     * Determines visibility. If set to `false`, it will not be rendered.\n     */\n    visible: boolean = true;\n\n    /**\n     * Determines minimum zoom level for visibility. Can be used to reduce the number of visible\n     * `TextElement`s based on zoom level.\n     */\n    minZoomLevel?: number;\n    /**\n     * Determines maximum zoom level for visibility. Can be used to reduce the number of visible\n     * `TextElement`s based on zoom level.\n     */\n    maxZoomLevel?: number;\n\n    /**\n     * If `true`, label is allowed to overlap other labels or icons of lower priority.\n     * @default `false`\n     */\n    mayOverlap?: boolean;\n\n    /**\n     * If `true`, label will reserve screen space, other markers of lower priority will not be\n     * able to overlap.\n     * @default `true`\n     */\n    reserveSpace?: boolean;\n\n    /**\n     * If `true`, the label will always be rendered on top. If overlapping with other labels, the\n     * render order is undefined;\n     * @default `false`\n     */\n    alwaysOnTop?: boolean;\n\n    /**\n     * Ignore distance limit. Used for label in labeled-icons.\n     */\n    ignoreDistance?: boolean;\n\n    /**\n     * Scaling factor of text. Defaults to 0.5, reducing the size ot 50% in the distance.\n     */\n    distanceScale: number = 0.5;\n\n    /**\n     * Optional user data. Will be retrieved during picking.\n     */\n    userData?: any;\n\n    /**\n     * If specified, determines the render order between `TextElement`s. The number different\n     * renderOrders should be as small as possible, because every specific `renderOrder` may result\n     * in one or more draw calls.\n     *\n     * TextElements with the same integer `renderOrder` will be rendered in the same batch.\n     *\n     * The `renderOrder` of `TextElement`s are only relative to other `TextElement`s, and not other\n     * map elements.\n     *\n     * A `TextElement` with a higher `renderOrder` will be rendered after a `TextElement` with a\n     * lower `renderOrder`.\n     */\n    renderOrder?: number = 0;\n\n    /**\n     * Specified kind of geometry. One kind is set as default in the technique, and can be\n     * overridden in the style.\n     */\n    kind?: GeometryKind | GeometryKindSet;\n\n    /**\n     * @hidden\n     * Used during rendering.\n     */\n    loadingState?: LoadingState;\n\n    /**\n     * If set to `true` the geometry has been already overlaid on elevation.\n     */\n    elevated: boolean = false;\n\n    /**\n     * @hidden\n     * Array storing the style [[GlyphData]] for this `TextElement` to speed up label placement in\n     * [[TextElementsRenderer]]. Valid after `loadingState` is `Initialized`.\n     */\n    glyphs?: GlyphData[];\n\n    /**\n     * @hidden\n     * Array storing the casing (`true`: uppercase, `false`: lowercase) for this `TextElement`.\n     * Used by labels in [[TextElementsRenderer]] to support `SmallCaps`. Valid after `loadingState`\n     * is `Initialized`.\n     */\n    glyphCaseArray?: boolean[];\n\n    /**\n     * Screen space bounds for this `TextElement`. Used by point labels in [[TextElementsRenderer]].\n     * Valid after `loadingState` is `Initialized`.\n     */\n    bounds?: THREE.Box2;\n\n    /**\n     * @hidden\n     * Pre-computed text vertex buffer. Used by point labels in [[TextElementsRenderer]]. Valid\n     * after label becomes visible for the first time.\n     */\n    textBufferObject?: TextBufferObject;\n\n    /**\n     * @hidden\n     * If `true`, the estimated bounding box of the path is too small for the label to fit, so it is\n     * being ignored for rendering in the latest frame.\n     */\n    dbgPathTooSmall?: boolean;\n\n    pathLengthSqr?: number;\n\n    /**\n     * Time to fade in text in milliseconds.\n     * @default [[DEFAULT_FADE_TIME]] 800\n     */\n    textFadeTime?: number;\n\n    type: TextElementType;\n\n    private m_poiInfo?: PoiInfo;\n\n    private m_renderStyle?: TextRenderStyle;\n\n    private m_layoutStyle?: TextLayoutStyle;\n\n    /**\n     * Creates a new `TextElement`.\n     *\n     * @param text The text to display.\n     * @param points The position or a list of points for a curved text, both in world space.\n     * @param renderParams `TextElement` text rendering parameters.\n     * @param layoutParams `TextElement` text layout parameters.\n     * @param priority The priority of the `TextElement. Elements with the highest priority get\n     *              placed first, elements with priority of `0` are placed last, elements with a\n     *              negative value are always rendered, ignoring priorities and allowing\n     *              overrides.\n     * @param xOffset Optional X offset of this `TextElement` in screen coordinates.\n     * @param yOffset Optional Y offset of this `TextElement` in screen coordinates.\n     * @param featureId Optional number to identify feature (originated from `OmvDataSource`).\n     * @param fadeNear Distance to the camera (0.0 = camera position, 1.0 = farPlane) at which the\n     *              label starts fading out (opacity decreases).\n     * @param fadeFar Distance to the camera (0.0 = camera position, 1.0 = farPlane) at which the\n     *              label becomes transparent. A value of <= 0.0 disables fading.\n     */\n    constructor(\n        readonly text: string,\n        readonly points: THREE.Vector3[] | THREE.Vector3,\n        readonly renderParams: TextRenderParameters | TextRenderStyle,\n        readonly layoutParams: TextLayoutParameters | TextLayoutStyle,\n        public priority = 0,\n        public xOffset: number = 0,\n        public yOffset: number = 0,\n        public featureId?: number,\n        public style?: string,\n        public fadeNear?: number,\n        public fadeFar?: number,\n        readonly tileOffset?: number\n    ) {\n        if (renderParams instanceof TextRenderStyle) {\n            this.renderStyle = renderParams;\n        }\n        if (layoutParams instanceof TextLayoutStyle) {\n            this.layoutStyle = layoutParams;\n        }\n\n        this.type =\n            points instanceof THREE.Vector3 ? TextElementType.PoiLabel : TextElementType.PathLabel;\n    }\n\n    /**\n     * The text element position or the first point of the path used to render a curved text, both\n     * in world space.\n     */\n    get position(): THREE.Vector3 {\n        if (this.points instanceof Array) {\n            const p = this.points[0];\n            return p;\n        }\n        return this.points as THREE.Vector3;\n    }\n\n    /**\n     * The list of points in world space used to render the text along a path or `undefined`.\n     */\n    get path(): THREE.Vector3[] | undefined {\n        if (this.points instanceof Array) {\n            return this.points;\n        }\n        return undefined;\n    }\n\n    /**\n     * If `true`, `TextElement` is allowed to overlap other labels or icons of lower priority.\n     *\n     * @default `false`\n     */\n    get textMayOverlap(): boolean {\n        return this.mayOverlap === true;\n    }\n\n    set textMayOverlap(mayOverlap: boolean) {\n        this.mayOverlap = mayOverlap;\n    }\n\n    /**\n     * If `true`, `TextElement` will reserve screen space, other markers of lower priority will not\n     * be able to overlap.\n     *\n     * @default `true`\n     */\n    get textReservesSpace(): boolean {\n        return this.reserveSpace !== false;\n    }\n\n    set textReservesSpace(reserveSpace: boolean) {\n        this.reserveSpace = reserveSpace;\n    }\n\n    /**\n     * Contains additional information about icon to be rendered along with text.\n     */\n    get poiInfo(): PoiInfo | undefined {\n        return this.m_poiInfo;\n    }\n\n    set poiInfo(poiInfo: PoiInfo | undefined) {\n        this.m_poiInfo = poiInfo;\n        if (poiInfo !== undefined) {\n            if (this.path !== undefined) {\n                this.type = TextElementType.LineMarker;\n            }\n            const poiRenderOrder = this.renderOrder !== undefined ? this.renderOrder : 0;\n            poiInfo.renderOrder = poiRenderOrder;\n        }\n    }\n\n    /**\n     * @returns The style used to render this text element, undefined if not set yet.\n     */\n    get renderStyle(): TextRenderStyle | undefined {\n        return this.m_renderStyle;\n    }\n\n    /**\n     * Sets style used for text rendering.\n     * @param style The style to use.\n     */\n    set renderStyle(style: TextRenderStyle | undefined) {\n        this.m_renderStyle = style;\n    }\n\n    /**\n     * @returns The style used to layout this text element, undefined if not set yet.\n     */\n    get layoutStyle(): TextLayoutStyle | undefined {\n        return this.m_layoutStyle;\n    }\n\n    /**\n     * Sets the style used for text layout.\n     * @param style The style to use.\n     */\n    set layoutStyle(style: TextLayoutStyle | undefined) {\n        this.m_layoutStyle = style;\n    }\n\n    hasFeatureId(): boolean {\n        return this.featureId !== undefined && this.featureId !== 0;\n    }\n\n    /**\n     * Update the minZoomLevel and maxZoomLevel from the values set in [[PoiInfo]].\n     * Selects the smaller/larger one of the two min/max values for icon and text, because the\n     * TextElement is a container for both.\n     */\n    updateMinMaxZoomLevelsFromPoiInfo() {\n        if (this.poiInfo !== undefined) {\n            if (this.minZoomLevel === undefined) {\n                this.minZoomLevel = MathUtils.min2(\n                    this.poiInfo.iconMinZoomLevel,\n                    this.poiInfo.textMinZoomLevel\n                );\n            }\n            if (this.maxZoomLevel === undefined) {\n                this.maxZoomLevel = MathUtils.max2(\n                    this.poiInfo.iconMaxZoomLevel,\n                    this.poiInfo.textMaxZoomLevel\n                );\n            }\n        }\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { GeoBoxExtentLike } from \"./GeoBoxExtentLike\";\nimport { GeoCoordinates } from \"./GeoCoordinates\";\n\nimport * as THREE from \"three\";\n\n/**\n * `GeoBox` is used to represent a bounding box in geo coordinates.\n */\nexport class GeoBox implements GeoBoxExtentLike {\n    /**\n     * Returns a `GeoBox` with the given geo coordinates.\n     *\n     * @param southWest The south west position in geo coordinates.\n     * @param northEast The north east position in geo coordinates.\n     */\n    static fromCoordinates(southWest: GeoCoordinates, northEast: GeoCoordinates): GeoBox {\n        return new GeoBox(southWest, northEast);\n    }\n\n    /**\n     * Returns a `GeoBox` with the given center and dimensions.\n     *\n     * @param center The center position of geo box.\n     * @param extent Box latitude and logitude span\n     */\n    static fromCenterAndExtents(center: GeoCoordinates, extent: GeoBoxExtentLike): GeoBox {\n        return new GeoBox(\n            new GeoCoordinates(\n                center.latitude - extent.latitudeSpan / 2,\n                center.longitude - extent.longitudeSpan / 2\n            ),\n            new GeoCoordinates(\n                center.latitude + extent.latitudeSpan / 2,\n                center.longitude + extent.longitudeSpan / 2\n            )\n        );\n    }\n\n    /**\n     * Constructs a new `GeoBox` with the given geo coordinates.\n     *\n     * @param southWest The south west position in geo coordinates.\n     * @param northEast The north east position in geo coordinates.\n     */\n    constructor(readonly southWest: GeoCoordinates, readonly northEast: GeoCoordinates) {}\n\n    /**\n     * Returns the minimum altitude or `undefined`.\n     */\n    get minAltitude(): number | undefined {\n        if (this.southWest.altitude === undefined || this.northEast.altitude === undefined) {\n            return undefined;\n        }\n        return Math.min(this.southWest.altitude, this.northEast.altitude);\n    }\n\n    /**\n     * Returns the maximum altitude or `undefined`.\n     */\n    get maxAltitude(): number | undefined {\n        if (this.southWest.altitude === undefined || this.northEast.altitude === undefined) {\n            return undefined;\n        }\n        return Math.max(this.southWest.altitude, this.northEast.altitude);\n    }\n\n    /**\n     * Returns the south latitude in degrees of this `GeoBox`.\n     */\n    get south(): number {\n        return this.southWest.latitude;\n    }\n\n    /**\n     * Returns the north altitude in degrees of this `GeoBox`.\n     */\n    get north(): number {\n        return this.northEast.latitude;\n    }\n\n    /**\n     * Returns the west longitude in degrees of this `GeoBox`.\n     */\n    get west(): number {\n        return this.southWest.longitude;\n    }\n\n    /**\n     * Returns the east longitude in degrees of this `GeoBox`.\n     */\n    get east(): number {\n        return this.northEast.longitude;\n    }\n\n    /**\n     * Returns the center of this `GeoBox`.\n     */\n    get center(): GeoCoordinates {\n        const latitude = (this.south + this.north) * 0.5;\n        const { west, east } = this;\n        const { minAltitude, altitudeSpan } = this;\n\n        let altitude: number | undefined;\n\n        if (minAltitude !== undefined && altitudeSpan !== undefined) {\n            altitude = minAltitude + altitudeSpan * 0.5;\n        }\n\n        if (west < east) {\n            return new GeoCoordinates(latitude, (west + east) * 0.5, altitude);\n        }\n\n        let longitude = (360 + east + west) * 0.5;\n\n        if (longitude > 360) {\n            longitude -= 360;\n        }\n\n        return new GeoCoordinates(latitude, longitude, altitude);\n    }\n\n    /**\n     * Returns the latitude span in radians.\n     */\n    get latitudeSpanInRadians(): number {\n        return THREE.MathUtils.degToRad(this.latitudeSpan);\n    }\n\n    /**\n     * Returns the longitude span in radians.\n     */\n    get longitudeSpanInRadians(): number {\n        return THREE.MathUtils.degToRad(this.longitudeSpan);\n    }\n\n    /**\n     * Returns the latitude span in degrees.\n     */\n    get latitudeSpan(): number {\n        return this.north - this.south;\n    }\n\n    get altitudeSpan(): number | undefined {\n        if (this.maxAltitude === undefined || this.minAltitude === undefined) {\n            return undefined;\n        }\n        return this.maxAltitude - this.minAltitude;\n    }\n\n    /**\n     * Returns the longitude span in degrees.\n     */\n    get longitudeSpan(): number {\n        let width = this.northEast.longitude - this.southWest.longitude;\n\n        if (width < 0) {\n            width += 360;\n        }\n\n        return width;\n    }\n\n    /**\n     * Returns the latitude span in degrees.\n     * @deprecated Use [[latitudeSpan]] instead.\n     */\n    get latitudeSpanInDegrees(): number {\n        return this.latitudeSpan;\n    }\n\n    /**\n     * Returns the longitude span in degrees.\n     * @deprecated Use [[longitudeSpan]] instead.\n     */\n    get longitudeSpanInDegrees(): number {\n        return this.longitudeSpan;\n    }\n\n    /**\n     * Returns `true` if the given geo coordinates are contained in this `GeoBox`.\n     *\n     * @param point The geo coordinates.\n     */\n    contains(point: GeoCoordinates): boolean {\n        if (\n            point.altitude === undefined ||\n            this.minAltitude === undefined ||\n            this.maxAltitude === undefined\n        ) {\n            return this.containsHelper(point);\n        }\n\n        const isFlat = this.minAltitude === this.maxAltitude;\n        const isSameAltitude = this.minAltitude === point.altitude;\n        const isWithinAltitudeRange =\n            this.minAltitude <= point.altitude && this.maxAltitude > point.altitude;\n\n        // If box is flat, we should check the altitude and containment,\n        // otherwise we should check also altitude difference where we consider\n        // point to be inside if alt is from [m_minAltitude, m_maxAltitude) range!\n        if (isFlat ? isSameAltitude : isWithinAltitudeRange) {\n            return this.containsHelper(point);\n        }\n\n        return false;\n    }\n\n    /**\n     * Clones this `GeoBox` instance.\n     */\n    clone(): GeoBox {\n        return new GeoBox(this.southWest, this.northEast);\n    }\n\n    /**\n     * Update the bounding box by considering a given point.\n     *\n     * @param point The point that may expand the bounding box.\n     */\n    growToContain(point: GeoCoordinates) {\n        this.southWest.latitude = Math.min(this.southWest.latitude, point.latitude);\n        this.southWest.longitude = Math.min(this.southWest.longitude, point.longitude);\n        this.southWest.altitude =\n            this.southWest.altitude !== undefined && point.altitude !== undefined\n                ? Math.min(this.southWest.altitude, point.altitude)\n                : this.southWest.altitude !== undefined\n                ? this.southWest.altitude\n                : point.altitude !== undefined\n                ? point.altitude\n                : undefined;\n\n        this.northEast.latitude = Math.max(this.northEast.latitude, point.latitude);\n        this.northEast.longitude = Math.max(this.northEast.longitude, point.longitude);\n        this.northEast.altitude =\n            this.northEast.altitude !== undefined && point.altitude !== undefined\n                ? Math.max(this.northEast.altitude, point.altitude)\n                : this.northEast.altitude !== undefined\n                ? this.northEast.altitude\n                : point.altitude !== undefined\n                ? point.altitude\n                : undefined;\n    }\n\n    private containsHelper(point: GeoCoordinates): boolean {\n        if (point.latitude < this.southWest.latitude || point.latitude >= this.northEast.latitude) {\n            return false;\n        }\n\n        const { west, east } = this;\n\n        if (east > west) {\n            return point.longitude >= west && point.longitude < east;\n        }\n\n        return point.longitude > east || point.longitude <= west;\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { GeoBox } from \"../coordinates/GeoBox\";\nimport { GeoCoordinatesLike } from \"../coordinates/GeoCoordinatesLike\";\nimport { Box3Like } from \"../math/Box3Like\";\nimport { Projection } from \"../projection/Projection\";\nimport { FlatTileBoundingBoxGenerator } from \"./FlatTileBoundingBoxGenerator\";\nimport { SubdivisionScheme } from \"./SubdivisionScheme\";\nimport { TileKey } from \"./TileKey\";\nimport { TileKeyUtils } from \"./TileKeyUtils\";\nimport { TileTreeTraverse } from \"./TileTreeTraverse\";\n\n/**\n * The `TilingScheme` represents how the data is tiled.\n */\nexport class TilingScheme {\n    readonly boundingBoxGenerator: FlatTileBoundingBoxGenerator;\n    readonly tileTreeTraverse: TileTreeTraverse;\n\n    /**\n     * Constructs a new `TilingScheme` with the given subdivision scheme and projection.\n     *\n     * @param subdivisionScheme The subdivision scheme used by this `TilingScheme`.\n     * @param projection The projection used by this `TilingScheme`.\n     */\n    constructor(readonly subdivisionScheme: SubdivisionScheme, readonly projection: Projection) {\n        this.boundingBoxGenerator = new FlatTileBoundingBoxGenerator(this);\n        this.tileTreeTraverse = new TileTreeTraverse(subdivisionScheme);\n    }\n\n    /**\n     * Returns the sub tile keys of the given tile.\n     *\n     * @param tileKey The [[TileKey]].\n     * @returns The list of the sub tile keys.\n     */\n    getSubTileKeys(tileKey: TileKey): Iterable<TileKey> {\n        return this.tileTreeTraverse.subTiles(tileKey);\n    }\n\n    /**\n     * Gets the [[TileKey]] from the given geo position and level.\n     *\n     * @param geoPoint The position in geo coordinates.\n     * @param level The level of the resulting `TileKey`.\n     */\n    getTileKey(geoPoint: GeoCoordinatesLike, level: number): TileKey | null {\n        return TileKeyUtils.geoCoordinatesToTileKey(this, geoPoint, level);\n    }\n\n    /**\n     * Gets the list of [[TileKey]]s contained in the given [[GeoBox]].\n     *\n     * @param geoBox The bounding box in geo coordinates.\n     * @param level The level of the resulting `TileKey`.\n     */\n    getTileKeys(geoBox: GeoBox, level: number): TileKey[] {\n        return TileKeyUtils.geoRectangleToTileKeys(this, geoBox, level);\n    }\n\n    /**\n     * Returns the bounding box in geo coordinates for the given [[TileKey]].\n     *\n     * @param tileKey The `TileKey`.\n     */\n    getGeoBox(tileKey: TileKey): GeoBox {\n        return this.boundingBoxGenerator.getGeoBox(tileKey);\n    }\n\n    /**\n     * Returns the bounding box in world coordinates.\n     *\n     * @param tileKey The `TileKey`.\n     * @param result The optional object that will contain the resulting bounding box.\n     */\n    getWorldBox(tileKey: TileKey, result?: Box3Like): Box3Like {\n        return this.boundingBoxGenerator.getWorldBox(tileKey, result);\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { assert } from \"@here/harp-utils\";\nimport * as THREE from \"three\";\n\nconst SHIFT_TRANSPARENCY: number = 24;\nconst SHIFT_RED: number = 16;\nconst SHIFT_GREEN: number = 8;\nconst SHIFT_BLUE: number = 0;\n\n// tslint:disable: no-bitwise\n//    Allow bitwise operations for colors decoding\n\n// tslint:disable-next-line: no-bitwise\nconst HEX_FULL_CHANNEL: number = 0xff;\nconst HEX_RGB_MASK: number = 0xffffff;\nconst HEX_TRGB_MASK: number = 0xffffffff;\n\nconst tmpColor = new THREE.Color();\n\n/**\n * Utilities to convert RGBA colors encoded in custom number (hex) format to THREE.Color objects.\n *\n * The functions provided allows for conversion from and to our custom number based color format,\n * which contains transparency, red, green and blue color channels in a way that each channel\n * occupies 8 bits of resulting number (color format 0xTTRRGGBB).\n * In order to preserve compatibility with THREE.Color class and its hexadecimal color\n * representation, we do not store __alpha__ channel in encoded color's number, but replace it\n * with __transparency__ channel, which is simply opposite to alpha:\n * ```transparency = 0xFF - alpha```\n * Such channel value is stored on the oldest bits (octet) in the integral color (numeric) value,\n * so it is fully compatible with THREE.Color numerical representation (@see [[THREE.Color.getHex]],\n * [[THREE.Color.setHex]]).\n * See also [[getHexFromRgba]] and [[getRgbaFromHex]] for more info about conversion.\n */\nexport namespace ColorUtils {\n    /**\n     * Encodes RGBA channels in custom number coded format (represented in hex as 0xTTRRGGBB).\n     *\n     * We do not use direct alpha channel mapping to hex in order to preserve compatibility\n     * with THREE.js color format (0xRRGGBB). This is done by encoding transparency\n     * (255 - alpha) instead of alpha on the oldest bits, shifted by [[SHIFT_TRANSPARENCY]].\n     * This way simple 0xRRGGBB color is equal to 0x00RRGGBB without transparency and\n     * color defining transparency (alpha < 255) is always recognizable by the oldest\n     * bit set:\n     * ```typescript\n     * (color >> SHIFT_TRANSPARENCY) !== 0.\n     * ```\n     * @note All input components are floating points in <0, 1> range (inclusively).\n     * @note Although method encodes transparency channel in single number value, it is still\n     * compatible with THREE.js number based color coding (0xRRGGBB), so you may pass this value to\n     * [[THREE.Color]] c-tor, but keep in mind that transparency will be silently ignored.\n     */\n    export function getHexFromRgba(r: number, g: number, b: number, a: number): number {\n        assert(a >= 0 && a <= 1);\n        const t = HEX_FULL_CHANNEL - Math.floor(a * HEX_FULL_CHANNEL);\n        return (\n            (t << SHIFT_TRANSPARENCY) ^\n            ((r * HEX_FULL_CHANNEL) << SHIFT_RED) ^\n            ((g * HEX_FULL_CHANNEL) << SHIFT_GREEN) ^\n            ((b * HEX_FULL_CHANNEL) << SHIFT_BLUE)\n        );\n    }\n\n    /**\n     * Encodes RGB all color channels in single number with format 0xRRGGBB.\n     *\n     * All input channels should be in <0, 1> range (inclusively).\n     * See also [[getHexFromRgba]] for more information about [[THREE.Color]] compatibility.\n     *\n     * @note This method is fully compatible with THREE.js color encoding, so\n     * you may pass this value directly to THREE.Color c-tor.\n     */\n    export function getHexFromRgb(r: number, g: number, b: number): number {\n        assert(r >= 0 && r <= 1);\n        assert(g >= 0 && g <= 1);\n        assert(b >= 0 && b <= 1);\n        return (\n            ((r * HEX_FULL_CHANNEL) << SHIFT_RED) ^\n            ((g * HEX_FULL_CHANNEL) << SHIFT_GREEN) ^\n            ((b * HEX_FULL_CHANNEL) << SHIFT_BLUE)\n        );\n    }\n\n    /**\n     * Encode and convert HSL value to number coded color format (0xRRGGBB).\n     *\n     * @see getHexFromRgb.\n     * @param h Hue component value between 0 and 1.\n     * @param s Saturation value between 0 and 1.\n     * @param l Lightness channel between 0 and 1.\n     */\n    export function getHexFromHsl(h: number, s: number, l: number): number {\n        assert(h >= 0 && h <= 1);\n        assert(s >= 0 && s <= 1);\n        assert(l >= 0 && l <= 1);\n        return tmpColor.setHSL(h, s, l).getHex();\n    }\n\n    /**\n     * Retrieve RGBA channels separately from number encoded custom color format.\n     *\n     * Provides an easy way for channels extraction (r, g, b, a) from custom number coded color\n     * format.\n     *\n     * @see getHexFromRgba.\n     * @param hex The number encoded color value (0xRRGGBB or 0xTTRRGGBB in hex).\n     * @returns r, g, b, a channels in simple object, where each channel value is saved as floating\n     * point from 0 to 1 inclusively.\n     */\n    export function getRgbaFromHex(hex: number): { r: number; g: number; b: number; a: number } {\n        assert((hex & ~HEX_TRGB_MASK) === 0, \"Wrong hex format\");\n        return {\n            r: ((hex >> SHIFT_RED) & HEX_FULL_CHANNEL) / HEX_FULL_CHANNEL,\n            g: ((hex >> SHIFT_GREEN) & HEX_FULL_CHANNEL) / HEX_FULL_CHANNEL,\n            b: ((hex >> SHIFT_BLUE) & HEX_FULL_CHANNEL) / HEX_FULL_CHANNEL,\n            a:\n                (HEX_FULL_CHANNEL - ((hex >> SHIFT_TRANSPARENCY) & HEX_FULL_CHANNEL)) /\n                HEX_FULL_CHANNEL\n        };\n    }\n\n    /**\n     * Determines if number encoded color contains alpha (opacity) defined and different then 255.\n     *\n     * @param hex The number encoded color (0xRRGGBB or 0xTTRRGGBB in hex).\n     * @returns True if color has transparency defined.\n     */\n    export function hasAlphaInHex(hex: number): boolean {\n        assert((hex & ~HEX_TRGB_MASK) === 0, \"Wrong hex format\");\n        return hex >> SHIFT_TRANSPARENCY !== 0;\n    }\n\n    /**\n     * Retrieves alpha color channel from hex encoded color value.\n     *\n     * @see getHexFromRgba.\n     * @param hex The number encoded color value (representable as 0xRRGGBB or 0xTTRRGGBB in hex).\n     * @returns The floating point alpha component in <0, 1> range.\n     */\n    export function getAlphaFromHex(hex: number): number {\n        assert((hex & ~HEX_TRGB_MASK) === 0, \"Wrong hex format\");\n        return (\n            ((HEX_FULL_CHANNEL - (hex >> SHIFT_TRANSPARENCY)) & HEX_FULL_CHANNEL) / HEX_FULL_CHANNEL\n        );\n    }\n\n    /**\n     * Remove transparency info from the number coded color, makes it compatible with external libs.\n     *\n     * @see getAlphaFromHex.\n     * @param hex The number encoded color value (representable as 0xRRGGBB or 0xTTRRGGBB in hex).\n     * @returns number coded color value representable as 0xRRGGBB in hex.\n     */\n    export function removeAlphaFromHex(hex: number): number {\n        assert((hex & ~HEX_TRGB_MASK) === 0, \"Wrong hex format\");\n        return hex & HEX_RGB_MASK;\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { JsonExpr } from \"./Expr\";\n\n/**\n * Interpolation mode used when computing a [[InterpolatedProperty]] value for a given zoom level.\n */\nexport enum InterpolationMode {\n    Discrete,\n    Linear,\n    Cubic,\n    Exponential\n}\n\n/**\n * Interpolated property could have its value (some initial value should be provided) changed\n * according to an interpolation type.\n *\n * Here is an example of an interpolated property from a map style:\n * \"lineWidth\": {\n *  \"interpolation\": \"Linear\",\n *  \"zoomLevels\": [13, 14, 15],\n *  \"values\": [ 1.5, 1.2, 0.9]\n * }\n */\nexport interface InterpolatedPropertyDefinition<T> {\n    interpolation?: \"Discrete\" | \"Linear\" | \"Cubic\" | \"Exponential\";\n    zoomLevels: number[];\n    values: T[];\n    exponent?: number;\n}\n\n/**\n * Checks if a property is interpolated.\n * @param p property to be checked\n */\nexport function isInterpolatedPropertyDefinition<T>(\n    p: any\n): p is InterpolatedPropertyDefinition<T> {\n    if (\n        p &&\n        p.interpolationMode === undefined &&\n        Array.isArray(p.values) &&\n        p.values.length > 0 &&\n        p.values[0] !== undefined &&\n        Array.isArray(p.zoomLevels) &&\n        p.zoomLevels.length > 0 &&\n        p.zoomLevels[0] !== undefined &&\n        p.values.length === p.zoomLevels.length\n    ) {\n        return true;\n    }\n    return false;\n}\n\n/**\n * Converts an [[InterpolatedPropertyDefinition]] to a [[JsonExpr]].\n *\n * @param property A valid [[InterpolatedPropertyDefinition]]\n */\nexport function interpolatedPropertyDefinitionToJsonExpr(\n    property: InterpolatedPropertyDefinition<any>\n): JsonExpr {\n    if (property.interpolation === undefined || property.interpolation === \"Discrete\") {\n        const step: JsonExpr = [\"step\", [\"zoom\"], property.values[0]];\n        for (let i = 1; i < property.zoomLevels.length; ++i) {\n            step.push(property.zoomLevels[i], property.values[i]);\n        }\n        return step;\n    }\n    const interpolation: JsonExpr = [\"interpolate\"];\n    switch (property.interpolation) {\n        case \"Linear\":\n            interpolation.push([\"linear\"]);\n            break;\n        case \"Cubic\":\n            interpolation.push([\"cubic\"]);\n            break;\n        case \"Exponential\":\n            interpolation.push([\n                \"exponential\",\n                property.exponent !== undefined ? property.exponent : 2\n            ]);\n            break;\n        default:\n            throw new Error(`interpolation mode '${property.interpolation}' is not supported`);\n    } //switch\n    interpolation.push([\"zoom\"]);\n    for (let i = 0; i < property.zoomLevels.length; ++i) {\n        interpolation.push(property.zoomLevels[i], property.values[i]);\n    }\n    return interpolation;\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * Namespace containing useful information when dealing with Unicode's code points.\n */\nexport namespace UnicodeUtils {\n    /**\n     * Range of Unicode code points considered as white space.\n     * https://en.wikipedia.org/wiki/Whitespace_character\n     */\n    export const whiteSpaceRanges = [\n        [0x0009, 0x0009],\n        [0x0020, 0x0020],\n        [0x1680, 0x1680],\n        [0x2000, 0x2006],\n        [0x2008, 0x200a],\n        [0x205f, 0x3000],\n        [0x180e, 0x180e],\n        [0x200b, 0x200d]\n    ];\n\n    /**\n     * Checks if a character should be considered as a white space.\n     *\n     * @param codePoint Character's Unicode code point.\n     *\n     * @returns Result of the test.\n     */\n    export function isWhiteSpace(codePoint: number) {\n        for (const range of whiteSpaceRanges) {\n            if (codePoint >= range[0] && codePoint <= range[1]) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    /**\n     * Range of Unicode code points considered as `NewLine`.\n     * https://en.wikipedia.org/wiki/Newline#Unicode\n     */\n    export const newLineRanges = [\n        [0x000a, 0x000d],\n        [0x0085, 0x0085],\n        [0x2028, 0x2029]\n    ];\n\n    /**\n     * Checks if a character should be considered as a new line.\n     *\n     * @param codePoint Character's Unicode code point.\n     *\n     * @returns Result of the test.\n     */\n    export function isNewLine(codePoint: number) {\n        for (const range of newLineRanges) {\n            if (codePoint >= range[0] && codePoint <= range[1]) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    /**\n     * Range of Unicode code points considered as non-printable.\n     * https://en.wikipedia.org/wiki/Unicode_control_characters\n     */\n    export const nonPrintableRanges = [\n        [0x0000, 0x001f],\n        [0x007f, 0x009f]\n    ];\n\n    /**\n     * Checks if a character's can be printed (rendered).\n     *\n     * @param codePoint Character's Unicode code point.\n     *\n     * @returns Result of the test.\n     */\n    export function isPrintable(codePoint: number) {\n        for (const range of nonPrintableRanges) {\n            if (codePoint >= range[0] && codePoint <= range[1]) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    /**\n     * Unicode code point direction.\n     */\n    export enum Direction {\n        Neutral = 0.0,\n        Weak = 0.5,\n        LTR = 1.0,\n        RTL = -1.0\n    }\n\n    // TODO: Review/Remove/Add any additional needed blocks (HARP-3330).\n    /**\n     * Unicode Blocks which have inherent RTL direction.\n     * These blocks correspond to the scripts described here:\n     * https://en.wikipedia.org/wiki/Right-to-left#List_of_RTL_scripts\n     */\n    export const rtlBlocks: string[] = [\n        \"Hebrew\",\n        \"Alphabetic Presentation Forms\",\n        \"Arabic\",\n        \"Arabic Supplement\",\n        \"Arabic Extended-A\",\n        \"Arabic Presentation Forms-A\",\n        \"Arabic Presentation Forms-B\",\n        \"Arabic Mathematical Alphabetic Symbols\",\n        \"Indic Siyaq Numbers\",\n        \"Rumi Numeral Symbols\",\n        \"Syriac\",\n        \"Syriac Supplement\",\n        \"Samaritan\",\n        \"Mandaic\",\n        \"Thaana\",\n        \"Mende Kikakui\",\n        \"NKo\",\n        \"Adlam\",\n        \"Hanifi Rohingya\"\n    ];\n\n    /**\n     * ASCII punctuation is considered to have neutral direction:\n     * https://en.wikipedia.org/wiki/Basic_Latin_(Unicode_block)#Table_of_characters\n     */\n    export const neutralBidirectionalRanges = [\n        [0x0020, 0x002f],\n        [0x003a, 0x0040],\n        [0x005b, 0x0060],\n        [0x007b, 0x007e]\n    ];\n\n    /**\n     * Latin and arabic numerals are considered to have weak directionality:\n     * https://en.wikipedia.org/wiki/Basic_Latin_(Unicode_block)#Table_of_characters\n     * https://en.wikipedia.org/wiki/Arabic_(Unicode_block)#Block\n     */\n    export const weakBidirectionalRanges = [\n        [0x0030, 0x0039],\n        [0x0660, 0x0669],\n        [0x06f0, 0x06f9]\n    ];\n\n    /**\n     * Returns the Unicode's character direction.\n     *\n     * @param codePoint Character's Unicode code point.\n     * @param block Character's Unicode block.\n     *\n     * @returns Character's direction.\n     */\n    export function getDirection(codePoint: number, block: string): Direction {\n        // Test for neutral and weak code points first (they're inside LTR/RTL ranges).\n        for (const weakRange of weakBidirectionalRanges) {\n            if (codePoint >= weakRange[0] && codePoint <= weakRange[1]) {\n                return Direction.Weak;\n            }\n        }\n        for (const neutralRange of neutralBidirectionalRanges) {\n            if (codePoint >= neutralRange[0] && codePoint <= neutralRange[1]) {\n                return Direction.Neutral;\n            }\n        }\n\n        // Check for RTL/LTR.\n        const rtl = rtlBlocks.find(element => {\n            return element === block;\n        });\n        if (rtl !== undefined) {\n            return Direction.RTL;\n        } else {\n            return Direction.LTR;\n        }\n    }\n\n    /**\n     * Some punctuation characters (like: (, ), <, >, [,], {, }) need to be mirrored when rendering\n     * a RTL string to preserve their intrinsic meaning.\n     * https://en.wikipedia.org/wiki/Basic_Latin_(Unicode_block)#Table_of_characters\n     */\n    export const rtlMirroredCodePoints = [\n        0x0028,\n        0x0029,\n        0x003c,\n        0x003e,\n        0x005b,\n        0x005d,\n        0x007b,\n        0x007d\n    ];\n\n    /**\n     * Checks if a character should be mirrored on an RTL run.\n     *\n     * @param codePoint Character's Unicode code point.\n     *\n     * @returns Result of the test.\n     */\n    export function isRtlMirrored(codePoint: number): boolean {\n        return (\n            rtlMirroredCodePoints.find(element => {\n                return element === codePoint;\n            }) !== undefined\n        );\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport {\n    BufferAttribute,\n    ColorUtils,\n    Env,\n    Expr,\n    getPropertyValue,\n    InterpolatedProperty,\n    isExtrudedLineTechnique,\n    isExtrudedPolygonTechnique,\n    isInterpolatedProperty,\n    isJsonExpr,\n    isShaderTechnique,\n    isStandardTechnique,\n    isTerrainTechnique,\n    isTextureBuffer,\n    parseStringEncodedColor,\n    ShaderTechnique,\n    Technique,\n    techniqueDescriptors,\n    TEXTURE_PROPERTY_KEYS,\n    TextureProperties,\n    TRANSPARENCY_PROPERTY_KEYS,\n    Value\n} from \"@here/harp-datasource-protocol\";\nimport {\n    CirclePointsMaterial,\n    disableBlending,\n    enableBlending,\n    HighPrecisionLineMaterial,\n    MapMeshBasicMaterial,\n    MapMeshStandardMaterial,\n    SolidLineMaterial\n} from \"@here/harp-materials\";\nimport { assert, LoggerManager } from \"@here/harp-utils\";\nimport * as THREE from \"three\";\nimport { DisplacedMesh } from \"./geometry/DisplacedMesh\";\nimport { SolidLineMesh } from \"./geometry/SolidLineMesh\";\nimport { Circles, Squares } from \"./MapViewPoints\";\nimport { toPixelFormat, toTextureDataType, toTextureFilter, toWrappingMode } from \"./ThemeHelpers\";\nimport { Tile } from \"./Tile\";\n\nconst logger = LoggerManager.instance.create(\"DecodedTileHelpers\");\n\nconst DEFAULT_SKIP_PROPERTIES = [\n    ...TEXTURE_PROPERTY_KEYS,\n    \"mapProperties\",\n    \"normalMapProperties\",\n    \"displacementMapProperties\",\n    \"roughnessMapProperties\",\n    \"emissiveMapProperties\",\n    \"alphaMapProperties\",\n    \"metalnessMapProperties\",\n    \"bumpMapProperties\"\n];\n\n/**\n * The structure of the options to pass into [[createMaterial]].\n */\nexport interface MaterialOptions {\n    /**\n     * The shader [[Technique]] to choose.\n     */\n    technique: Technique;\n\n    /**\n     * Environment used to evaluate dynamic technique attributes.\n     *\n     * Usually [[MapView.mapEnv]].\n     */\n    env: Env;\n\n    /**\n     * Properties to skip.\n     *\n     * @see [[applyTechniqueToMaterial]]\n     */\n    skipExtraProps?: string[];\n\n    /**\n     * `RawShaderMaterial` instances need to know about the fog at instantiation in order to avoid\n     * recompiling them manually later (ThreeJS does not update fog for `RawShaderMaterial`s).\n     */\n    fog?: boolean;\n\n    /**\n     * Whether shadows are enabled or not, this is required because we change the material used.\n     */\n    shadowsEnabled?: boolean;\n}\n\n/**\n * Create a material, depending on the rendering technique provided in the options.\n *\n * @param options The material options the subsequent functions need.\n * @param materialUpdateCallback Optional callback when the material gets updated,\n *                               e.g. after texture loading.\n *\n * @returns new material instance that matches `technique.name`\n */\nexport function createMaterial(\n    options: MaterialOptions,\n    textureReadyCallback?: (texture: THREE.Texture) => void\n): THREE.Material | undefined {\n    const technique = options.technique;\n    const Constructor = getMaterialConstructor(technique, options.shadowsEnabled === true);\n\n    const settings: { [key: string]: any } = {};\n\n    if (Constructor === undefined) {\n        return undefined;\n    }\n\n    if (\n        Constructor.prototype instanceof THREE.RawShaderMaterial &&\n        Constructor !== HighPrecisionLineMaterial\n    ) {\n        settings.fog = options.fog;\n    }\n    if (options.shadowsEnabled === true && technique.name === \"fill\") {\n        settings.removeDiffuseLight = true;\n    }\n\n    const material = new Constructor(settings);\n\n    if (technique.id !== undefined) {\n        material.name = technique.id;\n    }\n\n    if (isExtrudedPolygonTechnique(technique)) {\n        material.flatShading = true;\n        // We do not support mixing vertex colors (static) and material colors (may be dynamic)\n        // mixture. Vertex colors are stored in VBO and are not modifiable - some solution for\n        // this problem is proposed in the HARP-8289 and PR #1164.\n        // TODO: Remove when problem with substitute (vertex & material) colors will be solved.\n        if (technique.vertexColors === true) {\n            delete technique.color;\n        }\n    }\n\n    material.depthTest = isExtrudedPolygonTechnique(technique) && technique.depthTest !== false;\n\n    if (\n        isStandardTechnique(technique) ||\n        isTerrainTechnique(technique) ||\n        isExtrudedPolygonTechnique(technique)\n    ) {\n        TEXTURE_PROPERTY_KEYS.forEach((texturePropertyName: string) => {\n            const textureProperty = (technique as any)[texturePropertyName];\n            if (textureProperty === undefined) {\n                return;\n            }\n\n            const onLoad = (texture: THREE.Texture) => {\n                const properties = (technique as any)[\n                    texturePropertyName + \"Properties\"\n                ] as TextureProperties;\n                if (properties !== undefined) {\n                    if (properties.wrapS !== undefined) {\n                        texture.wrapS = toWrappingMode(properties.wrapS);\n                    }\n                    if (properties.wrapT !== undefined) {\n                        texture.wrapT = toWrappingMode(properties.wrapT);\n                    }\n                    if (properties.magFilter !== undefined) {\n                        texture.magFilter = toTextureFilter(properties.magFilter);\n                    }\n                    if (properties.minFilter !== undefined) {\n                        texture.minFilter = toTextureFilter(properties.minFilter);\n                    }\n                    if (properties.flipY !== undefined) {\n                        texture.flipY = properties.flipY;\n                    }\n                    if (properties.repeatU !== undefined) {\n                        texture.repeat.x = properties.repeatU;\n                    }\n                    if (properties.repeatV !== undefined) {\n                        texture.repeat.y = properties.repeatV;\n                    }\n                }\n                (material as any)[texturePropertyName] = texture;\n                texture.needsUpdate = true;\n                material.needsUpdate = true;\n\n                if (textureReadyCallback) {\n                    textureReadyCallback(texture);\n                }\n            };\n\n            const onError = (error: ErrorEvent | string) => {\n                logger.error(\"#createMaterial: Failed to load texture: \", error);\n            };\n\n            let textureUrl: string | undefined;\n            if (typeof textureProperty === \"string\") {\n                textureUrl = textureProperty;\n            } else if (isTextureBuffer(textureProperty)) {\n                if (textureProperty.type === \"image/raw\") {\n                    const properties = textureProperty.dataTextureProperties;\n                    if (properties !== undefined) {\n                        const textureDataType: THREE.TextureDataType | undefined = properties.type\n                            ? toTextureDataType(properties.type)\n                            : undefined;\n                        const textureBuffer = getTextureBuffer(\n                            textureProperty.buffer,\n                            textureDataType\n                        );\n\n                        const texture = new THREE.DataTexture(\n                            textureBuffer,\n                            properties.width,\n                            properties.height,\n                            properties.format ? toPixelFormat(properties.format) : undefined,\n                            textureDataType\n                        );\n                        onLoad(texture);\n                    } else {\n                        onError(\"no data texture properties provided.\");\n                    }\n                } else {\n                    const textureBlob = new Blob([textureProperty.buffer], {\n                        type: textureProperty.type\n                    });\n                    textureUrl = URL.createObjectURL(textureBlob);\n                }\n            }\n\n            if (textureUrl) {\n                new THREE.TextureLoader().load(\n                    textureUrl,\n                    onLoad,\n                    undefined, // onProgress\n                    onError\n                );\n            }\n        });\n    }\n\n    if (isShaderTechnique(technique)) {\n        // Special case for ShaderTechnique.\n        applyShaderTechniqueToMaterial(technique, material);\n    } else {\n        // Generic technique.\n        applyTechniqueToMaterial(technique, material, options.env, options.skipExtraProps);\n    }\n\n    return material;\n}\n\n/**\n * Returns a [[THREE.BufferAttribute]] created from a provided [[BufferAttribute]] object.\n *\n * @param attribute BufferAttribute a WebGL compliant buffer\n */\nexport function getBufferAttribute(attribute: BufferAttribute): THREE.BufferAttribute {\n    switch (attribute.type) {\n        case \"float\":\n            return new THREE.BufferAttribute(\n                new Float32Array(attribute.buffer),\n                attribute.itemCount\n            );\n        case \"uint8\":\n            return new THREE.BufferAttribute(\n                new Uint8Array(attribute.buffer),\n                attribute.itemCount,\n                attribute.normalized\n            );\n        case \"uint16\":\n            return new THREE.BufferAttribute(\n                new Uint16Array(attribute.buffer),\n                attribute.itemCount,\n                attribute.normalized\n            );\n        case \"uint32\":\n            return new THREE.BufferAttribute(\n                new Uint32Array(attribute.buffer),\n                attribute.itemCount,\n                attribute.normalized\n            );\n        case \"int8\":\n            return new THREE.BufferAttribute(\n                new Int8Array(attribute.buffer),\n                attribute.itemCount,\n                attribute.normalized\n            );\n        case \"int16\":\n            return new THREE.BufferAttribute(\n                new Int16Array(attribute.buffer),\n                attribute.itemCount,\n                attribute.normalized\n            );\n        case \"int32\":\n            return new THREE.BufferAttribute(\n                new Int32Array(attribute.buffer),\n                attribute.itemCount,\n                attribute.normalized\n            );\n        default:\n            throw new Error(`unsupported buffer of type ${attribute.type}`);\n    } // switch\n}\n\n/**\n * Determines if a technique uses THREE.Object3D instances.\n * @param technique The technique to check.\n * @returns true if technique uses THREE.Object3D, false otherwise.\n */\nexport function usesObject3D(technique: Technique): boolean {\n    const name = technique.name;\n    return (\n        name !== undefined &&\n        name !== \"text\" &&\n        name !== \"labeled-icon\" &&\n        name !== \"line-marker\" &&\n        name !== \"label-rejection-line\"\n    );\n}\n\n/**\n * Builds the object associated with the given technique.\n *\n * @param technique The technique.\n * @param geometry The object's geometry.\n * @param material The object's material.\n * @param tile The tile where the object is located.\n * @param elevationEnabled True if elevation is enabled, false otherwise.\n */\nexport function buildObject(\n    technique: Technique,\n    geometry: THREE.BufferGeometry,\n    material: THREE.Material | THREE.Material[],\n    tile: Tile,\n    elevationEnabled: boolean\n): THREE.Object3D {\n    assert(technique.name !== undefined);\n\n    switch (technique.name) {\n        case \"extruded-line\":\n        case \"standard\":\n        case \"extruded-polygon\":\n        case \"fill\":\n            return elevationEnabled\n                ? new DisplacedMesh(geometry, material, () => ({\n                      min: tile.elevationRange.minElevation,\n                      max: tile.elevationRange.maxElevation\n                  }))\n                : new THREE.Mesh(geometry, material);\n        case \"terrain\":\n            return new THREE.Mesh(geometry, material);\n        case \"dashed-line\":\n        case \"solid-line\":\n            return elevationEnabled\n                ? new DisplacedMesh(\n                      geometry,\n                      material,\n                      () => ({\n                          min: tile.elevationRange.minElevation,\n                          max: tile.elevationRange.maxElevation\n                      }),\n                      SolidLineMesh.raycast\n                  )\n                : new SolidLineMesh(geometry, material);\n\n        case \"circles\":\n            return new Circles(geometry, material);\n\n        case \"squares\":\n            return new Squares(geometry, material);\n\n        case \"line\":\n            return new THREE.LineSegments(geometry, material);\n\n        case \"segments\":\n            return new THREE.LineSegments(geometry, material);\n\n        case \"shader\": {\n            assert(isShaderTechnique(technique), \"Invalid technique\");\n\n            switch (technique.primitive) {\n                case \"line\":\n                    return new THREE.Line(geometry, material);\n                case \"segments\":\n                    return new THREE.LineSegments(geometry, material);\n                case \"point\":\n                    return new THREE.Points(geometry, material);\n                case \"mesh\":\n                    return new THREE.Mesh(geometry, material);\n            }\n        }\n    }\n    assert(false, \"Invalid technique\");\n    return new THREE.Object3D();\n}\n\n/**\n * Non material properties of [[BaseTechnique]]\n */\nexport const BASE_TECHNIQUE_NON_MATERIAL_PROPS = [\"name\", \"id\", \"renderOrder\", \"transient\"];\n\n/**\n * Generic material type constructor.\n */\nexport type MaterialConstructor = new (params?: {}) => THREE.Material;\n\n/**\n * Returns a [[MaterialConstructor]] basing on provided technique object.\n *\n * @param technique [[Technique]] object which the material will be based on.\n * @param shadowsEnabled Whether the material can accept shadows, this is required for some\n * techniques to decide which material to create.\n */\nexport function getMaterialConstructor(\n    technique: Technique,\n    shadowsEnabled: boolean\n): MaterialConstructor | undefined {\n    if (technique.name === undefined) {\n        return undefined;\n    }\n\n    switch (technique.name) {\n        case \"extruded-line\":\n            if (!isExtrudedLineTechnique(technique)) {\n                throw new Error(\"Invalid extruded-line technique\");\n            }\n            return technique.shading === \"standard\"\n                ? MapMeshStandardMaterial\n                : MapMeshBasicMaterial;\n\n        case \"standard\":\n        case \"terrain\":\n        case \"extruded-polygon\":\n            return MapMeshStandardMaterial;\n\n        case \"dashed-line\":\n        case \"solid-line\":\n            return SolidLineMaterial;\n\n        case \"fill\":\n            return shadowsEnabled ? MapMeshStandardMaterial : MapMeshBasicMaterial;\n\n        case \"squares\":\n            return THREE.PointsMaterial;\n\n        case \"circles\":\n            return CirclePointsMaterial;\n\n        case \"line\":\n        case \"segments\":\n            return THREE.LineBasicMaterial;\n\n        case \"shader\":\n            return THREE.ShaderMaterial;\n\n        case \"text\":\n        case \"labeled-icon\":\n        case \"line-marker\":\n        case \"label-rejection-line\":\n            return undefined;\n    }\n}\n\n/**\n * Allows to easy parse/encode technique's base color property value as number coded color.\n *\n * Function takes care about property parsing, interpolation and encoding if neccessary.\n *\n * @see ColorUtils\n * @param technique the technique where we search for base (transparency) color value\n * @param env [[Env]] instance used to evaluate [[Expr]] based properties of [[Technique]]\n * @returns [[number]] encoded color value (in custom #TTRRGGBB) format or `undefined` if\n * base color property is not defined in the technique passed.\n */\nexport function evaluateBaseColorProperty(technique: Technique, env: Env): number | undefined {\n    const baseColorProp = getBaseColorProp(technique);\n    if (baseColorProp !== undefined) {\n        return evaluateColorProperty(baseColorProp, env);\n    }\n    return undefined;\n}\n\n/**\n * Apply [[ShaderTechnique]] parameters to material.\n *\n * @param technique the [[ShaderTechnique]] which requires special handling\n * @param material material to which technique will be applied\n */\nfunction applyShaderTechniqueToMaterial(technique: ShaderTechnique, material: THREE.Material) {\n    // The shader technique takes the argument from its `params' member.\n    const params = technique.params as { [key: string]: any };\n    // Remove base color and transparency properties from the processed set.\n    const baseColorPropName = getBaseColorPropName(technique);\n    const hasBaseColor = baseColorPropName && baseColorPropName in technique.params;\n    const props = Object.getOwnPropertyNames(params).filter(propertyName => {\n        // Omit base color and related transparency attributes if its defined in technique\n        if (\n            baseColorPropName === propertyName ||\n            (hasBaseColor && TRANSPARENCY_PROPERTY_KEYS.indexOf(propertyName) !== -1)\n        ) {\n            return false;\n        }\n        const prop = propertyName as keyof typeof params;\n        if (prop === \"name\") {\n            // skip reserved property names\n            return false;\n        }\n        return true;\n    });\n\n    // Apply all technique properties omitting base color and transparency attributes.\n    props.forEach(propertyName => {\n        // TODO: Check if properties values should not be interpolated, possible bug in old code!\n        // This behavior is kept in the new version too, level is set to undefined.\n        applyTechniquePropertyToMaterial(material, propertyName, params[propertyName]);\n    });\n\n    if (hasBaseColor) {\n        const propColor = baseColorPropName as keyof THREE.Material;\n        // Finally apply base color and related properties to material (opacity, transparent)\n        applyBaseColorToMaterial(material, material[propColor], technique, params[propColor]);\n    }\n}\n\n/**\n * Apply generic technique parameters to material.\n *\n * Skips non-material [[Technique]] props:\n *  * [[BaseTechnique]] props,\n *  * `name` which is used as discriminator for technique types,\n *  * props starting with `_`\n *  * props found `skipExtraProps`\n *\n * `THREE.Color` properties are supported.\n *\n * @param technique technique from where params are copied\n * @param material target material\n * @param env [[Env]] instance used to evaluate [[Expr]] based properties of [[Technique]]\n * @param skipExtraProps optional, skipped props.\n */\nfunction applyTechniqueToMaterial(\n    technique: Technique,\n    material: THREE.Material,\n    env: Env,\n    skipExtraProps?: string[]\n) {\n    // Remove transparent color from the firstly processed properties set.\n    const baseColorPropName = getBaseColorPropName(technique);\n    const hasBaseColor = baseColorPropName && baseColorPropName in technique;\n    const genericProps = Object.getOwnPropertyNames(technique).filter(propertyName => {\n        if (\n            propertyName.startsWith(\"_\") ||\n            BASE_TECHNIQUE_NON_MATERIAL_PROPS.indexOf(propertyName) !== -1 ||\n            DEFAULT_SKIP_PROPERTIES.indexOf(propertyName) !== -1 ||\n            (skipExtraProps !== undefined && skipExtraProps.indexOf(propertyName) !== -1)\n        ) {\n            return false;\n        }\n        // Omit base color and related transparency attributes if its defined in technique.\n        if (\n            baseColorPropName === propertyName ||\n            (hasBaseColor && TRANSPARENCY_PROPERTY_KEYS.indexOf(propertyName) !== -1)\n        ) {\n            return false;\n        }\n        const prop = propertyName as keyof typeof technique;\n        const m = material as any;\n        if (typeof m[prop] === \"undefined\") {\n            return false;\n        }\n        return true;\n    });\n\n    // Apply all other properties (even colors), but not transparent (base) ones.\n    genericProps.forEach(propertyName => {\n        const value = technique[propertyName as keyof Technique];\n        if (value !== undefined) {\n            applyTechniquePropertyToMaterial(material, propertyName, value, env);\n        }\n    });\n\n    // Finally apply base (possibly transparent) color itself, using blend modes to\n    // provide transparency if needed.\n    if (hasBaseColor) {\n        applyBaseColorToMaterial(\n            material,\n            material[baseColorPropName as keyof THREE.Material],\n            technique,\n            technique[baseColorPropName as keyof Technique] as Value,\n            env\n        );\n    }\n}\n\n/**\n * Apply single and generic technique property to corresponding material parameter.\n *\n * @note Special handling for material attributes of [[THREE.Color]] type is provided thus it\n * does not provide constructor that would take [[string]] or [[number]] values.\n *\n * @param material target material\n * @param propertyName material and technique parameter name (or index) that is to be transferred\n * @param techniqueAttrValue technique property value which will be applied to material attribute\n * @param env [[Env]] instance used to evaluate [[Expr]] based properties of [[Technique]]\n */\nfunction applyTechniquePropertyToMaterial(\n    material: THREE.Material,\n    propertyName: string,\n    techniqueAttrValue: Value,\n    env?: Env\n) {\n    const m = material as any;\n    if (m[propertyName] instanceof THREE.Color) {\n        applySecondaryColorToMaterial(\n            material[propertyName as keyof THREE.Material],\n            techniqueAttrValue,\n            env\n        );\n    } else {\n        const value = evaluateProperty(techniqueAttrValue, env);\n        if (value !== null) {\n            m[propertyName] = value;\n        }\n    }\n}\n\n/**\n * Apply technique color to material taking special care with transparent (RGBA) colors.\n *\n * @note This function is intended to be used with secondary, triary etc. technique colors,\n * not the base ones that may contain transparency information. Such colors should be processed\n * with [[applyTechniqueBaseColorToMaterial]] function.\n *\n * @param technique an technique the applied color comes from\n * @param material the material to which color is applied\n * @param prop technique property (color) name\n * @param value color value\n * @param env [[Env]] instance used to evaluate [[Expr]] based properties of [[Technique]]\n */\nexport function applySecondaryColorToMaterial(\n    materialColor: THREE.Color,\n    techniqueColor: Value | Expr | InterpolatedProperty,\n    env?: Env\n) {\n    let value = evaluateColorProperty(techniqueColor, env);\n    if (value === undefined) {\n        return;\n    }\n    if (ColorUtils.hasAlphaInHex(value)) {\n        logger.warn(\"Used RGBA value for technique color without transparency support!\");\n        // Just for clarity remove transparency component, even if that would be ignored\n        // by THREE.Color.setHex() function.\n        value = ColorUtils.removeAlphaFromHex(value);\n    }\n\n    materialColor.setHex(value);\n}\n\n/**\n * Apply technique base color (transparency support) to material with modifying material opacity.\n *\n * This method applies main (or base) technique color with transparency support to the corresponding\n * material color, with an effect on entire [[THREE.Material]] __opacity__ and __transparent__\n * attributes.\n *\n * @note Transparent colors should be processed as the very last technique attributes,\n * since their effect on material properties like [[THREE.Material.opacity]] and\n * [[THREE.Material.transparent]] could be overridden by corresponding technique params.\n *\n * @param technique an technique the applied color comes from\n * @param material the material to which color is applied\n * @param prop technique property (color) name\n * @param value color value in custom number format\n * @param env [[Env]] instance used to evaluate [[Expr]] based properties of [[Technique]]\n */\nexport function applyBaseColorToMaterial(\n    material: THREE.Material,\n    materialColor: THREE.Color,\n    technique: Technique,\n    techniqueColor: Value,\n    env?: Env\n) {\n    const colorValue = evaluateColorProperty(techniqueColor, env);\n    if (colorValue === undefined) {\n        return;\n    }\n\n    const { r, g, b, a } = ColorUtils.getRgbaFromHex(colorValue);\n    // Override material opacity and blending by mixing technique defined opacity\n    // with main color transparency\n    const tech = technique as any;\n    let opacity = a;\n    if (tech.opacity !== undefined) {\n        opacity *= evaluateProperty(tech.opacity, env);\n    }\n\n    opacity = THREE.MathUtils.clamp(opacity, 0, 1);\n    material.opacity = opacity;\n    materialColor.setRGB(r, g, b);\n\n    const opaque = opacity >= 1.0;\n    if (!opaque) {\n        enableBlending(material);\n    } else {\n        disableBlending(material);\n    }\n}\n\n/**\n * Calculates the value of the technique defined property.\n *\n * Function takes care about property interpolation (when @param `env` is set) as also parsing\n * string encoded numbers.\n *\n * @note Use with care, because function does not recognize property type.\n * @param value the value of color property defined in technique\n * @param env [[Env]] instance used to evaluate [[Expr]] based properties of [[Technique]]\n */\nfunction evaluateProperty(value: any, env?: Env): any {\n    if (env !== undefined && (isInterpolatedProperty(value) || Expr.isExpr(value))) {\n        value = getPropertyValue(value, env);\n    }\n    return value;\n}\n\n/**\n * Calculates the numerical value of the technique defined color property.\n *\n * Function takes care about color interpolation (when @param `env is set) as also parsing\n * string encoded colors.\n *\n * @note Use with care, because function does not recognize property type.\n * @param value the value of color property defined in technique\n * @param env [[Env]] instance used to evaluate [[Expr]] based properties of [[Technique]]\n */\nexport function evaluateColorProperty(value: Value, env?: Env): number | undefined {\n    value = evaluateProperty(value, env);\n\n    if (value === undefined || value === null) {\n        return undefined;\n    }\n\n    if (typeof value === \"number\") {\n        return value;\n    }\n\n    if (typeof value === \"string\") {\n        const parsed = parseStringEncodedColor(value);\n        if (parsed !== undefined) {\n            return parsed;\n        }\n    }\n\n    logger.error(`Unsupported color format: '${value}'`);\n    return undefined;\n}\n\n/**\n * Compile expressions in techniques as they were received from decoder.\n */\nexport function compileTechniques(techniques: Technique[]) {\n    techniques.forEach((technique: any) => {\n        for (const propertyName in technique) {\n            if (!technique.hasOwnProperty(propertyName)) {\n                continue;\n            }\n            const value = technique[propertyName];\n            if (isJsonExpr(value) && propertyName !== \"kind\") {\n                // \"kind\" is reserved.\n                try {\n                    technique[propertyName] = Expr.fromJSON(value);\n                } catch (error) {\n                    logger.error(\"#compileTechniques: Failed to compile expression:\", error);\n                }\n            }\n        }\n    });\n}\n\n/**\n * Allows to access base color property value for given technique.\n *\n * The color value may be encoded in [[number]], [[string]] or even as\n * [[InterpolateProperty]].\n *\n * @param technique The techniqe where we seach for base color property.\n * @returns The value of technique color used to apply transparency.\n */\nfunction getBaseColorProp(technique: Technique): any {\n    const baseColorPropName = getBaseColorPropName(technique);\n    if (baseColorPropName !== undefined) {\n        if (!isShaderTechnique(technique)) {\n            const propColor = baseColorPropName as keyof typeof technique;\n            return technique[propColor];\n        } else {\n            const params = technique.params as { [key: string]: any };\n            const propColor = baseColorPropName as keyof typeof params;\n            return params[propColor];\n        }\n    }\n    return undefined;\n}\n\nfunction getBaseColorPropName(technique: Technique): string | undefined {\n    const techDescriptor = techniqueDescriptors[technique.name];\n    return techDescriptor !== undefined ? techDescriptor.attrTransparencyColor : undefined;\n}\n\nfunction getTextureBuffer(\n    buffer: ArrayBuffer,\n    textureDataType: THREE.TextureDataType | undefined\n): THREE.TypedArray {\n    if (textureDataType === undefined) {\n        return new Uint8Array(buffer);\n    }\n\n    switch (textureDataType) {\n        case THREE.UnsignedByteType:\n            return new Uint8Array(buffer);\n        case THREE.ByteType:\n            return new Int8Array(buffer);\n        case THREE.ShortType:\n            return new Int16Array(buffer);\n        case THREE.UnsignedShortType:\n            return new Uint16Array(buffer);\n        case THREE.IntType:\n            return new Int32Array(buffer);\n        case THREE.UnsignedIntType:\n            return new Uint32Array(buffer);\n        case THREE.FloatType:\n            return new Float32Array(buffer);\n        case THREE.HalfFloatType:\n            return new Uint16Array(buffer);\n    }\n\n    throw new Error(\"Unsupported texture data type\");\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * Types of text elements.\n */\nexport enum TextElementType {\n    PoiLabel,\n    PathLabel,\n    LineMarker\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport * as THREE from \"three\";\n\n/**\n * The interface for the [[Pass]] class.\n */\nexport interface IPass {\n    /**\n     * Whether the [[Pass]] instance is active or not.\n     * @default `true`.\n     */\n    enabled: boolean;\n\n    /**\n     * Whether the render method should target a WebGLRenderTarget instance, or the frame buffer.\n     * @default `false`.\n     */\n    renderToScreen: boolean;\n\n    /**\n     * The resize method to extend in [[Pass]] implementations. It resizes the render targets. Call\n     * on resize events.\n     *\n     * @param width Width to resize to.\n     * @param height Height to resize to.\n     */\n    setSize(width: number, height: number): void;\n\n    /**\n     * The render method to extend in [[Pass]] implementations. This is the place where the desired\n     * effects or render operations are executed.\n     *\n     * @param renderer The WebGLRenderer instance in use.\n     * @param scene The scene to render.\n     * @param camera The camera to render the scene through.\n     * @param writeBuffer The optional WebGLRenderTarget instance to write to.\n     * @param readBuffer The optional WebGLRenderTarget instance of a previous pass to write onto.\n     * @param delta The time argument from the requestAnimationFrame.\n     */\n    render(\n        renderer: THREE.WebGLRenderer,\n        scene: THREE.Scene,\n        camera: THREE.Camera,\n        writeBuffer: THREE.WebGLRenderTarget | null,\n        readBuffer: THREE.WebGLRenderTarget | null,\n        delta?: number\n    ): void;\n}\n\n/**\n * The base class to extend for further passes in [[MapView]], like the [[MSAARenderPass]], possibly\n * a text pass, an AO effect etc. `Pass` provides the core logic for both :\n * - render passes (proper scene renders),\n * - and shader passes (quad renders, i.e. effects added on top of the render output as a\n * postprocess).\n *\n * Even some shader passes still actually fall within the render pass category as they need to\n * re-render the scene to then deduce an effect, such as masking, AO, DoF etc. Others just need the\n * previous input image to apply a shader on top of it, as for bloom or NVIDIA's FXAA for example.\n * These only are proper shader passes.\n */\nexport class Pass implements IPass {\n    enabled: boolean = false;\n    renderToScreen: boolean = false;\n    // tslint:disable-next-line:no-unused-variable\n    setSize(width: number, height: number) {\n        // Implemented in sub-classes.\n    }\n    // tslint:disable:no-unused-variable\n    render(\n        renderer: THREE.WebGLRenderer,\n        scene: THREE.Scene,\n        camera: THREE.Camera,\n        writeBuffer: THREE.WebGLRenderTarget | null,\n        readBuffer: THREE.WebGLRenderTarget | null,\n        delta?: number\n    ) {\n        // Implemented in sub-classes.\n    }\n    // tslint:enable:no-unused-variable\n}\n\n/**\n * The pass that does a default normal scene rendering for further post-effects.\n */\nexport class RenderPass extends Pass {\n    constructor() {\n        super();\n    }\n\n    /** @override */\n    render(\n        renderer: THREE.WebGLRenderer,\n        scene: THREE.Scene,\n        camera: THREE.Camera,\n        writeBuffer: THREE.WebGLRenderTarget | null,\n        readBuffer: THREE.WebGLRenderTarget | null\n    ) {\n        renderer.setRenderTarget(this.renderToScreen ? null : writeBuffer);\n        renderer.render(scene, camera);\n    }\n}\n\n/**\n * The base class to extend for post-effects on the final render (like Vignette, Sepia, color\n * correction...)\n */\nexport class ShaderPass extends Pass {\n    uniforms: { [uniform: string]: THREE.IUniform };\n    material: THREE.Material;\n    fsQuad: FullScreenQuad;\n    constructor(shader: THREE.Shader, private textureID: string = \"tDiffuse\") {\n        super();\n        if (shader instanceof THREE.ShaderMaterial) {\n            this.uniforms = shader.uniforms;\n            this.material = shader;\n        } else {\n            this.uniforms = THREE.UniformsUtils.clone(shader.uniforms);\n            this.material = new THREE.ShaderMaterial({\n                defines: { ...(shader as any).defines },\n                uniforms: this.uniforms,\n                vertexShader: shader.vertexShader,\n                fragmentShader: shader.fragmentShader\n            });\n        }\n        this.fsQuad = new FullScreenQuad(this.material);\n    }\n    /** @override */\n    render(\n        renderer: THREE.WebGLRenderer,\n        scene: THREE.Scene,\n        camera: THREE.Camera,\n        writeBuffer: THREE.WebGLRenderTarget,\n        readBuffer: THREE.WebGLRenderTarget,\n        delta?: number\n    ) {\n        if (this.uniforms[this.textureID]) {\n            this.uniforms[this.textureID].value = readBuffer.texture;\n        }\n        this.fsQuad.material = this.material;\n        renderer.setRenderTarget(this.renderToScreen ? null : writeBuffer);\n        this.fsQuad.render(renderer);\n    }\n}\n\nclass FullScreenQuad {\n    private m_mesh: THREE.Mesh;\n    private m_camera: THREE.Camera;\n    constructor(material: THREE.Material) {\n        this.m_camera = new THREE.OrthographicCamera(-1, 1, 1, -1, 0, 1);\n        const geometry = new THREE.PlaneBufferGeometry(2, 2);\n        this.m_mesh = new THREE.Mesh(geometry, material);\n    }\n    get material(): THREE.Material {\n        return this.m_mesh.material as THREE.Material;\n    }\n    set material(value: THREE.Material) {\n        this.m_mesh.material = value;\n    }\n    render(renderer: THREE.WebGLRenderer) {\n        renderer.render((this.m_mesh as any) as THREE.Scene, this.m_camera);\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { GeoBox } from \"../coordinates/GeoBox\";\nimport { GeoCoordinates } from \"../coordinates/GeoCoordinates\";\nimport { GeoCoordinatesLike } from \"../coordinates/GeoCoordinatesLike\";\nimport { Box3Like, isBox3Like } from \"../math/Box3Like\";\nimport { MathUtils } from \"../math/MathUtils\";\nimport { isOrientedBox3Like, OrientedBox3Like } from \"../math/OrientedBox3Like\";\nimport { TransformLike } from \"../math/TransformLike\";\nimport { Vector3Like } from \"../math/Vector3Like\";\nimport { EarthConstants } from \"./EarthConstants\";\nimport { Projection, ProjectionType } from \"./Projection\";\n\nimport * as THREE from \"three\";\n\nclass MercatorProjection extends Projection {\n    protected static clamp(val: number, min: number, max: number): number {\n        return Math.min(Math.max(min, val), max);\n    }\n\n    protected static latitudeClamp(latitude: number): number {\n        return MercatorProjection.clamp(\n            latitude,\n            -MercatorConstants.MAXIMUM_LATITUDE,\n            MercatorConstants.MAXIMUM_LATITUDE\n        );\n    }\n\n    private static latitudeProject(latitude: number): number {\n        return Math.log(Math.tan(Math.PI * 0.25 + latitude * 0.5)) / Math.PI;\n    }\n\n    private static latitudeClampProject(latitude: number): number {\n        return MercatorProjection.latitudeProject(MercatorProjection.latitudeClamp(latitude));\n    }\n\n    private static unprojectLatitude(y: number): number {\n        return 2.0 * Math.atan(Math.exp(Math.PI * y)) - Math.PI * 0.5;\n    }\n\n    /** @override */\n    readonly type: ProjectionType = ProjectionType.Planar;\n\n    /** @override */\n    getScaleFactor(worldPoint: Vector3Like): number {\n        return Math.cosh(2 * Math.PI * (worldPoint.y / this.unitScale - 0.5));\n    }\n\n    /** @override */\n    worldExtent<WorldBoundingBox extends Box3Like>(\n        minAltitude: number,\n        maxAltitude: number,\n        result?: WorldBoundingBox\n    ): WorldBoundingBox {\n        if (!result) {\n            result = (new THREE.Box3() as Box3Like) as WorldBoundingBox;\n        }\n        result.min.x = 0;\n        result.min.y = 0;\n        result.min.z = minAltitude;\n        result.max.x = this.unitScale;\n        result.max.y = this.unitScale;\n        result.max.z = maxAltitude;\n        return result;\n    }\n\n    /** @override */\n    projectPoint<WorldCoordinates extends Vector3Like>(\n        geoPointLike: GeoCoordinatesLike,\n        result?: WorldCoordinates\n    ): WorldCoordinates {\n        let geoPoint: GeoCoordinates;\n\n        if (geoPointLike instanceof GeoCoordinates) {\n            geoPoint = geoPointLike;\n        } else {\n            geoPoint = new GeoCoordinates(\n                geoPointLike.latitude,\n                geoPointLike.longitude,\n                geoPointLike.altitude\n            );\n        }\n\n        if (!result) {\n            // tslint:disable-next-line:no-object-literal-type-assertion\n            result = { x: 0, y: 0, z: 0 } as WorldCoordinates;\n        }\n        result.x = ((geoPoint.longitude + 180) / 360) * this.unitScale;\n        result.y =\n            (MercatorProjection.latitudeClampProject(geoPoint.latitudeInRadians) * 0.5 + 0.5) *\n            this.unitScale;\n        result.z = geoPoint.altitude || 0;\n        return result;\n    }\n\n    /** @override */\n    unprojectPoint(worldPoint: Vector3Like): GeoCoordinates {\n        const geoPoint = GeoCoordinates.fromRadians(\n            MercatorProjection.unprojectLatitude((worldPoint.y / this.unitScale - 0.5) * 2.0),\n            (worldPoint.x / this.unitScale) * 2 * Math.PI - Math.PI,\n            worldPoint.z\n        );\n        return geoPoint;\n    }\n\n    /** @override */\n    unprojectAltitude(worldPoint: Vector3Like): number {\n        return worldPoint.z;\n    }\n\n    /** @override */\n    projectBox<WorldBoundingBox extends Box3Like | OrientedBox3Like>(\n        geoBox: GeoBox,\n        result?: WorldBoundingBox\n    ): WorldBoundingBox {\n        const worldCenter = this.projectPoint(geoBox.center);\n        const worldNorth =\n            (MercatorProjection.latitudeClampProject(geoBox.northEast.latitudeInRadians) * 0.5 +\n                0.5) *\n            this.unitScale;\n        const worldSouth =\n            (MercatorProjection.latitudeClampProject(geoBox.southWest.latitudeInRadians) * 0.5 +\n                0.5) *\n            this.unitScale;\n        const worldYCenter = (worldNorth + worldSouth) * 0.5;\n\n        worldCenter.y = worldYCenter;\n\n        const latitudeSpan = worldNorth - worldSouth;\n        const longitudeSpan = (geoBox.longitudeSpan / 360) * this.unitScale;\n        if (!result) {\n            result = (new THREE.Box3() as Box3Like) as WorldBoundingBox;\n        }\n        if (isBox3Like(result)) {\n            result.min.x = worldCenter.x - longitudeSpan * 0.5;\n            result.min.y = worldCenter.y - latitudeSpan * 0.5;\n            result.max.x = worldCenter.x + longitudeSpan * 0.5;\n            result.max.y = worldCenter.y + latitudeSpan * 0.5;\n            const altitudeSpan = geoBox.altitudeSpan;\n            if (altitudeSpan !== undefined) {\n                result.min.z = worldCenter.z - altitudeSpan * 0.5;\n                result.max.z = worldCenter.z + altitudeSpan * 0.5;\n            } else {\n                result.min.z = 0;\n                result.max.z = 0;\n            }\n        } else if (isOrientedBox3Like(result)) {\n            MathUtils.newVector3(1, 0, 0, result.xAxis);\n            MathUtils.newVector3(0, 1, 0, result.yAxis);\n            MathUtils.newVector3(0, 0, 1, result.zAxis);\n            result.position.x = worldCenter.x;\n            result.position.y = worldCenter.y;\n            result.position.z = worldCenter.z;\n            result.extents.x = longitudeSpan * 0.5;\n            result.extents.y = latitudeSpan * 0.5;\n            result.extents.z = Math.max(Number.EPSILON, (geoBox.altitudeSpan || 0) * 0.5);\n        } else {\n            throw new Error(\"invalid bounding box\");\n        }\n        return result;\n    }\n\n    /** @override */\n    unprojectBox(worldBox: Box3Like): GeoBox {\n        const minGeo = this.unprojectPoint(worldBox.min);\n        const maxGeo = this.unprojectPoint(worldBox.max);\n        const geoBox = GeoBox.fromCoordinates(minGeo, maxGeo);\n        return geoBox;\n    }\n\n    /** @override */\n    groundDistance(worldPoint: Vector3Like): number {\n        return worldPoint.z;\n    }\n\n    /** @override */\n    scalePointToSurface(worldPoint: Vector3Like): Vector3Like {\n        worldPoint.z = 0;\n        return worldPoint;\n    }\n\n    /** @override */\n    surfaceNormal(_worldPoint: Vector3Like, normal?: Vector3Like) {\n        if (normal === undefined) {\n            normal = { x: 0, y: 0, z: 1 };\n        } else {\n            normal.x = 0;\n            normal.y = 0;\n            normal.z = 1;\n        }\n        return normal;\n    }\n\n    /** @override */\n    reprojectPoint(\n        sourceProjection: Projection,\n        worldPos: Vector3Like,\n        result?: Vector3Like\n    ): Vector3Like {\n        // this implementation of [[reprojectPoint]] supports both\n        // [[WebMercatorProjection]] and [[MercatorProjection]]. The only\n        // difference betweeen these two variants of WEB Mercator\n        // is in the orientation of the Y axis, so we just flip Y coordinates\n        // when reprojecting between them.\n        if (\n            sourceProjection !== this &&\n            (sourceProjection === webMercatorProjection || sourceProjection === mercatorProjection)\n        ) {\n            if (result === undefined) {\n                // tslint:disable-next-line: no-object-literal-type-assertion\n                result = {} as Vector3Like;\n            }\n\n            result.x = worldPos.x;\n            result.y = this.unitScale - worldPos.y;\n            result.z = worldPos.z;\n\n            return result;\n        }\n\n        return super.reprojectPoint(sourceProjection, worldPos, result!);\n    }\n}\n\nclass WebMercatorProjection extends MercatorProjection {\n    /** @override */\n    projectPoint<WorldCoordinates extends Vector3Like>(\n        geoPointLike: GeoCoordinatesLike,\n        result?: WorldCoordinates\n    ): WorldCoordinates {\n        let geoPoint: GeoCoordinates;\n\n        if (geoPointLike instanceof GeoCoordinates) {\n            geoPoint = geoPointLike;\n        } else {\n            geoPoint = new GeoCoordinates(\n                geoPointLike.latitude,\n                geoPointLike.longitude,\n                geoPointLike.altitude\n            );\n        }\n\n        /*\n         * The following tslint:disable is due to the fact that the [[WorldCoordinates]]\n         * might be a concrete class which is not available at runtime.\n         * Consider the following example:\n         *\n         *  const x: THREE.Vector3 = new THREE.Vector3(0,0,0);\n         *  const result = EquirectangularProjection.projectPoint<THREE.Vector3>(x);\n         *\n         * Note: type of `result` is Vector3Like and not as expected: THREE.Vector3!\n         */\n        if (!result) {\n            // tslint:disable-next-line:no-object-literal-type-assertion\n            result = { x: 0, y: 0, z: 0 } as WorldCoordinates;\n        }\n\n        result.x = ((geoPoint.longitude + 180) / 360) * this.unitScale;\n        const sy = Math.sin(MercatorProjection.latitudeClamp(geoPoint.latitudeInRadians));\n        result.y = (0.5 - Math.log((1 + sy) / (1 - sy)) / (4 * Math.PI)) * this.unitScale;\n        result.z = geoPoint.altitude || 0;\n        return result;\n    }\n\n    /** @override */\n    unprojectPoint(worldPoint: Vector3Like): GeoCoordinates {\n        const x = worldPoint.x / this.unitScale - 0.5;\n        const y = 0.5 - worldPoint.y / this.unitScale;\n\n        const longitude = 360 * x;\n        const latitude = 90 - (360 * Math.atan(Math.exp(-y * 2 * Math.PI))) / Math.PI;\n\n        return new GeoCoordinates(latitude, longitude, worldPoint.z);\n    }\n\n    /** @override */\n    projectBox<WorldBoundingBox extends Box3Like | OrientedBox3Like>(\n        geoBox: GeoBox,\n        result?: WorldBoundingBox\n    ): WorldBoundingBox {\n        const r = super.projectBox(geoBox, result);\n        if (isBox3Like(r)) {\n            // Invert the y axis for web mercator, this means that max => min & min => max\n            const maxY = r.max.y;\n            r.max.y = this.unitScale - r.min.y;\n            r.min.y = this.unitScale - maxY;\n        } else if (isOrientedBox3Like(r)) {\n            MathUtils.newVector3(1, 0, 0, r.xAxis);\n            MathUtils.newVector3(0, -1, 0, r.yAxis);\n            MathUtils.newVector3(0, 0, -1, r.zAxis);\n            r.position.y = this.unitScale - r.position.y;\n        }\n        return r;\n    }\n\n    /** @override */\n    unprojectBox(worldBox: Box3Like): GeoBox {\n        const minGeo = this.unprojectPoint(worldBox.min);\n        const maxGeo = this.unprojectPoint(worldBox.max);\n        const geoBox = new GeoBox(\n            new GeoCoordinates(maxGeo.latitude, minGeo.longitude, minGeo.altitude),\n            new GeoCoordinates(minGeo.latitude, maxGeo.longitude, maxGeo.altitude)\n        );\n        return geoBox;\n    }\n\n    /** @override */\n    surfaceNormal(_worldPoint: Vector3Like, normal?: Vector3Like) {\n        if (normal === undefined) {\n            normal = { x: 0, y: 0, z: -1 };\n        } else {\n            normal.x = 0;\n            normal.y = 0;\n            normal.z = -1;\n        }\n        return normal;\n    }\n\n    /** @override */\n    localTangentSpace(geoPoint: GeoCoordinatesLike, result: TransformLike): TransformLike {\n        this.projectPoint(geoPoint, result.position);\n        MathUtils.newVector3(1, 0, 0, result.xAxis);\n        MathUtils.newVector3(0, -1, 0, result.yAxis);\n        MathUtils.newVector3(0, 0, -1, result.zAxis);\n        return result;\n    }\n}\n\nexport class MercatorConstants {\n    // Math.atan(Math.sinh(Math.PI))\n    static readonly MAXIMUM_LATITUDE: number = 1.4844222297453323;\n}\n\n/**\n * Mercator [[Projection]] used to convert geo coordinates to world coordinates and vice versa.\n */\nexport const mercatorProjection: Projection = new MercatorProjection(\n    EarthConstants.EQUATORIAL_CIRCUMFERENCE\n);\n\n/**\n * Web Mercator [[Projection]] used to convert geo coordinates to world coordinates and vice versa.\n */\nexport const webMercatorProjection: Projection = new WebMercatorProjection(\n    EarthConstants.EQUATORIAL_CIRCUMFERENCE\n);\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { SubdivisionScheme } from \"./SubdivisionScheme\";\n\nclass QuadTreeSubdivisionScheme implements SubdivisionScheme {\n    getSubdivisionX(): number {\n        return 2;\n    }\n    getSubdivisionY(): number {\n        return 2;\n    }\n    getLevelDimensionX(level: number): number {\n        // tslint:disable-next-line:no-bitwise\n        return 1 << level;\n    }\n    getLevelDimensionY(level: number): number {\n        // tslint:disable-next-line:no-bitwise\n        return 1 << level;\n    }\n}\n\n/**\n * [[SubdivisionScheme]] representing a quadtree.\n */\nexport const quadTreeSubdivisionScheme: SubdivisionScheme = new QuadTreeSubdivisionScheme();\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/** @hidden */\nconst powerOfTwo = [\n    0x1,\n    0x2,\n    0x4,\n    0x8,\n    0x10,\n    0x20,\n    0x40,\n    0x80,\n    0x100,\n    0x200,\n    0x400,\n    0x800,\n    0x1000,\n    0x2000,\n    0x4000,\n    0x8000,\n    0x10000,\n    0x20000,\n    0x40000,\n    0x80000,\n    0x100000,\n    0x200000,\n    0x400000,\n    0x800000,\n    0x1000000,\n    0x2000000,\n    0x4000000,\n    0x8000000,\n    0x10000000,\n    0x20000000,\n    0x40000000,\n    0x80000000,\n    0x100000000,\n    0x200000000,\n    0x400000000,\n    0x800000000,\n    0x1000000000,\n    0x2000000000,\n    0x4000000000,\n    0x8000000000,\n    0x10000000000,\n    0x20000000000,\n    0x40000000000,\n    0x80000000000,\n    0x100000000000,\n    0x200000000000,\n    0x400000000000,\n    0x800000000000,\n    0x1000000000000,\n    0x2000000000000,\n    0x4000000000000,\n    0x8000000000000,\n    0x10000000000000 // Math.pow(2, 52), highest bit that can be set correctly.\n];\n\n/**\n * The `TileKey` instances are used to address a tile in a quadtree.\n *\n * A tile key is defined by a row, a column, and a level. The tree has a root at level 0, with one\n * single tile. On every level, each tile is divided into four children (therefore the name\n * quadtree).\n *\n * Within each [[level]], any particular tile is addressed with [[row]] and [[column]]. The number\n * of rows and columns in each level is 2 to the power of the level. This means: On level 0, only\n * one tile exists, [[columnsAtLevel]]() and [[rowsAtLevel]]() are both 1. On level 1, 4 tiles\n * exist, in 2 rows and 2 columns. On level 2 we have 16 tiles, in 4 rows and 4 columns. And so on.\n *\n * A tile key is usually created using [[fromRowColumnLevel]]() method.\n *\n * `TileKey` instances are immutable, all members return new instances of `TileKey` and do not\n * modify the original object.\n *\n * Utility functions like [[parent]](), [[changedLevelBy]](), and [[changedLevelTo]]() allow for\n * easy vertical navigation of the tree. The number of available rows and columns in the tile's\n * level is given with [[rowCount]]() and [[columnCount]]().\n *\n * Tile keys can be created from and converted into various alternative formats:\n *\n *  - [[toQuadKey]]() / [[fromQuadKey]]() - string representation 4-based\n *  - [[toHereTile]]() / [[fromHereTile]]() - string representation 10-based\n *  - [[mortonCode]]() / [[fromMortonCode]]() - number representation\n *\n * Note - as JavaScript's number type can hold 53 bits in its mantissa, only levels up to 26 can be\n * represented in the number representation returned by [[mortonCode]]().\n */\nexport class TileKey {\n    /**\n     * Creates a tile key.\n     *\n     * @param row The requested row. Must be less than 2 to the power of level.\n     * @param column The requested column. Must be less than 2 to the power of level.\n     * @param level The requested level.\n     */\n    static fromRowColumnLevel(row: number, column: number, level: number): TileKey {\n        return new TileKey(row, column, level);\n    }\n\n    /**\n     * Creates a tile key from a quad string.\n     *\n     * The quad string can be created with [[toQuadKey]].\n     *\n     * @param quadkey The quadkey to convert.\n     * @returns A new instance of `TileKey`.\n     */\n    static fromQuadKey(quadkey: string): TileKey {\n        const level = quadkey.length;\n        let row = 0;\n        let column = 0;\n        // tslint:disable:no-bitwise\n        for (let i = 0; i < quadkey.length; ++i) {\n            const mask = 1 << i;\n            const d = parseInt(quadkey.charAt(level - i - 1), 10);\n            if (d & 0x1) {\n                column |= mask;\n            }\n            if (d & 0x2) {\n                row |= mask;\n            }\n        }\n        // tslint:enable:no-bitwise\n        return TileKey.fromRowColumnLevel(row, column, level);\n    }\n    /**\n     * Creates a tile key from a numeric Morton code representation.\n     *\n     * You can convert a tile key into a numeric Morton code with [[mortonCode]].\n     *\n     * @param quadKey64 The Morton code to be converted.\n     * @returns A new instance of [[TileKey]].\n     */\n    static fromMortonCode(quadKey64: number): TileKey {\n        let level = 0;\n        let row = 0;\n        let column = 0;\n        let quadKey = quadKey64;\n        // tslint:disable:no-bitwise\n        while (quadKey > 1) {\n            const mask: number = 1 << level;\n\n            if (quadKey & 0x1) {\n                column |= mask;\n            }\n            if (quadKey & 0x2) {\n                row |= mask;\n            }\n\n            level++;\n            quadKey = (quadKey - (quadKey & 0x3)) / 4;\n        }\n        // tslint:enable:no-bitwise\n        const result = TileKey.fromRowColumnLevel(row, column, level);\n        result.m_mortonCode = quadKey64;\n        return result;\n    }\n\n    /**\n     * Creates a tile key from a heretile code string.\n     *\n     * The string can be created with [[toHereTile]].\n     *\n     * @param quadkey64 The string representation of the HERE tile key.\n     * @returns A new instance of `TileKey`.\n     */\n    static fromHereTile(quadkey64: string): TileKey {\n        const result = TileKey.fromMortonCode(parseInt(quadkey64, 10));\n        result.m_hereTile = quadkey64;\n        return result;\n    }\n\n    /**\n     * Returns the number of available columns at a given level.\n     *\n     * This is 2 to the power of the level.\n     *\n     * @param level The level for which to return the number of columns.\n     * @returns The available columns at the given level.\n     */\n    static columnsAtLevel(level: number): number {\n        return Math.pow(2, level);\n    }\n\n    /**\n     * Returns the number of available rows at a given level.\n     *\n     * This is 2 to the power of the level.\n     *\n     * @param level The level for which to return the number of rows.\n     * @returns The available rows at the given level.\n     */\n    static rowsAtLevel(level: number): number {\n        return Math.pow(2, level);\n    }\n\n    /**\n     * Returns the closest matching `TileKey` in a cartesian coordinate system.\n     *\n     * @param level The level for the tile key.\n     * @param coordX The X coordinate.\n     * @param coordY The Y coordinate.\n     * @param totalWidth The maximum X coordinate.\n     * @param totalHeight The maximum Y coordinate.\n     * @returns A new tile key at the given level that includes the given coordinates.\n     */\n    static atCoords(\n        level: number,\n        coordX: number,\n        coordY: number,\n        totalWidth: number,\n        totalHeight: number\n    ): TileKey {\n        return TileKey.fromRowColumnLevel(\n            Math.floor(coordY / (totalHeight / TileKey.rowsAtLevel(level))),\n            Math.floor(coordX / (totalWidth / TileKey.columnsAtLevel(level))),\n            level\n        );\n    }\n\n    /**\n     * Computes the Morton code of the parent tile key of the given Morton code.\n     *\n     * Note: The parent key of the root key is the root key itself.\n     *\n     * @param mortonCode A Morton code, for example, obtained from [[mortonCode]].\n     * @returns The Morton code of the parent tile.\n     */\n    static parentMortonCode(mortonCode: number): number {\n        return Math.floor(mortonCode / 4);\n    }\n\n    private m_mortonCode?: number;\n    private m_hereTile?: string;\n\n    /**\n     * Constructs a new immutable instance of a `TileKey`.\n     *\n     * For the better readability, [[TileKey.fromRowColumnLevel]] should be preferred.\n     *\n     * Note - row and column must not be greater than the maximum rows/columns for the given level.\n     *\n     * @param row Represents the row in the quadtree.\n     * @param column Represents the column in the quadtree.\n     * @param level Represents the level in the quadtree.\n     */\n    constructor(readonly row: number, readonly column: number, readonly level: number) {}\n\n    /**\n     * Returns a tile key representing the parent of the tile addressed by this tile key.\n     *\n     * Throws an exception is this tile is already the root.\n     */\n    parent(): TileKey {\n        if (this.level === 0) {\n            throw new Error(\"Cannot get the parent of the root tile key\");\n        }\n        // tslint:disable-next-line:no-bitwise\n        return TileKey.fromRowColumnLevel(this.row >>> 1, this.column >>> 1, this.level - 1);\n    }\n\n    /**\n     * Returns a new tile key at a level that differs from this tile's level by delta.\n     *\n     * Equivalent to `changedLevelTo(level() + delta)`.\n     *\n     * Note - root key is returned if `delta` is smaller than the level of this tile key.\n     *\n     * @param delta The numeric difference between the current level and the requested level.\n     */\n    changedLevelBy(delta: number): TileKey {\n        const level = Math.max(0, this.level + delta);\n        let row = this.row;\n        let column = this.column;\n\n        // tslint:disable:no-bitwise\n        if (delta >= 0) {\n            row <<= delta;\n            column <<= delta;\n        } else {\n            row >>>= -delta;\n            column >>>= -delta;\n        }\n        // tslint:enable:no-bitwise\n        return TileKey.fromRowColumnLevel(row, column, level);\n    }\n\n    /**\n     * Returns a new tile key at the requested level.\n     *\n     * If the requested level is smaller than the tile's level, then the key of an ancestor of this\n     * tile is returned. If the requested level is larger than the tile's level, then the key of\n     * first child or grandchild of this tile is returned, for example, the child with the lowest\n     * row and column number. If the requested level equals this tile's level, then the tile key\n     * itself is returned. If the requested level is negative, the root tile key is returned.\n     *\n     * @param level The requested level.\n     */\n    changedLevelTo(level: number): TileKey {\n        return this.changedLevelBy(level - this.level);\n    }\n\n    /**\n     * Converts the tile key to a numeric code representation.\n     *\n     * You can create a tile key from a numeric Morton code with [[fromMortonCode]].\n     *\n     * Note - only levels <= 26 are supported.\n     */\n    mortonCode(): number {\n        if (this.m_mortonCode === undefined) {\n            let column = this.column;\n            let row = this.row;\n\n            // tslint:disable:no-bitwise\n            let result = powerOfTwo[this.level << 1];\n            for (let i = 0; i < this.level; ++i) {\n                if (column & 0x1) {\n                    result += powerOfTwo[2 * i];\n                }\n                if (row & 0x1) {\n                    result += powerOfTwo[2 * i + 1];\n                }\n                column >>>= 1;\n                row >>>= 1;\n            }\n            // tslint:enable:no-bitwise\n\n            this.m_mortonCode = result;\n        }\n        return this.m_mortonCode;\n    }\n\n    /**\n     * Converts the tile key into a string for using in REST API calls.\n     *\n     * The string is a quadkey Morton code representation as a string.\n     *\n     * You can convert back from a quadkey string with [[fromHereTile]].\n     */\n    toHereTile(): string {\n        if (this.m_hereTile === undefined) {\n            this.m_hereTile = this.mortonCode().toString();\n        }\n        return this.m_hereTile;\n    }\n\n    /**\n     * Converts the tile key into a string for using in REST API calls.\n     *\n     * If the tile is the root tile, the quadkey is '-'. Otherwise the string is a number to the\n     * base of 4, but without the leading 1, with the following properties:\n     *  1. the number of digits equals the level.\n     *  2. removing the last digit gives the parent tile's quadkey string, i.e. appending 0,1,2,3\n     *     to a quadkey string gives the tiles's children.\n     *\n     * You can convert back from a quadkey string with [[fromQuadKey]].\n     */\n    toQuadKey(): string {\n        let result: string = \"\";\n\n        // tslint:disable:no-bitwise\n        for (let i = this.level; i > 0; --i) {\n            const mask = 1 << (i - 1);\n\n            const col = (this.column & mask) !== 0;\n            const row = (this.row & mask) !== 0;\n\n            if (col && row) {\n                result += \"3\";\n            } else if (row) {\n                result += \"2\";\n            } else if (col) {\n                result += \"1\";\n            } else {\n                result += \"0\";\n            }\n        }\n        // tslint:enable:no-bitwise\n\n        return result;\n    }\n\n    /**\n     * Equality operator.\n     *\n     * @param qnr The tile key to compare to.\n     * @returns `true` if this tile key has identical row, column and level, `false` otherwise.\n     */\n    equals(qnr: TileKey): boolean {\n        return this.row === qnr.row && this.column === qnr.column && this.level === qnr.level;\n    }\n\n    /**\n     * Returns the absolute quadkey that is constructed from its sub quadkey.\n     *\n     * @param sub The sub key.\n     * @returns The absolute tile key in the quadtree.\n     */\n    addedSubKey(sub: string): TileKey {\n        const subQuad = TileKey.fromQuadKey(sub.length === 0 ? \"-\" : sub);\n        const child = this.changedLevelBy(subQuad.level);\n        return TileKey.fromRowColumnLevel(\n            child.row + subQuad.row,\n            child.column + subQuad.column,\n            child.level\n        );\n    }\n\n    /**\n     * Returns the absolute quadkey that is constructed from its sub HERE tile key.\n     *\n     * @param sub The sub HERE key.\n     * @returns The absolute tile key in the quadtree.\n     */\n    addedSubHereTile(sub: string): TileKey {\n        const subQuad = TileKey.fromHereTile(sub);\n        const child = this.changedLevelBy(subQuad.level);\n        return TileKey.fromRowColumnLevel(\n            child.row + subQuad.row,\n            child.column + subQuad.column,\n            child.level\n        );\n    }\n\n    /**\n     * Returns a sub quadkey that is relative to its parent.\n     *\n     * This function can be used to generate sub keys that are relative to a parent that is delta\n     * levels up in the quadtree.\n     *\n     * This function can be used to create shortened keys for quads on lower levels if the parent is\n     * known.\n     *\n     * Note - the sub quadkeys fit in a 16-bit unsigned integer if the `delta` is smaller than 8. If\n     * `delta` is smaller than 16, the sub quadkey fits into an unsigned 32-bit integer.\n     *\n     * Deltas larger than 16 are not supported.\n     *\n     * @param delta The number of levels relative to its parent quadkey. Must be greater or equal to\n     * 0 and smaller than 16.\n     * @returns The quadkey relative to its parent that is `delta` levels up the tree.\n     */\n    getSubHereTile(delta: number): string {\n        const key = this.mortonCode();\n        // tslint:disable-next-line:no-bitwise\n        const msb = 1 << (delta * 2);\n        const mask = msb - 1;\n        // tslint:disable-next-line:no-bitwise\n        const result = (key & mask) | msb;\n        return result.toString();\n    }\n\n    /**\n     * Returns the number of available rows in the tile's [[level]].\n     *\n     * This is 2 to the power of the level.\n     */\n    rowCount(): number {\n        return TileKey.rowsAtLevel(this.level);\n    }\n\n    /**\n     * Returns the number of available columns in the tile's [[level]].\n     *\n     * This is 2 to the power of the level.\n     */\n    columnCount(): number {\n        return TileKey.columnsAtLevel(this.level);\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nexport namespace ExtrusionFeatureDefs {\n    /**\n     * Minimum ratio value for extrusion effect\n     */\n    export const DEFAULT_RATIO_MIN: number = 0.0;\n    /**\n     * Maximum ratio value for extrusion effect\n     */\n    export const DEFAULT_RATIO_MAX: number = 1;\n\n    /**\n     * Buildings height used whenever no height-data is present or height is very small.\n     *\n     * Used to avoid z-fighting between ground plane and building.\n     */\n    export const MIN_BUILDING_HEIGHT = 0.01;\n}\n","/*\n * Copyright (C) 2017-2020 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\nimport {\n    Env,\n    Expr,\n    GeometryKind,\n    getFeatureId,\n    getPropertyValue,\n    GradientSky,\n    ImageTexture,\n    IndexedTechnique,\n    Light,\n    MapEnv,\n    PostEffects,\n    Sky,\n    Theme,\n    Value\n} from \"@here/harp-datasource-protocol\";\nimport { ViewRanges } from \"@here/harp-datasource-protocol/lib/ViewRanges\";\nimport {\n    EarthConstants,\n    GeoBox,\n    GeoBoxExtentLike,\n    GeoCoordinates,\n    GeoCoordLike,\n    isGeoBoxExtentLike,\n    isGeoCoordinatesLike,\n    mercatorProjection,\n    Projection,\n    ProjectionType,\n    TilingScheme,\n    Vector3Like\n} from \"@here/harp-geoutils\";\nimport {\n    assert,\n    getOptionValue,\n    LoggerManager,\n    LogLevel,\n    PerformanceTimer,\n    UriResolver\n} from \"@here/harp-utils\";\nimport * as THREE from \"three\";\nimport { AnimatedExtrusionHandler } from \"./AnimatedExtrusionHandler\";\nimport { BackgroundDataSource } from \"./BackgroundDataSource\";\nimport { CameraMovementDetector } from \"./CameraMovementDetector\";\nimport { ClipPlanesEvaluator, createDefaultClipPlanesEvaluator } from \"./ClipPlanesEvaluator\";\nimport { IMapAntialiasSettings, IMapRenderingManager, MapRenderingManager } from \"./composing\";\nimport { ConcurrentDecoderFacade } from \"./ConcurrentDecoderFacade\";\nimport { CopyrightInfo } from \"./copyrights/CopyrightInfo\";\nimport { DataSource } from \"./DataSource\";\nimport { ElevationProvider } from \"./ElevationProvider\";\nimport { ElevationRangeSource } from \"./ElevationRangeSource\";\nimport { FrustumIntersection } from \"./FrustumIntersection\";\nimport { overlayOnElevation } from \"./geometry/overlayOnElevation\";\nimport { TileGeometryManager } from \"./geometry/TileGeometryManager\";\nimport { MapViewImageCache } from \"./image/MapViewImageCache\";\nimport { MapViewFog } from \"./MapViewFog\";\nimport { PickHandler, PickResult } from \"./PickHandler\";\nimport { PickingRaycaster } from \"./PickingRaycaster\";\nimport { PoiManager } from \"./poi/PoiManager\";\nimport { PoiRendererFactory } from \"./poi/PoiRendererFactory\";\nimport { PoiTableManager } from \"./poi/PoiTableManager\";\nimport { PolarTileDataSource } from \"./PolarTileDataSource\";\nimport { ScreenCollisions, ScreenCollisionsDebug } from \"./ScreenCollisions\";\nimport { ScreenProjector } from \"./ScreenProjector\";\nimport { SkyBackground } from \"./SkyBackground\";\nimport { FrameStats, PerformanceStatistics } from \"./Statistics\";\nimport { FontCatalogLoader } from \"./text/FontCatalogLoader\";\nimport { MapViewState } from \"./text/MapViewState\";\nimport { TextCanvasFactory } from \"./text/TextCanvasFactory\";\nimport { TextElement } from \"./text/TextElement\";\nimport { TextElementsRenderer, ViewUpdateCallback } from \"./text/TextElementsRenderer\";\nimport { TextElementsRendererOptions } from \"./text/TextElementsRendererOptions\";\nimport { createLight } from \"./ThemeHelpers\";\nimport { ThemeLoader } from \"./ThemeLoader\";\nimport { Tile, TileFeatureData, TileObject } from \"./Tile\";\nimport { MapViewUtils } from \"./Utils\";\nimport { ResourceComputationType, VisibleTileSet, VisibleTileSetOptions } from \"./VisibleTileSet\";\n\ndeclare const process: any;\n\n// Cache value, because access to process.env.NODE_ENV is SLOW!\nconst isProduction = process.env.NODE_ENV === \"production\";\nif (isProduction) {\n    // In production: silence logging below error.\n    LoggerManager.instance.setLogLevelForAll(LogLevel.Error);\n} else {\n    // In dev: silence logging below log (silences \"debug\" and \"trace\" levels).\n    LoggerManager.instance.setLogLevelForAll(LogLevel.Log);\n}\n/**\n * An interface describing [[THREE.Object3D]]s anchored on given [[GeoCoordinates]].\n *\n * Example:\n * ```typescript\n * const mesh: MapAnchor<THREE.Mesh> = new THREE.Mesh(geometry, material);\n * mesh.geoPosition = new GeoCoordinates(latitude, longitude, altitude);\n * mapView.mapAnchors.add(mesh);\n * ```\n *\n */\nexport type MapAnchor<T extends THREE.Object3D = THREE.Object3D> = T & {\n    /**\n     * The position of this [[MapAnchor]] in [[GeoCoordinates]].\n     */\n    geoPosition?: GeoCoordinates;\n    /**\n     * Flag defining if the object may be picked.\n     *\n     * @note By default all objects are pickable even if this flag is undefined.\n     */\n    pickable?: boolean;\n};\n\n/**\n * An interface describing [[THREE.Object3D]]s anchored on given world coordinates.\n *\n * Example:\n * ```typescript\n * const mesh: WorldAnchor<THREE.Mesh> = new THREE.Mesh(geometry, material);\n * mesh.worldPosition = new Vector3(x, y, z);\n * mesh.pickable = false;\n * mapView.worldAnchors.add(mesh);\n * ```\n * @internal\n */\nexport type WorldAnchor<T extends THREE.Object3D = THREE.Object3D> = T & {\n    /**\n     * The position of this [[WorldAnchor]] in world coordinates (and units).\n     *\n     * Word coordinates anchors may be used for objects that has not exact relation to the\n     * place on the Earth globe or map. This may include light sources, special cameras, effects.\n     */\n    worldPosition?: THREE.Vector3;\n    /**\n     * Flag defining if the object may be picked.\n     *\n     * @note By default all objects are pickable even if this flag is undefined.\n     */\n    pickable?: boolean;\n};\n\nexport enum MapViewEventNames {\n    /** Called before this `MapView` starts to render a new frame. */\n    Update = \"update\",\n    /** Called when the WebGL canvas is resized. */\n    Resize = \"resize\",\n    /** Called when the frame is about to be rendered. */\n    Render = \"render\",\n    /** Called after a frame has been rendered. */\n    AfterRender = \"didrender\",\n    /** Called after the first frame has been rendered. */\n    FirstFrame = \"first-render\",\n    /** Called when the first view has all the necessary tiles loaded and rendered. */\n    FrameComplete = \"frame-complete\",\n    /** Called when the theme has been loaded with the internal [[ThemeLoader]]. */\n    ThemeLoaded = \"theme-loaded\",\n    /** Called when the animation mode has started. */\n    AnimationStarted = \"animation-started\",\n    /** Called when the animation mode has stopped. */\n    AnimationFinished = \"animation-finished\",\n    /** Called when a camera interaction has been detected. */\n    MovementStarted = \"movement-started\",\n    /** Called when a camera interaction has been stopped. */\n    MovementFinished = \"movement-finished\",\n    /** Called when a data source has been connected or failed to connect. */\n    DataSourceConnect = \"datasource-connect\",\n    /** Emitted when copyright info of rendered map has been changed. */\n    CopyrightChanged = \"copyright-changed\",\n    /** Called when the WebGL context is lost. */\n    ContextLost = \"webglcontext-lost\",\n    /** Called when the WebGL context is restored. */\n    ContextRestored = \"webglcontext-restored\",\n    /** Called when camera position has been changed. */\n    CameraPositionChanged = \"camera-changed\"\n}\n\nconst logger = LoggerManager.instance.create(\"MapView\");\nconst DEFAULT_CLEAR_COLOR = 0xefe9e1;\nconst DEFAULT_FOV_CALCULATION: FovCalculation = { type: \"dynamic\", fov: 40 };\nconst DEFAULT_CAM_NEAR_PLANE = 0.1;\nconst DEFAULT_CAM_FAR_PLANE = 4000000;\nconst MAX_FIELD_OF_VIEW = 140;\nconst MIN_FIELD_OF_VIEW = 10;\n// All objects in fallback tiles are reduced by this amount.\nexport const FALLBACK_RENDER_ORDER_OFFSET = 20000;\n\nconst DEFAULT_MIN_ZOOM_LEVEL = 1;\n\n/**\n * Default maximum zoom level.\n */\nconst DEFAULT_MAX_ZOOM_LEVEL = 20;\n\n/**\n * Default minimum camera height.\n */\nconst DEFAULT_MIN_CAMERA_HEIGHT = 20;\n\n/**\n * Style set used by [[PolarTileDataSource]] by default.\n */\nconst DEFAULT_POLAR_STYLE_SET_NAME = \"polar\";\n\n/**\n * The type of `RenderEvent`.\n */\nexport interface RenderEvent extends THREE.Event {\n    type:\n        | MapViewEventNames.Render\n        | MapViewEventNames.FirstFrame\n        | MapViewEventNames.FrameComplete\n        | MapViewEventNames.ThemeLoaded\n        | MapViewEventNames.AnimationStarted\n        | MapViewEventNames.AnimationFinished\n        | MapViewEventNames.MovementStarted\n        | MapViewEventNames.MovementFinished\n        | MapViewEventNames.ContextLost\n        | MapViewEventNames.ContextRestored\n        | MapViewEventNames.CopyrightChanged;\n    time?: number;\n}\n\n// Event type: cast needed to workaround wrong THREE.js typings.\nconst UPDATE: RenderEvent = { type: MapViewEventNames.Update } as any;\nconst RENDER_EVENT: RenderEvent = { type: MapViewEventNames.Render } as any;\nconst DID_RENDER_EVENT: RenderEvent = { type: MapViewEventNames.AfterRender } as any;\nconst FIRST_FRAME_EVENT: RenderEvent = { type: MapViewEventNames.FirstFrame } as any;\nconst FRAME_COMPLETE_EVENT: RenderEvent = { type: MapViewEventNames.FrameComplete } as any;\nconst THEME_LOADED_EVENT: RenderEvent = { type: MapViewEventNames.ThemeLoaded } as any;\nconst ANIMATION_STARTED_EVENT: RenderEvent = { type: MapViewEventNames.AnimationStarted } as any;\nconst ANIMATION_FINISHED_EVENT: RenderEvent = { type: MapViewEventNames.AnimationFinished } as any;\nconst MOVEMENT_STARTED_EVENT: RenderEvent = { type: MapViewEventNames.MovementStarted } as any;\nconst MOVEMENT_FINISHED_EVENT: RenderEvent = { type: MapViewEventNames.MovementFinished } as any;\nconst CONTEXT_LOST_EVENT: RenderEvent = { type: MapViewEventNames.ContextLost } as any;\nconst CONTEXT_RESTORED_EVENT: RenderEvent = { type: MapViewEventNames.ContextRestored } as any;\nconst COPYRIGHT_CHANGED_EVENT: RenderEvent = { type: MapViewEventNames.CopyrightChanged } as any;\n\nconst cache = {\n    vector2: [new THREE.Vector2()],\n    vector3: [new THREE.Vector3(), new THREE.Vector3(), new THREE.Vector3()],\n    rayCaster: new THREE.Raycaster(),\n    groundPlane: new THREE.Plane(),\n    groundSphere: new THREE.Sphere(undefined, EarthConstants.EQUATORIAL_RADIUS),\n    frustumPoints: [\n        new THREE.Vector3(),\n        new THREE.Vector3(),\n        new THREE.Vector3(),\n        new THREE.Vector3(),\n        new THREE.Vector3(),\n        new THREE.Vector3(),\n        new THREE.Vector3(),\n        new THREE.Vector3()\n    ],\n    matrix4: [new THREE.Matrix4(), new THREE.Matrix4()],\n    transform: [\n        {\n            position: new THREE.Vector3(),\n            xAxis: new THREE.Vector3(),\n            yAxis: new THREE.Vector3(),\n            zAxis: new THREE.Vector3()\n        }\n    ]\n};\n\n/**\n * Specifies how the FOV (Field of View) should be calculated.\n */\nexport interface FovCalculation {\n    /**\n     * How to interpret the [[fov]], can be either `fixed` or `dynamic`.\n     *\n     * `fixed` means that the FOV is fixed regardless of the [[viewportHeight]], such that shrinking\n     * the height causes the map to shrink to keep the content in view. The benefit is that,\n     * regardless of any resizes, the field of view is constant, which means there is no change in\n     * the distortion of buildings near the edges. However the trade off is that the zoom level\n     * changes, which means that the map will pull in new tiles, hence causing some flickering.\n     *\n     * `dynamic` means that the focal length is calculated based on the supplied [[fov]] and\n     * [[viewportHeight]], this means that the map doesn't scale (the image is essentially cropped\n     * but not shrunk) when the [[viewportHeight]] or [[viewportWidth]] is changed. The benefit is\n     * that the zoom level is (currently) stable during resize, because the focal length is used,\n     * however the tradeoff is that changing from a small to a big height will cause the fov to\n     * change a lot, and thus introduce distortion.\n     */\n    type: \"fixed\" | \"dynamic\";\n\n    /**\n     * If [[type]] is `fixed` then the supplied [[fov]] is fixed regardless of\n     * [[viewportHeight]] or [[viewportWidth]].\n     *\n     * If [[type]] is `dynamic` then the supplied [[fov]] is applied to the\n     * first frame, and the focal length calculated. Changes to the viewport\n     * height no longer shrink the content because the field of view is updated\n     * dynamically.\n     */\n    fov: number;\n}\n\n/**\n * Hint for the WebGL implementation on which power mode to prefer.\n *\n * @see https://www.khronos.org/registry/webgl/specs/latest/1.0/#5.14.12\n */\nexport enum MapViewPowerPreference {\n    /** Default value. */\n    Default = \"default\",\n    /** Lower power mode, used to conserve energy. */\n    LowPower = \"low-power\",\n    /** Maximum performance. */\n    HighPerformance = \"high-performance\"\n}\n\n/**\n * User configuration for the [[MapView]].\n */\nexport interface MapViewOptions extends TextElementsRendererOptions, Partial<LookAtParams> {\n    /**\n     * The canvas element used to render the scene.\n     */\n    canvas: HTMLCanvasElement;\n\n    /**\n     * Optional WebGL Rendering Context.\n     * (https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext)\n     */\n    context?: WebGLRenderingContext;\n\n    /**\n     * `true` if the canvas contains an alpha (transparency) buffer or not. Default is `false`.\n     */\n    alpha?: boolean;\n\n    /**\n     * If `true`adds a Background Mesh for each tile\n     *\n     * @default `true`\n     */\n    addBackgroundDatasource?: boolean;\n\n    /**\n     * Whether the native WebGL antialiasing should be enabled. It is better to disable it if the\n     * MapView's MSAA is enabled.\n     *\n     * @default `true` for `pixelRatio` < `2.0`, `false` otherwise.\n     */\n    enableNativeWebglAntialias?: boolean;\n\n    /**\n     * Antialias settings for the map rendering. It is better to disable the native antialising if\n     * the custom antialiasing is enabled.\n     */\n    customAntialiasSettings?: IMapAntialiasSettings;\n\n    /**\n     * `Projection` used by the `MapView`.\n     *\n     * The default value is [[mercatorProjection]].\n     */\n    projection?: Projection;\n\n    /**\n     * The URL of the script that the decoder worker runs. The default URL is\n     * `./decoder.bundle.js`.\n     *\n     * Relative URIs are resolved to full URL using the document's base URL\n     * (see: https://www.w3.org/TR/WD-html40-970917/htmlweb.html#h-5.1.2).\n     */\n    decoderUrl?: string;\n\n    /**\n     * The number of Web Workers used to decode data. The default is\n     * CLAMP(`navigator.hardwareConcurrency` - 1, 1, 2).\n     */\n    decoderCount?: number;\n\n    /**\n     * The [[Theme]] used by Mapview.\n     *\n     * This Theme can be one of the following:\n     *  - `string` : the URI of the theme file used to style this map\n     *  - `Theme` : the `Theme` object already loaded\n     *  - `Promise<Theme>` : the future `Theme` object\n     *  - `undefined` : the theme is not yet set up, but can be set later. Rendering waits until\n     *     the theme is set.\n     *\n     * **Note:** Layers that use a theme do not render any content until that theme is available.\n     *\n     * Relative URIs are resolved to full URL using the document's base URL\n     * (see: https://www.w3.org/TR/WD-html40-970917/htmlweb.html#h-5.1.2).\n     *\n     * Custom URIs (of theme itself and of resources referenced by theme) may be resolved with help\n     * of [[uriResolver]].\n     *\n     * @see [[ThemeLoader.load]] for details how theme is loaded\n     */\n    theme?: string | Theme | Promise<Theme>;\n\n    /**\n     * Resolve `URI` referenced in `MapView` assets using this resolver.\n     *\n     * Use, to support application/deployment specific `URI`s into actual `URLs` that can be loaded\n     * with `fetch`.\n     *\n     * Example:\n     * ```\n     * uriResolver: new PrefixMapUriResolver({\n     *     \"local://poiMasterList\": \"/assets/poiMasterList.json\",\n     *        // will match only 'local//:poiMasterList' and\n     *        // resolve to `/assets/poiMasterList.json`\n     *     \"local://icons/\": \"/assets/icons/\"\n     *        // will match only 'local//:icons/ANYPATH' (and similar) and\n     *        // resolve to `/assets/icons/ANYPATH`\n     * })\n     * ```\n     *\n     * @see [[UriResolver]]\n     * @See [[PrefixMapUriResolver]]\n     */\n    uriResolver?: UriResolver;\n\n    /**\n     * The minimum zoom level; default is `1`.\n     */\n    minZoomLevel?: number;\n\n    /**\n     * Determines the minimum camera height, in meters.\n     */\n    minCameraHeight?: number;\n\n    /**\n     * The maximum zoom level. The default is `14`.\n     */\n    maxZoomLevel?: number;\n\n    /**\n     * User-defined camera clipping planes distance evaluator.\n     * If not defined, [[TiltViewClipPlanesEvaluator]] will be used by [[MapView]].\n     *\n     * @default [[TiltViewClipPlanesEvaluator]]\n     */\n    clipPlanesEvaluator?: ClipPlanesEvaluator;\n\n    /**\n     * Set to true to extend the frustum culling. This improves the rejection of some tiles, which\n     * normal frustum culling cannot detect. You can disable this property to measure performance.\n     *\n     * @default true\n     */\n    extendedFrustumCulling?: boolean;\n\n    /**\n     * The maximum number of tiles rendered from one data source at a time.\n     *\n     * @default See [[MapViewDefaults.maxVisibleDataSourceTiles]].\n     */\n    maxVisibleDataSourceTiles?: number;\n\n    /**\n     * Size of a tile cache for one data source.\n     *\n     * @default See [[MapViewDefaults.tileCacheSize]].\n     */\n    tileCacheSize?: number;\n\n    /**\n     * Specify if the cache should be counted in tiles or in megabytes.\n     *\n     * @see [[MapViewDefaults.resourceComputationType]].\n     */\n    resourceComputationType?: ResourceComputationType;\n\n    /**\n     * Limits the number of reduced zoom levels (lower detail) to be searched for fallback tiles.\n     *\n     * When zooming in, newly elected tiles may have not yet loaded. [[MapView]] searches through\n     * the tile cache for tiles ready to be displayed in lower zoom levels. The tiles may be\n     * located shallower in the quadtree.\n     *\n     * To disable a cache search, set the value to `0`.\n     *\n     * @default [[MapViewDefaults.quadTreeSearchDistanceUp]]\n     */\n    quadTreeSearchDistanceUp?: number;\n\n    /**\n     * Limits the number of higher zoom levels (more detailed) to be searched for fallback tiles.\n     *\n     * When zooming out, newly elected tiles may have not yet loaded. [[MapView]] searches through\n     * the tile cache for tiles ready to be displayed in higher zoom levels. These tiles may be\n     * located deeper in the quadtree.\n     *\n     * To disable a cache search, set the value to `0`.\n     *\n     * @default [[MapViewDefaults.quadTreeSearchDistanceDown]]\n     */\n    quadTreeSearchDistanceDown?: number;\n\n    /**\n     * Set to `true` to measure performance statistics.\n     */\n    enableStatistics?: boolean;\n\n    /**\n     * Preserve the buffers until they are cleared manually or overwritten.\n     *\n     * Set to `true` in order to copy [[MapView]] canvas contents to an image or another canvas.\n     *\n     * @default `false`.\n     * @see https://threejs.org/docs/#api/renderers/WebGLRenderer.preserveDrawingBuffer\n     */\n    preserveDrawingBuffer?: boolean;\n\n    /**\n     * @deprecated Not needed anymore, roads can be picked by default.\n     */\n    enableRoadPicking?: boolean;\n\n    /**\n     * Set to `true` to allow picking of technique information associated with objects.\n     */\n    enablePickTechnique?: boolean;\n\n    /**\n     * An optional canvas element that renders 2D collision debug information.\n     */\n    collisionDebugCanvas?: HTMLCanvasElement;\n\n    /**\n     * Maximum timeout, in milliseconds, before a [[MOVEMENT_FINISHED_EVENT]] is sent after the\n     * latest frame with a camera movement. The default is 300ms.\n     */\n    movementThrottleTimeout?: number;\n\n    /**\n     * How to calculate the Field of View, if not specified, then\n     * [[DEFAULT_FOV_CALCULATION]] is used.\n     */\n    fovCalculation?: FovCalculation;\n\n    /*\n     * An array of ISO 639-1 language codes for data sources.\n     */\n    languages?: string[];\n\n    /**\n     * Set fixed pixel ratio for rendering. Useful when rendering on high resolution displays with\n     * low performance GPUs that may be fill-rate limited.\n     * @default `window.devicePixelRatio`\n     */\n    pixelRatio?: number;\n\n    /**\n     * Set fixed pixel ratio for rendering when the camera is moving or an animation is running.\n     * Useful when rendering on high resolution displays with low performance GPUs that may be\n     * fill-rate limited.\n     *\n     * If a value is specified, a low resolution render pass is used to render the scene into a\n     * low resolution render target, before it is copied to the screen.\n     *\n     * A value of `undefined` disables the low res render pass. Values between 0.5 and\n     * `window.devicePixelRatio` can be tried to give  good results. The value should not be larger\n     * than `window.devicePixelRatio`.\n     *\n     * @note Since no anti-aliasing is applied during dynamic rendering with `dynamicPixelRatio`\n     * defined, visual artifacts may occur, especially with thin lines..\n     *\n     * @note The resolution of icons and text labels is not affected.\n     *\n     * @default `undefined`\n     */\n    dynamicPixelRatio?: number;\n\n    /**\n     * Set maximum FPS (Frames Per Second). If VSync in enabled, the specified number may not be\n     * reached, but instead the next smaller number than `maxFps` that is equal to the refresh rate\n     * divided by an integer number.\n     *\n     * E.g.: If the monitors refresh rate is set to 60hz, and if `maxFps` is set to a value of `40`\n     * (60hz/1.5), the actual used FPS may be 30 (60hz/2). For displays that have a refresh rate of\n     * 60hz, good values for `maxFps` are 30, 20, 15, 12, 10, 6, 3 and 1. A value of `0` is ignored.\n     */\n    maxFps?: number;\n\n    /**\n     * Enable map repeat for planar projections.\n     * If `true`, map will be repeated in longitudinal direction continuously.\n     * If `false`, map will end on lon -180 & 180 deg.\n     *\n     * @default `true`\n     */\n    tileWrappingEnabled?: boolean;\n\n    /**\n     * Set tiling scheme for [[BackgroundDataSource]]\n     */\n    backgroundTilingScheme?: TilingScheme;\n\n    /**\n     * Should be the [[PolarTileDataSource]] used on spherical projection.\n     * Default is `true`.\n     */\n    enablePolarDataSource?: boolean;\n\n    /**\n     * The name of the [[StyleSet]] used by [[PolarTileDataSource]] to evaluate for the decoding.\n     * Default is `\"polar\"`.\n     */\n    polarStyleSetName?: string;\n\n    /**\n     * Storage level offset of regular tiles from reference datasource to align\n     * [[PolarTileDataSource]] tiles to.\n     * Default is `-1`.\n     */\n    polarGeometryLevelOffset?: number;\n\n    /**\n     * Hint for the WebGL implementation on which power mode to prefer.\n     */\n    powerPreference?: MapViewPowerPreference;\n\n    /**\n     * Set to `true` to allow rendering scene synchronously.\n     *\n     * By calling `renderSync()` scene draws immediately, opposite to default case when\n     * `update` method requests redraw and waits for the next animation frame.\n     *\n     * You need to set up your own render loop controller.\n     * Event `MapViewEventNames.Update` fired when [[MapView]] requests for an redraw.\n     * E.g.: When tiles loaded asynchronously and ready for rendering.\n     *\n     * @note Internal `maxFps` will be overridden and may not work properly as `renderSync`\n     * intended to be called from external render loop.\n     *\n     * @default false.\n     */\n    synchronousRendering?: boolean;\n\n    /**\n     * Set true to enable rendering mixed levels of detail (increases rendering performance).\n     * If not set will enable mixed levels of detail for spherical projection\n     * and disable for other projections.\n     *\n     * @default undefined\n     */\n    enableMixedLod?: boolean;\n\n    /**\n     * Enable shadows in the map. Shadows will only be casted on features that use the \"standard\"\n     * or \"extruded-polygon\" technique in the map theme.\n     * @default false\n     */\n    enableShadows?: boolean;\n}\n\n/**\n * Default settings used by [[MapView]] collected in one place.\n * @internal\n */\nconst MapViewDefaults = {\n    projection: mercatorProjection,\n    addBackgroundDatasource: true,\n\n    maxVisibleDataSourceTiles: 100,\n    extendedFrustumCulling: true,\n\n    tileCacheSize: 200,\n    resourceComputationType: ResourceComputationType.EstimationInMb,\n    quadTreeSearchDistanceUp: 3,\n    quadTreeSearchDistanceDown: 2,\n\n    pixelRatio:\n        typeof window !== \"undefined\" && window.devicePixelRatio !== undefined\n            ? window.devicePixelRatio\n            : 1.0,\n    target: new GeoCoordinates(25, 0),\n    zoomLevel: 5,\n    tilt: 0,\n    heading: 0,\n    theme: {}\n};\n\n/**\n * Parameters for [[MapView.lookAt]].\n */\nexport interface LookAtParams {\n    /**\n     * Target/look at point of the MapView.\n     *\n     * @note If the given point is not on the ground (altitude != 0) [[MapView]] will do a\n     * raycasting internally to find a target on the ground.\n     *\n     * As a consequence [[MapView.target]] and [[MapView.zoomLevel]] will not match the values\n     * that were passed into the [[MapView.lookAt]] method.\n     * @default `new GeoCoordinates(25, 0)` in [[MapView.constructor]] context.\n     * @default [[MapView.target]] in [[MapView.lookAt]] context.\n     */\n    target: GeoCoordLike;\n\n    /**\n     * Fit MapView to these boundaries.\n     *\n     * If specified, `zoomLevel` and `distance` parameters are ignored and `lookAt` calculates best\n     * `zoomLevel` to fit given bounds.\n     *\n     * * if `bounds` is [[GeoBox]], then `lookAt` use [[LookAtParams.target]] or `bounds.target` and\n     *   ensure whole box is visible\n     *\n     * * if `bounds` is [[GeoBoxExtentLike]], then `lookAt` will use [[LookAtParams.target]] or\n     *   current [[MapView.target]] and ensure whole extents are visible\n     *\n     * * if `bounds` is [[GeoCoordLike]][], then `lookAt` will use [[LookAtParams.target]] or\n     *   calculated `target` as center of world box covering given points and ensure all points are\n     *   visible\n     *\n     * Note in sphere projection some points are not visible if you specify bounds that span more\n     * than 180 degreess in any direction.\n     *\n     * @see [[MapView.lookAt]] for defails how `bounds` interact with `target` parameter\n     */\n    bounds: GeoBox | GeoBoxExtentLike | GeoCoordLike[];\n\n    /**\n     * Camera distance to the target point in world units.\n     * @default zoomLevel defaults will be used if not set.\n     */\n    distance: number;\n\n    /**\n     * Zoomlevel of the MapView.\n     * @note Takes precedence over distance.\n     * @default 5 in [[MapView.constructor]] context.\n     * @default [[MapView.zoomLevel]] in [[MapView.lookAt]] context.\n     */\n    zoomLevel: number;\n\n    /**\n     * Tilt angle in degrees. 0 is top down view.\n     * @default 0 in [[MapView.constructor]] context.\n     * @default [[MapView.tilt]] in [[MapView.lookAt]] context.\n     * @note Maximum supported tilt is 89°\n     */\n    tilt: number;\n\n    /**\n     * Heading angle in degrees and clockwise. 0 is north-up.\n     * @default 0 in [[MapView.constructor]] context.\n     * @default [[MapView.heading]] in [[MapView.lookAt]] context.\n     */\n    heading: number;\n}\n\n/**\n * The core class of the library to call in order to create a map visualization. It needs to be\n * linked to datasources.\n */\nexport class MapView extends THREE.EventDispatcher {\n    /**\n     * Maximum FPS (Frames Per Second). If VSync in enabled, the specified number may not be\n     * reached, but instead the next smaller number than `maxFps` that is equal to the refresh rate\n     * divided by an integer number.\n     *\n     * E.g.: If the monitors refresh rate is set to 60hz, and if `maxFps` is set to a value of `40`\n     * (60hz/1.5), the actual used FPS may be 30 (60hz/2). For displays that have a refresh rate of\n     * 60hz, good values for `maxFps` are 30, 20, 15, 12, 10, 6, 3 and 1. A value of `0` is ignored.\n     */\n    maxFps: number;\n\n    /**\n     * The instance of [[MapRenderingManager]] managing the rendering of the map. It is a public\n     * property to allow access and modification of some parameters of the rendering process at\n     * runtime.\n     */\n    readonly mapRenderingManager: IMapRenderingManager;\n\n    private m_renderLabels: boolean = true;\n\n    private m_movementFinishedUpdateTimerId?: any;\n    private m_postEffects?: PostEffects;\n\n    private m_skyBackground?: SkyBackground;\n    private m_createdLights?: THREE.Light[];\n\n    private readonly m_screenProjector: ScreenProjector;\n    private readonly m_screenCollisions:\n        | ScreenCollisions\n        | ScreenCollisionsDebug = new ScreenCollisions();\n\n    private m_visibleTiles: VisibleTileSet;\n\n    private m_elevationSource?: DataSource;\n    private m_elevationRangeSource?: ElevationRangeSource;\n    private m_elevationProvider?: ElevationProvider;\n    private m_visibleTileSetLock: boolean = false;\n    private m_tileGeometryManager: TileGeometryManager;\n\n    private m_tileWrappingEnabled: boolean = true;\n\n    private m_zoomLevel: number = DEFAULT_MIN_ZOOM_LEVEL;\n    private m_minZoomLevel: number = DEFAULT_MIN_ZOOM_LEVEL;\n    private m_maxZoomLevel: number = DEFAULT_MAX_ZOOM_LEVEL;\n    private m_minCameraHeight: number = DEFAULT_MIN_CAMERA_HEIGHT;\n\n    private readonly m_screenCamera = new THREE.OrthographicCamera(-1, 1, 1, -1);\n\n    private readonly m_camera: THREE.PerspectiveCamera;\n\n    /**\n     * Relative to eye camera.\n     *\n     * This camera is internal camera used to improve precision\n     * when rendering geometries.\n     */\n    private readonly m_rteCamera = new THREE.PerspectiveCamera();\n\n    private m_yaw = 0;\n    private m_pitch = 0;\n    private m_roll = 0;\n    private m_focalLength = 0;\n    private m_targetDistance = 0;\n    private m_targetGeoPos = GeoCoordinates.fromObject(MapViewDefaults.target!);\n    // Focus point world coords may be calculated after setting projection, use dummy value here.\n    private m_targetWorldPos = new THREE.Vector3();\n    private readonly m_viewRanges: ViewRanges = {\n        near: DEFAULT_CAM_NEAR_PLANE,\n        far: DEFAULT_CAM_FAR_PLANE,\n        minimum: DEFAULT_CAM_NEAR_PLANE,\n        maximum: DEFAULT_CAM_FAR_PLANE\n    };\n    private m_pointOfView?: THREE.PerspectiveCamera;\n\n    private m_pixelToWorld?: number;\n    private m_pixelRatio?: number;\n\n    private readonly m_scene: THREE.Scene = new THREE.Scene();\n    private readonly m_fog: MapViewFog = new MapViewFog(this.m_scene);\n    private readonly m_mapTilesRoot = new THREE.Object3D();\n    private readonly m_mapAnchors = new THREE.Object3D();\n    private readonly m_worldAnchors = new THREE.Object3D();\n\n    private m_animationCount: number = 0;\n    private m_animationFrameHandle: number | undefined;\n    private m_drawing: boolean = false;\n    private m_updatePending: boolean = false;\n    private m_renderer: THREE.WebGLRenderer;\n    private m_frameNumber = 0;\n\n    private m_textElementsRenderer: TextElementsRenderer;\n\n    private m_forceCameraAspect: number | undefined = undefined;\n\n    //\n    // sources\n    //\n    private readonly m_tileDataSources: DataSource[] = [];\n    private readonly m_connectedDataSources = new Set<string>();\n    private readonly m_failedDataSources = new Set<string>();\n    private m_backgroundDataSource?: BackgroundDataSource;\n    private m_polarDataSource?: PolarTileDataSource;\n    private m_enablePolarDataSource: boolean = true;\n\n    // gestures\n    private readonly m_raycaster: PickingRaycaster;\n    private readonly m_plane = new THREE.Plane(new THREE.Vector3(0, 0, 1));\n    private readonly m_sphere = new THREE.Sphere(undefined, EarthConstants.EQUATORIAL_RADIUS);\n\n    private readonly m_options: MapViewOptions;\n    private readonly m_visibleTileSetOptions: VisibleTileSetOptions;\n\n    private m_theme: Theme = {};\n    private m_uriResolver?: UriResolver;\n    private m_themeIsLoading: boolean = false;\n\n    private m_previousFrameTimeStamp?: number;\n    private m_firstFrameRendered = false;\n    private m_firstFrameComplete = false;\n    private m_initialTextPlacementDone = false;\n\n    private handleRequestAnimationFrame: (frameStartTime: number) => void;\n\n    private m_pickHandler: PickHandler;\n\n    private m_imageCache: MapViewImageCache = new MapViewImageCache(this);\n\n    private m_poiManager: PoiManager = new PoiManager(this);\n\n    private m_poiTableManager: PoiTableManager = new PoiTableManager(this);\n\n    private m_collisionDebugCanvas: HTMLCanvasElement | undefined;\n\n    // Detection of camera movement and scene change:\n    private m_movementDetector: CameraMovementDetector;\n\n    private m_thisFrameTilesChanged: boolean | undefined;\n    private m_lastTileIds: string = \"\";\n    private m_languages: string[] | undefined;\n    private m_copyrightInfo: CopyrightInfo[] = [];\n    private m_animatedExtrusionHandler: AnimatedExtrusionHandler;\n\n    private m_env: MapEnv = new MapEnv({});\n\n    private m_enableMixedLod: boolean | undefined;\n\n    /**\n     * Constructs a new `MapView` with the given options or canvas element.\n     *\n     * @param options The `MapView` options or the HTML canvas element used to display the map.\n     */\n    constructor(options: MapViewOptions) {\n        super();\n\n        // make a copy to avoid unwanted changes to the original options.\n        this.m_options = { ...options };\n\n        this.m_uriResolver = this.m_options.uriResolver;\n\n        if (this.m_options.minZoomLevel !== undefined) {\n            this.m_minZoomLevel = this.m_options.minZoomLevel;\n        }\n\n        if (this.m_options.maxZoomLevel !== undefined) {\n            this.m_maxZoomLevel = this.m_options.maxZoomLevel;\n        }\n\n        if (this.m_options.minCameraHeight !== undefined) {\n            this.m_minCameraHeight = this.m_options.minCameraHeight;\n        }\n\n        if (this.m_options.decoderUrl !== undefined) {\n            ConcurrentDecoderFacade.defaultScriptUrl = this.m_uriResolver\n                ? this.m_uriResolver.resolveUri(this.m_options.decoderUrl)\n                : this.m_options.decoderUrl;\n        }\n\n        if (this.m_options.decoderCount !== undefined) {\n            ConcurrentDecoderFacade.defaultWorkerCount = this.m_options.decoderCount;\n        }\n\n        this.m_visibleTileSetOptions = {\n            ...MapViewDefaults,\n            clipPlanesEvaluator:\n                options.clipPlanesEvaluator !== undefined\n                    ? options.clipPlanesEvaluator\n                    : createDefaultClipPlanesEvaluator()\n        };\n\n        if (options.projection !== undefined) {\n            this.m_visibleTileSetOptions.projection = options.projection;\n        }\n\n        if (options.extendedFrustumCulling !== undefined) {\n            this.m_visibleTileSetOptions.extendedFrustumCulling = options.extendedFrustumCulling;\n        }\n\n        if (options.maxVisibleDataSourceTiles !== undefined) {\n            this.m_visibleTileSetOptions.maxVisibleDataSourceTiles =\n                options.maxVisibleDataSourceTiles;\n        }\n\n        if (options.tileCacheSize !== undefined) {\n            this.m_visibleTileSetOptions.tileCacheSize = options.tileCacheSize;\n        }\n\n        if (options.resourceComputationType !== undefined) {\n            this.m_visibleTileSetOptions.resourceComputationType = options.resourceComputationType;\n        }\n\n        if (options.quadTreeSearchDistanceUp !== undefined) {\n            this.m_visibleTileSetOptions.quadTreeSearchDistanceUp =\n                options.quadTreeSearchDistanceUp;\n        }\n\n        if (options.quadTreeSearchDistanceDown !== undefined) {\n            this.m_visibleTileSetOptions.quadTreeSearchDistanceDown =\n                options.quadTreeSearchDistanceDown;\n        }\n\n        if (options.enablePolarDataSource !== undefined) {\n            this.m_enablePolarDataSource = options.enablePolarDataSource;\n        }\n\n        this.m_pixelRatio = options.pixelRatio;\n        this.maxFps = options.maxFps === undefined ? 0 : options.maxFps;\n\n        this.m_options.enableStatistics = this.m_options.enableStatistics === true;\n\n        this.m_languages = this.m_options.languages;\n\n        if (\n            !isProduction &&\n            this.m_options.collisionDebugCanvas !== undefined &&\n            this.m_options.collisionDebugCanvas !== null\n        ) {\n            this.m_collisionDebugCanvas = this.m_options.collisionDebugCanvas;\n            this.m_screenCollisions = new ScreenCollisionsDebug(this.m_collisionDebugCanvas);\n        }\n\n        this.handleRequestAnimationFrame = this.renderLoop.bind(this);\n        this.m_pickHandler = new PickHandler(\n            this,\n            this.m_rteCamera,\n            this.m_options.enablePickTechnique === true\n        );\n\n        if (this.m_options.tileWrappingEnabled !== undefined) {\n            this.m_tileWrappingEnabled = this.m_options.tileWrappingEnabled;\n        }\n\n        // Initialization of the stats\n        this.setupStats(this.m_options.enableStatistics);\n\n        this.canvas.addEventListener(\"webglcontextlost\", this.onWebGLContextLost);\n        this.canvas.addEventListener(\"webglcontextrestored\", this.onWebGLContextRestored);\n\n        // Initialization of the renderer\n        this.m_renderer = new THREE.WebGLRenderer({\n            canvas: this.canvas,\n            context: this.m_options.context,\n            antialias: this.nativeWebglAntialiasEnabled,\n            alpha: this.m_options.alpha,\n            preserveDrawingBuffer: this.m_options.preserveDrawingBuffer === true,\n            powerPreference:\n                this.m_options.powerPreference === undefined\n                    ? MapViewPowerPreference.Default\n                    : this.m_options.powerPreference\n        });\n        this.m_renderer.autoClear = false;\n        this.m_renderer.debug.checkShaderErrors = !isProduction;\n\n        // This is detailed at https://threejs.org/docs/#api/renderers/WebGLRenderer.info\n        // When using several WebGLRenderer#render calls per frame, it is the only way to get\n        // correct rendering data from ThreeJS.\n        this.m_renderer.info.autoReset = false;\n\n        this.setupRenderer();\n\n        this.m_options.fovCalculation =\n            this.m_options.fovCalculation === undefined\n                ? DEFAULT_FOV_CALCULATION\n                : this.m_options.fovCalculation;\n        this.m_options.fovCalculation.fov = THREE.MathUtils.clamp(\n            this.m_options.fovCalculation!.fov,\n            MIN_FIELD_OF_VIEW,\n            MAX_FIELD_OF_VIEW\n        );\n        // Initialization of mCamera and mVisibleTiles\n        const { width, height } = this.getCanvasClientSize();\n        const aspect = width / height;\n        this.m_camera = new THREE.PerspectiveCamera(\n            this.m_options.fovCalculation.fov,\n            aspect,\n            DEFAULT_CAM_NEAR_PLANE,\n            DEFAULT_CAM_FAR_PLANE\n        );\n        this.m_camera.up.set(0, 0, 1);\n        this.projection.projectPoint(this.m_targetGeoPos, this.m_targetWorldPos);\n        this.m_scene.add(this.m_camera); // ensure the camera is added to the scene.\n        this.m_screenProjector = new ScreenProjector(this.m_camera);\n        // setup camera with initial position\n\n        this.setupCamera();\n\n        this.m_raycaster = new PickingRaycaster(width, height);\n\n        this.m_movementDetector = new CameraMovementDetector(\n            this.m_options.movementThrottleTimeout,\n            () => this.movementStarted(),\n            () => this.movementFinished()\n        );\n\n        const mapPassAntialiasSettings = this.m_options.customAntialiasSettings;\n        this.mapRenderingManager = new MapRenderingManager(\n            width,\n            height,\n            this.m_options.dynamicPixelRatio,\n            mapPassAntialiasSettings\n        );\n\n        this.m_tileGeometryManager = new TileGeometryManager(this);\n\n        if (options.enableMixedLod !== undefined) {\n            this.m_enableMixedLod = options.enableMixedLod;\n        }\n        this.m_visibleTiles = this.createVisibleTileSet();\n\n        this.m_animatedExtrusionHandler = new AnimatedExtrusionHandler(this);\n\n        if (this.m_options.addBackgroundDatasource !== false) {\n            this.m_backgroundDataSource = new BackgroundDataSource();\n            this.addDataSource(this.m_backgroundDataSource);\n        }\n\n        if (this.m_enablePolarDataSource) {\n            const styleSetName =\n                options.polarStyleSetName !== undefined\n                    ? options.polarStyleSetName\n                    : DEFAULT_POLAR_STYLE_SET_NAME;\n\n            this.m_polarDataSource = new PolarTileDataSource({\n                styleSetName,\n                geometryLevelOffset: options.polarGeometryLevelOffset\n            });\n\n            this.updatePolarDataSource();\n        }\n\n        if (\n            this.m_options.backgroundTilingScheme !== undefined &&\n            this.m_backgroundDataSource !== undefined\n        ) {\n            this.m_backgroundDataSource.setTilingScheme(this.m_options.backgroundTilingScheme);\n        }\n\n        this.initTheme();\n\n        this.m_textElementsRenderer = this.createTextRenderer();\n\n        this.update();\n    }\n\n    /**\n     * @returns The lights configured by the theme, this is just a convenience method, because the\n     * lights can still be accessed by traversing the children of the [[scene]].\n     */\n    get lights(): THREE.Light[] {\n        return this.m_createdLights ?? [];\n    }\n\n    /**\n     * @returns Whether label rendering is enabled.\n     */\n    get renderLabels() {\n        return this.m_renderLabels;\n    }\n\n    /**\n     * Enables or disables rendering of labels.\n     * @param value `true` to enable labels `false` to disable them.\n     */\n    set renderLabels(value: boolean) {\n        this.m_renderLabels = value;\n    }\n\n    /**\n     * @hidden\n     * The [[TextElementsRenderer]] select the visible [[TextElement]]s and renders them.\n     */\n    get textElementsRenderer(): TextElementsRenderer {\n        return this.m_textElementsRenderer;\n    }\n\n    /**\n     * @hidden\n     * The [[CameraMovementDetector]] detects camera movements. Made available for performance\n     * measurements.\n     */\n    get cameraMovementDetector(): CameraMovementDetector {\n        return this.m_movementDetector;\n    }\n\n    /**\n     * The [[AnimatedExtrusionHandler]] controls animated extrusion effect\n     * of the extruded objects in the [[Tile]]\n     */\n    get animatedExtrusionHandler(): AnimatedExtrusionHandler {\n        return this.m_animatedExtrusionHandler;\n    }\n\n    /**\n     * The [[TileGeometryManager]] manages geometry during loading and handles hiding geometry of\n     * specified [[GeometryKind]]s.\n     */\n    get tileGeometryManager(): TileGeometryManager | undefined {\n        return this.m_tileGeometryManager;\n    }\n\n    get enableMixedLod(): boolean | undefined {\n        return this.m_enableMixedLod;\n    }\n\n    set enableMixedLod(enableMixedLod: boolean | undefined) {\n        // Skip unnecessary update\n        if (this.m_enableMixedLod === enableMixedLod) {\n            return;\n        }\n\n        this.m_enableMixedLod = enableMixedLod;\n        this.m_visibleTiles = this.createVisibleTileSet();\n        this.resetTextRenderer();\n        this.update();\n    }\n\n    /**\n     * Disposes this `MapView`.\n     *\n     * This function cleans the resources that are managed manually including those that exist in\n     * shared caches.\n     *\n     * Note: This function does not try to clean objects that can be disposed off easily by\n     * TypeScript's garbage collecting mechanism. Consequently, if you need to perform a full\n     * cleanup, you must ensure that all references to this `MapView` are removed.\n     */\n    dispose() {\n        if (this.m_movementFinishedUpdateTimerId) {\n            clearTimeout(this.m_movementFinishedUpdateTimerId);\n            this.m_movementFinishedUpdateTimerId = undefined;\n        }\n\n        if (this.m_animationFrameHandle !== undefined) {\n            cancelAnimationFrame(this.m_animationFrameHandle);\n            this.m_animationFrameHandle = undefined;\n        }\n\n        this.canvas.removeEventListener(\"webglcontextlost\", this.onWebGLContextLost);\n        this.canvas.removeEventListener(\"webglcontextrestored\", this.onWebGLContextRestored);\n\n        for (const dataSource of this.m_tileDataSources) {\n            dataSource.dispose();\n        }\n        this.m_visibleTiles.clearTileCache();\n        this.m_textElementsRenderer.clearRenderStates();\n        this.m_renderer.dispose();\n        this.m_imageCache.clear();\n\n        this.m_movementDetector.dispose();\n    }\n\n    /**\n     * The way the cache usage is computed, either based on size in MB (mega bytes) or in number of\n     * tiles.\n     */\n    get resourceComputationType(): ResourceComputationType {\n        return this.m_visibleTiles.resourceComputationType;\n    }\n\n    set resourceComputationType(value: ResourceComputationType) {\n        this.m_visibleTiles.resourceComputationType = value;\n    }\n\n    /**\n     * Returns the cache size.\n     */\n    getCacheSize(): number {\n        return this.m_visibleTiles.getDataSourceCacheSize();\n    }\n\n    /**\n     * Sets the cache size in number of tiles.\n     *\n     * @param size The cache size in tiles.\n     * @param numVisibleTiles The number of tiles visible, which is size/2 by default.\n     */\n    setCacheSize(size: number, numVisibleTiles?: number): void {\n        this.m_visibleTiles.setDataSourceCacheSize(size);\n        numVisibleTiles = numVisibleTiles !== undefined ? numVisibleTiles : size / 2;\n        this.m_visibleTiles.setNumberOfVisibleTiles(Math.floor(numVisibleTiles));\n        this.updateImages();\n        this.updateLighting();\n\n        this.m_textElementsRenderer.invalidateCache();\n\n        this.updateSkyBackground();\n        this.update();\n    }\n\n    /**\n     * Specfies whether extended frustum culling is enabled or disabled.\n     */\n    get extendedFrustumCulling(): boolean {\n        return this.m_options.extendedFrustumCulling !== undefined\n            ? this.m_visibleTileSetOptions.extendedFrustumCulling\n            : true;\n    }\n\n    /**\n     * Enable of disable extended frustum culling.\n     */\n    set extendedFrustumCulling(value: boolean) {\n        this.m_visibleTileSetOptions.extendedFrustumCulling = value;\n    }\n\n    /**\n     * Returns the status of frustum culling after each update.\n     */\n    get lockVisibleTileSet(): boolean {\n        return this.m_visibleTileSetLock;\n    }\n\n    /**\n     * Enable of disable frustum culling after each update.\n     */\n    set lockVisibleTileSet(value: boolean) {\n        this.m_visibleTileSetLock = value;\n    }\n\n    /**\n     * Gets the optional camera used to render the scene.\n     */\n    get pointOfView(): THREE.PerspectiveCamera | undefined {\n        return this.m_pointOfView;\n    }\n\n    /**\n     * Sets the optional camera used to render the scene.\n     */\n    set pointOfView(pointOfView: THREE.PerspectiveCamera | undefined) {\n        this.m_pointOfView = pointOfView;\n        this.update();\n    }\n\n    /**\n     * Loads a post effects definition file.\n     *\n     * @param postEffectsFile File URL describing the post effects.\n     */\n    loadPostEffects(postEffectsFile: string) {\n        fetch(postEffectsFile)\n            .then(response => response.json())\n            .then((postEffects: PostEffects) => {\n                this.m_postEffects = postEffects;\n                this.setPostEffects();\n            });\n    }\n\n    /**\n     * The abstraction of the [[MapRenderingManager]] API for post effects.\n     */\n    get postEffects(): PostEffects | undefined {\n        return this.m_postEffects;\n    }\n\n    set postEffects(postEffects: PostEffects | undefined) {\n        this.m_postEffects = postEffects;\n        this.setPostEffects();\n    }\n\n    /**\n     * Gets the current `Theme` used by this `MapView` to style map elements.\n     */\n    get theme(): Theme {\n        return this.m_theme;\n    }\n\n    /**\n     * Changes the `Theme` used by this `MapView` to style map elements.\n     */\n    set theme(theme: Theme) {\n        if (!ThemeLoader.isThemeLoaded(theme)) {\n            this.m_themeIsLoading = true;\n            // If theme is not yet loaded, let's set theme asynchronously\n            ThemeLoader.load(theme, { uriResolver: this.m_uriResolver })\n                .then(loadedTheme => {\n                    this.m_themeIsLoading = false;\n                    this.theme = loadedTheme;\n                })\n                .catch(error => {\n                    this.m_themeIsLoading = false;\n                    logger.error(`failed to set theme: ${error}`, error);\n                });\n            return;\n        }\n\n        // Fog and sky.\n        this.m_theme.fog = theme.fog;\n        this.m_theme.sky = theme.sky;\n        this.updateSkyBackground();\n        this.m_fog.reset(this.m_theme);\n\n        this.m_theme.lights = theme.lights;\n        this.updateLighting();\n\n        // Clear color.\n        this.m_theme.clearColor = theme.clearColor;\n        this.m_theme.clearAlpha = theme.clearAlpha;\n        this.renderer.setClearColor(new THREE.Color(theme.clearColor), theme.clearAlpha);\n        // Images.\n        this.m_theme.images = theme.images;\n        this.m_theme.imageTextures = theme.imageTextures;\n        this.updateImages();\n\n        // POI tables.\n        this.m_theme.poiTables = theme.poiTables;\n        this.loadPoiTables();\n\n        // Text.\n        this.m_theme.textStyles = theme.textStyles;\n        this.m_theme.defaultTextStyle = theme.defaultTextStyle;\n        this.m_theme.fontCatalogs = theme.fontCatalogs;\n\n        this.resetTextRenderer();\n\n        if (Array.isArray(theme.priorities)) {\n            this.m_theme.priorities = theme.priorities;\n        }\n\n        if (Array.isArray(theme.labelPriorities)) {\n            this.m_theme.labelPriorities = theme.labelPriorities;\n        }\n\n        if (this.m_theme.styles === undefined) {\n            this.m_theme.styles = {};\n        }\n        if (this.m_backgroundDataSource) {\n            this.m_backgroundDataSource.setTheme(this.m_theme);\n        }\n        this.m_theme.styles = theme.styles || {};\n        this.m_theme.definitions = theme.definitions;\n\n        for (const dataSource of this.m_tileDataSources) {\n            dataSource.setTheme(this.m_theme);\n        }\n        THEME_LOADED_EVENT.time = Date.now();\n        this.dispatchEvent(THEME_LOADED_EVENT);\n        this.update();\n    }\n\n    /**\n     * [[UriResolver]] used to resolve application/deployment specific `URI`s into actual `URLs`\n     * that can be loaded with `fetch`.\n     */\n    get uriResolver(): UriResolver | undefined {\n        return this.m_uriResolver;\n    }\n\n    /**\n     * Gets the value of the forced custom camera aspect.\n     * Every time a frame is rendered, `MapView` resets the camera aspect.\n     *\n     * You can disable this behavior by setting the value to `undefined`.\n     */\n    get forceCameraAspect(): number | undefined {\n        return this.m_forceCameraAspect;\n    }\n\n    /**\n     * Sets the custom forced camera aspect ratio to use while rendering.\n     */\n    set forceCameraAspect(aspect: number | undefined) {\n        this.m_forceCameraAspect = aspect;\n    }\n\n    /**\n     * Lists the ISO 639-1 language codes for DataSources to use.\n     */\n    get languages(): string[] | undefined {\n        return this.m_languages;\n    }\n\n    /**\n     * Sets the list of ISO 639-1 language codes for DataSources to use.\n     */\n    set languages(languages: string[] | undefined) {\n        this.m_languages = languages;\n        this.m_tileDataSources.forEach((dataSource: DataSource) => {\n            dataSource.setLanguages(this.m_languages);\n        });\n        this.update();\n    }\n\n    get copyrightInfo(): CopyrightInfo[] {\n        return this.m_copyrightInfo;\n    }\n\n    /**\n     * @hidden\n     * Disable all fading animations (for debugging and performance measurement). Defaults to\n     * `false`.\n     */\n    set disableFading(disable: boolean) {\n        this.m_textElementsRenderer.disableFading = disable;\n    }\n\n    get disableFading(): boolean {\n        return this.m_textElementsRenderer.disableFading;\n    }\n\n    /**\n     * @hidden\n     * Return current frame number.\n     */\n    get frameNumber(): number {\n        return this.m_frameNumber;\n    }\n\n    /**\n     * @hidden\n     * Reset the frame number to 0.\n     */\n    resetFrameNumber() {\n        this.m_frameNumber = 0;\n        this.m_previousFrameTimeStamp = undefined;\n    }\n\n    /**\n     * Adds an event listener. There are various events that are sent before or after a new frame\n     * is rendered.\n     *\n     * @see [[MapViewEventNames]].\n     *\n     * @example\n     * ```TypeScript\n     * let frameCount = 0;\n     * mapView.addEventListener(MapViewEventNames.Render, () => {\n     *     ++frameCount;\n     * });\n     * ```\n     *\n     * @param type One of the [[MapViewEventNames]] strings.\n     * @param listener The callback invoked when the `MapView` needs to render a new frame.\n     */\n    addEventListener(type: MapViewEventNames, listener: (event: RenderEvent) => void): void;\n\n    addEventListener(type: string, listener: any): void {\n        super.addEventListener(type, listener);\n    }\n\n    /**\n     * Removes an event listener. There are various events that are sent before or after a new frame\n     * is rendered.\n     *\n     * @see [[MapViewEventNames]].\n     *\n     * @example\n     * ```TypeScript\n     * mapView.removeEventListener(MapViewEventNames.Render, listener);\n     * ```\n     *\n     * @param type One of the [[MapViewEventNames]] strings.\n     * @param listener The callback invoked when the `MapView` needs to render a new frame.\n     */\n    removeEventListener(type: MapViewEventNames, listener: (event: RenderEvent) => void): void;\n\n    removeEventListener(type: string, listener: any): void {\n        super.removeEventListener(type, listener);\n    }\n\n    /**\n     * The HTML canvas element used by this `MapView`.\n     */\n    get canvas(): HTMLCanvasElement {\n        return this.m_options.canvas;\n    }\n\n    /**\n     * The HTML canvas element used by this `MapView`.\n     */\n    get collisionDebugCanvas(): HTMLCanvasElement | undefined {\n        return this.m_collisionDebugCanvas;\n    }\n\n    /**\n     * The THREE.js scene used by this `MapView`.\n     */\n    get scene(): THREE.Scene {\n        return this.m_scene;\n    }\n\n    /**\n     * The THREE.js camera used by this `MapView` to render the main scene.\n     * @note When modifying the camera all derived properties like:\n     * - [[MapView.target]]\n     * - [[MapView.zoomLevel]]\n     * - [[MapView.tilt]]\n     * - [[MapView.heading]]\n     * could change.\n     * These properties are cached internaly and will only be updated in the next animation frame.\n     * FIXME: Unfortunatley THREE.js is not dispatching any events when camera properties change\n     * so we should have an API for enforcing update of cached values.\n     */\n    get camera(): THREE.PerspectiveCamera {\n        return this.m_camera;\n    }\n\n    /**\n     * The THREE.js `WebGLRenderer` used by this scene.\n     */\n    get renderer(): THREE.WebGLRenderer {\n        return this.m_renderer;\n    }\n\n    /**\n     * The color used to clear the view.\n     */\n    get clearColor() {\n        const rendererClearColor = this.m_renderer.getClearColor();\n        return rendererClearColor !== undefined ? rendererClearColor.getHex() : 0;\n    }\n\n    /**\n     * The color used to clear the view.\n     */\n    set clearColor(color: number) {\n        this.m_renderer.setClearColor(color);\n    }\n\n    /**\n     * The alpha used to clear the view.\n     */\n    get clearAlpha() {\n        const rendererClearAlpha = this.m_renderer.getClearAlpha();\n        return rendererClearAlpha !== undefined ? rendererClearAlpha : 0;\n    }\n\n    /**\n     * The alpha used to clear the view.\n     */\n    set clearAlpha(alpha: number) {\n        this.m_renderer.setClearAlpha(alpha);\n    }\n\n    /**\n     * The projection used to project geo coordinates to world coordinates.\n     */\n    get projection(): Projection {\n        return this.m_visibleTileSetOptions.projection;\n    }\n\n    /**\n     * Changes the projection at run time.\n     *\n     * @param projection The [[Projection]] instance to use.\n     */\n    set projection(projection: Projection) {\n        // Remember tilt and heading before setting the projection.\n        const tilt = this.tilt;\n        const heading = this.heading;\n\n        this.m_visibleTileSetOptions.projection = projection;\n        this.updatePolarDataSource();\n        this.clearTileCache();\n        this.textElementsRenderer.clearRenderStates();\n        this.m_visibleTiles = this.createVisibleTileSet();\n\n        this.lookAtImpl({ tilt, heading });\n    }\n\n    /**\n     * Get camera clipping planes evaluator used.\n     */\n    get clipPlanesEvaluator(): ClipPlanesEvaluator {\n        return this.m_visibleTileSetOptions.clipPlanesEvaluator;\n    }\n\n    /**\n     * Changes the clip planes evaluator at run time.\n     */\n    set clipPlanesEvaluator(clipPlanesEvaluator: ClipPlanesEvaluator) {\n        this.m_visibleTileSetOptions.clipPlanesEvaluator = clipPlanesEvaluator;\n    }\n\n    /**\n     * The distance (in pixels) between the screen and the camera.\n     */\n    get focalLength(): number {\n        return this.m_focalLength;\n    }\n\n    /**\n     * Get geo coordinates of camera focus (target) point.\n     * This point is not necessarily on the ground, i.e.:\n     *  - if the tilt is high and projection is [[sphereProjection]]\n     *  - if the camera was modified directly and is not pointing to the ground.\n     * In any case the projection of the target point will be in the center of the screen.\n     *\n     * @returns geo coordinates of the camera focus point.\n     */\n    get target(): GeoCoordinates {\n        return this.m_targetGeoPos;\n    }\n\n    /** @internal\n     * Get world coordinates of camera focus point.\n     *\n     * @note The focus point coordinates are updated with each camera update so you don't need\n     * to re-calculate it, although if the camera started looking to the void, the last focus\n     * point is stored.\n     *\n     * @returns world coordinates of the camera focus point.\n     */\n    get worldTarget(): THREE.Vector3 {\n        return this.m_targetWorldPos;\n    }\n\n    /** @internal\n     * Get distance from camera to the point of focus in world units.\n     *\n     * @note If camera does not point to any ground anymore the last focus point distance is\n     * then returned.\n     *\n     * @returns Last known focus point distance.\n     */\n    get targetDistance(): number {\n        return this.m_targetDistance;\n    }\n\n    /**\n     * Get object describing frustum planes distances and min/max visibility range for actual\n     * camera setup.\n     * Near and far plane distance are self explanatory while minimum and maximum visibility range\n     * describes the extreme near/far planes distances that may be achieved with current camera\n     * settings, meaning at current zoom level (ground distance) and any possible orientation.\n     * @note Visibility is directly related to camera [[ClipPlaneEvaluator]] used and determines\n     * the maximum possible distance of camera far clipping plane regardless of tilt, but may change\n     * whenever zoom level changes. Distance is measured in world units which may be approximately\n     * equal to meters, but this depends on the distortion related to projection type used.\n     * @internal\n     */\n    get viewRanges(): ViewRanges {\n        return this.m_viewRanges;\n    }\n\n    /**\n     * The position in geo coordinates of the center of the scene.\n     * @internal\n     */\n    get geoCenter(): GeoCoordinates {\n        return this.projection.unprojectPoint(this.m_camera.position).normalized();\n    }\n\n    /**\n     * The position in geo coordinates of the center of the scene.\n     * Longitude values outside of -180 and +180 are acceptable.\n     */\n    set geoCenter(geoCenter: GeoCoordinates) {\n        if (geoCenter.altitude !== undefined) {\n            this.projection.projectPoint(geoCenter, this.m_camera.position);\n        } else {\n            // Preserve the current altitude\n            const altitude = this.geoCenter.altitude;\n\n            this.projection.projectPoint(\n                new GeoCoordinates(geoCenter.latitude, geoCenter.longitude, altitude),\n                this.m_camera.position\n            );\n        }\n\n        this.update();\n    }\n\n    /**\n     * The node in this MapView's scene containing the user [[MapAnchor]]s.\n     * All (first level) children of this node will be positioned in world space according to the\n     * [[MapAnchor.geoPosition]].\n     * Deeper level children can be used to position custom objects relative to the anchor node.\n     */\n    get mapAnchors(): THREE.Object3D {\n        return this.m_mapAnchors;\n    }\n\n    /**\n     * The root node for user's defined objects that will be positioned by world coordinates.\n     *\n     * This objects are transformed according to camera setup, but are not _attached_ to map\n     * geo position. Such anchors may be used to add custom rendering geometry of effects that are\n     * moving or just positioned in world space, i.e. light source, comet, spaceship, etc.\n     *\n     * @see mapAnchors.\n     * @internal\n     */\n    get worldAnchors(): THREE.Object3D {\n        return this.m_worldAnchors;\n    }\n\n    /**\n     * The position in world coordinates of the center of the scene.\n     */\n    get worldCenter(): THREE.Vector3 {\n        return this.m_camera.position;\n    }\n\n    /**\n     * Get the [[PickHandler]] for this `mapView`.\n     */\n    get pickHandler(): PickHandler {\n        return this.m_pickHandler;\n    }\n\n    /**\n     * Get the [[ImageCache]] that belongs to this `MapView`.\n     */\n    get imageCache(): MapViewImageCache {\n        return this.m_imageCache;\n    }\n\n    /**\n     * @hidden\n     * Get the [[PoiManager]] that belongs to this `MapView`.\n     */\n    get poiManager(): PoiManager {\n        return this.m_poiManager;\n    }\n\n    /**\n     * @hidden\n     * Get the array of [[PoiTableManager]] that belongs to this `MapView`.\n     */\n    get poiTableManager(): PoiTableManager {\n        return this.m_poiTableManager;\n    }\n\n    /**\n     * The minimum camera height in meters.\n     */\n    get minCameraHeight(): number {\n        return this.m_minCameraHeight;\n    }\n\n    /**\n     * The minimum zoom level.\n     */\n    get minZoomLevel(): number {\n        return this.m_minZoomLevel;\n    }\n\n    /**\n     * The minimum zoom level.\n     */\n    set minZoomLevel(zoomLevel: number) {\n        this.m_minZoomLevel = zoomLevel;\n        this.update();\n    }\n\n    /**\n     * The maximum zoom level. Default is 14.\n     */\n    get maxZoomLevel(): number {\n        return this.m_maxZoomLevel;\n    }\n\n    /**\n     * The maximum zoom level.\n     */\n    set maxZoomLevel(zoomLevel: number) {\n        this.m_maxZoomLevel = zoomLevel;\n        this.update();\n    }\n\n    /**\n     * Returns the zoom level for the given camera setup.\n     */\n    get zoomLevel(): number {\n        return this.m_zoomLevel;\n    }\n\n    set zoomLevel(zoomLevel: number) {\n        this.lookAtImpl({ zoomLevel });\n    }\n\n    /**\n     * Returns tilt angle in degrees.\n     */\n    get tilt(): number {\n        return THREE.MathUtils.radToDeg(this.m_pitch);\n    }\n\n    /**\n     * Set the tilt angle of the map.\n     * @param tilt: New tilt angle in degrees.\n     */\n    set tilt(tilt: number) {\n        this.lookAtImpl({ tilt });\n    }\n\n    /**\n     * Returns heading angle in degrees.\n     */\n    get heading(): number {\n        return -THREE.MathUtils.radToDeg(this.m_yaw);\n    }\n\n    /**\n     * Set the heading angle of the map.\n     * @param heading: New heading angle in degrees.\n     */\n    set heading(heading: number) {\n        this.lookAtImpl({ heading });\n    }\n\n    /**\n     * Environment used to evaluate dynamic scene expressions.\n     */\n    get env(): Env {\n        return this.m_env;\n    }\n\n    /**\n     * Returns the storage level for the given camera setup.\n     * Actual storage level of the rendered data also depends on [[DataSource.storageLevelOffset]].\n     */\n    get storageLevel(): number {\n        return THREE.MathUtils.clamp(\n            Math.floor(this.m_zoomLevel),\n            this.m_minZoomLevel,\n            this.m_maxZoomLevel\n        );\n    }\n\n    /**\n     * Returns height of the viewport in pixels.\n     */\n    get viewportHeight(): number {\n        return this.canvas.height;\n    }\n\n    /**\n     * Returns `true` if the native WebGL antialiasing is enabled.\n     *\n     * @default `true` for `pixelRatio` < `2.0`, `false` otherwise.\n     */\n    get nativeWebglAntialiasEnabled(): boolean {\n        return this.m_options.enableNativeWebglAntialias === undefined\n            ? this.pixelRatio < 2.0\n            : this.m_options.enableNativeWebglAntialias;\n    }\n\n    /**\n     * Returns [[DataSource]]s displayed by this `MapView`.\n     */\n    get dataSources(): DataSource[] {\n        return this.m_tileDataSources;\n    }\n\n    /**\n     * Set's the way in which the fov is calculated on the map view. Note, for\n     * this to take visual effect, the map should be rendered after calling this\n     * function.\n     * @param fovCalculation How the FOV is calculated.\n     */\n    setFovCalculation(fovCalculation: FovCalculation) {\n        this.m_options.fovCalculation = fovCalculation;\n        this.calculateFocalLength(this.m_renderer.getSize(cache.vector2[0]).height);\n        this.updateCameras();\n    }\n\n    /**\n     * Returns the unique [[DataSource]] matching the given name.\n     */\n    getDataSourceByName(dataSourceName: string): DataSource | undefined {\n        return this.m_tileDataSources.find(ds => ds.name === dataSourceName);\n    }\n\n    /**\n     * Returns the array of [[DataSource]]s referring to the same [[StyleSet]].\n     */\n    getDataSourcesByStyleSetName(styleSetName: string): DataSource[] {\n        return this.m_tileDataSources.filter(ds => ds.styleSetName === styleSetName);\n    }\n\n    /**\n     * Returns true if the specified [[DataSource]] is enabled.\n     */\n    isDataSourceEnabled(dataSource: DataSource): boolean {\n        return (\n            dataSource.enabled &&\n            dataSource.ready() &&\n            this.m_connectedDataSources.has(dataSource.name) &&\n            dataSource.isVisible(this.zoomLevel)\n        );\n    }\n\n    /**\n     * Adds a new [[DataSource]] to this `MapView`. `MapView` needs at least one [[DataSource]] to\n     * display something.\n     *\n     * @param dataSource The data source.\n     */\n    addDataSource(dataSource: DataSource): Promise<void> {\n        const twinDataSource = this.getDataSourceByName(dataSource.name);\n        if (twinDataSource !== undefined) {\n            throw new Error(\n                `A DataSource with the name \"${dataSource.name}\" already exists in this MapView.`\n            );\n        }\n\n        dataSource.attach(this);\n        dataSource.setEnableElevationOverlay(this.m_elevationProvider !== undefined);\n        this.m_tileDataSources.push(dataSource);\n\n        if (this.m_backgroundDataSource) {\n            this.m_backgroundDataSource.updateStorageLevelOffset();\n        }\n\n        return dataSource\n            .connect()\n            .then(() => {\n                return new Promise(resolve => {\n                    if (this.theme !== undefined && this.theme.styles !== undefined) {\n                        resolve();\n                        return;\n                    }\n\n                    const resolveOnce = () => {\n                        this.removeEventListener(MapViewEventNames.ThemeLoaded, resolveOnce);\n                        resolve();\n                    };\n\n                    this.addEventListener(MapViewEventNames.ThemeLoaded, resolveOnce);\n                });\n            })\n            .then(() => {\n                const alreadyRemoved = this.m_tileDataSources.indexOf(dataSource) === -1;\n                if (alreadyRemoved) {\n                    return;\n                }\n                dataSource.addEventListener(MapViewEventNames.Update, () => {\n                    this.update();\n                });\n\n                dataSource.setTheme(this.m_theme);\n\n                this.m_connectedDataSources.add(dataSource.name);\n\n                this.dispatchEvent({\n                    type: MapViewEventNames.DataSourceConnect,\n                    dataSourceName: dataSource.name\n                });\n\n                this.update();\n            })\n            .catch(error => {\n                logger.error(\n                    `Failed to connect to datasource ${dataSource.name}: ${error.message}`\n                );\n\n                this.m_failedDataSources.add(dataSource.name);\n                this.dispatchEvent({\n                    type: MapViewEventNames.DataSourceConnect,\n                    dataSourceName: dataSource.name,\n                    error\n                });\n            });\n    }\n\n    /**\n     * Removes [[DataSource]] from this `MapView`.\n     *\n     * @param dataSource The data source to be removed\n     */\n    removeDataSource(dataSource: DataSource) {\n        const dsIndex = this.m_tileDataSources.indexOf(dataSource);\n        if (dsIndex === -1) {\n            return;\n        }\n        dataSource.detach(this);\n\n        this.m_visibleTiles.removeDataSource(dataSource);\n        this.m_tileDataSources.splice(dsIndex, 1);\n        this.m_connectedDataSources.delete(dataSource.name);\n        this.m_failedDataSources.delete(dataSource.name);\n\n        if (this.m_backgroundDataSource) {\n            this.m_backgroundDataSource.updateStorageLevelOffset();\n        }\n\n        this.update();\n    }\n\n    /**\n     * Access the `VisibleTileSet` to get access to all current datasources and their visible tiles.\n     */\n    get visibleTileSet(): VisibleTileSet {\n        return this.m_visibleTiles;\n    }\n\n    /**\n     * Adds new overlay text elements to this `MapView`.\n     *\n     * @param textElements Array of [[TextElement]] to be added.\n     */\n    addOverlayText(textElements: TextElement[]): void {\n        this.m_textElementsRenderer.addOverlayText(textElements);\n        this.update();\n    }\n\n    /**\n     * Adds new overlay text elements to this `MapView`.\n     *\n     * @param textElements Array of [[TextElement]] to be added.\n     */\n    clearOverlayText(): void {\n        this.m_textElementsRenderer.clearOverlayText();\n    }\n\n    // tslint:disable: max-line-length\n    /**\n     * Adjusts the camera to look at a given geo coordinate with tilt and heading angles.\n     *\n     * #### Note on `target` and `bounds`\n     *\n     * If `bounds` are specified, `zoomLevel` and `distance` parameters are ignored and `lookAt`\n     * calculates best zoomLevel (and possibly target) to fit given bounds.\n     *\n     * Following table shows how relation between `bounds` and target.\n     *\n     * | `bounds`             | `target`    | actual `target`\n     * | ------               | ------      | --------\n     * | [[GeoBox]]           | _defined_   | `params.target` is used\n     * | [[GeoBox]]           | `undefined` | `bounds.center` is used as new `target`\n     * | [[GeoBoxExtentLike]] | `undefined` | current `MapView.target` is used\n     * | [[GeoBoxExtentLike]] | _defined_   | `params.target` is used\n     * | [[GeoCoordLike]][]   | `undefined` | new `target` is calculated as center of world box covering given points\n     * | [[GeoCoordLike]][]   | _defined_   | `params.target` is used and zoomLevel is adjusted to view all given geo points\n     *\n     * In each case, `lookAt` finds minimum `zoomLevel` that covers given extents or geo points.\n     *\n     * With flat projection, if `bounds` represents points on both sides of antimeridian, and\n     * [[MapViewOptions.tileWrappingEnabled]] is used, `lookAt` will use this knowledge and find\n     * minimal view that may cover \"next\" or \"previous\" world.\n     *\n     * With sphere projection if `bounds` represents points on both sides of globe, best effort\n     * method is used to find best `target``.\n     *\n     * #### Examples\n     *\n     * ```\n     * mapView.lookAt({heading: 90})\n     *     // look east retaining current `target`, `zoomLevel` and `tilt`\n     *\n     * mapView.lookAt({lat: 40.707, lng: -74.01})\n     *    // look at Manhattan, New York retaining other view params\n     *\n     * mapView.lookAt(bounds: { latitudeSpan: 10, longitudeSpan: 10})\n     *    // look at current `target`, but extending zoomLevel so we see 10 degrees of lat/long span\n     * ```\n     *\n     * @see More examples in [[LookAtExample]].\n     *\n     * @param params [[LookAtParams]]\n     */\n    lookAt(params: Partial<LookAtParams>): void;\n    // tslint:enable: max-line-length\n\n    /**\n     * The method that sets the camera to the desired angle (`tiltDeg`) and `distance` (in meters)\n     * to the `target` location, from a certain heading (`headingAngle`).\n     *\n     * @param target The location to look at.\n     * @param distance The distance of the camera to the target in meters.\n     * @param tiltDeg The camera tilt angle in degrees (0 is vertical), curbed below 89deg\n     *                @default 0\n     * @param headingDeg The camera heading angle in degrees and clockwise (as opposed to yaw)\n     *                   @default 0\n     * starting north.\n     * @deprecated Use lookAt version with [[LookAtParams]] object parameter.\n     */\n    lookAt(target: GeoCoordLike, distance: number, tiltDeg?: number, headingDeg?: number): void;\n\n    lookAt(\n        targetOrParams: GeoCoordLike | Partial<LookAtParams>,\n        distance?: number,\n        tiltDeg?: number,\n        headingDeg?: number\n    ): void {\n        if (isGeoCoordinatesLike(targetOrParams)) {\n            const zoomLevel =\n                distance !== undefined\n                    ? MapViewUtils.calculateZoomLevelFromDistance(this, distance)\n                    : undefined;\n\n            const params: Partial<LookAtParams> = {\n                target: targetOrParams,\n                zoomLevel,\n                tilt: tiltDeg,\n                heading: headingDeg\n            };\n            this.lookAtImpl(params);\n        } else if (typeof targetOrParams === \"object\") {\n            this.lookAtImpl(targetOrParams as Partial<LookAtParams>);\n        }\n    }\n\n    /**\n     * Moves the camera to the specified [[GeoCoordinates]], sets the desired `zoomLevel` and\n     * adjusts the yaw and pitch. The pitch of the camera is always curbed so that the camera cannot\n     * look above the horizon. This paradigm is necessary in [[MapControls]], where the center of \\\n     * the screen is used for the orbiting interaction (3 fingers / right mouse button).\n     *\n     * @param geoPos Geolocation to move the camera to.\n     * @param zoomLevel Desired zoom level.\n     * @param yawDeg Camera yaw in degrees, counter-clockwise (as opposed to heading), starting\n     * north.\n     * @param pitchDeg Camera pitch in degrees.\n     * @deprecated Use [[MapView.lookAt]] instead.\n     */\n    setCameraGeolocationAndZoom(\n        geoPos: GeoCoordinates,\n        zoomLevel: number,\n        yawDeg: number = 0,\n        pitchDeg: number = 0\n    ): void {\n        this.geoCenter = geoPos;\n        let limitedPitch = Math.min(MapViewUtils.MAX_TILT_DEG, pitchDeg);\n        if (this.projection.type === ProjectionType.Spherical) {\n            const maxPitchRadWithCurvature = Math.asin(\n                EarthConstants.EQUATORIAL_RADIUS /\n                    (MapViewUtils.calculateDistanceToGroundFromZoomLevel(this, zoomLevel) +\n                        EarthConstants.EQUATORIAL_RADIUS)\n            );\n            const maxPitchDegWithCurvature = THREE.MathUtils.radToDeg(maxPitchRadWithCurvature);\n            limitedPitch = Math.min(limitedPitch, maxPitchDegWithCurvature);\n        }\n        MapViewUtils.zoomOnTargetPosition(this, 0, 0, zoomLevel);\n        MapViewUtils.setRotation(this, yawDeg, limitedPitch);\n        this.update();\n    }\n\n    /**\n     * Updates the value of a dynamic property.\n     *\n     * Property names starting with a `$`-sign are reserved and any attempt to change their value\n     * will result in an error.\n     *\n     * Themes can access dynamic properties using the `Expr` operator `[\"dynamic-properties\"]`,\n     * for example:\n     *\n     *   `[\"get\", \"property name\", [\"dynamic-properties\"]]`\n     *\n     * @param name The name of the property.\n     * @param value The value of the property.\n     */\n    setDynamicProperty(name: string, value: Value) {\n        if (name.startsWith(\"$\")) {\n            throw new Error(`failed to update the value of the dynamic property '${name}'`);\n        }\n        this.m_env.entries[name] = value;\n        this.update();\n    }\n\n    /**\n     * Removes the given dynamic property from this [[MapView]].\n     *\n     * Property names starting with a `$`-sign are reserved and any attempt to change their value\n     * will result in an error.\n     *\n     * @param name The name of the property to remove.\n     */\n    removeDynamicProperty(name: string) {\n        if (name.startsWith(\"$\")) {\n            throw new Error(`failed to remove the dynamic property '${name}'`);\n        }\n        delete this.m_env.entries[name];\n        this.update();\n    }\n\n    /**\n     * Returns `true` if this `MapView` is constantly redrawing the scene.\n     */\n    get animating(): boolean {\n        return this.m_animationCount > 0;\n    }\n\n    /**\n     * Begin animating the scene.\n     */\n    beginAnimation() {\n        if (this.m_animationCount++ === 0) {\n            this.update();\n            ANIMATION_STARTED_EVENT.time = Date.now();\n            this.dispatchEvent(ANIMATION_STARTED_EVENT);\n        }\n    }\n\n    /**\n     * Stop animating the scene.\n     */\n    endAnimation() {\n        if (this.m_animationCount > 0) {\n            --this.m_animationCount;\n        }\n\n        if (this.m_animationCount === 0) {\n            ANIMATION_FINISHED_EVENT.time = Date.now();\n            this.dispatchEvent(ANIMATION_FINISHED_EVENT);\n        }\n    }\n\n    /**\n     * Returns `true` if the camera moved in the last frame.\n     */\n    get cameraIsMoving() {\n        return this.m_movementDetector.cameraIsMoving;\n    }\n\n    /**\n     * Returns `true` if the current frame will immediately be followed by another frame.\n     */\n    get isDynamicFrame(): boolean {\n        return (\n            this.cameraIsMoving ||\n            this.animating ||\n            this.m_updatePending ||\n            this.m_animatedExtrusionHandler.isAnimating\n        );\n    }\n\n    /**\n     * Returns the ratio between a pixel and a world unit for the current camera (in the center of\n     * the camera projection).\n     */\n    get pixelToWorld(): number {\n        if (this.m_pixelToWorld === undefined) {\n            // At this point fov calculation should be always defined.\n            assert(this.m_options.fovCalculation !== undefined);\n            // NOTE: Look at distance is the distance to camera focus (and pivot) point.\n            // In screen space this point is located in the center of canvas.\n            // Given that zoom level is not modified (clamped by camera pitch), the following\n            // formulas are all equivalent:\n            // lookAtDistance = (EQUATORIAL_CIRCUMFERENCE * focalLength) / (256 * zoomLevel^2);\n            // lookAtDistance = abs(cameraPos.z) / cos(cameraPitch);\n            // Here we may use precalculated target distance (once pre frame):\n            const lookAtDistance = this.m_targetDistance;\n\n            // Find world space object size that corresponds to one pixel on screen.\n            this.m_pixelToWorld = MapViewUtils.calculateWorldSizeByFocalLength(\n                this.m_focalLength,\n                lookAtDistance,\n                1\n            );\n        }\n        return this.m_pixelToWorld;\n    }\n\n    /**\n     * Returns the ratio between a world and a pixel unit for the current camera (in the center of\n     * the camera projection).\n     */\n    get worldToPixel() {\n        return 1.0 / this.pixelToWorld;\n    }\n\n    get pixelRatio(): number {\n        if (this.m_pixelRatio !== undefined) {\n            return this.m_pixelRatio;\n        }\n        return typeof window !== \"undefined\" && window.devicePixelRatio !== undefined\n            ? window.devicePixelRatio\n            : 1.0;\n    }\n\n    /**\n     * PixelRatio in the WebGlRenderer. May contain values > 1.0 for high resolution screens\n     * (HiDPI).\n     *\n     * A value of `undefined` will make the getter return `window.devicePixelRatio`, setting a value\n     * of `1.0` will disable the use of HiDPI on all devices.\n     *\n     * @note Since the current pixelRatio may have been used in some calculations (e.g. the icons)\n     * they may appear in the wrong size now. To ensure proper display of data, a call to\n     * `clearTileCache()` is required if the pixelRatio is changed after tiles have been loaded.\n     *\n     * @memberof MapView\n     */\n    set pixelRatio(pixelRatio: number) {\n        this.m_pixelRatio = pixelRatio;\n        if (this.renderer.getPixelRatio() !== this.pixelRatio) {\n            this.renderer.setPixelRatio(this.pixelRatio);\n        }\n    }\n\n    /**\n     * PixelRatio ratio for rendering when the camera is moving or an animation is running. Useful\n     * when rendering on high resolution displays with low performance GPUs that may be\n     * fill-rate-limited.\n     *\n     * If a value is specified, a low resolution render pass is used to render the scene into a\n     * low resolution render target, before it is copied to the screen.\n     *\n     * A value of `undefined` disables the low res render pass. Values between 0.5 and\n     * `window.devicePixelRatio` can be tried to give  good results. The value should not be larger\n     * than `window.devicePixelRatio`.\n     *\n     * @note Since no anti-aliasing is applied during dynamic rendering with `dynamicPixelRatio`\n     * defined, visual artifacts may occur, especially with thin lines..\n     *\n     * @note The resolution of icons and text labels is not affected.\n     *\n     * @default `undefined`\n     */\n    set dynamicPixelRatio(ratio: number | undefined) {\n        this.mapRenderingManager.lowResPixelRatio = ratio;\n    }\n\n    get dynamicPixelRatio(): number | undefined {\n        return this.mapRenderingManager.lowResPixelRatio;\n    }\n\n    /**\n     * Returns the screen position of the given geo coordinates.\n     *\n     * @param geoPos The geo coordinates.\n     * @returns The screen position in CSS/client coordinates (no pixel ratio applied) or\n     * `undefined`.\n     */\n    getScreenPosition(geoPos: GeoCoordinates): THREE.Vector2 | undefined {\n        this.projection.projectPoint(geoPos, cache.vector3[0]);\n        const p = this.m_screenProjector.project(cache.vector3[0]);\n        if (p !== undefined) {\n            const { width, height } = this.getCanvasClientSize();\n            p.x = p.x + width / 2;\n            p.y = height - (p.y + height / 2);\n        }\n        return p;\n    }\n\n    /**\n     * Returns a ray caster using the supplied screen positions.\n     *\n     * @param x The X position in css/client coordinates (without applied display ratio).\n     * @param y The Y position in css/client coordinates (without applied display ratio).\n     *\n     * @alpha\n     *\n     * @return Raycaster with origin at the camera and direction based on the supplied x / y screen\n     * points.\n     */\n    raycasterFromScreenPoint(x: number, y: number): THREE.Raycaster {\n        this.m_raycaster.setFromCamera(this.getNormalizedScreenCoordinates(x, y), this.m_rteCamera);\n        return this.m_raycaster;\n    }\n\n    /**\n     * Returns the world space position from the given screen position. The return value can be\n     * `null`, in case the camera is facing the horizon and the given `(x, y)` value is not\n     * intersecting the ground plane.\n     *\n     * @param x The X position in css/client coordinates (without applied display ratio).\n     * @param y The Y position in css/client coordinates (without applied display ratio).\n     */\n    getWorldPositionAt(x: number, y: number): THREE.Vector3 | null {\n        this.m_raycaster.setFromCamera(this.getNormalizedScreenCoordinates(x, y), this.m_camera);\n        return this.projection.type === ProjectionType.Spherical\n            ? this.m_raycaster.ray.intersectSphere(this.m_sphere, cache.vector3[0])\n            : this.m_raycaster.ray.intersectPlane(this.m_plane, cache.vector3[0]);\n    }\n\n    /**\n     * Returns the [[GeoCoordinates]] from the given screen position. The return value can be\n     * `null`, in case the camera is facing the horizon and the given `(x, y)` value is not\n     * intersecting the ground plane.\n     *\n     * @param x The X position in css/client coordinates (without applied display ratio).\n     * @param y The Y position in css/client coordinates (without applied display ratio).\n     */\n    getGeoCoordinatesAt(x: number, y: number): GeoCoordinates | null {\n        const worldPosition = this.getWorldPositionAt(x, y);\n        if (!worldPosition) {\n            return null;\n        }\n        return this.projection.unprojectPoint(worldPosition);\n    }\n\n    /**\n     * Returns the normalized screen coordinates from the given pixel position.\n     *\n     * @param x The X position in css/client coordinates (without applied display ratio).\n     * @param y The Y position in css/client coordinates (without applied display ratio).\n     */\n    getNormalizedScreenCoordinates(x: number, y: number): THREE.Vector3 {\n        // use clientWidth and clientHeight as it does not apply the pixelRatio and\n        // therefore supports also HiDPI devices\n        const { width, height } = this.getCanvasClientSize();\n        return new THREE.Vector3((x / width) * 2 - 1, -((y / height) * 2) + 1, 0);\n    }\n\n    /**\n     * Do a raycast on all objects in the scene. Useful for picking. Limited to objects that\n     * THREE.js can raycast, the solid lines that get their geometry in the shader cannot be tested\n     * for intersection.\n     *\n     * Note, if a [[DataSource]] adds an [[Object3D]] to a [[Tile]], it will be only pickable once\n     * [[MapView.render]] has been called, this is because [[MapView.render]] method creates the\n     * internal three.js root [[Object3D]] which is used in the [[PickHandler]] internally.\n     * This method will not test for intersection custom objects added to the scene by for\n     * example calling directly the [[scene.add]] method from THREE.\n     *\n     * @param x The X position in css/client coordinates (without applied display ratio).\n     * @param y The Y position in css/client coordinates (without applied display ratio).\n     * @returns The list of intersection results.\n     */\n    intersectMapObjects(x: number, y: number): PickResult[] {\n        return this.m_pickHandler.intersectMapObjects(x, y);\n    }\n\n    /**\n     * Resize the HTML canvas element and the THREE.js `WebGLRenderer`.\n     *\n     * @param width The new width.\n     * @param height The new height.\n     */\n    resize(width: number, height: number) {\n        this.m_renderer.setSize(width, height, false);\n        if (this.m_renderer.getPixelRatio() !== this.pixelRatio) {\n            this.m_renderer.setPixelRatio(this.pixelRatio);\n        }\n\n        if (this.mapRenderingManager !== undefined) {\n            this.mapRenderingManager.setSize(width, height);\n        }\n\n        if (this.collisionDebugCanvas !== undefined) {\n            this.collisionDebugCanvas.width = width;\n            this.collisionDebugCanvas.height = height;\n        }\n\n        this.updateCameras();\n        this.update();\n\n        this.dispatchEvent({\n            type: MapViewEventNames.Resize,\n            size: {\n                width,\n                height\n            }\n        });\n    }\n\n    /**\n     * Redraws scene immediately\n     *\n     * @note Before using this method, set `synchronousRendering` to `true`\n     * in the [[MapViewOptions]]\n     *\n     * @param frameStartTime Optional timestamp for start of frame.\n     * Default: [[PerformanceTimer.now()]]\n     */\n    renderSync(frameStartTime?: number) {\n        if (frameStartTime === undefined) {\n            frameStartTime = PerformanceTimer.now();\n        }\n        this.render(frameStartTime);\n    }\n\n    /**\n     * Requests a redraw of the scene.\n     */\n    update() {\n        this.dispatchEvent(UPDATE);\n\n        // Skip if update is already in progress\n        if (this.m_updatePending) {\n            return;\n        }\n\n        // Set update flag\n        this.m_updatePending = true;\n\n        this.startRenderLoop();\n    }\n\n    /**\n     * Returns `true` if an update has already been requested, such that after a currently rendering\n     * frame, the next frame will be rendered immediately.\n     */\n    get updatePending(): boolean {\n        return this.m_updatePending;\n    }\n\n    /**\n     * Requests a redraw of the scene.\n     * @deprecated Use the [[update]] method instead.\n     */\n    requestUpdateIfNeeded() {\n        this.update();\n    }\n\n    /**\n     * Clear the tile cache.\n     *\n     * Remove the [[Tile]] objects created by cacheable [[DataSource]]s. If a [[DataSource]] name is\n     * provided, this method restricts the eviction the [[DataSource]] with the given name.\n     *\n     * @param dataSourceName The name of the [[DataSource]].\n     */\n    clearTileCache(dataSourceName?: string) {\n        if (this.m_visibleTiles === undefined) {\n            // This method is called in the shadowsEnabled function, which is initialized in the\n            // setupRenderer function,\n            return;\n        }\n        if (dataSourceName !== undefined) {\n            const dataSource = this.getDataSourceByName(dataSourceName);\n            if (dataSource) {\n                this.m_visibleTiles.clearTileCache(dataSource);\n                dataSource.clearCache();\n            }\n        } else {\n            this.m_visibleTiles.clearTileCache();\n            this.m_tileDataSources.forEach(dataSource => dataSource.clearCache());\n        }\n\n        if (this.m_elevationProvider !== undefined) {\n            this.m_elevationProvider.clearCache();\n        }\n    }\n\n    /**\n     * Apply visitor to all visible tiles.\n     *\n     * @param fun Visitor function\n     */\n    forEachVisibleTile(fun: (tile: Tile) => void) {\n        this.m_visibleTiles.forEachVisibleTile(fun);\n    }\n\n    /**\n     * Apply a visitor function to all tiles in the cache.\n     *\n     * @param visitor Visitor function\n     */\n    forEachCachedTile(visitor: (tile: Tile) => void) {\n        this.m_visibleTiles.forEachCachedTile(visitor);\n    }\n\n    /**\n     * Visit each tile in visible, rendered, and cached sets.\n     *\n     *  * Visible and temporarily rendered tiles will be marked for update and retained.\n     *  * Cached but not rendered/visible will be evicted.\n     *\n     * @param dataSource If passed, only the tiles from this [[DataSource]] instance are processed.\n     * If `undefined`, tiles from all [[DataSource]]s are processed.\n     */\n    markTilesDirty(dataSource?: DataSource) {\n        this.m_visibleTiles.markTilesDirty(dataSource);\n    }\n\n    /**\n     * Sets the DataSource which contains the elevations, the elevation range source, and the\n     * elevation provider. Only a single elevation source is possible per [[MapView]]\n     *\n     * If the terrain-datasource is merged with this repository, we could internally construct\n     * the [[ElevationRangeSource]] and the [[ElevationProvider]] and access would be granted to\n     * the application when it asks for it, to simplify the API.\n     *\n     * @param elevationSource The datasource containing the terrain tiles.\n     * @param elevationRangeSource Allows access to the elevation min / max per tile.\n     * @param elevationProvider Allows access to the elevation at a given location or a ray\n     *      from the camera.\n     */\n    async setElevationSource(\n        elevationSource: DataSource,\n        elevationRangeSource: ElevationRangeSource,\n        elevationProvider: ElevationProvider\n    ) {\n        // Remove previous elevation source if present\n        if (this.m_elevationSource && this.m_elevationSource !== elevationSource) {\n            this.removeDataSource(this.m_elevationSource);\n        }\n\n        // Add as datasource if it was not added before\n        const isPresent = this.m_tileDataSources.indexOf(elevationSource) !== -1;\n        if (!isPresent) {\n            await this.addDataSource(elevationSource);\n        }\n        this.m_elevationSource = elevationSource;\n        this.m_elevationRangeSource = elevationRangeSource;\n        if (!this.m_elevationRangeSource.ready()) {\n            await this.m_elevationRangeSource.connect();\n        }\n        this.m_elevationProvider = elevationProvider;\n        this.dataSources.forEach(dataSource => {\n            dataSource.setEnableElevationOverlay(true);\n        });\n        this.m_tileGeometryManager.setTileUpdateCallback((tile: Tile) => {\n            overlayOnElevation(tile);\n        });\n        this.clearTileCache();\n    }\n\n    /**\n     * Clears any elevation sources and provider previously set.\n     * @param elevationSource The datasource to be cleared.\n     */\n    clearElevationSource(elevationSource: DataSource) {\n        this.removeDataSource(elevationSource);\n        this.m_elevationSource = undefined;\n        this.m_elevationRangeSource = undefined;\n        this.m_elevationProvider = undefined;\n        this.dataSources.forEach(dataSource => {\n            dataSource.setEnableElevationOverlay(false);\n        });\n        this.m_tileGeometryManager.setTileUpdateCallback(undefined);\n        this.clearTileCache();\n    }\n\n    /**\n     * Public access to [[MapViewFog]] allowing to toggle it by setting its `enabled` property.\n     */\n    get fog(): MapViewFog {\n        return this.m_fog;\n    }\n\n    private setPostEffects() {\n        // First clear all the effects, then enable them from what is specified.\n        this.mapRenderingManager.bloom.enabled = false;\n        this.mapRenderingManager.outline.enabled = false;\n        this.mapRenderingManager.vignette.enabled = false;\n        this.mapRenderingManager.sepia.enabled = false;\n\n        if (this.m_postEffects !== undefined) {\n            if (this.m_postEffects.bloom !== undefined) {\n                this.mapRenderingManager.bloom = this.m_postEffects.bloom;\n            }\n            if (this.m_postEffects.outline !== undefined) {\n                this.mapRenderingManager.outline.enabled = this.m_postEffects.outline.enabled;\n                this.mapRenderingManager.updateOutline(this.m_postEffects.outline);\n            }\n            if (this.m_postEffects.vignette !== undefined) {\n                this.mapRenderingManager.vignette = this.m_postEffects.vignette;\n            }\n            if (this.m_postEffects.sepia !== undefined) {\n                this.mapRenderingManager.sepia = this.m_postEffects.sepia;\n            }\n        }\n    }\n\n    /**\n     * Returns the elevation provider.\n     */\n    get elevationProvider(): ElevationProvider | undefined {\n        return this.m_elevationProvider;\n    }\n\n    get shadowsEnabled(): boolean {\n        return this.m_options.enableShadows === true;\n    }\n\n    set shadowsEnabled(enabled: boolean) {\n        // shadowMap is undefined if we are testing (three.js always set it to be defined).\n        if (\n            this.m_renderer.shadowMap === undefined ||\n            enabled === this.m_renderer.shadowMap.enabled\n        ) {\n            return;\n        }\n        this.m_options.enableShadows = enabled;\n        // There is a bug in three.js where this doesn't currently work once enabled.\n        this.m_renderer.shadowMap.enabled = enabled;\n        // TODO: Make this configurable. Note, there is currently issues when using the\n        // VSMShadowMap type, this should be investigated if this type is requested.\n        this.m_renderer.shadowMap.type = THREE.PCFSoftShadowMap;\n        this.clearTileCache();\n    }\n\n    private extractAttitude() {\n        const camera = this.m_camera;\n        const projection = this.projection;\n\n        const cameraPos = cache.vector3[1];\n        const transform = cache.transform[0];\n        const tangentSpaceMatrix = cache.matrix4[1];\n        // 1. Build the matrix of the tangent space of the camera.\n        cameraPos.setFromMatrixPosition(camera.matrixWorld); // Ensure using world position.\n        projection.localTangentSpace(this.m_targetGeoPos, transform);\n        tangentSpaceMatrix.makeBasis(transform.xAxis, transform.yAxis, transform.zAxis);\n\n        // 2. Change the basis of matrixWorld to the tangent space to get the new base axes.\n        cache.matrix4[0].getInverse(tangentSpaceMatrix).multiply(camera.matrixWorld);\n        transform.xAxis.setFromMatrixColumn(cache.matrix4[0], 0);\n        transform.yAxis.setFromMatrixColumn(cache.matrix4[0], 1);\n        transform.zAxis.setFromMatrixColumn(cache.matrix4[0], 2);\n\n        // 3. Deduce orientation from the base axes.\n        let yaw = 0;\n        let pitch = 0;\n        let roll = 0;\n\n        // Decompose rotation matrix into Z0 X Z1 Euler angles.\n        const epsilon = 1e-10;\n        const d = transform.zAxis.dot(cameraPos.set(0, 0, 1));\n        if (d < 1.0 - epsilon) {\n            if (d > -1.0 + epsilon) {\n                yaw = Math.atan2(transform.zAxis.x, -transform.zAxis.y);\n                pitch = Math.acos(transform.zAxis.z);\n                roll = Math.atan2(transform.xAxis.x, transform.yAxis.z);\n            } else {\n                // Looking bottom-up with space.z.z == -1.0\n                yaw = -Math.atan2(-transform.yAxis.x, transform.xAxis.x);\n                pitch = 180;\n                roll = 0;\n            }\n        } else {\n            // Looking top-down with space.z.z == 1.0\n            yaw = Math.atan2(-transform.yAxis.x, transform.xAxis.x);\n            pitch = 0.0;\n            roll = 0.0;\n        }\n\n        return {\n            yaw,\n            pitch,\n            roll\n        };\n    }\n\n    private lookAtImpl(params: Partial<LookAtParams>): void {\n        const tilt = Math.min(getOptionValue(params.tilt, this.tilt), MapViewUtils.MAX_TILT_DEG);\n        const heading = getOptionValue(params.heading, this.heading);\n\n        let target: GeoCoordinates | undefined;\n        if (params.bounds !== undefined) {\n            let geoPoints: GeoCoordLike[];\n\n            if (params.bounds instanceof GeoBox) {\n                target = params.target\n                    ? GeoCoordinates.fromObject(params.target)\n                    : params.bounds.center;\n                geoPoints = MapViewUtils.geoBoxToGeoPoints(params.bounds);\n            } else if (isGeoBoxExtentLike(params.bounds)) {\n                target = params.target ? GeoCoordinates.fromObject(params.target) : this.target;\n                const box = GeoBox.fromCenterAndExtents(target, params.bounds);\n                geoPoints = MapViewUtils.geoBoxToGeoPoints(box);\n            } else if (Array.isArray(params.bounds)) {\n                geoPoints = params.bounds;\n                if (params.target !== undefined) {\n                    target = GeoCoordinates.fromObject(params.target);\n                }\n            } else {\n                throw Error(\"#lookAt: Invalid 'bounds' value\");\n            }\n            if (this.m_tileWrappingEnabled && this.projection.type === ProjectionType.Planar) {\n                // In flat projection, with wrap around enabled, we should detect clusters of\n                // points around  antimeridian and possible move some points to sibling worlds.\n                //\n                // Here, we fit points into minimal geo box taking world wrapping into account.\n                geoPoints = MapViewUtils.wrapGeoPointsToScreen(geoPoints, target!);\n            }\n            const worldPoints = geoPoints.map(point =>\n                this.projection.projectPoint(GeoCoordinates.fromObject(point), new THREE.Vector3())\n            );\n            const worldTarget = new THREE.Vector3();\n            if (target! === undefined) {\n                const box = new THREE.Box3().setFromPoints(worldPoints);\n                box.getCenter(worldTarget);\n                this.projection.scalePointToSurface(worldTarget);\n                target = this.projection.unprojectPoint(worldTarget);\n            } else {\n                this.projection.projectPoint(target, worldTarget);\n            }\n            return this.lookAtImpl(\n                MapViewUtils.getFitBoundsLookAtParams(target, worldTarget, worldPoints, {\n                    tilt,\n                    heading,\n                    minDistance: MapViewUtils.calculateDistanceFromZoomLevel(\n                        this,\n                        this.maxZoomLevel\n                    ),\n                    projection: this.projection,\n                    camera: this.camera\n                })\n            );\n        }\n        target =\n            params.target !== undefined ? GeoCoordinates.fromObject(params.target) : this.target;\n\n        const distance =\n            params.zoomLevel !== undefined\n                ? MapViewUtils.calculateDistanceFromZoomLevel(\n                      this,\n                      THREE.MathUtils.clamp(\n                          params.zoomLevel,\n                          this.m_minZoomLevel,\n                          this.m_maxZoomLevel\n                      )\n                  )\n                : params.distance !== undefined\n                ? params.distance\n                : this.m_targetDistance;\n\n        // MapViewUtils#setRotation uses pitch, not tilt, which is different in sphere projection.\n        // But in sphere, in the tangent space of the target of the camera, pitch = tilt. So, put\n        // the camera on the target, so the tilt can be passed to getRotation as a pitch.\n        MapViewUtils.getCameraRotationAtTarget(\n            this.projection,\n            target,\n            -heading,\n            tilt,\n            this.camera.quaternion\n        );\n        MapViewUtils.getCameraPositionFromTargetCoordinates(\n            target,\n            distance,\n            -heading,\n            tilt,\n            this.projection,\n            this.camera.position\n        );\n        this.camera.updateMatrixWorld(true);\n\n        // Make sure to update all properties that are accessable via API (e.g. zoomlevel) b/c\n        // otherwise they would be updated as recently as in the next animation frame.\n        this.updateLookAtSettings();\n        this.update();\n    }\n\n    /**\n     * Plug-in PolarTileDataSource for spherical projection and plug-out otherwise\n     */\n    private updatePolarDataSource() {\n        const dataSource = this.m_polarDataSource;\n        if (this.m_enablePolarDataSource === true && dataSource !== undefined) {\n            const twinDataSource = this.getDataSourceByName(dataSource.name);\n\n            if (this.projection.type === ProjectionType.Spherical) {\n                if (twinDataSource === undefined) {\n                    this.addDataSource(dataSource);\n                }\n            } else {\n                if (twinDataSource !== undefined) {\n                    this.removeDataSource(dataSource);\n                }\n            }\n        }\n    }\n\n    /**\n     * Updates the camera and the projections and resets the screen collisions,\n     * note, setupCamera must be called before this is called.\n     * @param viewRanges optional parameter that supplies new view ranges, most importantly\n     * near/far clipping planes distance. If parameter is not provided view ranges will be\n     * calculated from [[ClipPlaneEvaluator]] used in [[VisibleTileSet]].\n     */\n    private updateCameras(viewRanges?: ViewRanges) {\n        // Update look at settings first, so that other components (e.g. ClipPlanesEvaluator) get\n        // the up to date tilt, targetDistance, ...\n        this.m_camera.updateMatrixWorld(false);\n        this.updateLookAtSettings();\n\n        const { width, height } = this.m_renderer.getSize(cache.vector2[0]);\n        this.m_camera.aspect =\n            this.m_forceCameraAspect !== undefined ? this.m_forceCameraAspect : width / height;\n        this.setFovOnCamera(this.m_options.fovCalculation!, height);\n\n        // When calculating clip planes account for the highest building on the earth,\n        // multiplying its height by projection scaling factor. This approach assumes\n        // constantHeight property of extruded polygon technique is set as default false,\n        // otherwise the near plane margins will be bigger then required, but still correct.\n        const projectionScale = this.projection.getScaleFactor(this.camera.position);\n        const maxGeometryHeightScaled =\n            projectionScale *\n            this.m_tileDataSources.reduce((r, ds) => Math.max(r, ds.maxGeometryHeight), 0);\n\n        // Copy all properties from new view ranges to our readonly object.\n        // This allows to keep all view ranges references valid and keeps up-to-date\n        // information within them. Works the same as copping all properties one-by-one.\n        Object.assign(\n            this.m_viewRanges,\n            viewRanges === undefined\n                ? this.m_visibleTiles.updateClipPlanes(maxGeometryHeightScaled)\n                : viewRanges\n        );\n        this.m_camera.near = this.m_viewRanges.near;\n        this.m_camera.far = this.m_viewRanges.far;\n\n        this.m_camera.updateProjectionMatrix();\n\n        // Update the \"relative to eye\" camera. Copy the public camera parameters\n        // and place the \"relative to eye\" at the world's origin.\n        this.m_rteCamera.copy(this.m_camera);\n        this.m_rteCamera.position.setScalar(0);\n        this.m_rteCamera.updateMatrixWorld(true);\n\n        this.m_screenCamera.left = width / -2;\n        this.m_screenCamera.right = width / 2;\n        this.m_screenCamera.bottom = height / -2;\n        this.m_screenCamera.top = height / 2;\n        this.m_screenCamera.updateProjectionMatrix();\n        this.m_screenCamera.updateMatrixWorld(false);\n\n        this.m_screenProjector.update(this.camera, width, height);\n        this.m_screenCollisions.update(width, height);\n\n        this.m_pixelToWorld = undefined;\n        this.m_fog.update(this, this.m_viewRanges.maximum);\n    }\n\n    /**\n     * Derive the look at settings (i.e. target, zoom, ...) from the current camera.\n     */\n    private updateLookAtSettings() {\n        // tslint:disable-next-line: deprecation\n        const { target, distance } = MapViewUtils.getTargetAndDistance(\n            this.projection,\n            this.camera,\n            this.elevationProvider\n        );\n\n        this.m_targetWorldPos.copy(target);\n        this.m_targetGeoPos = this.projection.unprojectPoint(this.m_targetWorldPos);\n        this.m_targetDistance = distance;\n        this.m_zoomLevel = MapViewUtils.calculateZoomLevelFromDistance(this, this.m_targetDistance);\n\n        const { yaw, pitch, roll } = this.extractAttitude();\n        this.m_yaw = yaw;\n        this.m_pitch = pitch;\n        this.m_roll = roll;\n    }\n\n    /**\n     * Update `Env` instance used for style `Expr` evaluations.\n     */\n    private updateEnv() {\n        this.m_env.entries.$zoom = this.m_zoomLevel;\n\n        // This one introduces unnecessary calculation of pixelToWorld, even if it's barely\n        // used in our styles.\n        this.m_env.entries.$pixelToMeters = this.pixelToWorld;\n\n        this.m_env.entries.$frameNumber = this.m_frameNumber;\n    }\n\n    /**\n     * Transfer the NDC point to view space.\n     * @param vector Vector to transform.\n     * @param result Result to place calculation.\n     */\n    private ndcToView(vector: Vector3Like, result: THREE.Vector3): THREE.Vector3 {\n        result\n            .set(vector.x, vector.y, vector.z)\n            .applyMatrix4(this.camera.projectionMatrixInverse)\n            // Make sure to apply rotation, hence use the rte camera\n            .applyMatrix4(this.m_rteCamera.matrixWorld);\n        return result;\n    }\n\n    /**\n     * Transfer from view space to camera space.\n     * @param viewPos position in view space, result is stored here.\n     */\n    private viewToLightSpace(viewPos: THREE.Vector3, camera: THREE.Camera): THREE.Vector3 {\n        return viewPos.applyMatrix4(camera.matrixWorldInverse);\n    }\n\n    /**\n     * Update the directional light camera. Note, this requires the cameras to first be updated.\n     */\n    private updateLights() {\n        // TODO: HARP-9479 Globe doesn't support shadows.\n        if (\n            !this.shadowsEnabled ||\n            this.projection.type === ProjectionType.Spherical ||\n            this.m_createdLights === undefined ||\n            this.m_createdLights.length === 0\n        ) {\n            return;\n        }\n\n        const points: Vector3Like[] = [\n            // near plane points\n            { x: -1, y: -1, z: -1 },\n            { x: 1, y: -1, z: -1 },\n            { x: -1, y: 1, z: -1 },\n            { x: 1, y: 1, z: -1 },\n\n            // far planes points\n            { x: -1, y: -1, z: 1 },\n            { x: 1, y: -1, z: 1 },\n            { x: -1, y: 1, z: 1 },\n            { x: 1, y: 1, z: 1 }\n        ];\n        const transformedPoints = points.map((p, i) => this.ndcToView(p, cache.frustumPoints[i]));\n\n        this.m_createdLights.forEach(element => {\n            const directionalLight = element as THREE.DirectionalLight;\n            if (directionalLight.isDirectionalLight === true) {\n                const pointsInLightSpace = transformedPoints.map(p =>\n                    this.viewToLightSpace(p, directionalLight.shadow.camera)\n                );\n\n                const box = new THREE.Box3();\n                pointsInLightSpace.forEach(point => {\n                    box.expandByPoint(point);\n                });\n                const camera = directionalLight.shadow.camera;\n                camera.left = box.min.x;\n                camera.right = box.max.x;\n                camera.top = box.max.y;\n                camera.bottom = box.min.y;\n                camera.near = -box.max.z;\n                camera.far = -box.min.z;\n                camera.updateProjectionMatrix();\n\n                const lightDirection = cache.vector3[0];\n                lightDirection.copy(directionalLight.target.position);\n                lightDirection.sub(directionalLight.position);\n                lightDirection.normalize();\n\n                const normal = cache.vector3[1];\n                if (this.projection.type === ProjectionType.Planar) {\n                    // -Z points to the camera, we can't use Projection.surfaceNormal, because\n                    // webmercator and mercator give different results.\n                    normal.set(0, 0, -1);\n                } else {\n                    // Enable shadows for globe...\n                    //this.projection.surfaceNormal(target, normal);\n                }\n\n                // The camera of the shadow has the same height as the map camera, and the target is\n                // also the same. The position is then calculated based on the light direction and\n                // the height\n                // using basic trigonometry.\n                const tilt = this.m_pitch;\n                const cameraHeight = this.targetDistance * Math.cos(tilt);\n                const lightPosHyp = cameraHeight / normal.dot(lightDirection);\n\n                directionalLight.target.position.copy(this.worldTarget).sub(this.camera.position);\n                directionalLight.position.copy(this.worldTarget);\n                directionalLight.position.addScaledVector(lightDirection, -lightPosHyp);\n                directionalLight.position.sub(this.camera.position);\n            }\n        });\n    }\n\n    /**\n     * Render loop callback that should only be called by [[requestAnimationFrame]].\n     * Will trigger [[requestAnimationFrame]] again if updates are pending or  animation is running.\n     * @param frameStartTime The start time of the current frame\n     */\n    private renderLoop(frameStartTime: number) {\n        // Render loop shouldn't run when synchronous rendering is enabled\n        if (this.m_options.synchronousRendering) {\n            return;\n        }\n\n        if (this.maxFps === 0) {\n            // Render with max fps\n            this.render(frameStartTime);\n        } else {\n            // Limit fps by skipping frames\n\n            // Magic ingredient to compensate time flux.\n            const fudgeTimeInMs = 3;\n            const frameInterval = 1000 / this.maxFps;\n            const previousFrameTime =\n                this.m_previousFrameTimeStamp === undefined ? 0 : this.m_previousFrameTimeStamp;\n            const targetTime = previousFrameTime + frameInterval - fudgeTimeInMs;\n\n            if (frameStartTime >= targetTime) {\n                this.render(frameStartTime);\n            }\n        }\n\n        // Continue rendering if update is pending or animation is running\n        // tslint:disable-next-line: prefer-conditional-expression\n        if (this.m_updatePending || this.animating) {\n            this.m_animationFrameHandle = requestAnimationFrame(this.handleRequestAnimationFrame);\n        } else {\n            // Stop rendering if no update is pending\n            this.m_animationFrameHandle = undefined;\n        }\n    }\n\n    /**\n     * Start render loop if not already running.\n     */\n    private startRenderLoop() {\n        if (this.m_animationFrameHandle !== undefined || this.m_options.synchronousRendering) {\n            return;\n        }\n\n        this.m_animationFrameHandle = requestAnimationFrame(this.handleRequestAnimationFrame);\n    }\n\n    /**\n     * Returns the list of the enabled data sources.\n     */\n    private getEnabledTileDataSources(): DataSource[] {\n        // ### build this list once decoders && datasources are ready\n\n        const enabledDataSources: DataSource[] = [];\n\n        for (const dataSource of this.m_tileDataSources) {\n            if (this.isDataSourceEnabled(dataSource)) {\n                enabledDataSources.push(dataSource);\n            }\n        }\n\n        return enabledDataSources;\n    }\n\n    /**\n     * Renders the current frame.\n     */\n    private render(frameStartTime: number): void {\n        if (this.m_drawing) {\n            return;\n        }\n\n        RENDER_EVENT.time = frameStartTime;\n        this.dispatchEvent(RENDER_EVENT);\n\n        ++this.m_frameNumber;\n\n        let currentFrameEvent: FrameStats | undefined;\n        const stats = PerformanceStatistics.instance;\n        const gatherStatistics: boolean = stats.enabled;\n        if (gatherStatistics) {\n            currentFrameEvent = stats.currentFrame;\n\n            if (this.m_previousFrameTimeStamp !== undefined) {\n                // In contrast to fullFrameTime we also measure the application code\n                // for the FPS. This means FPS != 1000 / fullFrameTime.\n                const timeSincePreviousFrame = frameStartTime - this.m_previousFrameTimeStamp;\n                currentFrameEvent.setValue(\"render.fps\", 1000 / timeSincePreviousFrame);\n            }\n\n            // We store the last frame statistics at the beginning of the next frame b/c additional\n            // work (i.e. geometry creation) is done outside of the animation frame but still needs\n            // to be added to the `fullFrameTime` (see [[TileGeometryLoader]]).\n            stats.storeAndClearFrameInfo();\n\n            currentFrameEvent = currentFrameEvent as FrameStats;\n            currentFrameEvent.setValue(\"renderCount.frameNumber\", this.m_frameNumber);\n        }\n\n        this.m_previousFrameTimeStamp = frameStartTime;\n\n        let setupTime: number | undefined;\n        let cullTime: number | undefined;\n        let textPlacementTime: number | undefined;\n        let drawTime: number | undefined;\n        let textDrawTime: number | undefined;\n        let endTime: number | undefined;\n\n        this.m_renderer.info.reset();\n\n        this.m_updatePending = false;\n        this.m_thisFrameTilesChanged = undefined;\n\n        this.m_drawing = true;\n\n        if (this.m_renderer.getPixelRatio() !== this.pixelRatio) {\n            this.m_renderer.setPixelRatio(this.pixelRatio);\n        }\n\n        this.updateCameras();\n        this.updateEnv();\n        this.updateLights();\n\n        this.m_renderer.clear();\n\n        // clear the scene\n        this.m_mapTilesRoot.children.length = 0;\n\n        if (gatherStatistics) {\n            setupTime = PerformanceTimer.now();\n        }\n\n        // TBD: Update renderList only any of its params (camera, etc...) has changed.\n        if (!this.lockVisibleTileSet) {\n            const viewRangesStatus = this.m_visibleTiles.updateRenderList(\n                this.storageLevel,\n                Math.floor(this.zoomLevel),\n                this.getEnabledTileDataSources(),\n                this.m_elevationRangeSource\n            );\n            // View ranges has changed due to features (with elevation) that affects clip planes\n            // positioning, update cameras with new clip planes positions.\n            if (viewRangesStatus.viewRangesChanged) {\n                this.updateCameras(viewRangesStatus.viewRanges);\n            }\n        }\n\n        if (gatherStatistics) {\n            cullTime = PerformanceTimer.now();\n        }\n\n        const renderList = this.m_visibleTiles.dataSourceTileList;\n\n        // no need to check everything if we're not going to create text renderer.\n        renderList.forEach(({ zoomLevel, renderedTiles }) => {\n            renderedTiles.forEach(tile => {\n                this.renderTileObjects(tile, zoomLevel);\n\n                //We know that rendered tiles are visible (in the view frustum), so we update the\n                //frame number, note we don't do this for the visibleTiles because some may still be\n                //loading (and therefore aren't visible in the sense of being seen on the screen).\n                //Note also, this number isn't currently used anywhere so should be considered to be\n                //removed in the future (though could be good for debugging purposes).\n                tile.frameNumLastVisible = this.m_frameNumber;\n            });\n        });\n\n        // Check if this is the time to place the labels for the first time. Pretty much everything\n        // should have been loaded, and no animation should be running.\n        if (\n            !this.m_initialTextPlacementDone &&\n            !this.m_firstFrameComplete &&\n            !this.isDynamicFrame &&\n            !this.m_themeIsLoading &&\n            this.m_poiTableManager.finishedLoading &&\n            this.m_visibleTiles.allVisibleTilesLoaded &&\n            this.m_connectedDataSources.size + this.m_failedDataSources.size ===\n                this.m_tileDataSources.length &&\n            !this.m_textElementsRenderer.initializing &&\n            !this.m_textElementsRenderer.loading\n        ) {\n            this.m_initialTextPlacementDone = true;\n        }\n\n        this.m_mapAnchors.children.forEach((childObject: MapAnchor) => {\n            if (childObject.geoPosition !== undefined) {\n                this.projection.projectPoint(childObject.geoPosition, childObject.position);\n                childObject.position.sub(this.camera.position);\n            }\n        });\n        this.m_worldAnchors.children.forEach((childObject: WorldAnchor) => {\n            if (childObject.worldPosition !== undefined) {\n                const wp = childObject.worldPosition;\n                childObject.position.set(wp.x, wp.y, wp.z);\n                childObject.position.sub(this.camera.position);\n            }\n        });\n\n        this.m_animatedExtrusionHandler.zoom = this.m_zoomLevel;\n\n        if (currentFrameEvent !== undefined) {\n            // Make sure the counters all have a value.\n            currentFrameEvent.addValue(\"renderCount.numTilesRendered\", 0);\n            currentFrameEvent.addValue(\"renderCount.numTilesVisible\", 0);\n            currentFrameEvent.addValue(\"renderCount.numTilesLoading\", 0);\n\n            // Increment the counters for all data sources.\n            renderList.forEach(({ zoomLevel, renderedTiles, visibleTiles, numTilesLoading }) => {\n                currentFrameEvent!.addValue(\"renderCount.numTilesRendered\", renderedTiles.size);\n                currentFrameEvent!.addValue(\"renderCount.numTilesVisible\", visibleTiles.length);\n                currentFrameEvent!.addValue(\"renderCount.numTilesLoading\", numTilesLoading);\n            });\n        }\n\n        if (this.m_movementDetector.checkCameraMoved(this, frameStartTime)) {\n            //FIXME: Shouldn't we use target here?\n            const { latitude, longitude, altitude } = this.geoCenter;\n            this.dispatchEvent({\n                type: MapViewEventNames.CameraPositionChanged,\n                latitude,\n                longitude,\n                altitude,\n                // FIXME: Can we remove yaw, pitch and roll\n                yaw: this.m_yaw,\n                pitch: this.m_pitch,\n                roll: this.m_roll,\n                tilt: this.tilt,\n                heading: this.heading,\n                zoom: this.zoomLevel\n            });\n        }\n\n        // The camera used to render the scene.\n        const camera = this.m_pointOfView !== undefined ? this.m_pointOfView : this.m_rteCamera;\n\n        if (this.renderLabels) {\n            this.prepareRenderTextElements(frameStartTime);\n        }\n\n        if (gatherStatistics) {\n            textPlacementTime = PerformanceTimer.now();\n        }\n        if (this.m_skyBackground !== undefined && this.projection.type === ProjectionType.Planar) {\n            this.m_skyBackground.updateCamera(this.m_camera);\n        }\n\n        this.mapRenderingManager.render(\n            this.m_renderer,\n            this.m_scene,\n            camera,\n            !this.isDynamicFrame\n        );\n\n        if (gatherStatistics) {\n            drawTime = PerformanceTimer.now();\n        }\n\n        if (this.renderLabels) {\n            this.finishRenderTextElements();\n        }\n\n        if (gatherStatistics) {\n            textDrawTime = PerformanceTimer.now();\n        }\n\n        if (!this.m_firstFrameRendered) {\n            this.m_firstFrameRendered = true;\n\n            if (gatherStatistics) {\n                stats.appResults.set(\"firstFrame\", frameStartTime);\n            }\n\n            FIRST_FRAME_EVENT.time = frameStartTime;\n            this.dispatchEvent(FIRST_FRAME_EVENT);\n        }\n\n        this.m_visibleTiles.disposePendingTiles();\n\n        this.m_drawing = false;\n\n        this.checkCopyrightUpdates();\n\n        if (currentFrameEvent !== undefined) {\n            endTime = PerformanceTimer.now();\n\n            const frameRenderTime = endTime - frameStartTime;\n\n            currentFrameEvent.setValue(\"render.setupTime\", setupTime! - frameStartTime);\n            currentFrameEvent.setValue(\"render.cullTime\", cullTime! - setupTime!);\n            currentFrameEvent.setValue(\"render.textPlacementTime\", textPlacementTime! - cullTime!);\n            currentFrameEvent.setValue(\"render.drawTime\", drawTime! - textPlacementTime!);\n            currentFrameEvent.setValue(\"render.textDrawTime\", textDrawTime! - drawTime!);\n            currentFrameEvent.setValue(\"render.cleanupTime\", endTime - textDrawTime!);\n            currentFrameEvent.setValue(\"render.frameRenderTime\", frameRenderTime);\n\n            // Initialize the fullFrameTime with the frameRenderTime If we also create geometry in\n            // this frame, this number will be increased in the TileGeometryLoader.\n            currentFrameEvent.setValue(\"render.fullFrameTime\", frameRenderTime);\n            currentFrameEvent.setValue(\"render.geometryCreationTime\", 0);\n\n            // Add THREE.js statistics\n            stats.addWebGLInfo(this.m_renderer.info);\n\n            // Add memory statistics\n            // FIXME:\n            // This will only measure the memory of the rendering and not of the geometry creation.\n            // Assuming the garbage collector is not kicking in immediately we will at least see\n            // the geometry creation memory consumption acounted in the next frame.\n            stats.addMemoryInfo();\n        }\n\n        DID_RENDER_EVENT.time = frameStartTime;\n        this.dispatchEvent(DID_RENDER_EVENT);\n\n        // After completely rendering this frame, it is checked if this frame was the first complete\n        // frame, with no more tiles, geometry and labels waiting to be added, and no animation\n        // running. The initial placement of text in this render call may have changed the loading\n        // state of the TextElementsRenderer, so this has to be checked again.\n        if (\n            !this.m_firstFrameComplete &&\n            this.m_initialTextPlacementDone &&\n            !this.isDynamicFrame &&\n            !this.textElementsRenderer.loading\n        ) {\n            this.m_firstFrameComplete = true;\n\n            if (gatherStatistics) {\n                stats.appResults.set(\"firstFrameComplete\", frameStartTime);\n            }\n\n            FRAME_COMPLETE_EVENT.time = frameStartTime;\n            this.dispatchEvent(FRAME_COMPLETE_EVENT);\n        }\n    }\n\n    private renderTileObjects(tile: Tile, zoomLevel: number) {\n        const worldOffsetX = tile.computeWorldOffsetX();\n        if (tile.willRender(zoomLevel)) {\n            for (const object of tile.objects) {\n                if (!this.processTileObjectFeatures(tile, object)) {\n                    continue;\n                }\n                object.position.copy(tile.center);\n                if (object.displacement !== undefined) {\n                    object.position.add(object.displacement);\n                }\n                object.position.x += worldOffsetX;\n                object.position.sub(this.m_camera.position);\n                if (tile.localTangentSpace) {\n                    object.setRotationFromMatrix(tile.boundingBox.getRotationMatrix());\n                }\n                object.frustumCulled = false;\n                if (object._backupRenderOrder === undefined) {\n                    object._backupRenderOrder = object.renderOrder;\n                }\n\n                const isBuilding =\n                    object.userData !== undefined &&\n                    object.userData.kind !== undefined &&\n                    (object.userData.kind as GeometryKind[]).includes(GeometryKind.Building);\n\n                // When falling back to a parent tile (i.e. tile.levelOffset < 0) there will\n                // be overlaps with the already loaded tiles. Therefore all (flat) objects\n                // in a fallback tile must be shifted, such that their renderOrder is less\n                // than the groundPlane that each neighbouring Tile has (it has a renderOrder\n                // of -10000, see addGroundPlane in TileGeometryCreator), only then can we be\n                // sure that nothing of the parent will be rendered on top of the children,\n                // as such, we shift using the FALLBACK_RENDER_ORDER_OFFSET.\n                // This does not apply to buildings b/c they are 3d and the overlaps\n                // are resolved with a depth prepass. Note we set this always to ensure that if\n                // the Tile is used as a fallback, and then used normally, that we have the correct\n                // renderOrder.\n                object.renderOrder =\n                    object._backupRenderOrder +\n                    (!isBuilding && tile.levelOffset < 0\n                        ? FALLBACK_RENDER_ORDER_OFFSET * tile.levelOffset\n                        : 0);\n\n                this.m_mapTilesRoot.add(object);\n            }\n            tile.didRender();\n        }\n    }\n\n    /**\n     * Process the features owned by the given [[TileObject]].\n     *\n     * @param tile The [[Tile]] owning the [[TileObject]]'s features.\n     * @param object The [[TileObject]] to process.\n     * @returns `false` if the given [[TileObject]] should not be added to the scene.\n     */\n    private processTileObjectFeatures(tile: Tile, object: TileObject): boolean {\n        const technique: IndexedTechnique = object.userData.technique;\n\n        if (!technique || technique.enabled === undefined) {\n            // Nothing to do, there's no technique.\n            return true;\n        }\n\n        const feature: TileFeatureData = object.userData.feature;\n\n        if (!feature || !Expr.isExpr(technique.enabled)) {\n            return Boolean(getPropertyValue(technique.enabled, this.m_env));\n        }\n\n        const { starts, objInfos } = feature;\n\n        if (!Array.isArray(objInfos) || !Array.isArray(starts)) {\n            // Nothing to do, the object is missing feature ids and their position\n            // in the index buffer.\n            return true;\n        }\n\n        const geometry: THREE.BufferGeometry | undefined = (object as any).geometry;\n\n        if (!geometry || !geometry.isBufferGeometry) {\n            // Nothing to do, the geometry is not a [[THREE.BufferGeometry]]\n            // and we can't generate groups.\n            return true;\n        }\n\n        const index = geometry.getIndex()!;\n\n        // clear the groups.\n        geometry.clearGroups();\n\n        // The offset in the index buffer of the end of the last\n        // pushed group.\n        let endOfLastGroup: number | undefined;\n\n        objInfos.forEach((properties, featureIndex) => {\n            // the id of the current feature.\n            const featureId = getFeatureId(properties);\n\n            let enabled = true;\n\n            if (Expr.isExpr(technique.enabled)) {\n                // the state of current feature.\n                const featureState = tile.dataSource.getFeatureState(featureId);\n\n                // create a new [[Env]] that can be used\n                // to evaluate expressions that access the feature state.\n                const $state = featureState ? new MapEnv(featureState) : null;\n\n                const parentEnv =\n                    typeof properties === \"object\"\n                        ? new MapEnv(properties, this.m_env)\n                        : this.m_env;\n\n                const env = new MapEnv({ $state }, parentEnv);\n\n                enabled = Boolean(getPropertyValue(technique.enabled, env));\n            }\n\n            if (!enabled) {\n                // skip this feature, it was disabled.\n                return;\n            }\n\n            const start = starts[featureIndex];\n            const end = starts[featureIndex + 1] ?? index.count;\n            const count = end - start;\n\n            if (start === endOfLastGroup) {\n                // extend the last group\n                geometry.groups[geometry.groups.length - 1].count += count;\n            } else {\n                geometry.addGroup(start, count);\n            }\n\n            endOfLastGroup = start + count;\n        });\n\n        return geometry.groups.length > 0;\n    }\n\n    private prepareRenderTextElements(time: number) {\n        // Disable rendering of text elements for debug camera. TextElements are rendered using an\n        // orthographic camera that covers the entire available screen space. Unfortunately, this\n        // particular camera set up is not compatible with the debug camera.\n        const debugCameraActive = this.m_pointOfView !== undefined;\n\n        if (debugCameraActive) {\n            return;\n        }\n\n        this.m_textElementsRenderer.placeText(this.m_visibleTiles.dataSourceTileList, time);\n    }\n\n    private finishRenderTextElements() {\n        const canRenderTextElements = this.m_pointOfView === undefined;\n\n        if (canRenderTextElements) {\n            // copy far value from scene camera, as the distance to the POIs matter now.\n            this.m_screenCamera.far = this.m_viewRanges.maximum;\n            this.m_textElementsRenderer.renderText(this.m_screenCamera);\n        }\n    }\n\n    private initTheme() {\n        const theme = getOptionValue(this.m_options.theme, MapViewDefaults.theme);\n\n        this.m_themeIsLoading = true;\n        Promise.resolve<string | Theme>(theme)\n            // tslint:disable-next-line: no-shadowed-variable\n            .then(theme => ThemeLoader.load(theme, { uriResolver: this.m_uriResolver }))\n            // tslint:disable-next-line: no-shadowed-variable\n            .then(theme => {\n                this.m_themeIsLoading = false;\n                this.theme = theme;\n            })\n            .catch(error => {\n                this.m_themeIsLoading = false;\n                const themeName =\n                    typeof this.m_options.theme === \"string\" ? ` from ${this.m_options.theme}` : \"\";\n                logger.error(`Failed to load theme${themeName}: ${error}`, error);\n            });\n    }\n\n    private setupCamera() {\n        const { width, height } = this.getCanvasClientSize();\n\n        this.calculateFocalLength(height);\n        this.m_visibleTiles = this.createVisibleTileSet();\n\n        this.m_options.target = GeoCoordinates.fromObject(\n            getOptionValue(this.m_options.target, MapViewDefaults.target)\n        );\n        // ensure that look at target has height of 0\n        (this.m_options.target as GeoCoordinates).altitude = 0;\n        this.m_options.tilt = getOptionValue(this.m_options.tilt, MapViewDefaults.tilt);\n\n        this.m_options.heading = getOptionValue(this.m_options.heading, MapViewDefaults.heading);\n\n        this.m_options.zoomLevel = getOptionValue(\n            this.m_options.zoomLevel,\n            MapViewDefaults.zoomLevel\n        );\n\n        this.lookAtImpl(this.m_options);\n\n        // ### move & customize\n        this.resize(width, height);\n\n        this.m_screenCamera.position.z = 1;\n        this.m_screenCamera.near = 0;\n    }\n\n    private createVisibleTileSet(): VisibleTileSet {\n        const enableMixedLod =\n            this.m_enableMixedLod === undefined\n                ? this.projection.type === ProjectionType.Spherical\n                : this.m_enableMixedLod;\n\n        return new VisibleTileSet(\n            new FrustumIntersection(\n                this.m_camera,\n                this,\n                this.m_visibleTileSetOptions.extendedFrustumCulling,\n                this.m_tileWrappingEnabled,\n                enableMixedLod\n            ),\n            this.m_tileGeometryManager,\n            this.m_visibleTileSetOptions\n        );\n    }\n\n    private updateSkyBackground() {\n        if (this.m_theme === undefined) {\n            return;\n        }\n        const theme = this.m_theme;\n        if (this.m_skyBackground instanceof SkyBackground && theme.sky !== undefined) {\n            // there is a sky in the view and there is a sky option in the theme. Update the colors\n            this.updateSkyBackgroundColors(theme.sky, theme.clearColor);\n        } else if (this.m_skyBackground === undefined && theme.sky !== undefined) {\n            // there is no sky in the view but there is a sky option in the theme\n            this.addNewSkyBackground(theme.sky, theme.clearColor);\n            return;\n        } else if (this.m_skyBackground instanceof SkyBackground && theme.sky === undefined) {\n            // there is a sky in the view, but not in the theme\n            this.removeSkyBackGround();\n        }\n    }\n\n    private addNewSkyBackground(sky: Sky, clearColor: string | undefined) {\n        if (sky.type === \"gradient\" && (sky as GradientSky).groundColor === undefined) {\n            sky.groundColor = getOptionValue(clearColor, \"#000000\");\n        }\n        this.m_skyBackground = new SkyBackground(sky, this.projection.type, this.m_camera);\n        this.m_scene.background = this.m_skyBackground.texture;\n    }\n\n    private removeSkyBackGround() {\n        this.m_scene.background = null;\n        if (this.m_skyBackground !== undefined) {\n            this.m_skyBackground.dispose();\n            this.m_skyBackground = undefined;\n        }\n    }\n\n    private updateSkyBackgroundColors(sky: Sky, clearColor: string | undefined) {\n        if (sky.type === \"gradient\" && (sky as GradientSky).groundColor === undefined) {\n            sky.groundColor = getOptionValue(clearColor, \"#000000\");\n        }\n        if (this.m_skyBackground !== undefined) {\n            this.m_skyBackground.updateTexture(sky, this.projection.type);\n        }\n    }\n\n    private updateLighting() {\n        if (!this.m_theme) {\n            return;\n        }\n\n        const theme = this.m_theme as Theme;\n        if (theme.clearColor !== undefined) {\n            this.m_renderer.setClearColor(new THREE.Color(theme.clearColor));\n        }\n\n        if (this.m_createdLights) {\n            this.m_createdLights.forEach((light: THREE.Light) => {\n                this.m_scene.remove(light);\n            });\n        }\n        if (theme.lights !== undefined) {\n            this.m_createdLights = [];\n            theme.lights.forEach((lightDescription: Light) => {\n                const light = createLight(lightDescription);\n                if (!light) {\n                    logger.warn(\n                        // tslint:disable-next-line: max-line-length\n                        `MapView: failed to create light ${lightDescription.name} of type ${lightDescription.type}`\n                    );\n                    return;\n                }\n                this.m_scene.add(light);\n                if ((light as any).isDirectionalLight) {\n                    const directionalLight = light as THREE.DirectionalLight;\n                    // This is needed so that the target is updated automatically, see:\n                    // https://threejs.org/docs/#api/en/lights/DirectionalLight.target\n                    this.m_scene.add(directionalLight.target);\n                }\n                this.m_createdLights!.push(light);\n            });\n        }\n    }\n\n    private movementStarted() {\n        this.m_textElementsRenderer.movementStarted();\n\n        MOVEMENT_STARTED_EVENT.time = Date.now();\n        this.dispatchEvent(MOVEMENT_STARTED_EVENT);\n    }\n\n    private movementFinished() {\n        this.m_textElementsRenderer.movementFinished();\n\n        MOVEMENT_FINISHED_EVENT.time = Date.now();\n        this.dispatchEvent(MOVEMENT_FINISHED_EVENT);\n\n        // render at the next possible time.\n        if (!this.animating) {\n            if (this.m_movementFinishedUpdateTimerId !== undefined) {\n                clearTimeout(this.m_movementFinishedUpdateTimerId);\n            }\n            this.m_movementFinishedUpdateTimerId = setTimeout(() => {\n                this.m_movementFinishedUpdateTimerId = undefined;\n                this.update();\n            }, 0);\n        }\n    }\n\n    /**\n     * Check if the set of visible tiles changed since the last frame.\n     *\n     * May be called multiple times per frame.\n     *\n     * Equality is computed by creating a string containing the IDs of the tiles.\n     */\n    private checkIfTilesChanged() {\n        if (this.m_thisFrameTilesChanged !== undefined) {\n            return this.m_thisFrameTilesChanged;\n        }\n        const renderList = this.m_visibleTiles.dataSourceTileList;\n\n        const tileIdList: string[] = [];\n\n        tileIdList.length = 0;\n\n        renderList.forEach(({ dataSource, renderedTiles }) => {\n            renderedTiles.forEach(tile => {\n                tileIdList.push(dataSource.name + \"-\" + tile.tileKey.mortonCode());\n            });\n        });\n\n        tileIdList.sort();\n\n        const newTileIds = tileIdList.join(\"#\");\n\n        if (newTileIds !== this.m_lastTileIds) {\n            this.m_lastTileIds = newTileIds;\n            this.m_thisFrameTilesChanged = true;\n        } else {\n            this.m_thisFrameTilesChanged = false;\n        }\n\n        return this.m_thisFrameTilesChanged;\n    }\n\n    private checkCopyrightUpdates() {\n        if (!this.checkIfTilesChanged()) {\n            return;\n        }\n\n        const newCopyrightInfo = this.getRenderedTilesCopyrightInfo();\n        if (newCopyrightInfo === this.m_copyrightInfo) {\n            return;\n        }\n        if (newCopyrightInfo.length === this.m_copyrightInfo.length) {\n            let allEqual = true;\n            for (let i = 0; i < newCopyrightInfo.length; i++) {\n                const a = newCopyrightInfo[i];\n                const b = this.m_copyrightInfo[i];\n                if (a.label !== b.label) {\n                    allEqual = false;\n                    break;\n                }\n            }\n            if (allEqual) {\n                return;\n            }\n        }\n        this.m_copyrightInfo = newCopyrightInfo;\n        this.dispatchEvent(COPYRIGHT_CHANGED_EVENT);\n    }\n\n    private getRenderedTilesCopyrightInfo(): CopyrightInfo[] {\n        let result: CopyrightInfo[] = [];\n        for (const tileList of this.m_visibleTiles.dataSourceTileList) {\n            for (const tile of tileList.renderedTiles.values()) {\n                const tileCopyrightInfo = tile.copyrightInfo;\n                if (tileCopyrightInfo === undefined || tileCopyrightInfo.length === 0) {\n                    continue;\n                }\n                result = CopyrightInfo.mergeArrays(result, tileCopyrightInfo);\n            }\n        }\n        return result;\n    }\n\n    private updateImages() {\n        if (!this.m_theme) {\n            return;\n        }\n\n        const theme = this.m_theme as Theme;\n\n        this.m_imageCache.clear();\n        this.poiManager.clear();\n\n        if (theme.images !== undefined) {\n            for (const name of Object.keys(theme.images)) {\n                const image = theme.images[name];\n                this.m_imageCache.addImage(name, image.url, image.preload === true);\n                if (typeof image.atlas === \"string\") {\n                    this.poiManager.addTextureAtlas(name, image.atlas);\n                }\n            }\n        }\n\n        if (theme.imageTextures !== undefined) {\n            theme.imageTextures.forEach((imageTexture: ImageTexture) => {\n                this.poiManager.addImageTexture(imageTexture);\n            });\n        }\n    }\n\n    private loadPoiTables() {\n        if (this.m_theme === undefined) {\n            return;\n        }\n\n        this.poiTableManager.clear();\n\n        // Add the POI tables defined in the theme.\n        this.poiTableManager\n            .loadPoiTables(this.m_theme as Theme)\n            .then(() => this.update())\n            .catch(() => this.update());\n    }\n\n    private setupStats(enable: boolean) {\n        // tslint:disable-next-line:no-unused-expression\n        new PerformanceStatistics(enable, 1000);\n    }\n\n    private setupRenderer() {\n        this.m_renderer.setClearColor(DEFAULT_CLEAR_COLOR);\n\n        this.m_scene.add(this.m_mapTilesRoot);\n        this.m_scene.add(this.m_mapAnchors);\n        this.m_scene.add(this.m_worldAnchors);\n\n        this.shadowsEnabled = this.m_options.enableShadows ?? false;\n    }\n\n    private createTextRenderer(): TextElementsRenderer {\n        const updateCallback: ViewUpdateCallback = () => {\n            this.update();\n        };\n\n        return new TextElementsRenderer(\n            new MapViewState(this, this.checkIfTilesChanged.bind(this)),\n            this.m_camera,\n            updateCallback,\n            this.m_screenCollisions,\n            this.m_screenProjector,\n            new TextCanvasFactory(this.m_renderer),\n            this.m_poiManager,\n            new PoiRendererFactory(this),\n            new FontCatalogLoader(this.m_theme),\n            this.m_theme,\n            this.m_options\n        );\n    }\n\n    private resetTextRenderer(): void {\n        const overlayText = this.m_textElementsRenderer.overlayText;\n        this.m_textElementsRenderer = this.createTextRenderer();\n        if (overlayText !== undefined) {\n            this.m_textElementsRenderer.addOverlayText(overlayText);\n        }\n    }\n\n    /**\n     * Default handler for webglcontextlost event.\n     *\n     * Note: The renderer `this.m_renderer` may not be initialized when this function is called.\n     */\n    private onWebGLContextLost = (event: Event) => {\n        this.dispatchEvent(CONTEXT_LOST_EVENT);\n        logger.warn(\"WebGL context lost\", event);\n    };\n\n    /**\n     * Default handler for webglcontextrestored event.\n     *\n     * Note: The renderer `this.m_renderer` may not be initialized when this function is called.\n     */\n    private onWebGLContextRestored = (event: Event) => {\n        this.dispatchEvent(CONTEXT_RESTORED_EVENT);\n        if (this.m_renderer !== undefined) {\n            if (this.m_theme !== undefined && this.m_theme.clearColor !== undefined) {\n                this.m_renderer.setClearColor(new THREE.Color(this.m_theme.clearColor));\n            } else {\n                this.m_renderer.setClearColor(DEFAULT_CLEAR_COLOR);\n            }\n            this.update();\n        }\n        logger.warn(\"WebGL context restored\", event);\n    };\n\n    private limitFov(fov: number, aspect: number): number {\n        fov = THREE.MathUtils.clamp(fov, MIN_FIELD_OF_VIEW, MAX_FIELD_OF_VIEW);\n\n        let hFov = THREE.MathUtils.radToDeg(\n            MapViewUtils.calculateHorizontalFovByVerticalFov(THREE.MathUtils.degToRad(fov), aspect)\n        );\n\n        if (hFov > MAX_FIELD_OF_VIEW || hFov < MIN_FIELD_OF_VIEW) {\n            hFov = THREE.MathUtils.clamp(hFov, MIN_FIELD_OF_VIEW, MAX_FIELD_OF_VIEW);\n            fov = THREE.MathUtils.radToDeg(\n                MapViewUtils.calculateVerticalFovByHorizontalFov(\n                    THREE.MathUtils.degToRad(hFov),\n                    aspect\n                )\n            );\n        }\n        return fov as number;\n    }\n\n    /**\n     * Sets the field of view calculation, and applies it immediately to the camera.\n     *\n     * @param type How to calculate the FOV\n     */\n    private setFovOnCamera(fovCalculation: FovCalculation, height: number) {\n        let fov = 0;\n        if (fovCalculation.type === \"fixed\") {\n            this.calculateFocalLength(height);\n            fov = fovCalculation.fov;\n        } else {\n            assert(this.m_focalLength !== 0);\n            fov = MapViewUtils.calculateFovByFocalLength(this.m_focalLength, height);\n        }\n        this.m_camera.fov = this.limitFov(fov, this.m_camera.aspect);\n    }\n\n    /**\n     * Sets the focal length based on the supplied fov and the height of the canvas. This must be\n     * called at least once. This is necessary to be recalled when the [[FovCalculation]]'s type is\n     * fixed. In such cases, when the height changes, the focal length must be readjusted whereas\n     * the FOV stays the same. The opposite is true for the dynamic case, where the focal length is\n     * fixed but the FOV changes.\n     * @param height Height of the canvas in css / client pixels.\n     */\n    private calculateFocalLength(height: number) {\n        assert(this.m_options.fovCalculation !== undefined);\n        this.m_focalLength = MapViewUtils.calculateFocalLengthByVerticalFov(\n            THREE.MathUtils.degToRad(this.m_options.fovCalculation!.fov),\n            height\n        );\n    }\n\n    /**\n     * Get canvas client size in css/client pixels.\n     *\n     * Supports canvases not attached to DOM, which have 0 as `clientWidth` and `clientHeight` by\n     * calculating it from actual canvas size and current pixel ratio.\n     */\n    private getCanvasClientSize(): { width: number; height: number } {\n        const { clientWidth, clientHeight } = this.canvas;\n        if (\n            clientWidth === 0 ||\n            clientHeight === 0 ||\n            typeof clientWidth !== \"number\" ||\n            typeof clientHeight !== \"number\"\n        ) {\n            const pixelRatio = this.m_renderer.getPixelRatio();\n            return {\n                width: Math.round(this.canvas.width / pixelRatio),\n                height: Math.round(this.canvas.height / pixelRatio)\n            };\n        } else {\n            return { width: clientWidth, height: clientHeight };\n        }\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @hidden\n */\nexport type Value = null | boolean | number | string | object;\n\n/**\n * @hidden\n */\nexport interface ValueMap {\n    [name: string]: Value;\n}\n\n/**\n * @hidden\n */\nexport class Env {\n    /**\n     * Returns `true` if the given object is an instance of [[Env]].\n     *\n     * @param object The object to test.\n     */\n    static isEnv(object: any): object is Env {\n        return object instanceof Env;\n    }\n\n    /**\n     * Returns property in [[Env]] by name.\n     *\n     * @param name Name of property.\n     */\n    lookup(_name: string): Value | undefined {\n        return undefined;\n    }\n    /**\n     * Return an object containing all properties of this environment. (Here: empty object).\n     */\n    unmap(): ValueMap {\n        return {};\n    }\n}\n\n/**\n * Adds access to map specific environment properties.\n */\nexport class MapEnv extends Env {\n    constructor(readonly entries: ValueMap, private readonly parent?: Env) {\n        super();\n    }\n    /**\n     * Returns property in [[Env]] by name.\n     *\n     * @param name Name of property.\n     * @override\n     */\n    lookup(name: string): Value | undefined {\n        if (this.entries.hasOwnProperty(name)) {\n            const value = this.entries[name];\n            if (value !== undefined) {\n                return value;\n            }\n        }\n        return this.parent ? this.parent.lookup(name) : undefined;\n    }\n    /**\n     * Return an object containing all properties of this environment, takes care of the parent\n     * object.\n     * @override\n     */\n    unmap(): ValueMap {\n        const obj: any = this.parent ? this.parent.unmap() : {};\n        for (const key in this.entries) {\n            if (this.entries.hasOwnProperty(key)) {\n                obj[key] = this.entries[key];\n            }\n        }\n        return obj;\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { Vector3Like } from \"@here/harp-geoutils/lib/math/Vector3Like\";\nimport { isJsonExpr, JsonExpr } from \"./Expr\";\nimport { isInterpolatedPropertyDefinition } from \"./InterpolatedPropertyDefs\";\nimport {\n    BaseTechniqueParams,\n    BasicExtrudedLineTechniqueParams,\n    DynamicProperty,\n    ExtrudedPolygonTechniqueParams,\n    FillTechniqueParams,\n    MarkerTechniqueParams,\n    PointTechniqueParams,\n    SegmentsTechniqueParams,\n    ShaderTechniqueParams,\n    SolidLineTechniqueParams,\n    StandardExtrudedLineTechniqueParams,\n    StandardTechniqueParams,\n    TerrainTechniqueParams,\n    TextTechniqueParams\n} from \"./TechniqueParams\";\n\n/**\n * Map theme is used to define what features are shown and how the map is styled, for example\n * which lightning is used or whether fog should be displayed.\n */\nexport interface Theme {\n    /**\n     * The URI of the JSON schema describing themes.\n     */\n    $schema?: string;\n\n    /**\n     * The base `Theme`s or `theme` URLs to extend.\n     *\n     * If used, base themes are loaded first, and then all the properties from inherited theme\n     * overwrite these defined in base theme.\n     */\n    extends?: string | Theme | Array<string | Theme>;\n\n    /**\n     * Actual URL the theme has been loaded from.\n     */\n    url?: string;\n\n    /**\n     * Color to be used as a clear background - no map objects.\n     * @format color-hex\n     */\n    clearColor?: string;\n\n    /**\n     * Alpha to be used as a clear background - no map objects.\n     * @format 0-1\n     */\n    clearAlpha?: number;\n\n    /**\n     * Define the default text style for styling labels and texts.\n     */\n    defaultTextStyle?: TextStyleDefinition;\n\n    /**\n     * Define the lightning available on the three.js scene.\n     */\n    lights?: Light[];\n\n    /**\n     * Define the style of the sky presented in the map scene.\n     */\n    sky?: Sky;\n\n    /**\n     * Define the fog used in the map scene.\n     */\n    fog?: Fog;\n\n    /**\n     * The definitions exported by these theme.\n     */\n    definitions?: Definitions;\n\n    /**\n     * Map styles available for datasources used to render the map.\n     */\n    styles?: Styles;\n\n    /**\n     * Define the style to render different types of text used on the map.\n     */\n    textStyles?: TextStyleDefinition[];\n\n    /**\n     * List available fonts to be used while rendering text.\n     */\n    fontCatalogs?: FontCatalogConfig[];\n\n    /**\n     * Optional images to be rendered on the map view.\n     */\n    images?: ImageDefinitions;\n\n    /**\n     * Image textures to be used while rendering geometries on the map view.\n     */\n    imageTextures?: ImageTexture[];\n\n    /**\n     * Optional list of [[ThemePoiTableDef]]s.\n     */\n    poiTables?: PoiTableRef[];\n\n    /**\n     * Optional list of symbolic priorities for the object\n     * created using this [[Theme]].\n     *\n     * The attribute `styleSet` and `category` of the [[Technique]]\n     * are used together with [[Theme.priorities]] to sort\n     * the objects created using this [[Theme]], for example:\n     *\n     * ```json\n     * {\n     *      \"priorities\": [\n     *          { \"group\": \"tilezen\", \"category\": \"outline-1\" }\n     *      ],\n     *      \"styles\": [\n     *          {\n     *              \"technique\": \"solid-line\",\n     *              \"styleSet\": \"tilezen\",\n     *              \"category\": \"outline-1\"\n     *          }\n     *      ]\n     * }\n     * ```\n     */\n    priorities?: StylePriority[];\n\n    /**\n     * Optional list of priorities for the screen-space\n     * objects created using this style.\n     *\n     * The name of the `category` attribute of the screen-space\n     * technique (e.g. `\"text\"`) must match on the strings\n     * defined by this [[Theme.labelPriorities]], for example:\n     *\n     * ```json\n     * {\n     *      \"labelPriorities\": [\n     *          \"continent-labels\",\n     *          \"country-labels\",\n     *          \"state-labels\"\n     *      ],\n     *      \"styles\": [\n     *          {\n     *              \"technique\": \"text\",\n     *              \"category\": \"state-labels\"\n     *          }\n     *      ]\n     * }\n     * ```\n     */\n    labelPriorities?: string[];\n}\n\n/**\n * A type representing symbolic render orders.\n */\nexport interface StylePriority {\n    /**\n     * The group of this [[StylePriority]].\n     */\n    group: string;\n\n    /**\n     * The category of this [[StylePriority]].\n     */\n    category?: string;\n}\n\n/**\n * A type representing HARP themes with all the styleset declarations\n * grouped in one [[Array]].\n *\n * @internal This type will merge with [[Theme]].\n */\nexport type FlatTheme = Omit<Theme, \"styles\"> & {\n    /**\n     * The style rules used to render the map.\n     */\n    styles?: StyleSet;\n};\n\n/**\n * Checks if the given definition implements the [[BoxedDefinition]] interface.\n */\nexport function isBoxedDefinition(def: Definition): def is BoxedDefinition {\n    const bdef = def as BoxedDefinition;\n    return (\n        typeof bdef === \"object\" &&\n        bdef !== null &&\n        (typeof bdef.type === \"string\" || typeof bdef.type === \"undefined\") &&\n        (typeof bdef.value === \"string\" ||\n            typeof bdef.value === \"number\" ||\n            typeof bdef.value === \"boolean\" ||\n            isInterpolatedPropertyDefinition(bdef.value) ||\n            isJsonExpr(bdef.value))\n    );\n}\n\nexport function isLiteralDefinition(def: Definition): def is LiteralValue {\n    return typeof def === \"string\" || typeof def === \"number\" || typeof def === \"boolean\";\n}\n\n/**\n * Value definition commons.\n */\nexport interface BaseValueDefinition {\n    /**\n     * The type of the definition.\n     */\n    type?: string;\n\n    /**\n     * The description of the definition.\n     */\n    description?: string;\n}\n\n/**\n * Possible types of unboxed literal values carried by [[Definition]].\n */\nexport type LiteralValue = string | number | boolean;\n\n/**\n * Boxed definition without type.\n */\nexport interface BoxedAnyDefinition extends BaseValueDefinition {\n    /**\n     * The value of the definition.\n     */\n    value: LiteralValue | JsonExpr;\n}\n\n/**\n * A boxed boolean value definition.\n */\nexport interface BoxedBooleanDefinition extends BaseValueDefinition {\n    /**\n     * The type of the definition.\n     */\n    type: \"boolean\";\n\n    /**\n     * The value of the definition.\n     */\n    value: DynamicProperty<boolean>;\n}\n\n/**\n * A boxed numerical value definition.\n */\nexport interface BoxedNumericDefinition extends BaseValueDefinition {\n    /**\n     * The type of the definition.\n     */\n    type: \"number\";\n\n    /**\n     * The value of the definition.\n     */\n    value: DynamicProperty<number>;\n}\n\n/**\n * A boxed string value definition.\n */\nexport interface BoxedStringDefinition extends BaseValueDefinition {\n    /**\n     * The type of the definition.\n     */\n    type: \"string\";\n\n    /**\n     * The value of the definition.\n     */\n    value: DynamicProperty<string>;\n}\n\n/**\n * A boxed color value definition.\n */\nexport interface BoxedColorDefinition extends BaseValueDefinition {\n    /**\n     * The type of the definition.\n     */\n    type: \"color\";\n\n    /**\n     * The value of the definition.\n     */\n    value: DynamicProperty<string>;\n}\n\n/**\n * A boxed selector value definition.\n */\nexport interface BoxedSelectorDefinition extends BaseValueDefinition {\n    /**\n     * The type of the definition.\n     */\n    type: \"selector\";\n\n    /**\n     * The value of the definition.\n     *\n     * See [[BaseStyle.when]].\n     */\n    value: string | JsonExpr;\n}\n\n/**\n * A boxed value definition.\n */\nexport type BoxedDefinition =\n    | BoxedAnyDefinition\n    | BoxedBooleanDefinition\n    | BoxedNumericDefinition\n    | BoxedStringDefinition\n    | BoxedColorDefinition\n    | BoxedSelectorDefinition;\n\n/**\n * Possible values for `definitions` element of [Theme].\n */\nexport type Definition = LiteralValue | JsonExpr | BoxedDefinition | StyleDeclaration;\n\n/**\n * An array of [[Definition]]s.\n */\nexport interface Definitions {\n    [name: string]: Definition;\n}\n\n/**\n * Base [StyleSelector] attributes required to match [Style] object against given feature.\n *\n * Contains [Style]'s members related to feature matching in [[StyleSetEvaluator]].\n */\nexport interface StyleSelector {\n    /**\n     * Condition that is applied to feature properties to check if given [[Style]] this feature\n     * should emit geometry of this style.\n     *\n     * Conditions are defined using [[Array]]s describing literals, built-in symbols and function\n     * calls:\n     *  - `[\"has\", string]` returns `true` if the given property exists.\n     *  - `[\"get\", string]` returns the value of the given feature property with the given name.\n     *  - `[\"all\", expressions...]` returns `true` if all the sub expressions evaluate to true.\n     *  - `[\"any\", expressions...]` returns `true` if any sub expression evaluates to true.\n     *  - `[\"in\", expression, [literals...]]` returns `true` if the result of evaluating the first\n     *    expression is included in the given `Array` of literals.\n     *  - `[\"!\", expression]` returns `false` if the sub expression evaluates to `true`.\n     *  - `[\"<\", expression, expression]` returns `true` if the result of evaluating the first\n     *    expression is less than the result of evaluating the second expression.\n     *  - `[\">\", expression, expression]` returns `true` if the result of evaluating the first\n     *    expression is greater than the result of evaluating the second expression.\n     *  - `[\"<=\", expression, expression]` returns `true` if the result of evaluating the first\n     *    expression is less than or equal the result of evaluating the second expression.\n     *  - `[\">=\", expression, expression]` returns `true` if the result of evaluating the first\n     *    expression is greater than or equal the result of evaluating the second expression.\n     *  - `[\"==\", expression, expression]` returns `true` if the result of evaluating the first\n     *    expression is equal the result of evaluating the second expression.\n     *  - `[\"!=\", expression, expression]` returns `true` if the result of evaluating the first\n     *    expression is not equal to the result of evaluating the second expression.\n     *  - `[\"length\", expression]` returns the length of the given expression if it evaluates to\n     *    a `string` or an `Array`; otherwise, returns `undefined`.\n     *  - `[\"~=\", expression, expression]` if the expressions evaluate to `string`, returns `true`\n     *    if the `string` obtained from the first expression contains the `string` obtained from the\n     *    second expression; otherwise, returns `undefined`.\n     *  - `[\"^=\", expression, expression]` if the expressions evaluate to `string`, returns `true`\n     *    if the `string` obtained from the first expression starts with the `string` obtained from\n     *    the second expression; otherwise, returns `undefined`.\n     *  - `[\"$=\", expression, expression]` if the expressions evaluate to `string`, returns `true`\n     *    if the `string` obtained from the first expression ends with the `string` obtained from\n     *    the second expression; otherwise, returns `undefined`.\n     */\n    when: string | JsonExpr;\n\n    /**\n     * The layer containing the carto features processed by this style rule.\n     */\n    layer?: string;\n\n    /**\n     * Optional. If `true`, no more matching styles will be evaluated.\n     */\n    final?: boolean;\n}\n\nexport type JsonExprReference = [\"ref\", string];\n\n/**\n * Checks if the given value is a reference to a definition.\n *\n * @param value The value of a technique property.\n */\nexport function isJsonExprReference(value: any): value is JsonExprReference {\n    return (\n        Array.isArray(value) &&\n        value.length === 2 &&\n        value[0] === \"ref\" &&\n        typeof value[1] === \"string\"\n    );\n}\n\n/**\n * Like [[StyleDeclaration]], but without [[Reference]] type.\n */\nexport type ResolvedStyleDeclaration = Style & StyleSelector;\n\n/**\n * Like [[StyleSet]], but without [[Reference]] type.\n */\nexport type ResolvedStyleSet = ResolvedStyleDeclaration[];\n\n/**\n * Compound type that merges all raw [Style] with selector arguments from [BaseSelector], optionally\n * a [[Reference]].\n */\nexport type StyleDeclaration = (Style & StyleSelector) | JsonExpr;\n\nexport function isActualSelectorDefinition(def: Definition): def is Style & StyleSelector {\n    const styleDef = def as StyleDeclaration;\n    return (\n        typeof styleDef === \"object\" &&\n        styleDef !== null &&\n        !Array.isArray(styleDef) &&\n        typeof styleDef.technique === \"string\"\n    );\n}\n\n/**\n * An array of [[StyleSelector]]s that are used together to define how a [[DataSource]] should be\n * rendered. `StyleSet`s are applied to sources providing vector tiles via their method\n * `setStyleSet`. This is also handle internally when a whole theme is passed to a [[MapView]] via\n * `mapview.theme`.\n */\nexport type StyleSet = StyleDeclaration[];\n\n/**\n * The object that defines what way an item of a [[DataSource]] should be decoded to assemble a\n * tile. [[Style]] is describing which features are shown on a map and in what way they are being\n * shown.\n */\nexport interface BaseStyle {\n    /**\n     * Human readable description.\n     */\n    description?: string;\n\n    /**\n     * The style set referenced by this styling rule.\n     */\n    styleSet?: string;\n\n    /**\n     * The category of this style.\n     */\n    category?: string | JsonExpr;\n\n    /**\n     * Technique name. See the classes extending from this class to determine what possible\n     * techniques are possible, includes `\"line\"`, `\"fill\"`, `\"solid-line\"`, `\"extruded-line\"`,\n     * `\"extruded-polygon\"`, `\"text\"`, `\"none\"`.\n     */\n    technique?: string;\n\n    /**\n     * Specify `renderOrder` of value.\n     *\n     * @default If not specified in style file, `renderOrder` will be assigned with monotonically\n     * increasing values according to style position in file.\n     */\n    renderOrder?: number | JsonExpr;\n\n    /**\n     * Minimal zoom level. If the current zoom level is smaller, the technique will not be used.\n     */\n    minZoomLevel?: number | JsonExpr;\n\n    /**\n     * Maximum zoom level. If the current zoom level is larger, the technique will not be used.\n     */\n    maxZoomLevel?: number | JsonExpr;\n\n    /**\n     * Optional. If `true`, no IDs will be saved for the geometry this style creates. Default is\n     * `false`.\n     */\n    transient?: boolean;\n\n    /**\n     * Optional: If `true`, the objects with matching `when` statement will be printed to the\n     * console.\n     */\n    debug?: boolean;\n\n    // TODO: Make pixel units default.\n    /**\n     * Units in which different size properties are specified. Either `Meter` (default) or `Pixel`.\n     *\n     * @deprecated use \"string encoded numerals\" as documented in TODO, wher eis the doc ?\n     */\n    metricUnit?: \"Meter\" | \"Pixel\";\n\n    /**\n     * XYZ defines the property to display as text label of a feature in the styles.\n     */\n    labelProperty?: string;\n}\n\n/**\n *\n * @defaultSnippets [\n *     {\n *         \"label\": \"New solid-line\",\n *         \"description\": \"Add a new 'solid-line' Styling Rule\",\n *         \"body\": {\n *             \"technique\": \"solid-line\",\n *             \"when\": \"$1\",\n *             \"attr\": {\n *                 \"color\": \"#${2:fff}\",\n *                 \"lineWidth\": \"^${3:1}\",\n *                 \"secondaryColor\": \"#$4ddd\",\n *                 \"secondaryWidth\": \"^${5:2}\"\n *             }\n *         }\n *     },\n *     {\n *         \"label\": \"New dashed-line\",\n *         \"description\": \"Add a new 'dashed-line' Styling Rule\",\n *         \"body\": {\n *             \"technique\": \"solid-line\",\n *             \"when\": \"$1\",\n *             \"attr\": {\n *                 \"color\": \"#${2:fff}\",\n *                 \"lineWidth\": \"^${3:1}\",\n *                 \"gapSize\": \"^${4:10}\",\n *                 \"dashSize\": \"^${5:10}\"\n *             }\n *         }\n *     },\n *     {\n *         \"label\": \"New fill\",\n *         \"description\": \"Add a new 'fill' Styling Rule\",\n *         \"body\": {\n *             \"technique\": \"fill\",\n *             \"when\": \"$1\",\n *             \"attr\": {\n *                 \"color\": \"#${2:fff}\",\n *                 \"lineWidth\": \"^${3:0}\"\n *             }\n *         }\n *     },\n *     {\n *         \"label\": \"New text\",\n *         \"description\": \"Add a new 'text' Styling Rule\",\n *         \"body\": {\n *             \"technique\": \"text\",\n *             \"when\": \"$1\",\n *             \"attr\": {\n *                 \"size\": \"^${2:24}\",\n *                 \"color\": \"#${3:fff}\"\n *             }\n *         }\n *     },\n *     {\n *         \"label\": \"New labeled-icon\",\n *         \"description\": \"Add a new 'labeled-icon' marker styling\",\n *         \"body\": {\n *             \"technique\": \"labeled-icon\",\n *             \"when\": \"$1\",\n *             \"attr\": {\n *                 \"size\": \"^${2:24}\",\n *                 \"color\": \"#${3:fff}\",\n *                 \"backgroundSize\": \"^${4:32}\",\n *                 \"backgroundColor\": \"#${5:aaa}\"\n *             }\n *         }\n *     },\n *     {\n *         \"label\": \"New line-marker\",\n *         \"description\": \"Add a new 'line-marker' marker styling\",\n *         \"body\": {\n *             \"technique\": \"line-marker\",\n *             \"when\": \"$1\",\n *             \"attr\": {\n *                 \"size\": \"^${2:24}\",\n *                 \"color\": \"#${3:fff}\",\n *                 \"backgroundSize\": \"^${4:32}\",\n *                 \"backgroundColor\": \"#${5:aaa}\"\n *             }\n *         }\n *     },\n *     {\n *         \"label\": \"New line\",\n *         \"description\": \"Add a new 'line' Styling Rule\",\n *         \"body\": {\n *             \"technique\": \"line\",\n *             \"when\": \"$1\",\n *             \"attr\": {\n *                 \"color\": \"#${2:fff}\",\n *                 \"lineWidth\": \"^${3:1}\"\n *             }\n *         }\n *     },\n *     {\n *         \"label\": \"New segments\",\n *         \"description\": \"Add a new 'segments' Styling Rule\",\n *         \"body\": {\n *             \"technique\": \"segments\",\n *             \"when\": \"$1\",\n *             \"attr\": {\n *                 \"color\": \"#${2:fff}\",\n *                 \"lineWidth\": \"^${3:1}\"\n *             }\n *         }\n *     },\n *     {\n *         \"label\": \"New standard\",\n *         \"description\": \"Add a new 'standard' Styling Rule\",\n *         \"body\": {\n *             \"technique\": \"standard\",\n *             \"when\": \"$1\",\n *             \"attr\": {\n *                 \"color\": \"#${2:fff}\",\n *                 \"roughness\": \"^${3:0.5}\",\n *                 \"metalness\": \"^${4:0.5}\",\n *                 \"emissive\": \"#${5:c44}\",\n *                 \"emissiveIntensity\": \"^${6:0.8}\"\n *             }\n *         }\n *     },\n *     {\n *         \"label\": \"New extruded-line\",\n *         \"description\": \"Add a new 'extruded-line' Styling Rule\",\n *         \"body\": {\n *             \"technique\": \"extruded-line\",\n *             \"when\": \"$1\",\n *             \"attr\": {\n *                 \"shading\": \"${2:standard}\",\n *                 \"color\": \"#${3:fff}\",\n *                 \"lineWidth\": \"^${4:1}\",\n *                 \"caps\": \"${5:Circle}\"\n *             }\n *         }\n *     },\n *     {\n *         \"label\": \"New extruded-polygon\",\n *         \"description\": \"Add a new 'extruded-polygon' Styling Rule\",\n *         \"body\": {\n *             \"technique\": \"extruded-polygon\",\n *             \"when\": \"$1\",\n *             \"attr\": {\n *                 \"color\": \"#${2:fff}\",\n *                 \"roughness\": \"^${3:0.5}\",\n *                 \"metalness\": \"^${4:0.5}\",\n *                 \"emissive\": \"#${5:c44}\",\n *                 \"emissiveIntensity\": \"^${6:0.8}\",\n *                 \"lineWidth\": \"^${7:1}\",\n *                 \"lineColor\": \"#${8:c0f}\",\n *                 \"defaultHeight\": \"^${9:20}\",\n *                 \"animateExtrusion\": \"^${10:true}\",\n *                 \"animateExtrusionDuration\": \"^${11:300}\"\n *             }\n *         }\n *     },\n *     {\n *         \"label\": \"New none\",\n *         \"description\": \"Add a new 'none' Styling Rule\",\n *         \"body\": {\n *             \"technique\": \"none\",\n *             \"when\": \"$1\",\n *             \"attr\": {}\n *         }\n *     },\n *     {\n *         \"label\": \"New shader\",\n *         \"description\": \"Add a new 'shader' Styling Rule\",\n *         \"body\": {\n *             \"technique\": \"shader\",\n *             \"when\": \"$1\",\n *             \"attr\": {\n *                 \"primitive\": \"${2:mesh}\",\n *                 \"params\": {}\n *             }\n *         }\n *     },\n *     {\n *         \"label\": \"New squares\",\n *         \"description\": \"Add a new 'squares' point styling\",\n *         \"body\": {\n *             \"technique\": \"squares\",\n *             \"when\": \"$1\",\n *             \"attr\": {\n *                 \"color\": \"#${2:fff}\",\n *                 \"size\": \"^${3:32}\",\n *                 \"texture\": \"${4:url}\",\n *                 \"enablePicking\": \"^${5:true}\"\n *             }\n *         }\n *     },\n *     {\n *         \"label\": \"New circles\",\n *         \"description\": \"Add a new 'circles' point styling\",\n *         \"body\": {\n *             \"technique\": \"circles\",\n *             \"when\": \"$1\",\n *             \"attr\": {\n *                 \"color\": \"#${2:fff}\",\n *                 \"size\": \"^${3:32}\",\n *                 \"texture\": \"${4:url}\",\n *                 \"enablePicking\": \"^${5:true}\"\n *             }\n *         }\n *     }\n * ]\n *\n */\nexport type AllStyles =\n    | SquaresStyle\n    | CirclesStyle\n    | PoiStyle\n    | LineMarkerStyle\n    | LineStyle\n    | SegmentsStyle\n    | SolidLineStyle\n    | LabelRejectionLineStyle\n    | FillStyle\n    | StandardStyle\n    | BasicExtrudedLineStyle\n    | StandardExtrudedLineStyle\n    | ExtrudedPolygonStyle\n    | ShaderStyle\n    | TerrainStyle\n    | TextTechniqueStyle\n    | NoneStyle;\n\nexport type Style = AllStyles;\n/**\n * A dictionary of [[StyleSet]]s.\n */\nexport interface Styles {\n    [styleSetName: string]: StyleSet;\n}\n\n/**\n * A reference to a style definition.\n *\n * Use as value `attrs` to reference value from `definitions`.\n *\n * Example of usage:\n * ```json\n * {\n *   \"definitions\": {\n *     \"roadColor\": { \"type\": \"color\", \"value\": \"#f00\" }\n *   },\n *   \"styles\": { \"tilezen\": [\n *      {\n *       \"when\": \"kind == 'road\",\n *       \"technique\": \"solid-line\",\n *       \"attr\": {\n *         \"lineColor\": { \"$ref\": \"roadColor\" }\n *       }\n *     }\n *   ] }\n * }\n * ```\n */\n\n/**\n * The attributes of a technique.\n */\nexport type Attr<T> = { [P in keyof T]?: T[P] | JsonExpr };\n\n/**\n * Render feature as set of squares rendered in screen space.\n *\n * @see [[PointTechniqueParams]].\n */\nexport interface SquaresStyle extends BaseStyle {\n    technique: \"squares\";\n    attr?: Attr<PointTechniqueParams>;\n}\n\n/**\n * Render feature as set of circles rendered in screen space.\n *\n * @see [[PointTechniqueParams]].\n */\nexport interface CirclesStyle extends BaseStyle {\n    technique: \"circles\";\n    attr?: Attr<PointTechniqueParams>;\n}\n\n/**\n * Render feature as POIs (icons and text) rendered in screen space.\n *\n * @see [[MarkerTechniqueParams]].\n */\nexport interface PoiStyle extends BaseStyle {\n    technique: \"labeled-icon\";\n    attr?: Attr<MarkerTechniqueParams>;\n}\n\n/**\n * Render feature as line markers, which is a recurring marker along a line (usually road).\n *\n * @see [[MarkerTechniqueParams]].\n */\nexport interface LineMarkerStyle extends BaseStyle {\n    technique: \"line-marker\";\n    attr?: Attr<MarkerTechniqueParams>;\n}\n\n/**\n * Render feature as line.\n */\nexport interface LineStyle extends BaseStyle {\n    technique: \"line\";\n    secondaryRenderOrder?: number;\n    secondaryCategory?: string;\n    attr?: Attr<MarkerTechniqueParams>;\n}\n\n/**\n * Render feature as segments.\n */\nexport interface SegmentsStyle extends BaseStyle {\n    technique: \"segments\";\n    attr?: Attr<SegmentsTechniqueParams>;\n}\n\nexport interface SolidLineStyle extends BaseStyle {\n    technique: \"solid-line\" | \"dashed-line\";\n    secondaryRenderOrder?: number;\n    secondaryCategory?: string;\n    attr?: Attr<SolidLineTechniqueParams>;\n}\n\nexport interface LabelRejectionLineStyle extends BaseStyle {\n    technique: \"label-rejection-line\";\n    attr?: Attr<BaseTechniqueParams>;\n}\n\nexport interface FillStyle extends BaseStyle {\n    technique: \"fill\";\n    attr?: Attr<FillTechniqueParams>;\n}\n\nexport interface StandardStyle extends BaseStyle {\n    technique: \"standard\";\n    attr?: Attr<StandardTechniqueParams>;\n}\n\nexport interface TerrainStyle extends BaseStyle {\n    technique: \"terrain\";\n    attr?: Attr<TerrainTechniqueParams>;\n}\n\nexport interface BasicExtrudedLineStyle extends BaseStyle {\n    technique: \"extruded-line\";\n    shading?: \"basic\";\n    attr?: Attr<BasicExtrudedLineTechniqueParams>;\n}\n\nexport interface StandardExtrudedLineStyle extends BaseStyle {\n    technique: \"extruded-line\";\n    shading: \"standard\";\n    attr?: Attr<StandardExtrudedLineTechniqueParams>;\n}\n\n/**\n * Style used to draw a geometry as an extruded polygon, for example extruded buildings.\n */\nexport interface ExtrudedPolygonStyle extends BaseStyle {\n    technique: \"extruded-polygon\";\n    attr?: Attr<ExtrudedPolygonTechniqueParams>;\n}\n\nexport interface ShaderStyle extends BaseStyle {\n    technique: \"shader\";\n    attr?: Attr<ShaderTechniqueParams>;\n}\n\nexport interface TextTechniqueStyle extends BaseStyle {\n    technique: \"text\";\n    attr?: Attr<TextTechniqueParams>;\n}\n\nexport interface NoneStyle extends BaseStyle {\n    technique: \"none\";\n    attr?: {\n        [name: string]: any;\n    };\n}\n\n/**\n * Possible lights used for light the map.\n */\nexport type Light = AmbientLight | DirectionalLight;\n\nexport interface BaseLight {\n    type: string;\n    name: string;\n}\n\n/**\n * Light type: ambient.\n * @defaultSnippets [\n *     {\n *         \"label\": \"New Ambient Light\",\n *         \"description\": \"Adds a new Ambient Light\",\n *         \"body\": {\n *             \"type\": \"ambient\",\n *             \"name\": \"${1:ambient light}\",\n *             \"color\": \"#${2:fff}\",\n *             \"intensity\": \"^${3:1}\"\n *         }\n *     }\n * ]\n */\nexport interface AmbientLight extends BaseLight {\n    type: \"ambient\";\n    /**\n     * @format color-hex\n     */\n    color: string;\n    intensity?: number;\n}\n\n/**\n * Light type: directional.\n * @defaultSnippets [\n *     {\n *         \"label\": \"New Directional Light\",\n *         \"description\": \"Adds a new Directional Light\",\n *         \"body\": {\n *             \"type\": \"directional\",\n *             \"name\": \"${1:directional-light$:1}\",\n *             \"color\": \"#${2:fff}\",\n *             \"intensity\": \"^${3:1}\",\n *             \"direction\": {\n *                 \"x\": \"^${4:1}\",\n *                 \"y\": \"^${5:0}\",\n *                 \"z\": \"^${6:0}\"\n *             }\n *         }\n *     }\n * ]\n */\nexport interface DirectionalLight extends BaseLight {\n    type: \"directional\";\n    /**\n     * @format color-hex\n     */\n    color: string;\n    intensity: number;\n    direction: Vector3Like;\n    castShadow?: boolean;\n}\n\n/**\n * Various text styles used with labels and texts.\n */\nexport interface TextStyleDefinition {\n    name?: string;\n    fontCatalogName?: string;\n\n    fontName?: string;\n    size?: number;\n    backgroundSize?: number;\n    fontStyle?: \"Regular\" | \"Bold\" | \"Italic\" | \"BoldItalic\";\n    fontVariant?: \"Regular\" | \"AllCaps\" | \"SmallCaps\";\n    rotation?: number;\n    /**\n     * @format color-hex\n     */\n    color?: string;\n    /**\n     * @format color-hex\n     */\n    backgroundColor?: string;\n    opacity?: number;\n    backgroundOpacity?: number;\n\n    tracking?: number;\n    leading?: number;\n    maxLines?: number;\n    lineWidth?: number;\n    canvasRotation?: number;\n    lineRotation?: number;\n    wrappingMode?: \"None\" | \"Character\" | \"Word\";\n    hAlignment?: \"Left\" | \"Center\" | \"Right\";\n    vAlignment?: \"Above\" | \"Center\" | \"Below\";\n}\n\n/**\n * Interface that defines a procedural gradient sky.\n */\nexport interface GradientSky {\n    /** Sky type. */\n    type: \"gradient\";\n    /**\n     * Color of the upper part of the gradient.\n     * @format color-hex\n     */\n    topColor: string;\n    /**\n     * Color of bottom part of the gradient.\n     * @format color-hex\n     */\n    bottomColor: string;\n    /**\n     * Color of the ground plane.\n     * @format color-hex\n     */\n    groundColor: string;\n    /** Texture's gradient power. */\n    monomialPower?: number;\n}\n\n/**\n * Interface that defines a cubemap sky.\n */\nexport interface CubemapSky {\n    /** Sky type. */\n    type: \"cubemap\";\n    /** Positive X cube map face. */\n    positiveX: string;\n    /** Negative X cube map face. */\n    negativeX: string;\n    /** Positive Y cube map face. */\n    positiveY: string;\n    /** Negative Y cube map face. */\n    negativeY: string;\n    /** Positive Z cube map face. */\n    positiveZ: string;\n    /** Negative Z cube map face. */\n    negativeZ: string;\n}\n\n/**\n * Interface that defines the options to configure the sky.\n */\nexport type Sky = GradientSky | CubemapSky;\n\n/**\n * Interface that defines the options to configure fog.\n */\nexport interface Fog {\n    /** Fog's color. */\n    color: string;\n    /** Distance ratio to far plane at which the linear fog begins. */\n    startRatio: number;\n}\n\n/**\n * Define an image (e.g. icon).\n */\nexport interface ImageDefinition {\n    /** Url to load content from. */\n    url: string;\n    /** `true` to start loading at init tile, `false` to lazily wait until required. */\n    preload: boolean;\n    /** Url of JSON file containing the texture atlas */\n    atlas?: string;\n}\n\nexport interface ImageDefinitions {\n    /** Name of Image. */\n    [name: string]: ImageDefinition;\n}\n\n/**\n * Can be used to create a texture atlas.\n */\nexport interface ImageTexture {\n    /** Name of ImageTexture. Used to reference texture in the styles. */\n    name: string;\n    /** Name of ImageDefinition to use. */\n    image: string;\n    /** Origin of image, defaults to \"topleft\" */\n    origin?: string;\n    /** Specify sub-region: Defaults to 0. */\n    xOffset?: number;\n    /** Specify sub-region: Defaults to 0. */\n    yOffset?: number;\n    /** Specify sub-region:  Defaults to 0, meaning width is taken from loaded image. */\n    width?: number;\n    /** Specify sub-region:  Defaults to 0, meaning height is taken from loaded image. */\n    height?: number;\n    /** Defaults to false. */\n    flipH?: boolean;\n    /** Defaults to false. */\n    flipV?: boolean;\n    /** Defaults to 1. */\n    opacity?: number;\n}\n\n/**\n * Definition for a [[PoiTable]] reference as part of the [[Theme]] object.\n */\nexport interface PoiTableRef {\n    /** Required name of the [[PoiTable]] for later reference. */\n    name: string;\n    /**\n     * Required URL from where to load [[PoiTable]].\n     *\n     * Should refer to JSON that is matched [[PoiTableDef]] interface.\n     */\n    url: string;\n    /**\n     * If set to `true`, the list of values in the field \"altNames\" will be used as names for this\n     * POI.\n     */\n    useAltNamesForKey: boolean;\n}\n\n/**\n * Interface for the JSON description of the [[PoiTable]]. It is being implemented in [[PoiTable]].\n */\nexport interface PoiTableDef {\n    /** Name of the `PoiTable`. Must be unique. */\n    name?: string;\n    /**\n     * Stores the list of [[PoiTableEntry]]s.\n     */\n    poiList?: PoiTableEntryDef[];\n}\n\n/**\n * Interface for the JSON description of the [[PoiTableEntry]]. The interface is being implemented\n * as [[PoiTableEntry]].\n */\nexport interface PoiTableEntryDef {\n    /** Default name of the POI as the key for looking it up. */\n    name?: string;\n    /** Alternative names of the POI. */\n    altNames?: string[];\n    /** Visibility of the POI. If `false`, the POI will not be rendered. */\n    visible?: boolean;\n    /** Name of the icon, defined in the the texture atlases. */\n    iconName?: string;\n    /** Stacking mode of the POI. For future use. */\n    stackMode?: string;\n    /**\n     * Priority of the POI to select the visible set in case there are more POIs than can be\n     * handled.\n     */\n    priority?: number;\n    /** Minimum zoom level to render the icon on. */\n    iconMinLevel?: number;\n    /** Maximum zoom level to render the icon on. */\n    iconMaxLevel?: number;\n    /** Minimum zoom level to render the text label on. */\n    textMinLevel?: number;\n    /** Maximum zoom level to render the text label on. */\n    textMaxLevel?: number;\n}\n\n/**\n * Fonts used for all text related rendering.\n */\nexport interface FontCatalogConfig {\n    url: string;\n    name: string;\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\nimport { LineMarkerTechnique, Theme } from \"@here/harp-datasource-protocol\";\nimport {\n    AdditionParameters,\n    DEFAULT_TEXT_CANVAS_LAYER,\n    FontCatalog,\n    TextBufferAdditionParameters,\n    TextBufferCreationParameters,\n    TextCanvas,\n    TextLayoutStyle,\n    TextRenderStyle\n} from \"@here/harp-text-canvas\";\nimport {\n    assert,\n    LoggerManager,\n    LogLevel,\n    Math2D,\n    MathUtils,\n    PerformanceTimer\n} from \"@here/harp-utils\";\nimport * as THREE from \"three\";\n\nimport { TileKey } from \"@here/harp-geoutils\";\nimport { DataSource } from \"../DataSource\";\nimport { debugContext } from \"../DebugContext\";\nimport { overlayTextElement } from \"../geometry/overlayOnElevation\";\nimport { PickObjectType, PickResult } from \"../PickHandler\";\nimport { PoiManager } from \"../poi/PoiManager\";\nimport { PoiRenderer } from \"../poi/PoiRenderer\";\nimport { PoiRendererFactory } from \"../poi/PoiRendererFactory\";\nimport { IBox, LineWithBound, ScreenCollisions } from \"../ScreenCollisions\";\nimport { ScreenProjector } from \"../ScreenProjector\";\nimport { Tile } from \"../Tile\";\nimport { MapViewUtils } from \"../Utils\";\nimport { DataSourceTileList } from \"../VisibleTileSet\";\nimport { FontCatalogLoader } from \"./FontCatalogLoader\";\nimport {\n    checkReadyForPlacement,\n    computeViewDistance,\n    getMaxViewDistance,\n    isPathLabelTooSmall,\n    placeIcon,\n    PlacementResult,\n    placePathLabel,\n    placePointLabel,\n    PrePlacementResult\n} from \"./Placement\";\nimport { PlacementStats } from \"./PlacementStats\";\nimport { RenderState } from \"./RenderState\";\nimport { SimpleLineCurve, SimplePath } from \"./SimplePath\";\nimport { TextCanvasFactory } from \"./TextCanvasFactory\";\nimport { TextCanvasRenderer } from \"./TextCanvasRenderer\";\nimport { LoadingState, TextElement, TextPickResult } from \"./TextElement\";\nimport { TextElementGroup } from \"./TextElementGroup\";\nimport { TextElementFilter, TextElementGroupState } from \"./TextElementGroupState\";\nimport {\n    initializeDefaultOptions,\n    TextElementsRendererOptions\n} from \"./TextElementsRendererOptions\";\nimport { TextElementState } from \"./TextElementState\";\nimport { TextElementStateCache } from \"./TextElementStateCache\";\nimport { TextElementType } from \"./TextElementType\";\nimport { TextElementStyle, TextStyleCache } from \"./TextStyleCache\";\nimport { UpdateStats } from \"./UpdateStats\";\nimport { ViewState } from \"./ViewState\";\n\ninterface RenderParams {\n    numRenderedTextElements: number;\n    // TODO: HARP-7373. Move to update() method at the end of the frame.\n    fadeAnimationRunning: boolean;\n    time: number;\n}\n\nenum Pass {\n    PersistentLabels,\n    NewLabels\n}\n\n/**\n * Default distance scale. Will be applied if distanceScale is not defined in the technique.\n * Defines the scale that will be applied to labeled icons (icon and text) in the distance.\n */\nexport const DEFAULT_TEXT_DISTANCE_SCALE = 0.5;\n\n/**\n * Maximum number of recommended labels. If more labels are encountered, the \"overloaded\" mode is\n * set, which modifies the behavior of label placement and rendering, trying to keep delivering an\n * interactive performance. The overloaded mode should not be activated if the [[MapView]] is\n * rendering a static image (camera not moving and no animation running).\n */\nconst OVERLOAD_LABEL_LIMIT = 20000;\n\n/**\n * If \"overloaded\" is `true`:\n *\n * Default number of labels/POIs updated in a frame. They are rendered only if they fit. If the\n * camera is not moving, it is ignored. See [[TextElementsRenderer.isDynamicFrame]].\n */\nconst OVERLOAD_UPDATED_LABEL_LIMIT = 100;\n\n/**\n * If \"overloaded\" is `true`:\n *\n * Maximum time in milliseconds available for placement. If value is <= 0, or if the camera is not\n * moving, it is ignored. See [[TextElementsRenderer.isDynamicFrame]].\n */\nconst OVERLOAD_UPDATE_TIME_LIMIT = 5;\n\n/**\n * If \"overloaded\" is `true`:\n *\n * Maximum time in milliseconds available for rendering. If value is <= 0, or if the camera is not\n * moving, it is ignored. See [[TextElementsRenderer.isDynamicFrame]].\n */\nconst OVERLOAD_PLACE_TIME_LIMIT = 10;\n\nconst logger = LoggerManager.instance.create(\"TextElementsRenderer\", { level: LogLevel.Log });\n\n// Development flag: Enable debug print.\nconst PRINT_LABEL_DEBUG_INFO: boolean = false;\nconst updateStats = PRINT_LABEL_DEBUG_INFO ? new UpdateStats(logger) : undefined;\nconst placementStats = PRINT_LABEL_DEBUG_INFO ? new PlacementStats(logger) : undefined;\n\nconst tempPosition = new THREE.Vector3();\nconst tempScreenPosition = new THREE.Vector2();\nconst tempScreenPoints: THREE.Vector2[] = [];\nconst tempPoiScreenPosition = new THREE.Vector2();\nconst tmpTextBufferCreationParams: TextBufferCreationParameters = {};\nconst tmpAdditionParams: AdditionParameters = {};\nconst tmpBufferAdditionParams: TextBufferAdditionParameters = {};\n\nclass TileTextElements {\n    constructor(readonly tile: Tile, readonly group: TextElementGroup) {}\n}\n\nclass TextElementLists {\n    constructor(readonly lists: TileTextElements[]) {}\n\n    get priority() {\n        assert(this.lists.length > 0);\n        // All text element lists here have the same priority.\n        return this.lists[0].group.priority;\n    }\n    /**\n     * Sum up the number of elements in all lists.\n     */\n    count(): number {\n        let n = 0;\n        for (const list of this.lists) {\n            n += list.group.elements.length;\n        }\n        return n;\n    }\n}\n\nfunction checkIfTextElementsChanged(dataSourceTileList: DataSourceTileList[]) {\n    let textElementsChanged = false;\n\n    dataSourceTileList.forEach(({ renderedTiles }) => {\n        renderedTiles.forEach(tile => {\n            if (tile.textElementsChanged) {\n                tile.textElementsChanged = false;\n                textElementsChanged = true;\n            }\n        });\n    });\n\n    return textElementsChanged;\n}\n\nfunction addTextToCanvas(\n    textElement: TextElement,\n    canvas: TextCanvas,\n    screenPosition: THREE.Vector3,\n    path?: THREE.Path,\n    pathOverflow?: boolean\n) {\n    tmpAdditionParams.path = path;\n    tmpAdditionParams.pathOverflow = pathOverflow;\n    tmpAdditionParams.layer = textElement.renderOrder;\n    tmpAdditionParams.letterCaseArray = textElement.glyphCaseArray;\n    tmpAdditionParams.pickingData = textElement.userData ? textElement : undefined;\n    canvas.addText(textElement.glyphs!, screenPosition, tmpAdditionParams);\n}\n\nfunction addTextBufferToCanvas(\n    textElementState: TextElementState,\n    canvas: TextCanvas,\n    screenPosition: THREE.Vector3,\n    fadeFactor: number,\n    scaleFactor: number\n): boolean {\n    const textElement = textElementState.element;\n    const textRenderState = textElementState.textRenderState;\n    const opacity = textRenderState!.opacity * fadeFactor * textElement.renderStyle!.opacity;\n\n    if (opacity === 0) {\n        return false;\n    }\n\n    // Compute the TextBufferObject when we know we're gonna render this label.\n    tmpTextBufferCreationParams.letterCaseArray = textElement.glyphCaseArray;\n    if (textElement.textBufferObject === undefined) {\n        textElement.textBufferObject = canvas.createTextBufferObject(\n            textElement.glyphs!,\n            tmpTextBufferCreationParams\n        );\n    }\n    const backgroundIsVisible =\n        textElement.renderStyle!.backgroundOpacity > 0 &&\n        canvas.textRenderStyle.fontSize.backgroundSize > 0;\n\n    tmpBufferAdditionParams.layer = textElement.renderOrder;\n    tmpBufferAdditionParams.position = screenPosition;\n    tmpBufferAdditionParams.scale = scaleFactor;\n    tmpBufferAdditionParams.opacity = opacity;\n    tmpBufferAdditionParams.backgroundOpacity = backgroundIsVisible\n        ? tmpBufferAdditionParams.opacity * textElement.renderStyle!.backgroundOpacity\n        : 0.0;\n    tmpBufferAdditionParams.pickingData = textElement.userData ? textElement : undefined;\n    canvas.addTextBufferObject(textElement.textBufferObject!, tmpBufferAdditionParams);\n    return true;\n}\n\nfunction shouldRenderPointText(\n    labelState: TextElementState,\n    viewState: ViewState,\n    options: TextElementsRendererOptions\n): boolean {\n    const textRenderState: RenderState | undefined = labelState.textRenderState;\n    const label = labelState.element;\n    const poiInfo = label.poiInfo;\n\n    assert(label.type !== TextElementType.PathLabel);\n\n    const hasText = textRenderState !== undefined && label.text !== \"\";\n    if (!hasText) {\n        return false;\n    }\n\n    const visibleInZoomLevel =\n        poiInfo === undefined ||\n        viewState.zoomLevel === undefined ||\n        MathUtils.isClamped(\n            viewState.zoomLevel,\n            poiInfo.iconMinZoomLevel,\n            poiInfo.iconMaxZoomLevel\n        );\n    if (!visibleInZoomLevel) {\n        return false;\n    }\n\n    const poiTextMaxDistance = getMaxViewDistance(viewState, options.maxDistanceRatioForPoiLabels!);\n    const visibleAtDistance =\n        label.ignoreDistance === true ||\n        labelState.viewDistance === undefined ||\n        labelState.viewDistance < poiTextMaxDistance;\n    if (!visibleAtDistance) {\n        return false;\n    }\n\n    // Do not render text if POI cannot be rendered and is not optional.\n    return poiInfo === undefined || poiInfo.isValid === true || poiInfo.iconIsOptional !== false;\n}\n\nfunction shouldRenderPoiText(labelState: TextElementState, viewState: ViewState) {\n    // Do not actually render (just allocate space) if camera is moving and\n    // renderTextDuringMovements is not true.\n    const poiInfo = labelState.element.poiInfo;\n\n    return (\n        !viewState.cameraIsMoving ||\n        poiInfo === undefined ||\n        poiInfo.renderTextDuringMovements === true\n    );\n}\n\nexport type ViewUpdateCallback = () => void;\n\nfunction isPlacementTimeExceeded(startTime: number | undefined): boolean {\n    // startTime is set in overload mode.\n    if (startTime === undefined || OVERLOAD_PLACE_TIME_LIMIT <= 0) {\n        return false;\n    }\n    const endTime = PerformanceTimer.now();\n    const elapsedTime = endTime - startTime;\n    if (elapsedTime > OVERLOAD_PLACE_TIME_LIMIT) {\n        logger.debug(\"Placement time limit exceeded.\");\n        return true;\n    }\n    return false;\n}\n\n/**\n *\n * Internal class to manage all text rendering.\n */\nexport class TextElementsRenderer {\n    private m_initialized: boolean = false;\n    private m_initPromise: Promise<void> | undefined;\n    private m_glyphLoadingCount: number = 0;\n    private m_loadPromise: Promise<any> | undefined;\n    private readonly m_options: TextElementsRendererOptions;\n\n    private readonly m_textStyleCache: TextStyleCache;\n    private m_textRenderers: TextCanvasRenderer[] = [];\n\n    private m_overlayTextElements?: TextElement[];\n\n    // TODO: Replace this for an array of textures when more fonts are in use.\n    private m_debugGlyphTextureCacheMesh?: THREE.Mesh;\n    private m_debugGlyphTextureCacheWireMesh?: THREE.LineSegments;\n\n    private m_tmpVector = new THREE.Vector2();\n    private m_overloaded: boolean = false;\n    private m_cacheInvalidated: boolean = false;\n    private m_forceNewLabelsPass: boolean = false;\n\n    private readonly m_textElementStateCache: TextElementStateCache = new TextElementStateCache();\n\n    /**\n     * Create the `TextElementsRenderer` which selects which labels should be placed on screen as\n     * a preprocessing step, which is not done every frame, and also renders the placed\n     * [[TextElement]]s every frame.\n     *\n     * @param m_viewState State of the view for which this renderer will draw text.\n     * @param m_viewCamera Camera used by the view for which this renderer will draw text.\n     * @param m_viewUpdateCallback To be called whenever the view needs to be updated.\n     * @param m_screenCollisions General 2D screen occlusion management, may be shared between\n     *     instances.\n     * @param m_screenProjector Projects 3D coordinates into screen space.\n     * @param m_textCanvasFactory To create TextCanvas instances.\n     * @param m_poiRendererFactory To create PoiRenderer instances.\n     * @param m_poiManager To prepare pois for rendering.\n     * @param m_fontCatalogLoader To load font catalogs.\n     * @param m_theme Theme defining  text styles.\n     * @param options Configuration options for the text renderer. See\n     * [[TextElementsRendererOptions]].\n     */\n    constructor(\n        private m_viewState: ViewState,\n        private m_viewCamera: THREE.Camera,\n        private m_viewUpdateCallback: ViewUpdateCallback,\n        private m_screenCollisions: ScreenCollisions,\n        private m_screenProjector: ScreenProjector,\n        private m_textCanvasFactory: TextCanvasFactory,\n        private m_poiManager: PoiManager,\n        private m_poiRendererFactory: PoiRendererFactory,\n        private m_fontCatalogLoader: FontCatalogLoader,\n        private m_theme: Theme,\n        options: TextElementsRendererOptions\n    ) {\n        this.m_textStyleCache = new TextStyleCache(this.m_theme);\n\n        this.m_options = { ...options };\n        initializeDefaultOptions(this.m_options);\n\n        this.m_textCanvasFactory.setGlyphCountLimits(\n            this.m_options.minNumGlyphs!,\n            this.m_options.maxNumGlyphs!\n        );\n    }\n\n    /**\n     * Disable all fading animations (for debugging and performance measurement). Defaults to\n     * `false`.\n     */\n    set disableFading(disable: boolean) {\n        this.m_options.disableFading = disable;\n    }\n\n    get disableFading(): boolean {\n        return this.m_options.disableFading === true;\n    }\n\n    get styleCache() {\n        return this.m_textStyleCache;\n    }\n\n    /**\n     * Render the text using the specified camera into the current canvas.\n     *\n     * @param camera Orthographic camera to use.\n     */\n    renderText(camera: THREE.OrthographicCamera) {\n        if (!this.initialized) {\n            return;\n        }\n\n        this.updateGlyphDebugMesh();\n\n        for (const textRenderer of this.m_textRenderers) {\n            textRenderer.textCanvas.render(camera);\n        }\n    }\n\n    /**\n     * Forces update of text elements in the next call to [[placeText]].\n     */\n    invalidateCache() {\n        this.m_cacheInvalidated = true;\n    }\n\n    /**\n     * Notify `TextElementsRenderer` that the camera has started a movement.\n     */\n    movementStarted() {\n        // Nothing to do (yet)\n    }\n\n    /**\n     * Notify `TextElementsRenderer` that the camera has finished its movement.\n     */\n    movementFinished() {\n        this.invalidateCache();\n    }\n\n    /**\n     * Is `true` if number of [[TextElement]]s in visible tiles is larger than the recommended\n     * number `OVERLOAD_LABEL_LIMIT`.\n     */\n    get overloaded(): boolean {\n        return this.m_overloaded;\n    }\n\n    /**\n     * Places text elements for the current frame.\n     * @param dataSourceTileList List of tiles to be rendered for each data source.\n     * @param time Current frame time.\n     * @param elevationProvider\n     */\n    placeText(dataSourceTileList: DataSourceTileList[], time: number) {\n        const tileTextElementsChanged = checkIfTextElementsChanged(dataSourceTileList);\n\n        const textElementsAvailable = this.hasOverlayText() || tileTextElementsChanged;\n        if (!this.initialize(textElementsAvailable)) {\n            return;\n        }\n\n        const updateTextElements =\n            this.m_cacheInvalidated ||\n            tileTextElementsChanged ||\n            this.m_viewState.renderedTilesChanged;\n\n        logger.debug(\n            `FRAME: ${this.m_viewState.frameNumber}, ZOOM LEVEL: ${this.m_viewState.zoomLevel}`\n        );\n\n        if (updateTextElements) {\n            this.m_textElementStateCache.clearVisited();\n            this.updateTextElements(dataSourceTileList);\n        }\n        const findReplacements = updateTextElements;\n        const anyTextGroupEvicted = this.m_textElementStateCache.update(\n            time,\n            this.m_options.disableFading!,\n            findReplacements,\n            this.m_viewState.zoomLevel\n        );\n\n        this.reset();\n        this.prepopulateScreenWithBlockingElements(dataSourceTileList);\n\n        // New text elements must be placed either if text elements were updated in this frame\n        // or if any text element group was evicted. The second case happens when the group is not\n        // visited anymore and all it's elements just became invisible, which means there's newly\n        // available screen space where new text elements could be placed. A common scenario where\n        // this happens is zooming in/out: text groups from the old level may still be fading out\n        // after all groups in the new level were updated.\n        const placeNewTextElements = updateTextElements || anyTextGroupEvicted;\n        this.placeTextElements(time, placeNewTextElements);\n        this.placeOverlayTextElements();\n        this.updateTextRenderers();\n    }\n\n    /**\n     * Adds new overlay text elements to this `MapView`.\n     *\n     * @param textElements Array of [[TextElement]] to be added.\n     */\n    addOverlayText(textElements: TextElement[]): void {\n        if (textElements.length === 0) {\n            return;\n        }\n        this.m_overlayTextElements =\n            this.m_overlayTextElements === undefined\n                ? textElements.slice()\n                : this.m_overlayTextElements.concat(textElements);\n    }\n\n    /**\n     * Adds new overlay text elements to this `MapView`.\n     *\n     * @param textElements Array of [[TextElement]] to be added.\n     */\n    clearOverlayText(): void {\n        this.m_overlayTextElements = [];\n    }\n\n    /**\n     * @returns Whether there's overlay text to be rendered.\n     */\n    hasOverlayText(): boolean {\n        return this.m_overlayTextElements !== undefined && this.m_overlayTextElements.length > 0;\n    }\n\n    get overlayText(): TextElement[] | undefined {\n        return this.m_overlayTextElements;\n    }\n\n    /**\n     * Fill the picking results for the pixel with the given screen coordinate. If multiple\n     * [[TextElement]]s are found, the order of the results is unspecified.\n     *\n     * Note: [[TextElement]]s with identical `featureId` or identical `userData` will only appear\n     * once in the list `pickResults`.\n     *\n     * @param screenPosition Screen coordinate of picking position.\n     * @param pickResults Array filled with pick results.\n     */\n    pickTextElements(screenPosition: THREE.Vector2, pickResults: PickResult[]) {\n        const pickHandler = (pickData: any | undefined, pickObjectType: PickObjectType) => {\n            const textElement = pickData as TextElement;\n\n            if (textElement === undefined) {\n                return;\n            }\n\n            let isDuplicate = false;\n\n            if (textElement.featureId !== undefined) {\n                isDuplicate = pickResults.some(pickResult => {\n                    return (\n                        pickResult !== undefined &&\n                        pickObjectType === pickResult.type &&\n                        ((pickResult.featureId !== undefined &&\n                            pickResult.featureId === textElement.featureId) ||\n                            (pickResult.userData !== undefined &&\n                                pickResult.userData === textElement.userData))\n                    );\n                });\n\n                if (!isDuplicate) {\n                    const pickResult: TextPickResult = {\n                        type: pickObjectType,\n                        point: screenPosition,\n                        distance: 0,\n                        featureId: textElement.featureId,\n                        userData: textElement.userData,\n                        text: textElement.text\n                    };\n\n                    pickResults.push(pickResult);\n                }\n            }\n        };\n\n        for (const textRenderer of this.m_textRenderers) {\n            textRenderer.textCanvas.pickText(screenPosition, (pickData: any | undefined) => {\n                pickHandler(pickData, PickObjectType.Text);\n            });\n            textRenderer.poiRenderer.pickTextElements(\n                screenPosition,\n                (pickData: any | undefined) => {\n                    pickHandler(pickData, PickObjectType.Icon);\n                }\n            );\n        }\n    }\n\n    /**\n     * `true` if any resource used by any `FontCatalog` is still loading.\n     */\n    get loading(): boolean {\n        return this.m_fontCatalogLoader.loading || this.m_glyphLoadingCount > 0;\n    }\n\n    /**\n     * Waits till all pending resources from any `FontCatalog` are loaded.\n     */\n    async waitLoaded(): Promise<boolean> {\n        const initialized = await this.waitInitialized();\n        if (!initialized) {\n            return false;\n        }\n        if (this.m_loadPromise === undefined) {\n            return false;\n        }\n        await this.m_loadPromise;\n        return true;\n    }\n\n    /**\n     * Reset the current text render states of all visible tiles. All [[TextElement]]s will fade in\n     * after that as if they have just been added.\n     */\n    clearRenderStates() {\n        this.m_textElementStateCache.clear();\n    }\n\n    /**\n     * Return memory used by all objects managed by `TextElementsRenderer`.\n     *\n     * @returns `MemoryUsage` Heap and GPU memory used by this `TextElementsRenderer`.\n     */\n    getMemoryUsage(): MapViewUtils.MemoryUsage {\n        const memoryUsage = {\n            heapSize: 0,\n            gpuSize: 0\n        };\n\n        for (const renderer of this.m_textRenderers) {\n            renderer.textCanvas.getMemoryUsage(memoryUsage);\n            renderer.poiRenderer.getMemoryUsage(memoryUsage);\n        }\n\n        return memoryUsage;\n    }\n\n    get initialized(): boolean {\n        return this.m_initialized;\n    }\n\n    get initializing(): boolean {\n        return this.m_initPromise !== undefined;\n    }\n\n    /**\n     * Waits until initialization is done.\n     * @returns Promise resolved to true if initialization was done, false otherwise.\n     */\n    async waitInitialized(): Promise<boolean> {\n        if (this.initialized) {\n            return true;\n        }\n\n        if (!this.initializing) {\n            return false;\n        }\n        await this.m_initPromise;\n        return true;\n    }\n\n    /**\n     * Initializes the text renderer once there's any text element available for rendering.\n     * @param textElementsAvailable Indicates whether there's any text element to be rendered.\n     * @returns Whether the text renderer is initialized.\n     */\n    private initialize(textElementsAvailable: boolean): boolean {\n        if (!this.initialized && !this.initializing && textElementsAvailable) {\n            this.initializeDefaultAssets();\n            this.m_initPromise = this.initializeTextCanvases().then(() => {\n                this.m_initialized = true;\n                this.m_initPromise = undefined;\n                this.invalidateCache(); // Force cache update after initialization.\n                this.m_viewUpdateCallback();\n            });\n        }\n        return this.initialized;\n    }\n\n    /**\n     * Reset internal state at the beginning of a frame.\n     */\n    private reset() {\n        this.m_screenCollisions.reset();\n        for (const textRenderer of this.m_textRenderers) {\n            textRenderer.textCanvas.clear();\n            textRenderer.poiRenderer.reset();\n        }\n    }\n\n    /**\n     * Update state at the end of a frame.\n     */\n    private updateTextRenderers() {\n        for (const textRenderer of this.m_textRenderers) {\n            textRenderer.poiRenderer.update();\n        }\n    }\n\n    /**\n     * Fills the screen with lines projected from world space, see [[Tile.blockingElements]].\n     * @note These boxes have highest priority, so will block all other labels.\n     * @param dataSourceTileList List of tiles to be rendered for each data source.\n     */\n    private prepopulateScreenWithBlockingElements(dataSourceTileList: DataSourceTileList[]) {\n        const boxes: IBox[] = [];\n        dataSourceTileList.forEach(renderListEntry => {\n            const startLinePointProj = new THREE.Vector3();\n            const endLinePointProj = new THREE.Vector3();\n            for (const tile of renderListEntry.renderedTiles.values()) {\n                for (const pathBlockingElement of tile.blockingElements) {\n                    if (pathBlockingElement.points.length < 2) {\n                        continue;\n                    }\n                    this.m_screenProjector.project3(\n                        pathBlockingElement.points[0],\n                        startLinePointProj\n                    );\n                    for (let i = 1; i < pathBlockingElement.points.length; i++) {\n                        this.m_screenProjector.project3(\n                            pathBlockingElement.points[i],\n                            endLinePointProj\n                        );\n                        const line = pathBlockingElement.screenSpaceLines[i - 1];\n                        line.start.copy(startLinePointProj);\n                        line.end.copy(endLinePointProj);\n                        const lineWithBound: LineWithBound = {\n                            minX: Math.min(startLinePointProj.x, endLinePointProj.x),\n                            maxX: Math.max(startLinePointProj.x, endLinePointProj.x),\n                            minY: Math.min(startLinePointProj.y, endLinePointProj.y),\n                            maxY: Math.max(startLinePointProj.y, endLinePointProj.y),\n                            line\n                        };\n                        boxes.push(lineWithBound);\n                        startLinePointProj.copy(endLinePointProj);\n                    }\n                }\n            }\n        });\n        this.m_screenCollisions.allocateIBoxes(boxes);\n    }\n\n    /**\n     * @returns True if whole group was processed for placement,\n     * false otherwise (e.g. placement limit reached).\n     */\n    private placeTextElementGroup(\n        groupState: TextElementGroupState,\n        renderParams: RenderParams,\n        maxNumPlacedLabels: number,\n        pass: Pass\n    ): boolean {\n        // Unvisited text elements are never placed.\n        assert(groupState.visited);\n\n        if (this.m_textRenderers.length === 0) {\n            logger.warn(\"No text renderers initialized.\");\n            return false;\n        }\n\n        const shieldGroups: number[][] = [];\n        const hiddenKinds = this.m_viewState.hiddenGeometryKinds;\n        const projection = this.m_viewState.projection;\n        const elevationProvider = this.m_viewState.elevationProvider;\n        const elevationMap = elevationProvider?.getDisplacementMap(groupState.tileKey);\n\n        for (const textElementState of groupState.textElementStates) {\n            if (pass === Pass.PersistentLabels) {\n                if (placementStats) {\n                    ++placementStats.total;\n                }\n            }\n            if (\n                maxNumPlacedLabels >= 0 &&\n                renderParams.numRenderedTextElements >= maxNumPlacedLabels\n            ) {\n                logger.debug(\"Placement label limit exceeded.\");\n                return false;\n            }\n\n            // Skip all labels that are not initialized (didn't pass early placement tests)\n            // or don't belong to this pass.\n            if (!textElementState.initialized) {\n                if (placementStats) {\n                    ++placementStats.uninitialized;\n                }\n                continue;\n            }\n            if (textElementState.viewDistance === undefined) {\n                if (placementStats) {\n                    ++placementStats.tooFar;\n                }\n                continue;\n            }\n\n            const elementVisible = textElementState.visible;\n            if (\n                (pass === Pass.PersistentLabels && !elementVisible) ||\n                (pass === Pass.NewLabels && elementVisible)\n            ) {\n                continue;\n            }\n\n            const textElement = textElementState.element;\n\n            // Get the TextElementStyle.\n            const textElementStyle = this.m_textStyleCache.getTextElementStyle(textElement.style);\n            const textCanvas = textElementStyle.textCanvas;\n            const poiRenderer = textElementStyle.poiRenderer;\n            if (textCanvas === undefined || poiRenderer === undefined) {\n                logger.warn(\"Text canvas or poi renderer not ready.\");\n                continue;\n            }\n\n            // TODO: HARP-7648. Discard hidden kinds sooner, before placement.\n            // Check if the label should be hidden.\n            if (\n                hiddenKinds !== undefined &&\n                textElement.kind !== undefined &&\n                hiddenKinds.hasOrIntersects(textElement.kind)\n            ) {\n                continue;\n            }\n\n            if (elevationProvider !== undefined && !textElement.elevated) {\n                if (!elevationMap) {\n                    this.m_viewUpdateCallback(); // Update view until elevation is loaded.\n                    this.m_forceNewLabelsPass = true;\n                    continue;\n                }\n                overlayTextElement(textElement, elevationProvider, elevationMap, projection);\n            }\n            const elementType = textElement.type;\n            const isPathLabel = elementType === TextElementType.PathLabel;\n\n            // For paths, check if the label may fit.\n            if (isPathLabel) {\n                if (isPathLabelTooSmall(textElement, this.m_screenProjector, tempScreenPoints)) {\n                    if (placementStats) {\n                        placementStats.numNotVisible++;\n                    }\n                    if (textElement.dbgPathTooSmall === true) {\n                        if (placementStats) {\n                            placementStats.numPathTooSmall++;\n                        }\n                    }\n                    textElementState.reset();\n                    continue;\n                }\n            }\n\n            const forceNewPassOnLoaded = true;\n            // This ensures that textElement.renderStyle and textElement.layoutStyle are\n            // already instantiated and initialized with theme style values.\n            if (!this.initializeGlyphs(textElement, textElementStyle, forceNewPassOnLoaded)) {\n                continue;\n            }\n\n            const layer = textCanvas.getLayer(textElement.renderOrder || DEFAULT_TEXT_CANVAS_LAYER);\n\n            // Move onto the next TextElement if we cannot continue adding glyphs to this layer.\n            if (layer !== undefined) {\n                if (layer.storage.drawCount + textElement.glyphs!.length > layer.storage.capacity) {\n                    if (placementStats) {\n                        ++placementStats.numCannotAdd;\n                    }\n                    logger.warn(\"layer glyph storage capacity exceeded.\");\n                    continue;\n                }\n            }\n\n            // Set the current style for the canvas.\n            // This means text canvas has always references (not a copy) to text element styles.\n            // The only exception is multi-anchor placement where layoutStyle need to be\n            // modified and thus textCanvas will using its own copy of textElement.layoutStyle.\n            // See: placePointLabel()\n            textCanvas.textRenderStyle = textElement.renderStyle!;\n            textCanvas.textLayoutStyle = textElement.layoutStyle!;\n\n            switch (elementType) {\n                case TextElementType.PoiLabel:\n                    this.addPoiLabel(textElementState, poiRenderer, textCanvas, renderParams);\n                    break;\n                case TextElementType.LineMarker:\n                    this.addLineMarkerLabel(\n                        textElementState,\n                        poiRenderer,\n                        shieldGroups,\n                        textCanvas,\n                        renderParams\n                    );\n                    break;\n                case TextElementType.PathLabel:\n                    this.addPathLabel(textElementState, tempScreenPoints, textCanvas, renderParams);\n            }\n        }\n        return true;\n    }\n\n    private initializeGlyphs(\n        textElement: TextElement,\n        textElementStyle: TextElementStyle,\n        forceNewPassOnLoaded: boolean\n    ): boolean {\n        // Trigger the glyph load if needed.\n        if (textElement.loadingState === LoadingState.Initialized) {\n            return true;\n        }\n\n        assert(textElementStyle.textCanvas !== undefined);\n        const textCanvas = textElementStyle.textCanvas!;\n\n        if (textElement.loadingState === undefined) {\n            textElement.loadingState = LoadingState.Requested;\n\n            if (textElement.renderStyle === undefined) {\n                textElement.renderStyle = new TextRenderStyle({\n                    ...textElementStyle.renderParams,\n                    ...textElement.renderParams\n                });\n            }\n            if (textElement.layoutStyle === undefined) {\n                textElement.layoutStyle = new TextLayoutStyle({\n                    ...textElementStyle.layoutParams,\n                    ...textElement.layoutParams\n                });\n            }\n\n            if (textElement.text === \"\") {\n                textElement.loadingState = LoadingState.Loaded;\n            } else {\n                const newLoadPromise = textCanvas.fontCatalog\n                    .loadCharset(textElement.text, textElement.renderStyle)\n                    .then(() => {\n                        --this.m_glyphLoadingCount;\n                        textElement.loadingState = LoadingState.Loaded;\n                        // Ensure that text elements still loading glyphs get a chance to\n                        // be rendered if there's no text element updates in the next frames.\n                        this.m_forceNewLabelsPass =\n                            this.m_forceNewLabelsPass || forceNewPassOnLoaded;\n                        this.m_viewUpdateCallback();\n                    });\n                if (this.m_glyphLoadingCount === 0) {\n                    this.m_loadPromise = undefined;\n                }\n                ++this.m_glyphLoadingCount;\n\n                this.m_loadPromise =\n                    this.m_loadPromise === undefined\n                        ? newLoadPromise\n                        : Promise.all([this.m_loadPromise, newLoadPromise]);\n            }\n        }\n        if (textElement.loadingState === LoadingState.Loaded) {\n            textCanvas.textRenderStyle = textElement.renderStyle!;\n            textCanvas.textLayoutStyle = textElement.layoutStyle!;\n            textElement.glyphCaseArray = [];\n            textElement.bounds = undefined;\n            textElement.glyphs = textCanvas.fontCatalog.getGlyphs(\n                textElement.text,\n                textCanvas.textRenderStyle,\n                textElement.glyphCaseArray\n            );\n            textElement.loadingState = LoadingState.Initialized;\n        }\n        // Return true as soon as a text element has some glyphs assigned so that it's rendered.\n        // The glyphs may be either the final ones or some temporal glyphs inherited from a\n        // predecessor as part of the text element replacement process.\n        // See TextElementState.replace().\n        return textElement.glyphs !== undefined;\n    }\n\n    private initializeDefaultAssets(): void {\n        const defaultFontCatalogName = this.m_fontCatalogLoader.initialize(\n            this.m_options.fontCatalog!\n        );\n        this.m_textStyleCache.initializeDefaultTextElementStyle(defaultFontCatalogName);\n    }\n\n    private async initializeTextCanvases(): Promise<void> {\n        const catalogCallback = (name: string, catalog: FontCatalog) => {\n            const loadedTextCanvas = this.m_textCanvasFactory.createTextCanvas(catalog);\n\n            this.m_textRenderers.push({\n                fontCatalog: name,\n                textCanvas: loadedTextCanvas,\n                poiRenderer: this.m_poiRendererFactory.createPoiRenderer(loadedTextCanvas)\n            });\n        };\n\n        return this.m_fontCatalogLoader.loadCatalogs(catalogCallback).then(() => {\n            // Find the default TextCanvas and PoiRenderer.\n            let defaultTextCanvas: TextCanvas | undefined;\n            this.m_textRenderers.forEach(textRenderer => {\n                if (defaultTextCanvas === undefined) {\n                    defaultTextCanvas = textRenderer.textCanvas;\n                }\n            });\n            const defaultPoiRenderer = this.m_poiRendererFactory.createPoiRenderer(\n                defaultTextCanvas!\n            );\n\n            this.m_textStyleCache.initializeTextElementStyles(\n                defaultPoiRenderer,\n                defaultTextCanvas!,\n                this.m_textRenderers\n            );\n        });\n    }\n\n    private updateGlyphDebugMesh() {\n        const debugGlyphs = debugContext.getValue(\"DEBUG_GLYPHS\");\n        if (debugGlyphs === undefined) {\n            return;\n        }\n\n        if (debugGlyphs && this.m_debugGlyphTextureCacheMesh === undefined) {\n            this.initializeGlyphDebugMesh();\n        }\n        assert(this.m_debugGlyphTextureCacheMesh !== undefined);\n        assert(this.m_debugGlyphTextureCacheWireMesh !== undefined);\n\n        this.m_debugGlyphTextureCacheMesh!.visible = debugGlyphs;\n        this.m_debugGlyphTextureCacheWireMesh!.visible = debugGlyphs;\n    }\n\n    private initializeGlyphDebugMesh() {\n        const defaultFontCatalog = this.m_textRenderers[0].textCanvas.fontCatalog;\n\n        // Initialize glyph-debugging mesh.\n        const planeGeometry = new THREE.PlaneGeometry(\n            defaultFontCatalog.textureSize.width / 2.5,\n            defaultFontCatalog.textureSize.height / 2.5,\n            defaultFontCatalog.textureSize.width / defaultFontCatalog.maxWidth,\n            defaultFontCatalog.textureSize.height / defaultFontCatalog.maxHeight\n        );\n        const material = new THREE.MeshBasicMaterial({\n            transparent: true,\n            depthWrite: false,\n            depthTest: false,\n            map: defaultFontCatalog.texture\n        });\n        this.m_debugGlyphTextureCacheMesh = new THREE.Mesh(planeGeometry, material);\n        this.m_debugGlyphTextureCacheMesh.renderOrder = 10000;\n        this.m_debugGlyphTextureCacheMesh.visible = false;\n\n        this.m_debugGlyphTextureCacheMesh.name = \"glyphDebug\";\n\n        const wireframe = new THREE.WireframeGeometry(planeGeometry);\n        const wireframeMaterial = new THREE.LineBasicMaterial({\n            transparent: true,\n            color: 0x999999,\n            depthWrite: false,\n            depthTest: false\n        });\n        this.m_debugGlyphTextureCacheWireMesh = new THREE.LineSegments(\n            wireframe,\n            wireframeMaterial\n        );\n        this.m_debugGlyphTextureCacheWireMesh.renderOrder = 9999;\n        this.m_debugGlyphTextureCacheWireMesh.visible = false;\n\n        this.m_debugGlyphTextureCacheWireMesh.name = \"glyphDebug\";\n\n        this.m_textRenderers[0].textCanvas\n            .getLayer(DEFAULT_TEXT_CANVAS_LAYER)!\n            .storage.scene.add(\n                this.m_debugGlyphTextureCacheMesh,\n                this.m_debugGlyphTextureCacheWireMesh\n            );\n    }\n\n    /**\n     * Visit all visible tiles and add/ their text elements to cache. The update of\n     * [[TextElement]]s is a time consuming process, and cannot be done every frame, but should only\n     * be done when the camera moved (a lot) of whenever the set of visible tiles change.\n     *\n     * The actually rendered [[TextElement]]s are stored internally until the next update is done\n     * to speed up rendering when no camera movement was detected.\n     * @param dataSourceTileList List of tiles to be rendered for each data source.\n     */\n    private updateTextElements(dataSourceTileList: DataSourceTileList[]) {\n        logger.debug(\"updateTextElements\");\n\n        if (updateStats) {\n            updateStats.clear();\n        }\n\n        this.m_textElementStateCache.clearTextCache();\n        this.m_cacheInvalidated = false;\n\n        this.checkIfOverloaded(dataSourceTileList);\n\n        // Used with tile offset to compute the x coordinate offset for tiles.\n        const updateStartTime =\n            this.overloaded && this.m_viewState.isDynamic ? PerformanceTimer.now() : undefined;\n\n        // TODO: HARP-7648. Skip all data sources that won't contain text.\n        // TODO: HARP-7651. Higher priority labels should be updated before lower priority ones\n        // across all data sources.\n        // TODO: HARP-7373. Use rendered tiles (tiles currently rendered to cover the view,\n        // including fallbacks if necessary) instead of visible tiles (target tiles that might not\n        // be decoded yet).\n        // Otherwise labels persistent when crossing a zoom level boundary will flicker (fade out\n        // and back in) due to the delay in decoding the visible tiles.\n        dataSourceTileList.forEach(tileList => {\n            this.updateTextElementsFromSource(\n                tileList.dataSource,\n                tileList.storageLevel,\n                Array.from(tileList.renderedTiles.values()),\n                updateStartTime\n            );\n        });\n\n        if (updateStats) {\n            updateStats.log();\n        }\n    }\n\n    private updateTextElementsFromSource(\n        tileDataSource: DataSource,\n        storageLevel: number,\n        visibleTiles: Tile[],\n        updateStartTime: number | undefined\n    ) {\n        if (updateStats) {\n            updateStats.tiles += visibleTiles.length;\n        }\n        const sortedTiles = visibleTiles;\n\n        // TODO: HARP-7648. Really needed? Should it be done here or in VisibleTileSet?\n        sortedTiles.sort((a: Tile, b: Tile) => {\n            return a.tileKey.mortonCode() - b.tileKey.mortonCode();\n        });\n\n        const sortedGroups: TextElementLists[] = [];\n        this.createSortedGroupsForSorting(tileDataSource, storageLevel, sortedTiles, sortedGroups);\n\n        let numTextElementsUpdated = 0;\n\n        for (const textElementLists of sortedGroups) {\n            this.selectTextElementsToUpdateByDistance(textElementLists);\n\n            // The value of updateStartTime is set if this.overloaded is true.\n            if (updateStartTime !== undefined) {\n                // If overloaded and all time is used up, exit early.\n                if (OVERLOAD_UPDATE_TIME_LIMIT > 0) {\n                    const endTime = PerformanceTimer.now();\n                    const elapsedTime = endTime - updateStartTime;\n                    if (elapsedTime > OVERLOAD_UPDATE_TIME_LIMIT) {\n                        logger.debug(\"Update time limit exceeded.\");\n                        break;\n                    }\n                }\n\n                // Try not to update too many elements. They will be checked for visibility each\n                // frame.\n                numTextElementsUpdated += textElementLists.count();\n                if (numTextElementsUpdated >= OVERLOAD_UPDATED_LABEL_LIMIT) {\n                    logger.debug(\"Update label limit exceeded.\");\n                    break;\n                }\n            }\n        }\n    }\n\n    private prepareTextElementGroup(\n        textElementGroup: TextElementGroup,\n        tileKey: TileKey,\n        maxViewDistance?: number\n    ) {\n        if (textElementGroup.elements.length === 0) {\n            return;\n        }\n\n        const textElementSelection: TextElementFilter = (\n            textElementState: TextElementState\n        ): number | undefined => {\n            let { result, viewDistance } = checkReadyForPlacement(\n                textElementState.element,\n                this.m_viewState,\n                this.m_viewCamera,\n                this.m_poiManager,\n                maxViewDistance\n            );\n\n            if (\n                result === PrePlacementResult.Ok &&\n                !this.m_textElementStateCache.deduplicateElement(\n                    this.m_viewState.zoomLevel,\n                    textElementState\n                )\n            ) {\n                result = PrePlacementResult.Duplicate;\n                viewDistance = undefined;\n            }\n\n            if (updateStats) {\n                updateStats.totalLabels++;\n                updateStats.results[result]++;\n            }\n            return viewDistance;\n        };\n\n        const [, found] = this.m_textElementStateCache.getOrSet(\n            textElementGroup,\n            tileKey,\n            textElementSelection\n        );\n\n        if (updateStats) {\n            ++updateStats.totalGroups;\n            if (!found) {\n                ++updateStats.newGroups;\n            }\n        }\n    }\n\n    private createSortedGroupsForSorting(\n        tileDataSource: DataSource,\n        storageLevel: number,\n        sortedTiles: Tile[],\n        sortedGroups: TextElementLists[]\n    ) {\n        if (sortedTiles.length === 0) {\n            return;\n        }\n\n        const tilesToRender: Tile[] = [];\n\n        for (const tile of sortedTiles) {\n            if (tileDataSource.shouldRenderText(storageLevel, tile.tileKey)) {\n                tilesToRender.push(tile);\n            }\n        }\n\n        const groupedPriorityLists: Map<number, TextElementLists> = new Map();\n\n        for (const tile of tilesToRender) {\n            for (const group of tile.textElementGroups.groups.values()) {\n                if (group.elements.length === 0) {\n                    continue;\n                }\n\n                const foundGroup = groupedPriorityLists.get(group.priority);\n                if (foundGroup === undefined) {\n                    groupedPriorityLists.set(\n                        group.priority,\n                        new TextElementLists([new TileTextElements(tile, group)])\n                    );\n                } else {\n                    foundGroup.lists.push(new TileTextElements(tile, group));\n                }\n            }\n        }\n\n        if (groupedPriorityLists.size === 0) {\n            return;\n        }\n\n        for (const g of groupedPriorityLists) {\n            const lists = g[1];\n            sortedGroups.push(lists);\n        }\n\n        sortedGroups.sort((a: TextElementLists, b: TextElementLists) => {\n            return b.priority - a.priority;\n        });\n\n        const printTextInfo = false;\n\n        if (PRINT_LABEL_DEBUG_INFO && printTextInfo) {\n            let outString = \"\";\n            for (const textElementLists of sortedGroups) {\n                let size = 0;\n                for (const tileTextElements of textElementLists.lists) {\n                    size += tileTextElements.group.elements.length;\n                }\n                outString += `priority ${textElementLists.priority} size: ${size}\\n`;\n            }\n            logger.log(outString);\n        }\n    }\n\n    private selectTextElementsToUpdateByDistance(textElementLists: TextElementLists) {\n        const farDistanceLimitRatio = Math.max(\n            this.m_options.maxDistanceRatioForTextLabels!,\n            this.m_options.maxDistanceRatioForPoiLabels!\n        );\n        const maxViewDistance = getMaxViewDistance(this.m_viewState, farDistanceLimitRatio);\n\n        for (const tileTextElements of textElementLists.lists) {\n            this.prepareTextElementGroup(\n                tileTextElements.group,\n                tileTextElements.tile.tileKey,\n                maxViewDistance\n            );\n        }\n    }\n\n    private placeTextElements(time: number, placeNewTextElements: boolean) {\n        const renderParams: RenderParams = {\n            numRenderedTextElements: 0,\n            fadeAnimationRunning: false,\n            time\n        };\n\n        const placeStartTime =\n            this.overloaded && this.m_viewState.isDynamic ? PerformanceTimer.now() : undefined;\n\n        if (placementStats) {\n            placementStats.clear();\n        }\n\n        if (this.m_textElementStateCache.size === 0) {\n            logger.debug(\"Text element cache empty.\");\n            return;\n        }\n\n        const placeNew = this.m_forceNewLabelsPass || placeNewTextElements;\n        if (this.m_forceNewLabelsPass) {\n            if (!placeNewTextElements) {\n                logger.debug(\"Force new label pass\");\n            }\n            this.m_forceNewLabelsPass = false;\n        }\n        const maxNumPlacedTextElements = this.m_options.maxNumVisibleLabels!;\n\n        // TODO: HARP-7648. Potential performance improvement. Place persistent labels + rejected\n        // candidates from previous frame if there's been no placement in this one.\n        const groupStates = this.m_textElementStateCache.sortedGroupStates;\n        let currentPriority: number = groupStates[0].priority;\n        let currentPriorityBegin: number = 0;\n\n        for (let i = 0; i < groupStates.length; ++i) {\n            const textElementGroupState = groupStates[i];\n            if (placementStats) {\n                ++placementStats.totalGroups;\n            }\n\n            const newPriority = textElementGroupState.priority;\n            if (placeNew && currentPriority !== newPriority) {\n                // Place all new labels of the previous priority before placing the persistent\n                // labels of this priority.\n                this.placeNewTextElements(currentPriorityBegin, i, renderParams);\n                if (isPlacementTimeExceeded(placeStartTime)) {\n                    break;\n                }\n                currentPriority = newPriority;\n                currentPriorityBegin = i;\n            }\n            if (\n                !this.placeTextElementGroup(\n                    textElementGroupState,\n                    renderParams,\n                    maxNumPlacedTextElements,\n                    Pass.PersistentLabels\n                )\n            ) {\n                break;\n            }\n\n            if (isPlacementTimeExceeded(placeStartTime)) {\n                break;\n            }\n        }\n\n        if (placeNew) {\n            // Place new text elements of the last priority.\n            this.placeNewTextElements(currentPriorityBegin, groupStates.length, renderParams);\n        }\n\n        if (placementStats) {\n            placementStats.numRenderedTextElements = renderParams.numRenderedTextElements;\n            placementStats.log();\n        }\n\n        if (renderParams.fadeAnimationRunning) {\n            this.m_viewUpdateCallback();\n        }\n    }\n\n    private placeNewTextElements(\n        beginGroupIndex: number,\n        endGroupIndex: number,\n        renderParams: RenderParams\n    ) {\n        const groupStates = this.m_textElementStateCache.sortedGroupStates;\n        for (let i = beginGroupIndex; i < endGroupIndex; ++i) {\n            if (\n                !this.placeTextElementGroup(\n                    groupStates[i],\n                    renderParams,\n                    this.m_options.maxNumVisibleLabels!,\n                    Pass.NewLabels\n                )\n            ) {\n                break;\n            }\n        }\n    }\n\n    private placeOverlayTextElements() {\n        if (this.m_overlayTextElements === undefined || this.m_overlayTextElements.length === 0) {\n            return;\n        }\n\n        const screenSize = this.m_tmpVector.set(\n            this.m_screenProjector.width,\n            this.m_screenProjector.height\n        );\n        const screenXOrigin = -screenSize.width / 2.0;\n        const screenYOrigin = screenSize.height / 2.0;\n\n        // Place text elements one by one.\n        for (const textElement of this.m_overlayTextElements!) {\n            // Get the TextElementStyle.\n            const textElementStyle = this.m_textStyleCache.getTextElementStyle(textElement.style);\n            const textCanvas = textElementStyle.textCanvas;\n            if (textCanvas === undefined) {\n                continue;\n            }\n\n            const forceNewPassOnLoaded = false;\n            this.initializeGlyphs(textElement, textElementStyle, forceNewPassOnLoaded);\n\n            if (textElement.loadingState !== LoadingState.Initialized) {\n                continue;\n            }\n\n            const layer = textCanvas.getLayer(textElement.renderOrder || DEFAULT_TEXT_CANVAS_LAYER);\n\n            // Move onto the next TextElement if we cannot continue adding glyphs to this layer.\n            if (layer !== undefined) {\n                if (layer.storage.drawCount + textElement.glyphs!.length > layer.storage.capacity) {\n                    continue;\n                }\n            }\n\n            // Set the current style for the canvas.\n            textCanvas.textRenderStyle = textElement.renderStyle!;\n            textCanvas.textLayoutStyle = textElement.layoutStyle!;\n\n            // Place text.\n            let textPath;\n            if (!(textElement.type === TextElementType.PathLabel)) {\n                // Adjust the label positioning.\n                tempScreenPosition.x = screenXOrigin + textElement.position.x * screenSize.width;\n                tempScreenPosition.y = screenYOrigin - textElement.position.y * screenSize.height;\n                if (textElement.xOffset !== undefined) {\n                    tempScreenPosition.x += textElement.xOffset;\n                }\n                if (textElement.yOffset !== undefined) {\n                    tempScreenPosition.y -= textElement.yOffset;\n                }\n\n                tempPosition.x = tempScreenPosition.x;\n                tempPosition.y = tempScreenPosition.y;\n                tempPosition.z = 0.0;\n                addTextToCanvas(textElement, textCanvas, tempPosition);\n            } else {\n                // Adjust the label positioning.\n                tempScreenPosition.x = screenXOrigin;\n                tempScreenPosition.y = screenYOrigin;\n                if (textElement.xOffset !== undefined) {\n                    tempScreenPosition.x += textElement.xOffset;\n                }\n                if (textElement.yOffset !== undefined) {\n                    tempScreenPosition.y -= textElement.yOffset;\n                }\n\n                // Get the screen points that define the label's segments and create a path with\n                // them.\n                // TODO: HARP-7648. Optimize array allocations.\n                const screenPoints: THREE.Vector2[] = [];\n                for (const pt of textElement.path!) {\n                    const pX = tempScreenPosition.x + pt.x * screenSize.width;\n                    const pY = tempScreenPosition.y - pt.y * screenSize.height;\n                    screenPoints.push(new THREE.Vector2(pX, pY));\n                }\n                textPath = new SimplePath();\n                for (let i = 0; i < screenPoints.length - 1; ++i) {\n                    textPath.add(new THREE.LineCurve(screenPoints[i], screenPoints[i + 1]));\n                }\n                addTextToCanvas(textElement, textCanvas, tempPosition, textPath, true);\n            }\n        }\n    }\n\n    private getDistanceScalingFactor(\n        label: TextElement,\n        distance: number,\n        lookAtDistance: number\n    ): number {\n        // Distance scale is based on relation between camera focus point distance and\n        // the actual label distance. For labels close to camera look at point the scale\n        // remains unchanged, the farther is label from that point the smaller size it is\n        // rendered in screen space. This method is unaffected by near and far clipping planes\n        // distances, but may be improved by taking FOV into equation or customizing the\n        // focus point screen position based on horizont, actual ground, tilt ets.\n        let factor = lookAtDistance / distance;\n        // The label.distanceScale property defines the influence ratio at which\n        // distance affects the final scaling of label.\n        factor = 1.0 + (factor - 1.0) * label.distanceScale;\n        // Preserve the constraints\n        factor = Math.max(factor, this.m_options.labelDistanceScaleMin!);\n        factor = Math.min(factor, this.m_options.labelDistanceScaleMax!);\n        return factor;\n    }\n\n    private getDistanceFadingFactor(\n        label: TextElement,\n        state: TextElementState,\n        maxVisibilityDist: number\n    ): number {\n        let distanceFadeValue = 1.0;\n        const textDistance = state.viewDistance;\n\n        if (textDistance !== undefined && label.fadeFar !== undefined && label.fadeFar > 0.0) {\n            const fadeNear = label.fadeNear === undefined ? 0.0 : label.fadeNear;\n            const fadeFar = label.fadeFar;\n            if (fadeFar > fadeNear) {\n                distanceFadeValue =\n                    1.0 -\n                    THREE.MathUtils.clamp(\n                        (textDistance / maxVisibilityDist - fadeNear) / (fadeFar - fadeNear),\n                        0.0,\n                        1.0\n                    );\n            }\n        }\n        return distanceFadeValue;\n    }\n\n    private addPointLabel(\n        labelState: TextElementState,\n        position: THREE.Vector3,\n        screenPosition: THREE.Vector2,\n        poiRenderer: PoiRenderer,\n        textCanvas: TextCanvas,\n        renderParams: RenderParams,\n        iconIndex?: number\n    ): boolean {\n        const pointLabel: TextElement = labelState.element;\n        const textRenderState: RenderState | undefined = labelState.textRenderState;\n\n        assert(iconIndex === undefined || labelState.iconRenderStates !== undefined);\n        const iconRenderState: RenderState =\n            iconIndex !== undefined\n                ? labelState.iconRenderStates![iconIndex]\n                : labelState.iconRenderState!;\n        assert(iconRenderState !== undefined);\n\n        // Find the label's original position.\n        tempScreenPosition.x = tempPoiScreenPosition.x = screenPosition.x;\n        tempScreenPosition.y = tempPoiScreenPosition.y = screenPosition.y;\n\n        // Scale the text depending on the label's distance to the camera.\n        const textDistance = this.m_viewState.worldCenter.distanceTo(position);\n        if (\n            pointLabel.fadeFar !== undefined &&\n            (pointLabel.fadeFar <= 0.0 ||\n                pointLabel.fadeFar * this.m_viewState.maxVisibilityDist < textDistance)\n        ) {\n            // The label is farther away than fadeFar value, which means it is totally\n            // transparent.\n            if (placementStats) {\n                ++placementStats.tooFar;\n            }\n            return false;\n        }\n        labelState.setViewDistance(textDistance);\n\n        // Check if there is need to check for screen space for the label's icon.\n        const poiInfo = pointLabel.poiInfo;\n        let iconRejected = false;\n\n        // Check if icon should be rendered at this zoomLevel\n        const renderIcon =\n            poiInfo !== undefined &&\n            MathUtils.isClamped(\n                this.m_viewState.zoomLevel,\n                poiInfo.iconMinZoomLevel,\n                poiInfo.iconMaxZoomLevel\n            ) &&\n            poiInfo!.isValid !== false;\n\n        const distanceScaleFactor = this.getDistanceScalingFactor(\n            pointLabel,\n            textDistance,\n            this.m_viewState.lookAtDistance\n        );\n        const iconReady = renderIcon && poiRenderer.prepareRender(pointLabel, this.m_viewState.env);\n\n        if (iconReady) {\n            const result = placeIcon(\n                iconRenderState,\n                poiInfo!,\n                tempPoiScreenPosition,\n                distanceScaleFactor,\n                this.m_viewState.env,\n                this.m_screenCollisions\n            );\n            if (result === PlacementResult.Invisible) {\n                iconRenderState.reset();\n\n                if (placementStats) {\n                    ++placementStats.numNotVisible;\n                }\n                return false;\n            }\n            iconRejected = result === PlacementResult.Rejected;\n        } else if (renderIcon && poiInfo!.isValid !== false) {\n            // Ensure that text elements still loading icons get a chance to be rendered if\n            // there's no text element updates in the next frames.\n            this.m_forceNewLabelsPass = true;\n        }\n\n        const distanceFadeFactor = this.getDistanceFadingFactor(\n            pointLabel,\n            labelState,\n            this.m_viewState.maxVisibilityDist\n        );\n        const renderText = shouldRenderPointText(labelState, this.m_viewState, this.m_options);\n\n        // Render the label's text...\n        // textRenderState is always defined at this point.\n        if (renderText) {\n            // Multi point (icons) features (line markers) will use single placement anchor, but\n            // single point labels (POIs, etc.) may use multi-placement algorithm.\n            const placeResult = placePointLabel(\n                labelState,\n                tempScreenPosition,\n                distanceScaleFactor,\n                textCanvas,\n                this.m_viewState.env,\n                this.m_screenCollisions,\n                iconRejected,\n                tempPosition,\n                iconIndex === undefined\n            );\n            if (placeResult === PlacementResult.Invisible) {\n                if (placementStats) {\n                    placementStats.numPoiTextsInvisible++;\n                }\n                labelState.reset();\n                return false;\n            }\n\n            const textRejected = placeResult === PlacementResult.Rejected;\n            if (!iconRejected) {\n                const textIsOptional: boolean =\n                    pointLabel.poiInfo !== undefined && pointLabel.poiInfo.textIsOptional === true;\n                iconRejected = textRejected && !textIsOptional;\n            }\n\n            if (textRejected) {\n                textRenderState!.startFadeOut(renderParams.time);\n            }\n\n            const textNeedsDraw =\n                (!textRejected && shouldRenderPoiText(labelState, this.m_viewState)) ||\n                textRenderState!.isFading();\n\n            if (textNeedsDraw) {\n                if (!textRejected) {\n                    textRenderState!.startFadeIn(renderParams.time);\n                }\n                renderParams.fadeAnimationRunning =\n                    renderParams.fadeAnimationRunning || textRenderState!.isFading();\n                if (\n                    addTextBufferToCanvas(\n                        labelState,\n                        textCanvas,\n                        tempPosition,\n                        distanceFadeFactor,\n                        distanceScaleFactor\n                    ) &&\n                    placementStats\n                ) {\n                    placementStats.numRenderedPoiTexts++;\n                }\n            }\n        }\n        // ... and render the icon (if any).\n        if (iconReady) {\n            if (iconRejected) {\n                iconRenderState!.startFadeOut(renderParams.time);\n            } else {\n                iconRenderState!.startFadeIn(renderParams.time);\n            }\n\n            renderParams.fadeAnimationRunning =\n                renderParams.fadeAnimationRunning || iconRenderState!.isFading();\n\n            const opacity = iconRenderState.opacity * distanceFadeFactor;\n            if (opacity > 0) {\n                // Same as for text, don't allocate screen space for an icon that's fading out so\n                // that any label blocked by it gets a chance to be placed as soon as any other\n                // surrounding new labels.\n                const allocateSpace = poiInfo!.reserveSpace !== false && !iconRejected;\n                poiRenderer.renderPoi(\n                    poiInfo!,\n                    tempPoiScreenPosition,\n                    this.m_screenCollisions,\n                    labelState.renderDistance,\n                    distanceScaleFactor,\n                    allocateSpace,\n                    opacity,\n                    this.m_viewState.env\n                );\n\n                if (placementStats) {\n                    placementStats.numRenderedPoiIcons++;\n                }\n            }\n        }\n        renderParams.numRenderedTextElements++;\n        return true;\n    }\n\n    private addPoiLabel(\n        labelState: TextElementState,\n        poiRenderer: PoiRenderer,\n        textCanvas: TextCanvas,\n        renderParams: RenderParams\n    ): boolean {\n        const poiLabel = labelState.element;\n        const worldPosition = poiLabel.points as THREE.Vector3;\n\n        // Only process labels frustum-clipped labels\n        if (this.m_screenProjector.project(worldPosition, tempScreenPosition) === undefined) {\n            return false;\n        }\n        // Add this POI as a point label.\n        return this.addPointLabel(\n            labelState,\n            worldPosition,\n            tempScreenPosition,\n            poiRenderer,\n            textCanvas,\n            renderParams\n        );\n    }\n\n    private addLineMarkerLabel(\n        labelState: TextElementState,\n        poiRenderer: PoiRenderer,\n        shieldGroups: number[][],\n        textCanvas: TextCanvas,\n        renderParams: RenderParams\n    ): void {\n        const lineMarkerLabel = labelState.element;\n        const path = lineMarkerLabel.points as THREE.Vector3[];\n\n        // Early exit if the line marker doesn't have the necessary data.\n        const poiInfo = lineMarkerLabel.poiInfo!;\n        if (\n            path.length === 0 ||\n            !poiRenderer.prepareRender(lineMarkerLabel, this.m_viewState.env)\n        ) {\n            return;\n        }\n\n        // Initialize the shield group for this lineMarker.\n        let shieldGroup: number[] | undefined;\n        if (poiInfo.shieldGroupIndex !== undefined) {\n            shieldGroup = shieldGroups[poiInfo.shieldGroupIndex];\n            if (shieldGroup === undefined) {\n                shieldGroup = [];\n                shieldGroups[poiInfo.shieldGroupIndex] = shieldGroup;\n            }\n        }\n\n        const lineTechnique = poiInfo.technique as LineMarkerTechnique;\n        const minDistanceSqr =\n            lineTechnique.minDistance !== undefined\n                ? lineTechnique.minDistance * lineTechnique.minDistance\n                : 0;\n\n        // Process markers (with shield groups).\n        if (minDistanceSqr > 0 && shieldGroup !== undefined) {\n            for (let pointIndex = 0; pointIndex < path.length; ++pointIndex) {\n                const point = path[pointIndex];\n                // Only process labels frustum-clipped labels\n                if (this.m_screenProjector.project(point, tempScreenPosition) !== undefined) {\n                    // Find a suitable location for the lineMarker to be placed at.\n                    let tooClose = false;\n                    for (let j = 0; j < shieldGroup.length; j += 2) {\n                        const distanceSqr = Math2D.distSquared(\n                            shieldGroup[j],\n                            shieldGroup[j + 1],\n                            tempScreenPosition.x,\n                            tempScreenPosition.y\n                        );\n                        tooClose = distanceSqr < minDistanceSqr;\n                        if (tooClose) {\n                            break;\n                        }\n                    }\n\n                    // Place it as a point label if it's not to close to other marker in the\n                    // same shield group.\n                    if (!tooClose) {\n                        if (\n                            this.addPointLabel(\n                                labelState,\n                                point,\n                                tempScreenPosition,\n                                poiRenderer,\n                                textCanvas,\n                                renderParams,\n                                pointIndex\n                            )\n                        ) {\n                            shieldGroup.push(tempScreenPosition.x, tempScreenPosition.y);\n                        }\n                    }\n                }\n            }\n        }\n        // Process markers (without shield groups).\n        else {\n            for (let pointIndex = 0; pointIndex < path.length; ++pointIndex) {\n                const point = path[pointIndex];\n                // Only process labels frustum-clipped labels\n                if (this.m_screenProjector.project(point, tempScreenPosition) !== undefined) {\n                    this.addPointLabel(\n                        labelState,\n                        point,\n                        tempScreenPosition,\n                        poiRenderer,\n                        textCanvas,\n                        renderParams,\n                        pointIndex\n                    );\n                }\n            }\n        }\n    }\n\n    private addPathLabel(\n        labelState: TextElementState,\n        screenPoints: THREE.Vector2[],\n        textCanvas: TextCanvas,\n        renderParams: RenderParams\n    ): boolean {\n        // TODO: HARP-7649. Add fade out transitions for path labels.\n        const textMaxDistance = getMaxViewDistance(\n            this.m_viewState,\n            this.m_options.maxDistanceRatioForTextLabels!\n        );\n        const pathLabel = labelState.element;\n\n        // Limit the text rendering of path labels in the far distance.\n        if (\n            !(\n                pathLabel.ignoreDistance === true ||\n                labelState.viewDistance === undefined ||\n                labelState.viewDistance < textMaxDistance\n            )\n        ) {\n            if (placementStats) {\n                ++placementStats.tooFar;\n            }\n            labelState.textRenderState!.reset();\n            return false;\n        }\n\n        if (\n            pathLabel.fadeFar !== undefined &&\n            (pathLabel.fadeFar <= 0.0 ||\n                pathLabel.fadeFar * this.m_viewState.maxVisibilityDist < labelState.renderDistance)\n        ) {\n            // The label is farther away than fadeFar value, which means it is totally\n            // transparent\n            if (placementStats) {\n                ++placementStats.tooFar;\n            }\n            labelState.textRenderState!.reset();\n            return false;\n        }\n\n        // Get the screen points that define the label's segments and create a path with\n        // them.\n        let textPath = new THREE.Path();\n        tempScreenPosition.copy(screenPoints[0]);\n        for (let i = 0; i < screenPoints.length - 1; ++i) {\n            textPath.add(new SimpleLineCurve(screenPoints[i], screenPoints[i + 1]));\n        }\n        // Flip the path if the label is gonna be rendered downwards.\n        if (textPath.getPoint(0.5).x - textPath.getPoint(0.51).x > 0) {\n            tempScreenPosition.copy(screenPoints[screenPoints.length - 1]);\n            textPath = new THREE.Path();\n            for (let i = screenPoints.length - 1; i > 0; --i) {\n                textPath.add(new SimpleLineCurve(screenPoints[i], screenPoints[i - 1]));\n            }\n        }\n\n        // Update the real rendering distance to have smooth fading and scaling\n        labelState.setViewDistance(computeViewDistance(this.m_viewState.worldCenter, pathLabel));\n        const textRenderDistance = -labelState.renderDistance;\n\n        // Scale the text depending on the label's distance to the camera.\n        const distanceScaleFactor = this.getDistanceScalingFactor(\n            pathLabel,\n            textRenderDistance,\n            this.m_viewState.lookAtDistance\n        );\n        const prevSize = textCanvas.textRenderStyle.fontSize.size;\n        textCanvas.textRenderStyle.fontSize.size *= distanceScaleFactor;\n\n        if (\n            placePathLabel(\n                labelState,\n                textPath,\n                tempScreenPosition,\n                textCanvas,\n                this.m_screenCollisions\n            ) !== PlacementResult.Ok\n        ) {\n            textCanvas.textRenderStyle.fontSize.size = prevSize;\n            if (placementStats) {\n                ++placementStats.numNotVisible;\n            }\n            labelState.textRenderState!.reset();\n            return false;\n        }\n\n        labelState.textRenderState!.startFadeIn(renderParams.time);\n\n        let opacity = pathLabel.renderStyle!.opacity;\n\n        if (labelState.textRenderState!.isFading()) {\n            opacity *= labelState.textRenderState!.opacity;\n            renderParams.fadeAnimationRunning = true;\n        }\n\n        if (labelState.textRenderState!.opacity === 0) {\n            textCanvas.textRenderStyle.fontSize.size = prevSize;\n            return false;\n        }\n\n        const prevOpacity = textCanvas.textRenderStyle.opacity;\n        const prevBgOpacity = textCanvas.textRenderStyle.backgroundOpacity;\n        const distanceFadeFactor = this.getDistanceFadingFactor(\n            pathLabel,\n            labelState,\n            this.m_viewState.maxVisibilityDist\n        );\n        textCanvas.textRenderStyle.opacity = opacity * distanceFadeFactor;\n        textCanvas.textRenderStyle.backgroundOpacity =\n            textCanvas.textRenderStyle.opacity * pathLabel.renderStyle!.backgroundOpacity;\n\n        tempPosition.z = labelState.renderDistance;\n\n        addTextToCanvas(pathLabel, textCanvas, tempPosition, textPath);\n        renderParams.numRenderedTextElements++;\n\n        // Restore previous style values for text elements using the same style.\n        textCanvas.textRenderStyle.fontSize.size = prevSize;\n        textCanvas.textRenderStyle.opacity = prevOpacity;\n        textCanvas.textRenderStyle.backgroundOpacity = prevBgOpacity;\n        return true;\n    }\n\n    private checkIfOverloaded(dataSourceTileList: DataSourceTileList[]): boolean {\n        // Count the number of TextElements in the scene to see if we have to switch to\n        // \"overloadMode\".\n        let numTextElementsInScene = 0;\n\n        dataSourceTileList.forEach(renderListEntry => {\n            for (const tile of renderListEntry.renderedTiles.values()) {\n                numTextElementsInScene += tile.textElementGroups.count();\n            }\n        });\n        const newOverloaded = numTextElementsInScene > OVERLOAD_LABEL_LIMIT;\n\n        if (newOverloaded && !this.m_overloaded) {\n            logger.debug(\"Overloaded Mode enabled.\");\n        }\n        this.m_overloaded = newOverloaded;\n        return this.m_overloaded;\n    }\n}\n","/*\n * Copyright (C) 2017-2020 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\nimport { DecodedTile, GeometryType, TextPathGeometry } from \"@here/harp-datasource-protocol\";\nimport { GeoBox, OrientedBox3, Projection, TileKey } from \"@here/harp-geoutils\";\nimport { assert, CachedResource, LoggerManager } from \"@here/harp-utils\";\nimport * as THREE from \"three\";\nimport { AnimatedExtrusionTileHandler } from \"./AnimatedExtrusionHandler\";\nimport { CopyrightInfo } from \"./copyrights/CopyrightInfo\";\nimport { DataSource } from \"./DataSource\";\nimport { ElevationRange } from \"./ElevationRangeSource\";\nimport { LodMesh } from \"./geometry/LodMesh\";\nimport { TileGeometryLoader } from \"./geometry/TileGeometryLoader\";\nimport { MapView } from \"./MapView\";\nimport { PathBlockingElement } from \"./PathBlockingElement\";\nimport { PerformanceStatistics } from \"./Statistics\";\nimport { TextElement } from \"./text/TextElement\";\nimport { TextElementGroup } from \"./text/TextElementGroup\";\nimport { TextElementGroupPriorityList } from \"./text/TextElementGroupPriorityList\";\nimport { TileTextStyleCache } from \"./text/TileTextStyleCache\";\nimport { MapViewUtils } from \"./Utils\";\n\nconst logger = LoggerManager.instance.create(\"Tile\");\n\nexport type TileObject = THREE.Object3D & {\n    /**\n     * Distance of this object from the [[Tile]]'s center.\n     */\n    displacement?: THREE.Vector3;\n\n    /**\n     * This stores the THREE.Object3D renderOrder property, we need to back it up because we need to\n     * reduce it if the tile is used as fall back. When it is used normally, the renderOrder needs\n     * to be reset.\n     * @hidden\n     */\n    _backupRenderOrder?: number;\n};\n\ninterface DisposableObject {\n    geometry?: THREE.BufferGeometry | THREE.Geometry;\n    geometries?: Array<THREE.BufferGeometry | THREE.Geometry>;\n    material?: THREE.Material[] | THREE.Material;\n}\n\n/**\n * An interface for optional feature data that is saved in a `THREE.Object3D`'s `userData`\n * property.\n */\nexport interface TileFeatureData {\n    /**\n     * The original type of geometry.\n     */\n    geometryType?: GeometryType;\n\n    /**\n     * An optional array of sorted indices into geometry where the feature starts. The lists of IDs\n     * and starting indices (starts) must have the same size.\n     * Feature i starts at starts[i] and ends at starts[i+1]-1, except for the last feature, which\n     * ends at the last index in the object's geometry.\n     */\n    starts?: number[];\n\n    /**\n     * An optional object containing properties defined by the developer. It has the same size as\n     * the list of IDs and the starting indices (starts).\n     */\n    objInfos?: Array<{} | undefined>;\n}\n\n/**\n * Minimum estimated size of a JS object.\n */\nconst MINIMUM_SMALL_OBJECT_SIZE_ESTIMATION = 16;\nconst MINIMUM_OBJECT_SIZE_ESTIMATION = 100;\n\n/**\n * Compute the memory footprint of `TileFeatureData`.\n */\nexport function getFeatureDataSize(featureData: TileFeatureData): number {\n    let numBytes = MINIMUM_OBJECT_SIZE_ESTIMATION;\n\n    if (featureData.starts !== undefined) {\n        numBytes += featureData.starts.length * 8;\n    }\n    if (featureData.objInfos !== undefined) {\n        // 16 (estimated) bytes per objInfos\n        numBytes += featureData.objInfos.length * MINIMUM_SMALL_OBJECT_SIZE_ESTIMATION;\n    }\n\n    return numBytes;\n}\n\n/**\n * Missing Typedoc\n */\nexport enum TileLoaderState {\n    Initialized,\n    Loading,\n    Loaded,\n    Decoding,\n    Ready,\n    Canceled,\n    Failed\n}\n\nexport interface ITileLoader {\n    state: TileLoaderState;\n    payload?: ArrayBufferLike | {};\n    decodedTile?: DecodedTile;\n\n    isFinished: boolean;\n\n    loadAndDecode(): Promise<TileLoaderState>;\n    waitSettled(): Promise<TileLoaderState>;\n\n    updatePriority(area: number): void;\n\n    cancel(): void;\n}\n\n/**\n * An object that contains information about resources used by a tile.\n */\nexport interface TileResourceUsage {\n    /**\n     * The estimated memory usage, in bytes.\n     */\n    estimatedMemoryUsage: number;\n    /**\n     * The amount of vertices used by a tile.\n     */\n    numVertices: number;\n    /**\n     * The amount of colors used by a tile.\n     */\n    numColors: number;\n    /**\n     * The amount of objects used by a tile.\n     */\n    numObjects: number;\n    /**\n     * The amount of geometries used by a tile.\n     */\n    numGeometries: number;\n    /**\n     * The amount of materials used by a tile.\n     */\n    numMaterials: number;\n}\n\n/**\n * Simple information about resource usage by the [[Tile]]. Heap and GPU information are\n * estimations.\n */\nexport interface TileResourceInfo {\n    /**\n     * Estimated number of bytes used on the heap.\n     */\n    heapSize: number;\n    /**\n     * Estimated number of bytes used on the GPU.\n     */\n    gpuSize: number;\n    /**\n     * Number of [[THREE.Object3D]] in this tile.\n     */\n    num3dObjects: number;\n    /**\n     * Number of [[TextElement]]s in this tile.\n     */\n    numTextElements: number;\n    /**\n     * @deprecated This counter has been merged with numTextElements.\n     * Number of user [[TextElement]]s in this tile.\n     */\n    numUserTextElements: number;\n}\n\nexport interface TextElementIndex {\n    groupIndex: number;\n    elementIndex: number;\n}\n\n/**\n * The class that holds the tiled data for a [[DataSource]].\n */\nexport class Tile implements CachedResource {\n    /**\n     * A list of the THREE.js objects stored in this `Tile`.\n     */\n    readonly objects: TileObject[] = [];\n\n    /**\n     * The optional list of HERE TileKeys of tiles with geometries that cross\n     * the boundaries of this `Tile`.\n     */\n    readonly dependencies: string[] = new Array<string>();\n\n    /**\n     * The bounding box of this `Tile` in geocoordinates.\n     */\n    readonly geoBox: GeoBox;\n\n    /**\n     * Copyright information of this `Tile`'s data.\n     */\n    copyrightInfo?: CopyrightInfo[];\n\n    /**\n     * Keeping some stats for the individual [[Tile]]s to analyze caching behavior.\n     *\n     * The frame the [[Tile]] was last requested. This is required to know when the given [[Tile]]\n     * can be removed from the cache.\n     */\n    frameNumLastRequested: number = -1;\n\n    /**\n     * The frame the `Tile` was first visible.\n     */\n    frameNumVisible: number = -1;\n\n    /**\n     * The last frame this `Tile` has been rendered (or was in the visible set). Used to determine\n     * visibility of `Tile` at the end of a frame, if the number is the current frame number, it is\n     * visible.\n     */\n    frameNumLastVisible: number = -1;\n\n    /**\n     * After removing from cache, this is the number of frames the `Tile` was visible.\n     */\n    numFramesVisible: number = 0;\n\n    /**\n     * Version stamp of the visibility set in the [[TileManager]]. If the counter is different, the\n     * visibility of the Tile's objects has to be calculated. Optimization to reduce overhead of\n     * computing visibility.\n     */\n    visibilityCounter: number = -1;\n\n    /**\n     * @hidden\n     *\n     * Used to tell if the Tile is used temporarily as a fallback tile.\n     *\n     * levelOffset is in in the range [-quadTreeSearchDistanceUp,\n     * quadTreeSearchDistanceDown], where these values come from the\n     * [[VisibleTileSetOptions]]\n     */\n    levelOffset: number = 0;\n\n    /**\n     * If the tile should not be rendered, this is used typically when the tile in question\n     * is completely covered by another tile and therefore can be skipped without any visual\n     * impact. Setting this value directly affects the [[willRender]] method, unless\n     * overriden by deriving classes.\n     */\n    skipRendering = false;\n\n    /**\n     * @hidden\n     *\n     * Prepared text geometries optimized for display.\n     */\n    protected preparedTextPaths: TextPathGeometry[] | undefined;\n\n    /**\n     * The bounding box of this `Tile` in world coordinates.\n     */\n    private readonly m_boundingBox = new OrientedBox3();\n\n    private m_disposed: boolean = false;\n    private m_localTangentSpace = false;\n\n    private m_forceHasGeometry: boolean | undefined = undefined;\n\n    private m_tileLoader?: ITileLoader;\n    private m_decodedTile?: DecodedTile;\n    private m_tileGeometryLoader?: TileGeometryLoader;\n\n    // Used for [[TextElement]]s that are stored in the data, and that are placed explicitly,\n    // fading in and out.\n    private m_textElementGroups = new TextElementGroupPriorityList();\n\n    // Blocks other labels from showing.\n    private readonly m_pathBlockingElements: PathBlockingElement[] = [];\n\n    // If `true`, the text content of the [[Tile]] changed after the last time it was rendered.\n    // It's `Undefined` when no text content has been added yet.\n    private m_textElementsChanged: boolean | undefined;\n\n    // Center of the tile's unelevated bounding box world coordinates.\n    private readonly m_worldCenter = new THREE.Vector3();\n    private m_visibleArea: number = 0;\n    // Tile elevation range in meters\n    private readonly m_elevationRange: ElevationRange = { minElevation: 0, maxElevation: 0 };\n    // Maximum height of geometry on this tile above ground level.\n    private m_maxGeometryHeight?: number;\n\n    private m_resourceInfo: TileResourceInfo | undefined;\n\n    // List of owned textures for disposal\n    private m_ownedTextures: WeakSet<THREE.Texture> = new WeakSet();\n\n    private m_animatedExtrusionTileHandler: AnimatedExtrusionTileHandler | undefined;\n\n    private m_textStyleCache: TileTextStyleCache;\n    /**\n     * Creates a new [[Tile]].\n     *\n     * @param dataSource The [[DataSource]] that created this [[Tile]].\n     * @param tileKey The unique identifier for this [[Tile]]. Currently only up to level 24 is\n     * supported, because of the use of the upper bits for the offset.\n     * @param offset The optional offset, this is an integer which represents what multiple of 360\n     * degrees to shift, only useful for flat projections, hence optional.\n     * @param localTangentSpace Whether the tile geometry is in local tangent space or not.\n     */\n    constructor(\n        readonly dataSource: DataSource,\n        readonly tileKey: TileKey,\n        public offset: number = 0,\n        localTangentSpace?: boolean\n    ) {\n        this.geoBox = this.dataSource.getTilingScheme().getGeoBox(this.tileKey);\n        this.updateBoundingBox();\n        this.m_localTangentSpace = localTangentSpace !== undefined ? localTangentSpace : false;\n        this.m_textStyleCache = new TileTextStyleCache(this);\n    }\n\n    /**\n     * The visibility status of the [[Tile]]. It is actually visible or planned to become visible.\n     */\n    get isVisible(): boolean {\n        // Tiles are not evaluated as invisible until the second frame they aren't requested.\n        // This happens in order to prevent that, during [[VisibleTileSet]] visibility evaluation,\n        // visible tiles that haven't yet been evaluated for the current frame are preemptively\n        // removed from [[DataSourceCache]].\n        return this.frameNumLastRequested >= this.dataSource.mapView.frameNumber - 1;\n    }\n\n    set isVisible(visible: boolean) {\n        this.frameNumLastRequested = visible ? this.dataSource.mapView.frameNumber : -1;\n    }\n\n    /**\n     * The [[Projection]] currently used by the [[MapView]].\n     */\n    get projection(): Projection {\n        return this.dataSource.projection;\n    }\n\n    /**\n     * The [[MapView]] this `Tile` belongs to.\n     */\n    get mapView(): MapView {\n        return this.dataSource.mapView;\n    }\n\n    /**\n     * Whether the data of this tile is in local tangent space or not.\n     * If the data is in local tangent space (i.e. up vector is (0,0,1) for high zoomlevels) then\n     * [[MapView]] will rotate the objects before rendering using the rotation matrix of the\n     * oriented [[boundingBox]].\n     */\n    get localTangentSpace(): boolean {\n        return this.m_localTangentSpace;\n    }\n\n    /*\n     * The size of this Tile in system memory.\n     */\n    get memoryUsage(): number {\n        if (this.m_resourceInfo === undefined) {\n            this.computeResourceInfo();\n        }\n        return this.m_resourceInfo!.heapSize;\n    }\n\n    /**\n     * The center of this `Tile` in world coordinates.\n     */\n    get center(): THREE.Vector3 {\n        return this.m_worldCenter;\n    }\n\n    /**\n     * Compute [[TileResourceInfo]] of this `Tile`. May be using a cached value. The method\n     * `invalidateResourceInfo` can be called beforehand to force a recalculation.\n     *\n     * @returns `TileResourceInfo` for this `Tile`.\n     */\n    getResourceInfo(): TileResourceInfo {\n        if (this.m_resourceInfo === undefined) {\n            this.computeResourceInfo();\n        }\n        return this.m_resourceInfo!;\n    }\n\n    /**\n     * Force invalidation of the cached [[TileResourceInfo]]. Useful after the `Tile` has been\n     * modified.\n     */\n    invalidateResourceInfo(): void {\n        this.m_resourceInfo = undefined;\n    }\n\n    /**\n     * Add ownership of a texture to this tile. The texture will be disposed if the `Tile` is\n     * disposed.\n     * @param texture Texture to be owned by the `Tile`\n     */\n    addOwnedTexture(texture: THREE.Texture): void {\n        this.m_ownedTextures.add(texture);\n    }\n\n    /**\n     * @internal\n     * @deprecated\n     *\n     * Gets the list of developer-defined [[TextElement]] in this `Tile`. This list is always\n     * rendered first.\n     */\n    get userTextElements(): TextElementGroup {\n        let group = this.m_textElementGroups.groups.get(TextElement.HIGHEST_PRIORITY);\n        if (group === undefined) {\n            group = new TextElementGroup(TextElement.HIGHEST_PRIORITY);\n            this.m_textElementGroups.groups.set(group.priority, group);\n        }\n        return group;\n    }\n\n    /**\n     * Adds a developer-defined [[TextElement]] to this `Tile`. The [[TextElement]] is always\n     * visible, if it's in the map's currently visible area.\n     *\n     * @deprecated use [[addTextElement]].\n     *\n     * @param textElement The Text element to add.\n     */\n    addUserTextElement(textElement: TextElement) {\n        textElement.priority = TextElement.HIGHEST_PRIORITY;\n        this.addTextElement(textElement);\n    }\n\n    /**\n     * Removes a developer-defined [[TextElement]] from this `Tile`.\n     *\n     * @deprecated use [[removeTextElement]].\n     *\n     * @param textElement A developer-defined TextElement to remove.\n     * @returns `true` if the element has been removed successfully; `false` otherwise.\n     */\n    removeUserTextElement(textElement: TextElement): boolean {\n        textElement.priority = TextElement.HIGHEST_PRIORITY;\n        return this.removeTextElement(textElement);\n    }\n\n    /**\n     * Adds a [[TextElement]] to this `Tile`, which is added to the visible set of\n     * [[TextElement]]s based on the capacity and visibility. The [[TextElement]]'s priority\n     * controls if or when it becomes visible.\n     *\n     * To ensure that a TextElement is visible, use a high value for its priority, such as\n     * `TextElement.HIGHEST_PRIORITY`. Since the number of visible TextElements is limited by the\n     * screen space, not all TextElements are visible at all times.\n     *\n     * @param textElement The TextElement to add.\n     */\n    addTextElement(textElement: TextElement) {\n        this.textElementGroups.add(textElement);\n\n        if (this.m_textElementsChanged === false) {\n            // HARP-8733: Clone all groups so that they are handled as new element groups\n            // by TextElementsRenderer and it doesn't try to reuse the same state stored\n            // for the old groups.\n            this.m_textElementGroups = this.textElementGroups.clone();\n        }\n        this.textElementsChanged = true;\n    }\n\n    /**\n     * Adds a [[PathBlockingElement]] to this `Tile`. This path has the highest priority and blocks\n     * all other labels. There maybe in future a use case to give it a priority, but as that isn't\n     * yet required, it is left to be implemented later if required.\n     * @param blockingElement Element which should block all other labels.\n     */\n    addBlockingElement(blockingElement: PathBlockingElement) {\n        this.m_pathBlockingElements.push(blockingElement);\n    }\n\n    /**\n     * Removes a [[TextElement]] from this `Tile`. For the element to be removed successfully, the\n     * priority of the [[TextElement]] has to be equal to its priority when it was added.\n     *\n     * @param textElement The TextElement to remove.\n     * @returns `true` if the TextElement has been removed successfully; `false` otherwise.\n     */\n    removeTextElement(textElement: TextElement): boolean {\n        const groups = this.textElementGroups;\n        if (!groups.remove(textElement)) {\n            return false;\n        }\n        if (this.m_textElementsChanged === false) {\n            // HARP-8733: Clone all groups so that they are handled as new element groups\n            // by TextElementsRenderer and it doesn't try to reuse the same state stored\n            // for the old groups.\n            this.m_textElementGroups = groups.clone();\n        }\n        this.textElementsChanged = true;\n        return true;\n    }\n\n    /**\n     * @internal\n     *\n     * Gets the current [[GroupedPriorityList]] which contains a list of all [[TextElement]]s to be\n     * selected and placed for rendering.\n     */\n    get textElementGroups(): TextElementGroupPriorityList {\n        return this.m_textElementGroups;\n    }\n\n    /**\n     * Gets the current modification state for the list of [[TextElement]]s in the `Tile`. If the\n     * value is `true` the TextElement is placed for rendering during the next frame.\n     */\n    get textElementsChanged(): boolean {\n        return this.m_textElementsChanged ?? false;\n    }\n\n    set textElementsChanged(changed: boolean) {\n        this.m_textElementsChanged = changed;\n    }\n\n    /**\n     * Returns true if the `Tile` has any text elements to render.\n     */\n    hasTextElements(): boolean {\n        return this.m_textElementGroups.count() > 0;\n    }\n\n    /**\n     * Get the current blocking elements.\n     */\n    get blockingElements(): PathBlockingElement[] {\n        return this.m_pathBlockingElements;\n    }\n\n    /**\n     * Called before [[MapView]] starts rendering this `Tile`.\n     *\n     * @param zoomLevel The current zoom level.\n     * @returns Returns `true` if this `Tile` should be rendered. Influenced directly by the\n     * [[skipRendering]] property unless specifically overriden in deriving classes.\n     */\n    willRender(_zoomLevel: number): boolean {\n        return !this.skipRendering;\n    }\n\n    /**\n     * Called after [[MapView]] has rendered this `Tile`.\n     */\n    didRender(): void {\n        // to be overridden by subclasses\n    }\n\n    /**\n     * Estimated visible area of tile used for sorting the priorities during loading.\n     */\n    get visibleArea(): number {\n        return this.m_visibleArea;\n    }\n\n    set visibleArea(area: number) {\n        this.m_visibleArea = area;\n        if (this.tileLoader !== undefined) {\n            this.tileLoader.updatePriority(area);\n        }\n    }\n\n    /**\n     * @internal\n     * Gets the tile's ground elevation range in meters.\n     */\n    get elevationRange(): ElevationRange {\n        return this.m_elevationRange;\n    }\n\n    /**\n     * @internal\n     * Sets the tile's ground elevation range in meters.\n     *\n     * @param elevationRange The elevation range.\n     */\n    set elevationRange(elevationRange: ElevationRange) {\n        if (\n            elevationRange.minElevation === this.m_elevationRange.minElevation &&\n            elevationRange.maxElevation === this.m_elevationRange.maxElevation &&\n            elevationRange.calculationStatus === this.m_elevationRange.calculationStatus\n        ) {\n            return;\n        }\n\n        this.m_elevationRange.minElevation = elevationRange.minElevation;\n        this.m_elevationRange.maxElevation = elevationRange.maxElevation;\n        this.m_elevationRange.calculationStatus = elevationRange.calculationStatus;\n\n        // Only elevate bounding box if tile has already been decoded and a maximum geometry height\n        // is provided by the data source.\n        if (this.m_maxGeometryHeight !== undefined) {\n            this.elevateBoundingBox();\n        }\n    }\n\n    /**\n     * Gets the decoded tile; it is removed after geometry handling.\n     */\n    get decodedTile(): DecodedTile | undefined {\n        return this.m_decodedTile;\n    }\n\n    /**\n     * Applies the decoded tile to the tile.\n     * If the geometry is empty, then the tile's forceHasGeometry flag is set.\n     * Map is updated.\n     * @param decodedTile The decoded tile to set.\n     */\n    set decodedTile(decodedTile: DecodedTile | undefined) {\n        this.m_decodedTile = decodedTile;\n        this.invalidateResourceInfo();\n\n        if (decodedTile === undefined) {\n            return;\n        }\n\n        if (decodedTile.geometries.length === 0) {\n            this.forceHasGeometry(true);\n        }\n\n        if (decodedTile.boundingBox !== undefined) {\n            // If the decoder provides a more accurate bounding box than the one we computed from\n            // the flat geo box we take it instead.\n            this.m_maxGeometryHeight = undefined;\n            this.updateBoundingBox(decodedTile.boundingBox);\n        } else {\n            // Otherwise, if an elevation range was set, elevate bounding box to match\n            // the elevated geometry.\n            this.m_maxGeometryHeight = decodedTile.maxGeometryHeight ?? 0;\n            this.elevateBoundingBox();\n        }\n\n        const stats = PerformanceStatistics.instance;\n        if (stats.enabled && decodedTile.decodeTime !== undefined) {\n            stats.currentFrame.addValue(\"decode.decodingTime\", decodedTile.decodeTime);\n            stats.currentFrame.addValue(\"decode.decodedTiles\", 1);\n        }\n\n        if (decodedTile.copyrightHolderIds !== undefined) {\n            this.copyrightInfo = decodedTile.copyrightHolderIds.map(id => ({ id }));\n        }\n\n        this.dataSource.requestUpdate();\n    }\n\n    /**\n     * Remove the decodedTile when no longer needed.\n     */\n    removeDecodedTile() {\n        this.m_decodedTile = undefined;\n        this.invalidateResourceInfo();\n    }\n\n    /**\n     * Called by the [[TileLoader]] after the `Tile` has finished loading its map data. Can be used\n     * to add content to the `Tile`. The [[DecodedTile]] should still be available.\n     */\n    loadingFinished() {\n        // To be used in subclasses.\n    }\n\n    /**\n     * Called when the default implementation of `dispose()` needs\n     * to free the geometry of a `Tile` object.\n     *\n     * @param object The object that references the geometry.\n     * @returns `true` if the geometry can be disposed.\n     */\n    // tslint:disable-next-line:no-unused-variable\n    shouldDisposeObjectGeometry(object: TileObject): boolean {\n        return true;\n    }\n\n    /**\n     * Called when the default implementation of `dispose()` needs\n     * to free a `Tile` object's material.\n     *\n     * @param object The object referencing the geometry.\n     * @returns `true` if the material can be disposed.\n     */\n    // tslint:disable-next-line:no-unused-variable\n    shouldDisposeObjectMaterial(object: TileObject): boolean {\n        return true;\n    }\n\n    /**\n     * Called when the default implementation of `dispose()` needs\n     * to free a Texture that is part of a `Tile` object's material.\n     *\n     * @param texture The texture about to be disposed.\n     * @returns `true` if the texture can be disposed.\n     */\n    shouldDisposeTexture(texture: THREE.Texture): boolean {\n        return this.m_ownedTextures.has(texture);\n    }\n\n    /**\n     * Returns `true` if this `Tile` has been disposed.\n     */\n    get disposed(): boolean {\n        return this.m_disposed;\n    }\n\n    /**\n     * Gets the [[TileGeometryLoader]] that manages this tile.\n     */\n    get tileGeometryLoader(): TileGeometryLoader | undefined {\n        return this.m_tileGeometryLoader;\n    }\n\n    /**\n     * Sets the [[TileGeometryLoader]] to manage this tile.\n     *\n     * @param tileGeometryLoader A [[TileGeometryLoader]] instance to manage the geometry creation\n     *      for this tile.\n     */\n    set tileGeometryLoader(tileGeometryLoader: TileGeometryLoader | undefined) {\n        this.m_tileGeometryLoader = tileGeometryLoader;\n    }\n\n    /**\n     * `True` if the basic geometry has been loaded, and the `Tile` is ready  for display.\n     */\n    get basicGeometryLoaded(): boolean {\n        return this.m_tileGeometryLoader === undefined\n            ? this.hasGeometry\n            : this.m_tileGeometryLoader.basicGeometryLoaded || this.m_tileGeometryLoader.isFinished;\n    }\n\n    /**\n     * `True` if all geometry of the `Tile` has been loaded.\n     */\n    get allGeometryLoaded(): boolean {\n        return this.m_tileGeometryLoader === undefined\n            ? this.hasGeometry\n            : this.m_tileGeometryLoader.allGeometryLoaded || this.m_tileGeometryLoader.isFinished;\n    }\n\n    /**\n     * MapView checks if this `Tile` is ready to be rendered while culling.\n     *\n     * By default, MapView checks if the [[objects]] list is not empty. However, you can override\n     * this check by manually setting this property.\n     */\n    get hasGeometry(): boolean {\n        if (this.m_forceHasGeometry === undefined) {\n            return this.objects.length !== 0;\n        } else {\n            return this.m_forceHasGeometry;\n        }\n    }\n\n    /**\n     * Overrides the default value for [[hasGeometry]] if value is not `undefined`.\n     *\n     * @param value A new value for the [[hasGeometry]] flag.\n     */\n    forceHasGeometry(value: boolean | undefined) {\n        this.m_forceHasGeometry = value;\n    }\n\n    /**\n     * Reset the visibility counter. This will force the visibility check to be rerun on all objects\n     * in this `Tile`.\n     */\n    resetVisibilityCounter(): void {\n        this.visibilityCounter = -1;\n    }\n\n    /**\n     * Gets the [[ITileLoader]] that manages this tile.\n     */\n    get tileLoader(): ITileLoader | undefined {\n        return this.m_tileLoader;\n    }\n\n    /**\n     * Sets the [[ITileLoader]] to manage this tile.\n     *\n     * @param tileLoader A [[ITileLoader]] instance to manage the loading process for this tile.\n     */\n    set tileLoader(tileLoader: ITileLoader | undefined) {\n        this.m_tileLoader = tileLoader;\n    }\n\n    /**\n     * Loads this `Tile` geometry.\n     */\n    load() {\n        const tileLoader = this.tileLoader;\n        if (tileLoader === undefined) {\n            return;\n        }\n\n        tileLoader\n            .loadAndDecode()\n            .then(tileLoaderState => {\n                assert(tileLoaderState === TileLoaderState.Ready);\n                const decodedTile = tileLoader.decodedTile;\n                this.decodedTile = decodedTile;\n            })\n            .catch(tileLoaderState => {\n                if (\n                    tileLoaderState !== TileLoaderState.Canceled &&\n                    tileLoaderState !== TileLoaderState.Failed\n                ) {\n                    logger.error(\"Unknown error\" + tileLoaderState);\n                }\n            });\n    }\n\n    /**\n     * Handler for animation of `Tile` geometries.\n     */\n    get animatedExtrusionTileHandler(): AnimatedExtrusionTileHandler | undefined {\n        return this.m_animatedExtrusionTileHandler;\n    }\n\n    set animatedExtrusionTileHandler(handler: AnimatedExtrusionTileHandler | undefined) {\n        this.m_animatedExtrusionTileHandler = handler;\n    }\n\n    /**\n     * Text style cache for this tile.\n     * @hidden\n     */\n    get textStyleCache(): TileTextStyleCache {\n        return this.m_textStyleCache;\n    }\n\n    /**\n     * Frees the rendering resources allocated by this `Tile`.\n     *\n     * The default implementation of this method frees the geometries and the materials for all the\n     * reachable objects.\n     * Textures are freed if they are owned by this `Tile` (i.e. if they where created by this\n     * `Tile`or if the ownership was explicitely set to this `Tile` by [[addOwnedTexture]]).\n     */\n    clear() {\n        const disposeMaterial = (material: THREE.Material) => {\n            Object.getOwnPropertyNames(material).forEach((property: string) => {\n                const materialProperty = (material as any)[property];\n                if (materialProperty !== undefined && materialProperty instanceof THREE.Texture) {\n                    const texture = materialProperty;\n                    if (this.shouldDisposeTexture(texture)) {\n                        texture.dispose();\n                    }\n                }\n            });\n            material.dispose();\n        };\n\n        const disposeObject = (object: TileObject & DisposableObject) => {\n            if (this.shouldDisposeObjectGeometry(object)) {\n                if (object.geometry !== undefined) {\n                    object.geometry.dispose();\n                }\n\n                if (object.geometries !== undefined) {\n                    for (const geometry of object.geometries) {\n                        geometry.dispose();\n                    }\n                }\n            }\n\n            if (object.material !== undefined && this.shouldDisposeObjectMaterial(object)) {\n                if (object.material instanceof Array) {\n                    object.material.forEach((material: THREE.Material | undefined) => {\n                        if (material !== undefined) {\n                            disposeMaterial(material);\n                        }\n                    });\n                } else {\n                    disposeMaterial(object.material);\n                }\n            }\n        };\n\n        this.objects.forEach((rootObject: TileObject & DisposableObject) => {\n            rootObject.traverse((object: TileObject & DisposableObject) => {\n                disposeObject(object);\n            });\n\n            disposeObject(rootObject);\n        });\n        this.objects.length = 0;\n\n        if (this.preparedTextPaths) {\n            this.preparedTextPaths = [];\n        }\n\n        if (this.m_animatedExtrusionTileHandler !== undefined) {\n            this.m_animatedExtrusionTileHandler.dispose();\n        }\n\n        this.m_textStyleCache.clear();\n        this.clearTextElements();\n        this.invalidateResourceInfo();\n    }\n\n    /**\n     * Removes all [[TextElement]] from the tile.\n     */\n    clearTextElements() {\n        if (!this.hasTextElements()) {\n            return;\n        }\n        this.textElementsChanged = true;\n        this.m_pathBlockingElements.splice(0);\n        this.textElementGroups.clear();\n    }\n\n    /**\n     * Disposes this `Tile`, freeing all geometries and materials for the reachable objects.\n     */\n    dispose() {\n        if (this.m_disposed) {\n            return;\n        }\n        if (this.m_tileLoader) {\n            this.m_tileLoader.cancel();\n            this.m_tileLoader = undefined;\n        }\n        if (this.m_tileGeometryLoader !== undefined) {\n            this.m_tileGeometryLoader.dispose();\n            this.m_tileGeometryLoader = undefined;\n        }\n        this.clear();\n        this.m_disposed = true;\n        // Ensure that tile is removable from tile cache.\n        this.frameNumLastRequested = 0;\n    }\n\n    /**\n     * Computes the offset in the x world coordinates corresponding to this tile, based on\n     * its [[offset]].\n     * @returns The x offset.\n     */\n    computeWorldOffsetX(): number {\n        return this.projection.worldExtent(0, 0).max.x * this.offset;\n    }\n\n    /**\n     * Update tile for current map view zoom level\n     * @param zoomLevel Zoom level of the map view\n     */\n    update(zoomLevel: number): void {\n        for (const object of this.objects) {\n            if (object instanceof LodMesh) {\n                object.setLevelOfDetail(zoomLevel - this.tileKey.level);\n            }\n        }\n    }\n\n    /**\n     * Gets the tile's bounding box.\n     */\n    get boundingBox(): OrientedBox3 {\n        return this.m_boundingBox;\n    }\n\n    /**\n     * Updates the tile's world bounding box.\n     * @param [newBoundingBox] The new bounding box to set. If undefined, the bounding box will be\n     * computed by projecting the tile's geoBox.\n     */\n    private updateBoundingBox(newBoundingBox?: OrientedBox3) {\n        if (newBoundingBox) {\n            this.m_boundingBox.copy(newBoundingBox);\n\n            // Update geo box to match the given bounding box.\n            const tmpPos = this.m_boundingBox.position.clone().add(this.m_boundingBox.extents);\n            this.geoBox.northEast.copy(this.mapView.projection.unprojectPoint(tmpPos));\n            tmpPos.copy(this.m_boundingBox.position).sub(this.m_boundingBox.extents);\n            this.geoBox.southWest.copy(this.mapView.projection.unprojectPoint(tmpPos));\n        } else {\n            this.projection.projectBox(this.geoBox, this.boundingBox);\n        }\n        this.m_worldCenter.copy(this.boundingBox.position);\n    }\n\n    private elevateBoundingBox() {\n        // Update geo/world bboxes once elevation and maximum geometry height have been set.\n        // Tile center remains unchanged.\n        assert(this.m_maxGeometryHeight !== undefined);\n\n        this.geoBox.southWest.altitude = this.m_elevationRange.minElevation;\n        this.geoBox.northEast.altitude =\n            this.m_elevationRange.maxElevation + this.m_maxGeometryHeight!;\n        this.mapView.projection.projectBox(this.geoBox, this.boundingBox);\n    }\n\n    private computeResourceInfo(): void {\n        let heapSize = 0;\n        let num3dObjects = 0;\n        let numTextElements = 0;\n\n        const aggregatedObjSize = {\n            heapSize: 0,\n            gpuSize: 0\n        };\n\n        // Keep a map of the uuids of the larger objects, like Geometries, Materials and Attributes.\n        // They should be counted only once even if they are shared.\n        const visitedObjects: Map<string, boolean> = new Map();\n\n        for (const object of this.objects) {\n            if (object.visible) {\n                num3dObjects++;\n            }\n            MapViewUtils.estimateObject3dSize(object, aggregatedObjSize, visitedObjects);\n        }\n\n        for (const group of this.textElementGroups.groups) {\n            numTextElements += group[1].elements.length;\n        }\n        // 216 was the shallow size of a single TextElement last time it has been checked, 312 bytes\n        // was the minimum retained size of a TextElement that was not being rendered. If a\n        // TextElement is actually rendered, the size may be _much_ bigger.\n        heapSize += numTextElements * 312;\n\n        if (this.m_decodedTile !== undefined && this.m_decodedTile.tileInfo !== undefined) {\n            aggregatedObjSize.heapSize += this.m_decodedTile.tileInfo.numBytes;\n        }\n\n        this.m_resourceInfo = {\n            heapSize: aggregatedObjSize.heapSize + heapSize,\n            gpuSize: aggregatedObjSize.gpuSize,\n            num3dObjects,\n            numTextElements,\n            numUserTextElements: 0\n        };\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\nimport { LoggerManager, PerformanceTimer } from \"@here/harp-utils\";\nimport * as THREE from \"three\";\n\nconst logger = LoggerManager.instance.create(\"Statistics\");\n\n/**\n * A simple ring buffer to store the last `n` values of the timer. The buffer works on\n * a First-In-First-Out (FIFO) basis.\n */\nexport class RingBuffer<T> {\n    buffer: T[];\n    size: number;\n    head: number;\n    tail: number;\n\n    /**\n     * Sets up the ring buffer.\n     *\n     * @param capacity The buffer's capacity.\n     */\n    constructor(readonly capacity: number) {\n        this.buffer = new Array(capacity);\n        this.capacity = capacity;\n        this.head = this.tail = this.size = 0;\n    }\n\n    /**\n     * Clears the contents, removes all elements.\n     */\n    clear(): void {\n        this.head = this.tail = this.size = 0;\n    }\n\n    /**\n     * Adds a single element to the ring buffer.\n     *\n     * @param data Data element.\n     */\n    enqOne(data: T): void {\n        let next = this.head + 1;\n        if (next >= this.capacity) {\n            next = 0;\n        }\n        if (this.size < this.capacity) {\n            this.size++;\n        }\n\n        this.buffer[this.head] = data;\n        this.head = next;\n\n        if (this.size === this.capacity) {\n            this.tail = this.head;\n        }\n    }\n\n    /**\n     * Adds one or more elements.\n     *\n     * @param data The elements to add.\n     */\n    enq(...data: T[]): void {\n        for (const v of data) {\n            this.enqOne(v);\n        }\n    }\n\n    /**\n     * Obtains the oldest element (FIFO). May throw an exception if a buffer underrun occurs.\n     * Before calling this method, make sure that `size > 0`.\n     */\n    deq(): T {\n        if (this.size === 0) {\n            throw new Error(\"Ringbuffer underrun\");\n        }\n\n        const data = this.buffer[this.tail];\n        let next = this.tail + 1;\n        if (next >= this.capacity) {\n            next = 0;\n        }\n        if (this.size > 0) {\n            this.size--;\n        }\n\n        this.tail = next;\n        return data;\n    }\n\n    /**\n     * Obtains the oldest element (FIFO) without removing it. Throws an exception if a buffer is\n     * empty. Before calling this method, make sure that `size > 0`.\n     */\n    get top(): T {\n        if (this.size === 0) {\n            throw new Error(\"Ringbuffer underrun\");\n        }\n\n        return this.buffer[this.tail];\n    }\n\n    /**\n     * Obtains the latest element (LIFO) without removing it. Throws an exception if a buffer is\n     * empty. Before calling this method, make sure that `size > 0`.\n     */\n    get bottom(): T {\n        if (this.size === 0) {\n            throw new Error(\"Ringbuffer underrun\");\n        }\n\n        let previous = this.head - 1;\n        if (previous < 0) {\n            previous = this.capacity - 1;\n        }\n        return this.buffer[previous];\n    }\n\n    /**\n     * Creates an iterator for the buffer.\n     */\n    iterator(): RingBuffer.Iterator<T> {\n        return new RingBuffer.Iterator<T>(this);\n    }\n\n    /**\n     * Returns a copy of the buffer, where the elements are properly sorted from oldest to newest.\n     */\n    asArray(): T[] {\n        const array = new Array<T>();\n        for (let i = 0; i < this.size; i++) {\n            array.push(this.buffer[(this.tail + i) % this.capacity]);\n        }\n        return array;\n    }\n}\n\nexport namespace RingBuffer {\n    /**\n     * A local class for RingBuffer<T>\n     */\n    export class Iterator<T> {\n        /**\n         * Creates an iterator for the ring buffer.\n         *\n         * @param m_buffer `Ringbuffer` to iterate over.\n         * @param m_index Start index.\n         */\n        constructor(private m_buffer: RingBuffer<T>, private m_index: number = 0) {}\n\n        /**\n         * Gets the iterator's current value. This function does not fail even if an overrun occurs.\n         * To detect an overrun, watch the result for [[next]].\n         */\n        get value(): T {\n            return this.m_buffer.buffer[\n                (this.m_buffer.tail + this.m_index) % this.m_buffer.capacity\n            ];\n        }\n\n        /**\n         * Advances the iterator to the next element.\n         *\n         * @returns `true` if the iterator is still valid; `false` if an overrun occurs.\n         */\n        next(): boolean {\n            this.m_index++;\n            return this.m_index < this.m_buffer.size;\n        }\n    }\n}\n\n/**\n * An interface for a Timer class, that abstracts the basic functions of a Timer. Implemented\n * by SimpleTimer, SampledTimer, and MultiStageTimer.\n */\nexport interface Timer {\n    readonly name: string;\n    readonly value?: number;\n\n    /**\n     * Resets value to be able to start again.\n     */\n    reset(): void;\n\n    /**\n     * Starts the timer. Returns the current time, based on `Performance.now()`.\n     */\n    start(): number;\n\n    /**\n     * Stops the timer. Requires that the timer has started.\n     */\n    stop(): number;\n\n    /**\n     * Samples the timer. Requires that the timer has started. This function does not modify\n     * the timer's internal state.\n     *\n     * @returns Current timer value. `-1` if statistics are disabled.\n     */\n    now(): number;\n\n    /**\n     * Sets the measurement value for the amount of time that has elapsed from start() to stop().\n     * Use this function to override the timer's duration.\n     *\n     * @param val The timer's duration.\n     */\n    setValue(val: number | undefined): void;\n}\n\n/**\n * A simple timer that stores only the latest measurement.\n */\nexport class SimpleTimer implements Timer {\n    /** `true` if timer has been started. */\n    running = false;\n\n    private m_currentValue?: number;\n\n    constructor(public statistics: Statistics, readonly name: string) {}\n\n    /**\n     * Gets the latest measurement. This function may return `undefined` if no measurement\n     * was done.\n     */\n    get value(): number | undefined {\n        return this.m_currentValue;\n    }\n\n    /**\n     * Sets the measurement value for the amount of time that has elapsed from start() to stop().\n     * Use this function to override the timer's duration.\n     *\n     * @param val The timer's duration.\n     */\n    setValue(val: number | undefined) {\n        this.m_currentValue = val;\n    }\n\n    /**\n     * Resets the value to be able to start again.\n     */\n    reset() {\n        this.m_currentValue = undefined;\n    }\n\n    /**\n     * Starts the timer. Returns the current time, based on `Performance.now()`.\n     */\n    start(): number {\n        if (!this.statistics.enabled) {\n            return -1;\n        }\n        if (this.running) {\n            throw new Error(\"Timer '\" + this.name + \"' is already running\");\n        }\n        this.running = true;\n        return (this.m_currentValue = PerformanceTimer.now());\n    }\n\n    /**\n     * Stops the timer. Requires that the timer has started.\n     */\n    stop(): number {\n        if (!this.statistics.enabled) {\n            return -1;\n        }\n        if (!this.running) {\n            throw new Error(\"Timer '\" + this.name + \"' has not been started\");\n        } else {\n            // this.currentValue is a number now!\n            const t = PerformanceTimer.now() - (this.m_currentValue || 0);\n            this.m_currentValue = t;\n            this.setValue(t);\n            this.running = false;\n            return t;\n        }\n    }\n\n    /**\n     * Samples the timer. Requires that the timer has started.\n     *\n     * @returns the current timer value; `-1` if statistics are disabled.\n     */\n    now(): number {\n        if (!this.statistics.enabled) {\n            return -1;\n        }\n        if (!this.running) {\n            throw new Error(\"Timer '\" + this.name + \"' has not been started\");\n        } else {\n            const t = PerformanceTimer.now() - (this.m_currentValue || 0);\n            return t;\n        }\n    }\n}\n\n/**\n * Simple statistics about the values in an array.\n */\nexport interface Stats {\n    /**\n     * The lowest value in the array.\n     */\n    min: number;\n\n    /**\n     * The highest value in the array.\n     */\n    max: number;\n\n    /**\n     * The average duration of all values in the array.\n     */\n    avg: number;\n\n    /**\n     * The median duration of all values in the array.\n     */\n    median: number;\n\n    /**\n     * The 75th percentile median of all values in the array.\n     */\n    median75: number;\n\n    /**\n     * The 90th percentile median of all values in the array.\n     */\n    median90: number;\n\n    /**\n     * The 95th percentile median of all values in the array.\n     */\n    median95: number;\n\n    /**\n     * The 97th percentile median of all values in the array.\n     */\n    median97: number;\n\n    /**\n     * The 99th percentile median of all values in the array.\n     */\n    median99: number;\n\n    /**\n     * The 99.9th percentile median of all values in the array.\n     */\n    median999: number;\n\n    /**\n     * The number of values in the array.\n     */\n    numSamples: number;\n}\n\n/**\n * A timer that stores the last `n` samples in a ring buffer.\n */\nexport class SampledTimer extends SimpleTimer {\n    /**\n     * The number of times the timer has reset.\n     */\n    numResets = 0;\n\n    /**\n     * Maximum samples until the statistics are reset and updated, which may destroy a median\n     * computation.\n     */\n    maxNumSamples = 1000;\n\n    /**\n     * The array of sampled values, its length cannot exceed `maxNumSamples`.\n     */\n    samples = new RingBuffer<number>(this.maxNumSamples);\n\n    /**\n     * Creates a `SampledTimer` instance. Must still be added to statistics if it should be logged!\n     *\n     * @param statistics Statistics to use for management.\n     * @param name Name of the timer. Use colons to build a hierarchy.\n     */\n    constructor(public statistics: Statistics, readonly name: string) {\n        super(statistics, name);\n    }\n\n    /**\n     * Resets the timer and clears all of its historical values.\n     * @override\n     */\n    reset() {\n        super.reset();\n        this.getStats();\n        this.samples.clear();\n        this.numResets++;\n    }\n\n    /**\n     * Add a single measurement to the sample.\n     *\n     * @param val A measurement to add.\n     * @override\n     */\n    setValue(val: number | undefined) {\n        super.setValue(val);\n\n        if (val !== undefined) {\n            this.samples.enqOne(val);\n        }\n    }\n\n    /**\n     * Updates the `min`, `max`, `avg`, and `median` values. Currently, this function is expensive,\n     * as it requires a copy of the sampled values.\n     */\n    getStats(): Stats | undefined {\n        return computeArrayStats(this.samples.asArray());\n    }\n}\n\n/**\n * Only exported for testing\n * @ignore\n *\n * Compute the [[ArrayStats]] for the passed in array of numbers.\n *\n * @param {number[]} samples Array containing sampled values. Will be modified (!) by sorting the\n *      entries.\n * @returns {(Stats | undefined)}\n */\nexport function computeArrayStats(samples: number[]): Stats | undefined {\n    if (samples.length === 0) {\n        return undefined;\n    }\n\n    samples.sort((a: number, b: number) => {\n        return a - b;\n    });\n\n    const min: number = samples[0];\n    const max: number = samples[samples.length - 1];\n    let median: number;\n    let median75: number;\n    let median90: number;\n    let median95: number;\n    let median97: number;\n    let median99: number;\n    let median999: number;\n\n    if (samples.length === 1) {\n        median75 = median90 = median95 = median97 = median99 = median999 = median = samples[0];\n    } else if (samples.length === 2) {\n        median = samples[0] * 0.5 + samples[1] * 0.5;\n        median75 = median90 = median95 = median97 = median99 = median999 = samples[1];\n    } else {\n        const mid = Math.floor(samples.length / 2);\n        median =\n            samples.length % 2 === 0 ? samples[mid - 1] * 0.5 + samples[mid] * 0.5 : samples[mid];\n\n        const mid75 = Math.round(samples.length * 0.75) - 1;\n        median75 = samples[mid75];\n        const mid90 = Math.round(samples.length * 0.9) - 1;\n        median90 = samples[mid90];\n        const mid95 = Math.round(samples.length * 0.95) - 1;\n        median95 = samples[mid95];\n        const mid97 = Math.round(samples.length * 0.97) - 1;\n        median97 = samples[mid97];\n        const mid99 = Math.round(samples.length * 0.99) - 1;\n        median99 = samples[mid99];\n        const mid999 = Math.round(samples.length * 0.999) - 1;\n        median999 = samples[mid999];\n    }\n\n    let sum = 0;\n\n    for (let i = 0, l = samples.length; i < l; i++) {\n        sum += samples[i];\n    }\n\n    const avg = sum / samples.length;\n\n    return {\n        min,\n        max,\n        avg,\n        median,\n        median75,\n        median90,\n        median95,\n        median97,\n        median99,\n        median999,\n        numSamples: samples.length\n    };\n}\n\n/**\n * Only exported for testing\n * @ignore\n *\n * Compute the averages for the passed in array of numbers.\n *\n * @param {number[]} samples Array containing sampled values.\n * @returns {(Stats | undefined)}\n */\nexport function computeArrayAverage(samples: number[]): number | undefined {\n    if (samples.length === 0) {\n        return undefined;\n    }\n\n    let sum = 0;\n\n    for (let i = 0, l = samples.length; i < l; i++) {\n        sum += samples[i];\n    }\n\n    const avg = sum / samples.length;\n\n    return avg;\n}\n\n/**\n * Measures a sequence of connected events, such as multiple processing stages in a function.\n * Each stage is identified with a timer name, that must be a valid timer in the statistics\n * object. Additionally, all timers within a `MultiStageTimer` must be unique.\n *\n * Internally, the `MultiStageTimer` manages a list of timers where at the end of each stage,\n * one timer stops and the next timer starts.\n */\nexport class MultiStageTimer {\n    private currentStage: string | undefined;\n\n    /**\n     * Defines the `MultiStageTimer` with a list of timer names that represent its stages.\n     *\n     * @param statistics The statistics object that manages the timers.\n     * @param name Name of this `MultiStageTimer`.\n     * @param stages List of timer names.\n     */\n    constructor(private statistics: Statistics, readonly name: string, public stages: string[]) {\n        if (stages.length < 1) {\n            throw new Error(\"MultiStageTimer needs stages\");\n        }\n\n        stages.forEach(stage => {\n            if (!statistics.hasTimer(stage)) {\n                throw new Error(\"Unknown timer: \" + stage);\n            }\n        });\n    }\n\n    /**\n     * Gets the timer value for the last stage. If the `MultiStageTimer` did not finish its\n     * last stage, the value is `undefined`.\n     */\n    get value(): number | undefined {\n        return this.statistics.getTimer(this.stages[this.stages.length - 1]).value;\n    }\n\n    /**\n     * Resets the timers across all stages.\n     */\n    reset(): void {\n        if (!this.statistics.enabled) {\n            return;\n        }\n        this.stages.forEach(stage => {\n            this.statistics.getTimer(stage).reset();\n        });\n    }\n\n    /**\n     * Starts the `MultiStageTimer` at its first stage.\n     */\n    start(): number {\n        this.stage = this.stages[0];\n\n        return this.statistics.getTimer(this.stages[0]).value || -1;\n    }\n\n    /**\n     * Stops the `MultiStageTimer`. Returns the measurement of the last stage, which may be\n     * `undefined` if not all stages started.\n     */\n    stop(): number {\n        this.stage = undefined;\n        return this.value !== undefined ? this.value : -1;\n    }\n\n    /**\n     * Gets the current stage.\n     */\n    get stage(): string | undefined {\n        return this.currentStage;\n    }\n\n    /**\n     * Sets the current stage. If a new stage is provided, the current timer (if available) is\n     * stopped, and the next timer is started. If the timer in the next stage is `undefined`,\n     * this is equivalent to calling `stop` on the `MultiStageTimer`.\n     *\n     * @param stage The next stage to start.\n     */\n    set stage(stage: string | undefined) {\n        if (this.currentStage === stage) {\n            return;\n        }\n\n        if (this.statistics.enabled && this.currentStage !== undefined) {\n            this.statistics.getTimer(this.currentStage).stop();\n        }\n\n        this.currentStage = stage;\n\n        if (this.statistics.enabled && this.currentStage !== undefined) {\n            this.statistics.getTimer(this.currentStage).start();\n        }\n    }\n}\n\n/**\n * Manages a set of timers. The main objective of `Statistics` is to log these timers. You can\n * disable statistics to minimize their impact on performance.\n */\nexport class Statistics {\n    private timers: Map<string, Timer>;\n\n    private nullTimer: Timer;\n\n    /**\n     * Sets up a group of timers.\n     *\n     * @param name The statistics name, for logging purposes.\n     * @param enabled If `false`, the timers do not measure the performance.\n     */\n    constructor(public name?: string, public enabled = false) {\n        this.timers = new Map<string, Timer>();\n        this.nullTimer = new SimpleTimer(this, \"<null>\");\n    }\n\n    /**\n     * Adds a timer, based on the name specified.\n     *\n     * @param name The timer's name; must be unique.\n     */\n    createTimer(name: string, keepSamples = true): Timer {\n        const timer = keepSamples ? new SampledTimer(this, name) : new SimpleTimer(this, name);\n\n        return this.addTimer(timer);\n    }\n\n    /**\n     * Adds the timer specified.\n     *\n     * @param timer The timer's name, which must be unique within this statistics object.\n     */\n    addTimer(timer: Timer): Timer {\n        if (this.timers.get(timer.name) !== undefined) {\n            throw new Error(\"Duplicate timer name: '\" + timer.name + \"'\");\n        }\n\n        this.timers.set(timer.name, timer);\n\n        return timer;\n    }\n\n    /**\n     * Gets a timer by name.\n     *\n     * @param name The timer's name.\n     */\n    getTimer(name: string): Timer {\n        if (!this.enabled) {\n            return this.nullTimer;\n        }\n\n        const t = this.timers.get(name);\n        return t === undefined ? this.nullTimer : t;\n    }\n\n    /**\n     * Checks if a timer with the specified name already exists.\n     *\n     * @param name The timer's name.\n     * @returns `true` if a timer with `name` already exists; `false` otherwise.\n     */\n    hasTimer(name: string): boolean {\n        const t = this.timers.get(name);\n        return t !== undefined;\n    }\n\n    /**\n     * Resets all timers.\n     */\n    reset() {\n        this.timers.forEach((timer: Timer) => {\n            timer.reset();\n        });\n    }\n\n    /**\n     * Prints all values to the console.\n     *\n     * @param header Optional header line.\n     * @param footer Optional footer line.\n     */\n    log(header?: string, footer?: string) {\n        if (header !== undefined || this.name !== undefined) {\n            logger.log(header !== undefined ? header : this.name);\n        }\n\n        let maxNameLength = 0;\n\n        this.timers.forEach((timer: Timer) => {\n            maxNameLength = Math.max(maxNameLength, timer.name.length);\n        });\n\n        // simple printing function for number limits the number of decimal points.\n        const print = (v: number | undefined) => {\n            return v !== undefined ? v.toFixed(5) : \"?\";\n        };\n\n        this.timers.forEach((timer: Timer) => {\n            let s = timer.name + \": \" + \" \".repeat(maxNameLength - timer.name.length);\n            s += print(timer.value);\n\n            // sampled timers also update their stats and log them\n            if (timer instanceof SampledTimer) {\n                const simpleStats = timer.getStats();\n                if (simpleStats !== undefined) {\n                    s +=\n                        `  [ min=${print(simpleStats.min)}, max=${print(simpleStats.max)}, ` +\n                        `avg=${print(simpleStats.avg)}, med=${print(simpleStats.median)}, ` +\n                        `med95=${print(simpleStats.median95)}, med99=${print(\n                            simpleStats.median99\n                        )}, ` +\n                        `N=${print(simpleStats.numSamples)} ]`;\n                }\n            }\n            logger.log(s);\n        });\n\n        if (footer !== undefined) {\n            logger.log(footer);\n        }\n    }\n}\n\n/**\n * Class containing all counters, timers and events of the current frame.\n */\nexport class FrameStats {\n    readonly entries: Map<string, number> = new Map();\n    messages?: string[] = undefined;\n\n    /**\n     * Retrieve the value of the performance number.\n     *\n     * @param name Name of the performance number.\n     * @returns The value of the performance number or `undefined` if it has not been declared by\n     *      `setValue` before.\n     */\n    getValue(name: string): number | undefined {\n        return this.entries.get(name);\n    }\n\n    /**\n     * Set the value of the performance number.\n     *\n     * @param name Name of the performance number.\n     * @param name New value of the performance number.\n     */\n    setValue(name: string, value: number) {\n        this.entries.set(name, value);\n    }\n\n    /**\n     * Add a value to the current value of the performance number. If the performance is not known,\n     * it will be initialized with `value`.\n     *\n     * @param name Name of the performance number.\n     * @param name Value to be added to the performance number.\n     */\n    addValue(name: string, value: number) {\n        const oldValue = this.entries.get(name);\n        this.entries.set(name, value + (oldValue === undefined ? 0 : oldValue));\n    }\n\n    /**\n     * Add a text message to the frame, like \"Font XYZ has been loaded\"\n     *\n     * @param message The message to add.\n     */\n    addMessage(message: string) {\n        if (this.messages === undefined) {\n            this.messages = [];\n        }\n        this.messages.push(message);\n    }\n\n    /**\n     * Reset all known performance values to `0` and the messages to `undefined`.\n     */\n    reset() {\n        this.entries.forEach((value: number, name: string) => {\n            this.entries.set(name, 0);\n        });\n\n        this.messages = undefined;\n    }\n}\n\n/**\n * @ignore\n * Only exported for testing.\n *\n * Instead of passing around an array of objects, we store the frame statistics as an object of\n * arrays. This allows convenient computations from [[RingBuffer]],\n */\nexport class FrameStatsArray {\n    readonly frameEntries: Map<string, RingBuffer<number>> = new Map();\n    readonly messages: RingBuffer<string[] | undefined>;\n\n    constructor(readonly capacity: number = 0) {\n        this.messages = new RingBuffer<string[] | undefined>(capacity);\n    }\n\n    get length(): number {\n        return this.messages.size;\n    }\n\n    reset() {\n        this.frameEntries.forEach((buffer: RingBuffer<number>, name: string) => {\n            buffer.clear();\n        });\n        this.messages.clear();\n    }\n\n    addFrame(frameStats: FrameStats) {\n        const currentSize = this.length;\n        const frameEntries = this.frameEntries;\n\n        frameStats.entries.forEach((value: number, name: string) => {\n            let buffer = frameEntries.get(name);\n\n            if (buffer === undefined) {\n                // If there is a buffer that has not been known before, add it to the known buffers,\n                // fill it up with with 0 to the size of all the other buffers to make them of equal\n                // size to make PerfViz happy.\n                buffer = new RingBuffer<number>(this.capacity);\n                for (let i = 0; i < currentSize; i++) {\n                    buffer.enqOne(0);\n                }\n                this.frameEntries.set(name, buffer);\n            }\n            buffer.enqOne(value);\n        });\n\n        this.messages.enq(frameStats.messages);\n    }\n\n    /**\n     * Prints all values to the console.\n     */\n    log() {\n        let maxNameLength = 0;\n        this.frameEntries.forEach((buffer: RingBuffer<number>, name: string) => {\n            maxNameLength = Math.max(maxNameLength, name.length);\n        });\n\n        // simple printing function for number limits the number of decimal points.\n        const print = (v: number | undefined) => {\n            return v !== undefined ? v.toFixed(5) : \"?\";\n        };\n\n        this.frameEntries.forEach((buffer: RingBuffer<number>, name: string) => {\n            let s = name + \": \" + \" \".repeat(maxNameLength - name.length);\n\n            const simpleStats = computeArrayStats(buffer.asArray());\n            if (simpleStats !== undefined) {\n                s +=\n                    `  [ min=${print(simpleStats.min)}, max=${print(simpleStats.max)}, ` +\n                    `avg=${print(simpleStats.avg)}, med=${print(simpleStats.median)}, ` +\n                    `med95=${print(simpleStats.median95)}, med99=${print(simpleStats.median99)}, ` +\n                    `N=${print(simpleStats.numSamples)} ]`;\n            }\n            logger.log(s);\n        });\n    }\n}\n\n/**\n * Chrome's MemoryInfo interface.\n */\ninterface ChromeMemoryInfo {\n    totalJSHeapSize: number;\n    usedJSHeapSize: number;\n    jsHeapSizeLimit: number;\n}\n\nexport interface SimpleFrameStatistics {\n    configs: Map<string, string>;\n    appResults: Map<string, number>;\n    frames: Map<string, number | number[]>;\n    messages: Array<string[] | undefined>;\n    frameStats?: Map<string, Stats | undefined>;\n    zoomLevelLabels?: string[];\n    zoomLevelData?: Map<string, number | number[]>;\n}\n\n/**\n * Performance measurement central. Maintains the current [[FrameStats]], which holds all individual\n * performance numbers.\n *\n * Implemented as an instance for easy access.\n */\nexport class PerformanceStatistics {\n    /**\n     * Returns `true` when the maximum number of storable frames is reached.\n     *\n     * @readonly\n     * @type {boolean}\n     * @memberof PerformanceStatistics\n     */\n    get isFull(): boolean {\n        return this.m_frameEvents.length >= this.maxNumFrames;\n    }\n    /**\n     * Global instance to the instance. The current instance can be overridden by creating a new\n     * `PerformanceStatistics`.\n     */\n    static get instance(): PerformanceStatistics {\n        if (PerformanceStatistics.m_instance === undefined) {\n            PerformanceStatistics.m_instance = new PerformanceStatistics(false, 0);\n        }\n        return PerformanceStatistics.m_instance;\n    }\n\n    private static m_instance?: PerformanceStatistics = undefined;\n\n    /**\n     * Current frame statistics. Contains all values for the current frame. Will be cleared when\n     * [[PerformanceStatistics#storeFrameInfo]] is called.\n     *\n     * @type {FrameStats}\n     * @memberof PerformanceStatistics\n     */\n    readonly currentFrame: FrameStats = new FrameStats();\n\n    /**\n     * @ignore\n     * Only exported for testing.\n     *\n     * Return the array of frame events.\n     */\n    get frameEvents(): FrameStatsArray {\n        return this.m_frameEvents;\n    }\n\n    /**\n     * Additional results stored for the current application run, not per frame. Only the last value\n     * is stored.\n     *\n     * @type {(Map<string, number>)}\n     */\n    readonly appResults: Map<string, number> = new Map();\n\n    /**\n     * Additional configuration values stored for the current application run, not per frame. Only\n     * the last value is stored.\n     *\n     * @type {(Map<string, string>)}\n     * @memberof PerformanceStatistics\n     */\n    readonly configs: Map<string, string> = new Map();\n\n    // Current array of frame events.\n    private m_frameEvents: FrameStatsArray;\n\n    /**\n     * Creates an instance of PerformanceStatistics. Overrides the current `instance`.\n     *\n     * @param {boolean} [enabled=true] If `false` the performance values will not be stored.\n     * @param {number} [maxNumFrames=1000] The maximum number of frames that are to be stored.\n     * @memberof PerformanceStatistics\n     */\n    constructor(public enabled = true, public maxNumFrames = 1000) {\n        PerformanceStatistics.m_instance = this;\n        this.m_frameEvents = new FrameStatsArray(maxNumFrames);\n    }\n\n    /**\n     * Clears all settings, all stored frame events as well as the current frame values.\n     *\n     * @memberof PerformanceStatistics\n     */\n    clear() {\n        this.clearFrames();\n        this.configs.clear();\n        this.appResults.clear();\n    }\n\n    /**\n     * Clears only all stored frame events as well as the current frame values.\n     *\n     * @memberof PerformanceStatistics\n     */\n    clearFrames() {\n        this.m_frameEvents.reset();\n        this.currentFrame.reset();\n    }\n\n    /**\n     * Add the render state information from [[THREE.WebGLInfo]] to the current frame.\n     * @param {THREE.WebGLInfo} webGlInfo\n     */\n    addWebGLInfo(webGlInfo: THREE.WebGLInfo) {\n        if (webGlInfo.render !== undefined) {\n            this.currentFrame.setValue(\n                \"gl.numCalls\",\n                webGlInfo.render.calls === null ? 0 : webGlInfo.render.calls\n            );\n            this.currentFrame.setValue(\n                \"gl.numPoints\",\n                webGlInfo.render.points === null ? 0 : webGlInfo.render.points\n            );\n            this.currentFrame.setValue(\n                \"gl.numLines\",\n                webGlInfo.render.lines === null ? 0 : webGlInfo.render.lines\n            );\n            this.currentFrame.setValue(\n                \"gl.numTriangles\",\n                webGlInfo.render.triangles === null ? 0 : webGlInfo.render.triangles\n            );\n        }\n        if (webGlInfo.memory !== undefined) {\n            this.currentFrame.setValue(\n                \"gl.numGeometries\",\n                webGlInfo.memory.geometries === null ? 0 : webGlInfo.memory.geometries\n            );\n            this.currentFrame.setValue(\n                \"gl.numTextures\",\n                webGlInfo.memory.textures === null ? 0 : webGlInfo.memory.textures\n            );\n        }\n        if (webGlInfo.programs !== undefined) {\n            this.currentFrame.setValue(\n                \"gl.numPrograms\",\n                webGlInfo.programs === null ? 0 : webGlInfo.programs.length\n            );\n        }\n    }\n\n    /**\n     * Add memory statistics to the current frame if available.\n     * @note Currently only supported on Chrome\n     */\n    addMemoryInfo() {\n        if (window !== undefined && window.performance !== undefined) {\n            const memory = (window.performance as any).memory as ChromeMemoryInfo;\n            if (memory !== undefined) {\n                this.currentFrame.setValue(\"memory.totalJSHeapSize\", memory.totalJSHeapSize);\n                this.currentFrame.setValue(\"memory.usedJSHeapSize\", memory.usedJSHeapSize);\n                this.currentFrame.setValue(\"memory.jsHeapSizeLimit\", memory.jsHeapSizeLimit);\n            }\n        }\n    }\n\n    /**\n     * Stores the current frame events into the array of events and clears all values.\n     *\n     * @returns {boolean} Returns `false` if the maximum number of storable frames has been reached.\n     * @memberof PerformanceStatistics\n     */\n    storeAndClearFrameInfo(): boolean {\n        if (this.m_frameEvents.length >= this.maxNumFrames) {\n            return false;\n        }\n\n        this.m_frameEvents.addFrame(this.currentFrame);\n\n        this.currentFrame.reset();\n        return true;\n    }\n\n    /**\n     * Logs all values to the logger.\n     *\n     * @param header Optional header line.\n     * @param footer Optional footer line.\n     */\n    log(header?: string, footer?: string) {\n        logger.log(header !== undefined ? header : \"PerformanceStatistics\");\n\n        const appResults = this.appResults;\n        appResults.forEach((value: number, name: string) => {\n            logger.log(name, value);\n        });\n        const configs = this.configs;\n        configs.forEach((value: string, name: string) => {\n            logger.log(name, value);\n        });\n        this.m_frameEvents.log();\n\n        if (footer !== undefined) {\n            logger.log(footer);\n        }\n    }\n\n    /**\n     * Convert to a plain object that can be serialized. Required to copy the test results over to\n     * nightwatch.\n     */\n    getAsPlainObject(onlyLastFrame: boolean = false): any {\n        const appResults: any = {};\n        const configs: any = {};\n        const frames: any = {};\n        const plainObject: any = {\n            configs,\n            appResults,\n            frames\n        };\n\n        const appResultValues = this.appResults;\n        appResultValues.forEach((value: number, name: string) => {\n            appResults[name] = value;\n        });\n\n        const configValues = this.configs;\n        configValues.forEach((value: string, name: string) => {\n            configs[name] = value;\n        });\n\n        if (onlyLastFrame) {\n            for (const [name, buffer] of this.m_frameEvents.frameEntries) {\n                frames[name] = buffer.bottom;\n            }\n        } else {\n            for (const [name, buffer] of this.m_frameEvents.frameEntries) {\n                frames[name] = buffer.asArray();\n            }\n        }\n        plainObject.messages = this.m_frameEvents.messages.asArray();\n        return plainObject;\n    }\n\n    /**\n     * Convert the last frame values to a plain object that can be serialized. Required to copy the\n     * test results over to nightwatch.\n     */\n    getLastFrameStatistics(): any {\n        return this.getAsPlainObject(true);\n    }\n\n    /**\n     * Convert to a plain object that can be serialized. Required to copy the test results over to\n     * nightwatch.\n     */\n    getAsSimpleFrameStatistics(onlyLastFrame: boolean = false): SimpleFrameStatistics {\n        const configs: Map<string, string> = new Map();\n        const appResults: Map<string, number> = new Map();\n        const frames: Map<string, number | number[]> = new Map();\n\n        const simpleStatistics: SimpleFrameStatistics = {\n            configs,\n            appResults,\n            frames,\n            messages: this.m_frameEvents.messages.asArray()\n        };\n\n        const appResultValues = this.appResults;\n        appResultValues.forEach((value: number, name: string) => {\n            appResults.set(name, value);\n        });\n\n        const configValues = this.configs;\n        configValues.forEach((value: string, name: string) => {\n            configs.set(name, value);\n        });\n\n        if (onlyLastFrame) {\n            for (const [name, buffer] of this.m_frameEvents.frameEntries) {\n                frames.set(name, buffer.bottom);\n            }\n        } else {\n            for (const [name, buffer] of this.m_frameEvents.frameEntries) {\n                frames.set(name, buffer.asArray());\n            }\n        }\n        return simpleStatistics;\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { TileKey } from \"@here/harp-geoutils\";\nimport { ExtrusionFeature, ExtrusionFeatureDefs } from \"@here/harp-materials\";\nimport { MathUtils } from \"@here/harp-utils\";\nimport { MapView, MapViewEventNames, RenderEvent } from \"./MapView\";\nimport { Tile } from \"./Tile\";\n\nimport * as THREE from \"three\";\n\n/**\n * Animation states for extrusion effect\n */\nexport enum AnimatedExtrusionState {\n    None,\n    Started,\n    Playing,\n    Finished\n}\n\n/**\n * Handles animated extrusion effect of the buildings in [[MapView]].\n */\nexport class AnimatedExtrusionHandler {\n    /**\n     * Animate the extrusion of the buildings if set to `true`.\n     */\n    enabled: boolean = true;\n    /**\n     * Duration of the building's extrusion in milliseconds\n     */\n    duration: number = 750;\n    /**\n     * If `forceEnabled` is set to `true` then `animateExtrusion` and `animateExtrusionDuration`\n     * values from [[extrudedPolygonTechnique]] will be ignored in [[Tile]] and\n     * `AnimatedExtrusionHandler.enabled` with `AnimatedExtrusionHandler.duration` will be used\n     */\n    forceEnabled: boolean = false;\n\n    private m_zoomLevelPrevious: number;\n    private m_tileHandlerMap: Map<Tile, AnimatedExtrusionTileHandler> = new Map();\n    private m_zoomDirection: number = 0;\n    private m_forceAnimatedExtrusion: boolean | undefined;\n    private m_forceAnimatedExtrusionDuration: number | undefined;\n\n    /**\n     * Creates an [[AnimatedExtrusionHandler]] in [[MapView]].\n     *\n     * @param m_mapView Instance of [[MapView]] that passes `zoomLevel`\n     * through the `zoom` property update\n     */\n    constructor(private m_mapView: MapView) {\n        this.m_zoomLevelPrevious = this.m_mapView.zoomLevel;\n    }\n\n    /**\n     * Returns direction of the last zoom event.\n     * Zoom in - positive value, zoom out - negative value\n     */\n    get zoomDirection(): number {\n        return this.m_zoomDirection;\n    }\n\n    /**\n     * [[MapView]] updates zoom level. Then [[AnimatedExtrusionTileHandler]] calculates actual\n     * extrusion ratio and trigger animation\n     */\n    set zoom(zoomLevel: number) {\n        // if zoomLevel has been changed since last render\n        if (this.m_zoomLevelPrevious !== zoomLevel) {\n            this.m_tileHandlerMap.forEach(tileHandler => {\n                if (\n                    this.m_mapView.getDataSourceByName(tileHandler.tile.dataSource.name) !==\n                    undefined\n                ) {\n                    this.m_zoomDirection = zoomLevel > this.m_zoomLevelPrevious ? 1 : -1;\n                    tileHandler.zoomLevelChanged(this.m_zoomDirection);\n                }\n            });\n            this.m_zoomLevelPrevious = zoomLevel;\n        }\n    }\n\n    /**\n     * Checks whether animated extrusion effect was forcibly turned off/on in [[MapView]]\n     */\n    get forceAnimatedExtrusion(): boolean | undefined {\n        return this.m_forceAnimatedExtrusion;\n    }\n\n    /**\n     * If set to `true` it will force the animation extrusion effect to run.\n     * In case it was set to `false` animation extrusion effect will be switched off.\n     */\n    set forceAnimatedExtrusion(animatedExtrusion: boolean | undefined) {\n        this.m_forceAnimatedExtrusion = animatedExtrusion;\n    }\n\n    /**\n     * Returns `animatedExtrusionDuration` value that was set in [[MapView]].\n     */\n    get forceAnimatedExtrusionDuration(): number | undefined {\n        return this.m_forceAnimatedExtrusionDuration;\n    }\n\n    /**\n     * If value is set, it will overlap in [[Tile]] with\n     * `animatedExtrusionDuration` property from [[ExtrudedPolygonTechnique]]\n     * and `DEFAULT_DURATION` from [[AnimatedExtrusionTileHandler]].\n     */\n    set forceAnimatedExtrusionDuration(extrusionDuration: number | undefined) {\n        this.m_forceAnimatedExtrusionDuration = extrusionDuration;\n    }\n\n    /**\n     * Adds an [[AnimatedExtrusionTileHandler]] to [[AnimatedExtrusionHandler]]\n     */\n    add(tileHandler: AnimatedExtrusionTileHandler): void {\n        this.m_tileHandlerMap.set(tileHandler.tile, tileHandler);\n    }\n\n    /**\n     * Removes tile from the list subscribed for extrusion ratio updates\n     */\n    removeTile(tile: Tile): void {\n        this.m_tileHandlerMap.delete(tile);\n    }\n\n    /**\n     * Returns first [[AnimatedExtrusionTileHandler]] existed from the list of [[Tile]]s\n     */\n    find(tileKeys: Array<TileKey | undefined>): AnimatedExtrusionTileHandler | undefined {\n        for (const tileHandler of this.m_tileHandlerMap) {\n            for (const tileKey of tileKeys) {\n                if (\n                    tileKey !== undefined &&\n                    tileHandler[0].tileKey.mortonCode() === tileKey.mortonCode()\n                ) {\n                    return tileHandler[1];\n                }\n            }\n        }\n        return undefined;\n    }\n\n    /**\n     * Is `true` if any extrusion handlers are currently animating.\n     */\n    get isAnimating(): boolean {\n        for (const tileHandler of this.m_tileHandlerMap) {\n            if (tileHandler[1].isAnimating) {\n                return true;\n            }\n        }\n        return false;\n    }\n}\n\n/**\n * Implements animated extrusion effect for the extruded objects in the [[Tile]]\n */\nexport class AnimatedExtrusionTileHandler {\n    private m_extrudedObjects: THREE.Object3D[] = [];\n    private m_animatedExtrusionState: AnimatedExtrusionState = AnimatedExtrusionState.None;\n    private m_animatedExtrusionStartTime: number | undefined = undefined;\n    private m_mapView: MapView;\n    private m_animatedExtrusionHandler: AnimatedExtrusionHandler;\n\n    constructor(\n        private m_tile: Tile,\n        extrudedObjects: Array<{ object: THREE.Object3D; materialFeature: boolean }>,\n        private m_animatedExtrusionDuration: number\n    ) {\n        this.m_mapView = m_tile.mapView;\n        this.m_animatedExtrusionHandler = this.m_mapView.animatedExtrusionHandler;\n\n        extrudedObjects.forEach(extrudedObject => {\n            this.m_extrudedObjects.push(extrudedObject.object);\n        });\n\n        this.startExtrusionAnimationIfNeeded(this.m_animatedExtrusionHandler.zoomDirection);\n    }\n\n    /**\n     * Set an extrusion ratio value for the materials [[MapMeshBasicMaterial]]\n     * and [[EdgeMaterial]]. Controlled by [[AnimatedExtrusionHandler]]\n     * for extrusion animation effect.\n     */\n    set extrusionRatio(value: number) {\n        this.m_extrudedObjects.forEach(object => {\n            if (object instanceof THREE.Mesh || object instanceof THREE.LineSegments) {\n                if (Array.isArray(object.material)) {\n                    object.material.forEach((material: ExtrusionFeature) => {\n                        material.extrusionRatio = value;\n                    });\n                } else if (object.material) {\n                    (object.material as ExtrusionFeature).extrusionRatio = value;\n                    if (object.customDepthMaterial !== undefined) {\n                        (object.customDepthMaterial as ExtrusionFeature).extrusionRatio = value;\n                    }\n                }\n            }\n        });\n    }\n\n    /**\n     * Returns the [[Tile]] related to [[AnimatedExtrusionTileHandler]]\n     */\n    get tile(): Tile {\n        return this.m_tile;\n    }\n\n    /**\n     * Return the current state of animated extrusion effect\n     */\n    get animationState(): AnimatedExtrusionState {\n        return this.m_animatedExtrusionState;\n    }\n\n    /**\n     * Is `true` if this handler is currently animating.\n     */\n    get isAnimating(): boolean {\n        return this.m_animatedExtrusionState !== AnimatedExtrusionState.Finished;\n    }\n\n    /**\n     * Cancel animation and remove from [[AnimatedExtrusionHandler]]\n     */\n    dispose() {\n        this.stopExtrusionAnimation();\n        this.m_animatedExtrusionHandler.removeTile(this.m_tile);\n    }\n\n    /**\n     * Start / Stop extrusion animation if zoom level was changed\n     */\n    zoomLevelChanged(zoomDirection: number) {\n        if (\n            this.m_tile.isVisible === false &&\n            this.m_animatedExtrusionState !== AnimatedExtrusionState.None\n        ) {\n            this.m_animatedExtrusionState = AnimatedExtrusionState.None;\n            this.stopExtrusionAnimation();\n        }\n\n        if (\n            this.m_tile.isVisible === true &&\n            this.m_animatedExtrusionState === AnimatedExtrusionState.None\n        ) {\n            this.startExtrusionAnimationIfNeeded(zoomDirection);\n        }\n    }\n\n    private getChildTiles(tileKeys: TileKey[]) {\n        const result: TileKey[] = [];\n\n        tileKeys.forEach(tileKey => {\n            const childTileKeys = this.tile.dataSource.getTilingScheme().getSubTileKeys(tileKey);\n\n            for (const childTileKey of childTileKeys) {\n                result.push(childTileKey);\n            }\n        });\n        return result;\n    }\n\n    // search for the [[Tile]] with extrusion animation started\n    private startExtrusionAnimationIfNeeded(zoomDirection?: number) {\n        const {\n            quadTreeSearchDistanceUp,\n            quadTreeSearchDistanceDown\n        } = this.tile.mapView.visibleTileSet.options;\n        const tile = this.m_tile;\n        let extrusionStartTime: number | undefined;\n\n        if (zoomDirection !== undefined) {\n            let tileHandler;\n\n            // if zoom out, go down and look for a child tile\n            if (zoomDirection < 0) {\n                let nextLevelDiff = 0;\n                let tileKeys = [tile.tileKey];\n                while (\n                    quadTreeSearchDistanceDown > nextLevelDiff &&\n                    extrusionStartTime === undefined\n                ) {\n                    const childTileKeys = this.getChildTiles(tileKeys);\n                    if (childTileKeys !== undefined) {\n                        tileHandler = this.m_animatedExtrusionHandler.find(childTileKeys);\n                        if (tileHandler !== undefined) {\n                            extrusionStartTime = tileHandler.m_animatedExtrusionStartTime;\n                            break;\n                        }\n                        tileKeys = childTileKeys;\n                    }\n                    nextLevelDiff++;\n                }\n            }\n            // if zoom in, go up and get the parent tile\n            if (zoomDirection > 0) {\n                let nextLevelDiff = 0;\n                let tileKey = tile.tileKey;\n                while (\n                    quadTreeSearchDistanceUp > nextLevelDiff &&\n                    extrusionStartTime === undefined &&\n                    tileKey.level !== 0\n                ) {\n                    const parentTileKey = tileKey.parent();\n                    tileHandler = this.m_animatedExtrusionHandler.find([parentTileKey]);\n                    if (tileHandler !== undefined) {\n                        extrusionStartTime = tileHandler.m_animatedExtrusionStartTime;\n                        break;\n                    }\n                    tileKey = parentTileKey;\n                    nextLevelDiff++;\n                }\n            }\n        }\n        this.startExtrusionAnimation(extrusionStartTime);\n    }\n\n    private startExtrusionAnimation(startTime?: number): void {\n        this.m_animatedExtrusionState = AnimatedExtrusionState.Started;\n        this.m_animatedExtrusionStartTime = startTime;\n        this.animateExtrusion();\n        this.m_mapView.addEventListener(MapViewEventNames.AfterRender, this.animateExtrusion);\n    }\n\n    private stopExtrusionAnimation(): void {\n        this.m_mapView.removeEventListener(MapViewEventNames.AfterRender, this.animateExtrusion);\n    }\n\n    private animateExtrusion = (event?: RenderEvent) => {\n        if (this.m_animatedExtrusionState !== AnimatedExtrusionState.Playing) {\n            if (this.m_animatedExtrusionState === AnimatedExtrusionState.Started) {\n                this.m_animatedExtrusionState = AnimatedExtrusionState.Playing;\n            } else {\n                return;\n            }\n        }\n\n        const currentTime = Date.now();\n        if (\n            this.m_animatedExtrusionStartTime === undefined ||\n            this.m_animatedExtrusionStartTime <= 0\n        ) {\n            this.m_animatedExtrusionStartTime = currentTime;\n        }\n\n        const timeProgress = Math.min(\n            currentTime - this.m_animatedExtrusionStartTime,\n            this.m_animatedExtrusionDuration\n        );\n\n        this.extrusionRatio = MathUtils.easeInOutCubic(\n            ExtrusionFeatureDefs.DEFAULT_RATIO_MIN,\n            ExtrusionFeatureDefs.DEFAULT_RATIO_MAX,\n            timeProgress / this.m_animatedExtrusionDuration\n        );\n\n        if (timeProgress >= this.m_animatedExtrusionDuration) {\n            this.m_animatedExtrusionState = AnimatedExtrusionState.Finished;\n            this.stopExtrusionAnimation();\n        }\n\n        this.m_tile.dataSource.requestUpdate();\n    };\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { IChannel } from \"./IChannel\";\n\n/**\n * Enum log levels\n */\nexport enum LogLevel {\n    Trace,\n    Debug,\n    Log,\n    Info,\n    Warn,\n    Error\n}\n\n/**\n * Logger options to configure logger\n */\nexport class LoggerOptions {\n    enabled?: boolean;\n    level?: LogLevel;\n}\n\n/**\n * Public interface for Logger class.\n */\nexport interface ILogger extends IChannel {\n    readonly name: string;\n\n    enabled: boolean;\n\n    level: LogLevel;\n\n    /**\n     * Update logger options\n     *\n     * @param  {LoggerOptions} options Set logger options and configure internal logger.\n     */\n    update(options: LoggerOptions): void;\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * Resolve URI of referenced object w.r.t parent URI.\n *\n * Resolves `childUri` as it would be loaded from location specified by `parentUri`.\n *\n * If `childUri` is absolute, then it is returned unchanged.\n * If `childUri` is origin-absolute path, then only origin path is taken from `parentUri`.\n *\n * See [[baseUri]] for reference how base URL of `parentUri` is determined.\n *\n * Supports `http:`, `https:`, `file:`, `data:` schemes.\n *\n * Examples:\n *\n *     // normal case, child is sibling\n *     https://foo.com/themes/day.json + images/foo.png -> https://foo.com/themes/images/foo.png\n *\n *     // parent is \"folder\", so child is just located in this folder\n *     https://foo.com/themes/ + images/foo.png -> https://foo.com/themes/images/foo.png\n *\n *     // parent looks like leaf, so last component is stripped\n *     https://foo.com/themes + images/foo.png -> https://foo.com/images/foo.png\n *\n *     // origin-absolute URL, takes only origin from parent\n *     https://foo.com/themes/day.json + /fonts/foo.json -> https://foo.com/fonts/foo.json\n *\n * @param parentUri URI of parent resource\n * @param childUri URI of child as referenced from parent resource\n * @return `childUrl` as if anchored in location of `parentUrl`\n */\nexport function resolveReferenceUri(parentUri: string | undefined, childUri: string): string {\n    if (absoluteUrlWithOriginRe.test(childUri)) {\n        return childUri;\n    } else if (childUri.startsWith(\"/\")) {\n        const origin = getUrlOrigin(parentUri);\n        return origin + childUri;\n    } else {\n        if (childUri.startsWith(\"./\")) {\n            childUri = childUri.substr(2);\n        }\n        const parentBaseUrl = baseUrl(parentUri);\n        return parentBaseUrl + childUri;\n    }\n}\n\nconst absoluteUrlWithOriginRe = new RegExp(\"^(((?:[a-z]+:)?//)|(file:/)|(data:))\", \"i\");\n\n/**\n * Returns base URL of given resource URL.\n *\n * `Url` with trailing slash are considered genuine 'locations', they are returned as is, however if\n * `url` ends with name component it is treated as \"leaf\", so last path component is removed.\n *\n * Standalone files (without any folder structure) are considered relative to `./`.\n *\n * Examples:\n * ```\n *     https://foo.com/themes/a.json -> https://foo.com/themes/\n *     https://foo.com/themes/ -> https://foo.com/themes/\n *     https://foo.com/themes -> https://foo.com/ // note, themes is treated as leaf\n *     themes/day.json -> themes/\n *     themes -> ./\n * ```\n */\nexport function baseUrl(url: string | undefined) {\n    if (url === undefined) {\n        return \"./\";\n    }\n    let idx = url.indexOf(\"#\");\n    if (idx !== -1) {\n        url = url.slice(0, idx);\n    }\n    idx = url.indexOf(\"?\");\n    if (idx !== -1) {\n        url = url.slice(0, idx);\n    }\n    idx = url.lastIndexOf(\"/\");\n    if (idx === -1) {\n        return \"./\";\n    } else {\n        return url.substring(0, idx + 1);\n    }\n}\n\n/**\n * Get `origin` part of URL.\n *\n * @example\n *    https://example.com/foo -> https://example.com\n *    //example.com:8080/ -> //example.com:8080\n *    file:///etc/hosts ->\n *\n * @param url input URL\n * @return origin of given URL\n */\nexport function getUrlOrigin(url: string | undefined): string {\n    if (url === undefined) {\n        return \"\";\n    }\n    const parsed = getUrlHostAndProtocol(url);\n    if (parsed.protocol === \"file:\") {\n        return \"file://\";\n    } else if (parsed.host && parsed.protocol) {\n        return parsed.protocol + \"//\" + parsed.host;\n    } else if (parsed.host) {\n        return \"//\" + parsed.host;\n    } else if (parsed.protocol) {\n        return parsed.protocol + \"//\";\n    } else {\n        return \"\";\n    }\n}\n\n/**\n * Parse `host` and `protocol` part from URL.\n */\nexport function getUrlHostAndProtocol(\n    url: string\n): {\n    protocol: string;\n    host: string;\n} {\n    const urlOriginRe = new RegExp(/^(?:([a-z]+:))?\\/\\/([^\\/]*)/, \"i\");\n\n    const match = url.match(urlOriginRe);\n    if (!match) {\n        throw new Error(`getUrlHostAndProtocol: unable to parse URL '${url}'`);\n    }\n    return {\n        protocol: match[1],\n        host: match[2]\n    };\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { ViewRanges } from \"@here/harp-datasource-protocol/lib/ViewRanges\";\nimport { applyMixinsWithoutProperties, assert, chainCallbacks } from \"@here/harp-utils\";\nimport { disableBlending, enableBlending, insertShaderInclude, setShaderDefine } from \"./Utils\";\n\nimport * as THREE from \"three\";\n\nimport { DisplacementFeature, DisplacementFeatureParameters } from \"./DisplacementFeature\";\nimport { ExtrusionFeatureDefs } from \"./MapMeshMaterialsDefs\";\nimport extrusionShaderChunk from \"./ShaderChunks/ExtrusionChunks\";\nimport fadingShaderChunk from \"./ShaderChunks/FadingChunks\";\nimport { simpleLightingShadowChunk } from \"./ShaderChunks/ShadowChunks\";\n\nconst emptyTexture = new THREE.Texture();\n\n/**\n * The MapMeshMaterials [[MapMeshBasicMaterial]] and [[MapMeshStandardMaterial]] are the standard\n * [[THREE.MeshBasicMaterial]] and [[THREE.MeshStandardMaterial]], with the addition functionality\n * of fading out the geometry between a fadeNear and fadeFar value.\n *\n * The implementation is designed around a mixin class [[FadingFeatureMixin]], which requires\n * a bit of care when adding the FadingFeature to the existing mesh classes, but it is safe to use\n * and also reduces code duplication.\n */\n\n/**\n * Parameters used when constructing a new implementor of [[FadingFeature]].\n */\nexport interface FadingFeatureParameters {\n    /**\n     * Distance to the camera (range: `[0.0, 1.0]`) from which the objects start fading out.\n     */\n    fadeNear?: number;\n\n    /**\n     * Distance to the camera (range: `[0.0, 1.0]`) from which the objects are transparent.\n     */\n    fadeFar?: number;\n}\n\n/**\n * Parameter used to control patching the standard material shader to ensure that the materials\n * color isn't affected by the light direction, only valid for techniques that are \"fill\"\n */\nexport interface ShadowFeatureParameters {\n    /**\n     * Whether the diffuse light component is removed (i.e. the materials color is therefore just\n     * the ambient + shadow).\n     */\n    removeDiffuseLight?: boolean;\n}\n\n/**\n * Parameters used when constructing a new implementor of [[ExtrusionFeature]].\n */\nexport interface ExtrusionFeatureParameters {\n    /**\n     * Ratio of the extruded objects, where `1.0` is the default value\n     */\n    extrusionRatio?: number;\n\n    /**\n     * Enable z-fighting workaround that doesn't animate buildings with `height <\n     * [[ExtrusionFeatureDefs.MIN_BUILDING_HEIGHT]]`.\n     *\n     * Should be applied to `polygon` materials using this feature.\n     */\n    zFightingWorkaround?: boolean;\n}\n\n/**\n * Used internally.\n *\n * @hidden\n */\ninterface UniformsType {\n    [index: string]: THREE.IUniform;\n}\n\n/**\n * Type of callback used internally by THREE.js for shader creation.\n *\n * @hidden\n */\ntype CompileCallback = (shader: THREE.Shader, renderer: any) => void;\n\n/**\n * Material properties used from THREE, which may not be defined in the type.\n */\nexport interface HiddenThreeJSMaterialProperties {\n    /**\n     * Informs THREE.js to re-compile material shader (due to change in code or defines).\n     */\n    needsUpdate?: boolean;\n\n    /**\n     * Hidden ThreeJS value that is made public here. Required to add new uniforms to subclasses of\n     * [[THREE.MeshBasicMaterial]]/[[THREE.MeshStandardMaterial]], basically all materials that are\n     * not THREE.ShaderMaterial.\n     * @deprecated\n     */\n    uniformsNeedUpdate?: boolean;\n\n    /**\n     * Available in all materials in ThreeJS.\n     */\n    transparent?: boolean;\n\n    /**\n     * Used internally for material shader defines.\n     */\n    defines?: any;\n\n    /**\n     * Defines callback available in THREE.js materials.\n     *\n     * Called before shader program compilation to generate vertex & fragment shader output code.\n     */\n    onBeforeCompile?: CompileCallback;\n}\n\ninterface MixinShaderProperties {\n    /**\n     * Used internally for material shader defines.\n     */\n    shaderDefines?: any;\n\n    /**\n     * Used internally for shader uniforms, holds references to material internal shader.uniforms.\n     *\n     * Holds a reference to material's internal shader uniforms map. New custom feature based\n     * uniforms are injected using this reference, but also internal THREE.js shader uniforms\n     * will be available via this map after [[Material#onBeforeCompile]] callback is run with\n     * feature enabled.\n     * @see needsUpdate\n     */\n    shaderUniforms?: UniformsType;\n}\n\n/**\n * Translates a linear distance value [0..1], where 1 is the distance to the far plane, into\n * [0..maxVisibilityRange].\n *\n * Copy from MapViewUtils, since it cannot be accessed here because of circular dependencies.\n *\n * @param distance Distance from the camera (range: [0, 1]).\n * @param visibilityRange object describing maximum and minimum visibility range - distances\n * from camera at which objects won't be rendered anymore.\n */\nfunction cameraToWorldDistance(distance: number, visibilityRange: ViewRanges): number {\n    return distance * visibilityRange.maximum;\n}\n\n/**\n * Provides common interface from mixin to internal material defines and shader uniforms.\n *\n * Call this function just after [THREE.Material] is constructed, so in derived classes after\n * super c-tor call.\n * @param mixin The mixin that will add features to [[THREE.Material]].\n * @param material The material that mixin feature is being applied.\n */\nfunction linkMixinWithMaterial(\n    mixin: MixinShaderProperties,\n    material: HiddenThreeJSMaterialProperties\n) {\n    // Some materials (MeshBasicMaterial) have no defines property created in c-tor.\n    // In such case create it manually, such defines will be also injected to the shader\n    // via generic THREE.js code - see THREE/WebGLProgram.js.\n    if (material.defines === undefined) {\n        material.defines = {};\n    }\n    // Link internal THREE.js material defines with mixin reference.\n    // Those defines are usually created in Material c-tor, if not we have fallback above.\n    mixin.shaderDefines = material.defines;\n\n    // Prepare map for holding uniforms references from the actual shader, but check if\n    // it was not already created with other mixin feature.\n    if (mixin.shaderUniforms === undefined) {\n        mixin.shaderUniforms = {};\n    }\n    // Shader uniforms may not be linked at this stage, they are injected available via Shader\n    // object in onBeforeCompile callback, see: linkMixinWithShader().\n}\n\n/**\n * Links mixin [[MixinShaderProperties.shaderUniforms]] with actual material shader uniforms.\n *\n * Function injects features (mixin) specific shader uniforms to material's shader, it also\n * updates uniforms references so [[MixinShaderProperties.shaderUniforms]] will contain full\n * uniforms map (both feature specific and internal ones).\n * This function should be called before material's shader is pre-compiled, so the new uniforms\n * from the mixin feature are known to shader processor. The best place to use is\n * [[Material.onBeforeCompile]].\n * @param mixin The mixin feature being applied to the material.\n * @param shader The actual shader linked to the [[THREE.Material]].\n */\nfunction linkMixinWithShader(mixin: MixinShaderProperties, shader: THREE.Shader) {\n    Object.assign(shader.uniforms, mixin.shaderUniforms);\n    mixin.shaderUniforms = shader.uniforms;\n}\n\n/**\n * Base interface for all objects that should fade in the distance. The implementation of the actual\n * FadingFeature is done with the help of the mixin class [[FadingFeatureMixin]] and a set of\n * supporting functions in the namespace of the same name.\n */\nexport interface FadingFeature extends HiddenThreeJSMaterialProperties, MixinShaderProperties {\n    /**\n     * Distance to the camera (range: `[0.0, 1.0]`) from which the objects start fading out.\n     */\n    fadeNear?: number;\n\n    /**\n     * Distance to the camera (range: `[0.0, 1.0]`) from which the objects are transparent. A value\n     * of <= 0.0 disables fading.\n     */\n    fadeFar?: number;\n}\n\n/**\n * Base interface for all objects that should have animated extrusion effect. The implementation of\n * the actual ExtrusionFeature is done with the help of the mixin class [[ExtrusionFeatureMixin]]\n * and a set of supporting functions in the namespace of the same name.\n */\nexport interface ExtrusionFeature extends HiddenThreeJSMaterialProperties, MixinShaderProperties {\n    /**\n     * Ratio of the extruded objects, where `1.0` is the default value. Minimum suggested value\n     * is `0.01`\n     */\n    extrusionRatio?: number;\n}\n\nnamespace DisplacementFeature {\n    /**\n     * Checks if feature is enabled (displacement map defined).\n     *\n     * @param displacementMaterial\n     */\n    export function isEnabled(displacementMaterial: DisplacementFeature) {\n        return displacementMaterial.displacementMap !== null;\n    }\n\n    /**\n     * Update the internals of the `DisplacementFeature` depending on the value of\n     * [[displacementMap]].\n     *\n     * @param displacementMaterial DisplacementFeature\n     */\n    export function updateDisplacementFeature(\n        displacementMaterial: DisplacementFeature & MixinShaderProperties\n    ): void {\n        assert(displacementMaterial.shaderDefines !== undefined);\n        assert(displacementMaterial.shaderUniforms !== undefined);\n\n        const useDisplacementMap = isEnabled(displacementMaterial);\n        // Whenever displacement feature state changes (between enabled/disabled) material will be\n        // re-compiled, forcing new shader chunks to be added (or removed).\n        const needsUpdate = setShaderDefine(\n            displacementMaterial.shaderDefines,\n            \"USE_DISPLACEMENTMAP\",\n            useDisplacementMap\n        );\n        displacementMaterial.needsUpdate = needsUpdate;\n\n        // Update texture after change.\n        if (useDisplacementMap) {\n            const texture = displacementMaterial.displacementMap!;\n            texture.needsUpdate = true;\n            displacementMaterial.shaderUniforms!.displacementMap.value = texture;\n        } else if (needsUpdate) {\n            displacementMaterial.shaderUniforms!.displacementMap.value = emptyTexture;\n        }\n    }\n\n    /**\n     * This function should be called on implementors of DisplacementFeature in the\n     * `onBeforeCompile` callback of that material. It adds the required code to the shaders to\n     * apply displacement maps.\n     *\n     * @param displacementMaterial Material to add uniforms to.\n     * @param shader [[THREE.WebGLShader]] containing the vertex and fragment shaders to add the\n     *                  special includes to.\n     */\n    export function onBeforeCompile(\n        displacementMaterial: DisplacementFeature & MixinShaderProperties,\n        shader: THREE.Shader\n    ) {\n        if (!isEnabled(displacementMaterial)) {\n            return;\n        }\n        assert(displacementMaterial.shaderUniforms !== undefined);\n\n        // The vertex and fragment shaders have been constructed dynamically. The uniforms and\n        // the shader includes are now appended to them.\n        //\n        // The object \"defines\" are required for this material, we use one define working as a flag,\n        // which enables/disables some chunks of shader code.\n        linkMixinWithShader(displacementMaterial, shader);\n\n        // Append the displacement map chunk to the vertex shader.\n        shader.vertexShader = shader.vertexShader.replace(\n            \"#include <skinbase_vertex>\",\n            `#include <skinbase_vertex>\n#ifndef USE_ENVMAP\n    vec3 objectNormal = vec3( normal );\n#endif`\n        );\n        shader.vertexShader = insertShaderInclude(\n            shader.vertexShader,\n            \"uv2_pars_vertex\",\n            \"displacementmap_pars_vertex\"\n        );\n\n        shader.vertexShader = insertShaderInclude(\n            shader.vertexShader,\n            \"skinning_vertex\",\n            \"displacementmap_vertex\",\n            true\n        );\n    }\n}\n\nexport class DisplacementFeatureMixin implements DisplacementFeature, MixinShaderProperties {\n    needsUpdate?: boolean;\n    uniformsNeedUpdate?: boolean;\n    defines?: any;\n    shaderDefines?: any;\n    shaderUniforms?: UniformsType;\n    onBeforeCompile?: CompileCallback;\n    private m_displacementMap: THREE.Texture | null = null;\n\n    // This is here to keep tslint from reporting a missing property, the getter that's actually\n    // used by materials is added in [[addDisplacementProperties]].\n    get displacementMap(): THREE.Texture | null {\n        return this.m_displacementMap;\n    }\n\n    // This is here to keep tslint from reporting a missing property, the setter that's actually\n    // used by materials is added in [[addDisplacementProperties]].\n    set displacementMap(map: THREE.Texture | null) {\n        this.setDisplacementMap(map);\n    }\n\n    protected getDisplacementMap(): THREE.Texture | null {\n        return this.m_displacementMap;\n    }\n\n    protected setDisplacementMap(map: THREE.Texture | null): void {\n        if (map !== this.m_displacementMap) {\n            this.m_displacementMap = map;\n            DisplacementFeature.updateDisplacementFeature(this);\n        }\n    }\n    /**\n     * The mixin class should call this method to register the property [[displacementMap]]\n     */\n    protected addDisplacementProperties(): void {\n        Object.defineProperty(this, \"displacementMap\", {\n            get: () => {\n                return this.getDisplacementMap();\n            },\n            set: val => {\n                this.setDisplacementMap(val);\n            }\n        });\n    }\n\n    /**\n     * Apply the displacementMap value from the parameters to the respective properties.\n     */\n    protected applyDisplacementParameters(params?: DisplacementFeatureParameters) {\n        linkMixinWithMaterial(this, this);\n\n        assert(this.shaderDefines !== undefined);\n        assert(this.shaderUniforms !== undefined);\n\n        // Create uniforms with default values, this ensures they are always set created,\n        // so no need for checks in setters.\n        const uniforms = this.shaderUniforms!;\n        uniforms.displacementMap = new THREE.Uniform(emptyTexture);\n        uniforms.displacementScale = new THREE.Uniform(1);\n        uniforms.displacementBias = new THREE.Uniform(0);\n\n        // Apply initial parameter values.\n        if (params !== undefined) {\n            if (params.displacementMap !== undefined) {\n                this.setDisplacementMap(params.displacementMap);\n            }\n        }\n\n        this.onBeforeCompile = chainCallbacks(this.onBeforeCompile, (shader: THREE.Shader) => {\n            DisplacementFeature.onBeforeCompile(this, shader);\n        });\n\n        // Require material update at least once, because of new shader chunks added.\n        this.needsUpdate = DisplacementFeature.isEnabled(this);\n    }\n\n    /**\n     * Copy displacementMap from other DisplacementFeature.\n     *\n     * @param source The material to copy property values from.\n     */\n    protected copyDisplacementParameters(source: DisplacementFeature) {\n        this.setDisplacementMap(source.displacementMap);\n        return this;\n    }\n}\n\n/**\n * Namespace with support functions for implementors of `FadingFeature`.\n */\nexport namespace FadingFeature {\n    export const DEFAULT_FADE_NEAR: number = -1.0;\n    export const DEFAULT_FADE_FAR: number = -1.0;\n\n    /**\n     * Checks if feature is enabled based on feature params.\n     *\n     * Fading feature will be disabled if fadeFar is undefined or fadeFar <= 0.0.\n     * This function is crucial for shader switching (chunks injection), whenever feature state\n     * changes between enabled/disabled. Current approach is to keep feature on (once enabled)\n     * whenever fading params are reasonable, even if it causes full fade in, no transparency.\n     *\n     * @param fadingMaterial FadingFeature.\n     */\n    export function isEnabled(fadingMaterial: FadingFeature) {\n        // NOTE: We could also check if full fade is not achieved, then feature could be\n        // disabled, but causing material re-compile.\n        return (\n            fadingMaterial.fadeNear !== undefined &&\n            fadingMaterial.fadeFar !== undefined &&\n            fadingMaterial.fadeFar > 0\n        );\n    }\n\n    /**\n     * Patch the THREE.ShaderChunk on first call with some extra shader chunks.\n     */\n    export function patchGlobalShaderChunks() {\n        if (THREE.ShaderChunk.fading_pars_vertex === undefined) {\n            Object.assign(THREE.ShaderChunk, fadingShaderChunk);\n        }\n    }\n\n    /**\n     * Update the internals of the `FadingFeature` depending on the value of [[fadeNear]]. The\n     * fading feature will be disabled if fadeFar <= 0.0.\n     *\n     * @param fadingMaterial FadingFeature\n     */\n    export function updateFadingFeature(fadingMaterial: FadingFeature): void {\n        assert(fadingMaterial.shaderDefines !== undefined);\n        assert(fadingMaterial.shaderUniforms !== undefined);\n\n        // Update entire material to add/remove shader fading chunks, this happens when we\n        // enable/disable fading after material creation. Feature is marked via dummy define, which\n        // informs about fading feature state, even if such define is not required to control\n        // feature state, it makes it easy to check for shader changes.\n        const useFading = isEnabled(fadingMaterial);\n        const needsUpdate = setShaderDefine(\n            fadingMaterial.shaderDefines,\n            \"FADING_MATERIAL\",\n            useFading\n        );\n        // Enable/disable entire feature with material re-compile, this will also cause\n        // new uniforms injection.\n        fadingMaterial.needsUpdate = needsUpdate;\n\n        // Check if shader uniforms references are already set in onBeforeCompile callback.\n        assert(\n            fadingMaterial.shaderUniforms!.fadeNear !== undefined &&\n                fadingMaterial.shaderUniforms!.fadeFar !== undefined\n        );\n\n        // Update shader internal uniforms only if fading is enabled.\n        if (useFading) {\n            fadingMaterial.shaderUniforms!.fadeNear.value = fadingMaterial.fadeNear;\n            fadingMaterial.shaderUniforms!.fadeFar.value = fadingMaterial.fadeFar;\n            if (needsUpdate) {\n                enableBlending(fadingMaterial as THREE.Material);\n            }\n        }\n        // Perform one time update of uniforms to defaults when feature disabled (for clarity).\n        else if (needsUpdate) {\n            fadingMaterial.shaderUniforms!.fadeNear.value = FadingFeature.DEFAULT_FADE_NEAR;\n            fadingMaterial.shaderUniforms!.fadeFar.value = FadingFeature.DEFAULT_FADE_FAR;\n            disableBlending(fadingMaterial as THREE.Material);\n        }\n    }\n\n    /**\n     * This function should be called on implementors of FadingFeature in the `onBeforeCompile`\n     * callback of that material. It adds the required code to the shaders and declares the new\n     * uniforms that control fading based on view distance.\n     *\n     * @param fadingMaterial Material to add uniforms to.\n     * @param shader [[THREE.WebGLShader]] containing the vertex and fragment shaders to add the\n     *                  special includes to.\n     */\n    export function onBeforeCompile(fadingMaterial: FadingFeature, shader: THREE.Shader) {\n        if (!isEnabled(fadingMaterial)) {\n            return;\n        }\n        assert(fadingMaterial.shaderUniforms !== undefined);\n\n        // The vertex and fragment shaders have been constructed dynamically. The uniforms and\n        // the shader includes are now appended to them.\n        //\n        // The object \"defines\" are not required for this material, so the fading shader chunks\n        // have no #ifdef preprocessed chunks. Feature utilized one define just to denote feature\n        // attached and easy control its state, but this define may be stripped out if needed.\n        linkMixinWithShader(fadingMaterial, shader);\n\n        // Append the new fading shader cod directly after the fog code. This is done by adding an\n        // include directive for the fading code.\n        shader.vertexShader = insertShaderInclude(\n            shader.vertexShader,\n            \"fog_pars_vertex\",\n            \"fading_pars_vertex\"\n        );\n\n        shader.vertexShader = insertShaderInclude(\n            shader.vertexShader,\n            \"fog_vertex\",\n            \"fading_vertex\",\n            true\n        );\n\n        shader.fragmentShader = insertShaderInclude(\n            shader.fragmentShader,\n            \"fog_pars_fragment\",\n            \"fading_pars_fragment\"\n        );\n\n        shader.fragmentShader = insertShaderInclude(\n            shader.fragmentShader,\n            \"fog_fragment\",\n            \"fading_fragment\",\n            true\n        );\n    }\n\n    /**\n     * As three.js is rendering the transparent objects last (internally), regardless of their\n     * renderOrder value, we set the transparent value to false in the [[onAfterRenderCall]]. In\n     * [[onBeforeRender]], the function [[calculateDepthFromCameraDistance]] sets it to true if the\n     * fade distance value is less than 1.\n     *\n     * @param object [[THREE.Object3D]] to prepare for rendering.\n     * @param viewRanges The visibility ranges (clip planes and maximum visible distance) for\n     * actual camera setup.\n     * @param fadeNear The fadeNear value to set in the material.\n     * @param fadeFar The fadeFar value to set in the material.\n     * @param updateUniforms If `true`, the fading uniforms are set. Not required if material is\n     *          handling the uniforms already, like in a [[THREE.ShaderMaterial]].\n     * @param additionalCallback If defined, this function will be called before the function will\n     *          return.\n     */\n    export function addRenderHelper(\n        object: THREE.Object3D,\n        viewRanges: ViewRanges,\n        fadeNear: number | undefined,\n        fadeFar: number | undefined,\n        updateUniforms: boolean,\n        additionalCallback?: (\n            renderer: THREE.WebGLRenderer,\n            material: THREE.Material & FadingFeature\n        ) => void\n    ) {\n        // tslint:disable-next-line:no-unused-variable\n        object.onBeforeRender = chainCallbacks(\n            object.onBeforeRender,\n            (\n                renderer: THREE.WebGLRenderer,\n                scene: THREE.Scene,\n                camera: THREE.Camera,\n                geometry: THREE.Geometry | THREE.BufferGeometry,\n                material: THREE.Material & FadingFeature,\n                group: THREE.Group\n            ) => {\n                const fadingMaterial = material as FadingFeature;\n\n                fadingMaterial.fadeNear =\n                    fadeNear === undefined || fadeNear === FadingFeature.DEFAULT_FADE_NEAR\n                        ? FadingFeature.DEFAULT_FADE_NEAR\n                        : cameraToWorldDistance(fadeNear, viewRanges);\n\n                fadingMaterial.fadeFar =\n                    fadeFar === undefined || fadeFar === FadingFeature.DEFAULT_FADE_FAR\n                        ? FadingFeature.DEFAULT_FADE_FAR\n                        : cameraToWorldDistance(fadeFar, viewRanges);\n\n                if (additionalCallback !== undefined) {\n                    additionalCallback(renderer, material);\n                }\n            }\n        );\n    }\n}\n\n/**\n * Mixin class for extended THREE materials. Adds new properties required for `fadeNear` and\n * `fadeFar`. There is some special handling for the fadeNear/fadeFar properties, which get some\n * setters and getters in a way that works well with the mixin.\n *\n * @see [[Tile#addRenderHelper]]\n */\nexport class FadingFeatureMixin implements FadingFeature {\n    needsUpdate?: boolean;\n    uniformsNeedUpdate?: boolean;\n    defines?: any;\n    shaderDefines?: any;\n    shaderUniforms?: UniformsType;\n    onBeforeCompile?: CompileCallback;\n    private m_fadeNear: number = FadingFeature.DEFAULT_FADE_NEAR;\n    private m_fadeFar: number = FadingFeature.DEFAULT_FADE_FAR;\n\n    /**\n     * @see [[FadingFeature#fadeNear]]\n     */\n    protected getFadeNear(): number {\n        return this.m_fadeNear;\n    }\n    /**\n     * @see [[FadingFeature#fadeNear]]\n     */\n    protected setFadeNear(value: number) {\n        const needsUpdate = value !== this.m_fadeNear;\n        if (needsUpdate) {\n            this.m_fadeNear = value;\n            FadingFeature.updateFadingFeature(this);\n        }\n    }\n\n    /**\n     * @see [[FadingFeature#fadeFar]]\n     */\n    protected getFadeFar(): number {\n        return this.m_fadeFar;\n    }\n    /**\n     * @see [[FadingFeature#fadeFar]]\n     */\n    protected setFadeFar(value: number) {\n        const needsUpdate = value !== this.m_fadeFar;\n        if (needsUpdate) {\n            this.m_fadeFar = value;\n            FadingFeature.updateFadingFeature(this);\n        }\n    }\n\n    /**\n     * The mixin classes should call this method to register the properties [[fadeNear]] and\n     * [[fadeFar]].\n     */\n    protected addFadingProperties(): void {\n        Object.defineProperty(this, \"fadeNear\", {\n            get: () => {\n                return this.getFadeNear();\n            },\n            set: val => {\n                this.setFadeNear(val);\n            }\n        });\n        Object.defineProperty(this, \"fadeFar\", {\n            get: () => {\n                return this.getFadeFar();\n            },\n            set: val => {\n                this.setFadeFar(val);\n            }\n        });\n    }\n\n    /**\n     * Apply the fadeNear/fadeFar values from the parameters to the respective properties.\n     *\n     * @param params `FadingMeshBasicMaterial` parameters.\n     */\n    protected applyFadingParameters(params?: FadingFeatureParameters) {\n        // Prepare maps for holding uniforms and defines references from the actual material.\n        linkMixinWithMaterial(this, this);\n\n        assert(this.shaderDefines !== undefined);\n        assert(this.shaderUniforms !== undefined);\n\n        // Create uniforms with default values, this ensures they are always set created,\n        // so no need for checks in setters.\n        this.shaderUniforms!.fadeNear = new THREE.Uniform(FadingFeature.DEFAULT_FADE_NEAR);\n        this.shaderUniforms!.fadeFar = new THREE.Uniform(FadingFeature.DEFAULT_FADE_FAR);\n\n        // Apply initial parameter values.\n        if (params !== undefined) {\n            if (params.fadeNear !== undefined) {\n                this.setFadeNear(params.fadeNear);\n            }\n            if (params.fadeFar !== undefined) {\n                this.setFadeFar(params.fadeFar);\n            }\n        }\n\n        this.onBeforeCompile = chainCallbacks(this.onBeforeCompile, (shader: THREE.Shader) => {\n            FadingFeature.onBeforeCompile(this, shader);\n        });\n        // Update (re-compile) shader code to include new shader chunks only if feature is enabled.\n        this.needsUpdate = FadingFeature.isEnabled(this);\n    }\n\n    /**\n     * Copy fadeNear/fadeFar values from other FadingFeature.\n     *\n     * @param source The material to copy property values from.\n     */\n    protected copyFadingParameters(source: FadingFeature) {\n        this.setFadeNear(\n            source.fadeNear === undefined ? FadingFeature.DEFAULT_FADE_NEAR : source.fadeNear\n        );\n        this.setFadeFar(\n            source.fadeFar === undefined ? FadingFeature.DEFAULT_FADE_FAR : source.fadeFar\n        );\n        return this;\n    }\n}\n\nexport namespace ExtrusionFeature {\n    /**\n     * Checks if feature is enabled based on [[ExtrusionFeature]] properties.\n     *\n     * @param extrusionMaterial\n     */\n    export function isEnabled(extrusionMaterial: ExtrusionFeature) {\n        return (\n            extrusionMaterial.extrusionRatio !== undefined &&\n            extrusionMaterial.extrusionRatio >= ExtrusionFeatureDefs.DEFAULT_RATIO_MIN\n        );\n    }\n\n    /**\n     * Patch the THREE.ShaderChunk on first call with some extra shader chunks.\n     */\n    export function patchGlobalShaderChunks() {\n        if (THREE.ShaderChunk.extrusion_pars_vertex === undefined) {\n            Object.assign(THREE.ShaderChunk, extrusionShaderChunk);\n        }\n    }\n\n    /**\n     * Update the internals of the `ExtrusionFeature` depending on the value of [[extrusionRatio]].\n     *\n     * @param ExtrusionMaterial ExtrusionFeature\n     */\n    export function updateExtrusionFeature(extrusionMaterial: ExtrusionFeature): void {\n        assert(extrusionMaterial.shaderDefines !== undefined);\n        assert(extrusionMaterial.shaderUniforms !== undefined);\n\n        // Setup shader define that when changed will force material re-compile.\n        const useExtrusion = isEnabled(extrusionMaterial);\n        // Use shader define as marker if feature is enabled/disabled, this is not necessary\n        // required, but material requires update (re-compile) anyway to add/remove shader chunks.\n        const needsUpdate = setShaderDefine(\n            extrusionMaterial.shaderDefines,\n            \"EXTRUSION_MATERIAL\",\n            useExtrusion\n        );\n        // Enable/disable entire feature with material re-compile.\n        extrusionMaterial.needsUpdate = needsUpdate;\n\n        // Update uniform with new value\n        if (useExtrusion) {\n            extrusionMaterial.shaderUniforms!.extrusionRatio.value =\n                extrusionMaterial.extrusionRatio;\n        }\n        // Reset uniform to default, one time only, when feature is disabled (just for clarity).\n        else if (needsUpdate) {\n            extrusionMaterial.shaderUniforms!.extrusionRatio.value =\n                ExtrusionFeatureDefs.DEFAULT_RATIO_MAX;\n        }\n    }\n\n    /**\n     * This function should be called on implementors of ExtrusionFeature in the `onBeforeCompile`\n     * callback of that material. It adds the required code to the shaders and declares the new\n     * uniforms that control extrusion.\n     *\n     * @param extrusionMaterial Material to add uniforms to.\n     * @param shader [[THREE.WebGLShader]] containing the vertex and fragment shaders to add the\n     *                  special includes to.\n     */\n    export function onBeforeCompile(extrusionMaterial: ExtrusionFeature, shader: THREE.Shader) {\n        if (!isEnabled(extrusionMaterial)) {\n            return;\n        }\n        assert(extrusionMaterial.shaderUniforms !== undefined);\n\n        // The vertex and fragment shaders have been constructed dynamically. The uniforms and\n        // the shader includes are now appended to them. No defines are required to preprocess\n        // shader chunks, but we utilize one just to note the feature is enabled/disabled\n        // (easier debugging), this define may be easily stripped out or replaced with simple\n        // boolean flag.\n        linkMixinWithShader(extrusionMaterial, shader);\n\n        shader.vertexShader = insertShaderInclude(\n            shader.vertexShader,\n            \"common\",\n            \"extrusion_pars_vertex\"\n        );\n\n        shader.vertexShader = insertShaderInclude(\n            shader.vertexShader,\n            \"begin_vertex\",\n            \"extrusion_vertex\",\n            true\n        );\n\n        shader.fragmentShader = insertShaderInclude(\n            shader.fragmentShader,\n            \"fog_pars_fragment\",\n            \"extrusion_pars_fragment\"\n        );\n\n        shader.fragmentShader = shader.fragmentShader.replace(\n            \"#include <normal_fragment_begin>\",\n            \"#include <extrusion_normal_fragment_begin>\"\n        );\n\n        shader.fragmentShader = insertShaderInclude(\n            shader.fragmentShader,\n            \"fog_fragment\",\n            \"extrusion_fragment\",\n            true\n        );\n    }\n}\n\n/**\n * Mixin class for extended THREE materials. Adds new properties required for `extrusionRatio`.\n *\n * There is some special handling for the extrusionRatio property, which is animated via\n * [[AnimatedExtrusionHandler]] that is using [[extrusionRatio]] setter and getter to update\n * extrusion in a way that works well with the mixin and EdgeMaterial.\n */\nexport class ExtrusionFeatureMixin implements ExtrusionFeature {\n    needsUpdate?: boolean;\n    uniformsNeedUpdate?: boolean;\n    defines?: any;\n    shaderDefines?: any;\n    shaderUniforms?: UniformsType;\n    onBeforeCompile?: CompileCallback;\n    private m_extrusion: number = ExtrusionFeatureDefs.DEFAULT_RATIO_MAX;\n\n    /**\n     * @see [[ExtrusionFeature#extrusion]]\n     */\n    protected getExtrusionRatio(): number {\n        return this.m_extrusion;\n    }\n    /**\n     * @see [[ExtrusionFeature#extrusion]]\n     */\n    protected setExtrusionRatio(value: number) {\n        const needsUpdate = value !== this.m_extrusion;\n        if (needsUpdate) {\n            this.m_extrusion = value;\n            ExtrusionFeature.updateExtrusionFeature(this);\n        }\n    }\n\n    /**\n     * The mixin class should call this method to register the property [[extrusionRatio]]\n     */\n    protected addExtrusionProperties(): void {\n        Object.defineProperty(this, \"extrusionRatio\", {\n            get: () => {\n                return this.getExtrusionRatio();\n            },\n            set: val => {\n                this.setExtrusionRatio(val);\n            }\n        });\n    }\n\n    /**\n     * Apply the extrusionRatio value from the parameters to the respective properties.\n     */\n    protected applyExtrusionParameters(params?: ExtrusionFeatureParameters) {\n        // Prepare maps for holding uniforms and defines references from the actual material.\n        linkMixinWithMaterial(this, this);\n\n        assert(this.shaderDefines !== undefined);\n        assert(this.shaderUniforms !== undefined);\n\n        if (params && params.zFightingWorkaround === true) {\n            this.shaderDefines.ZFIGHTING_WORKAROUND = \"\";\n        }\n\n        // Create uniform with default value, this ensures that it is always created,\n        // so no need for checks in setters.\n        this.shaderUniforms!.extrusionRatio = new THREE.Uniform(\n            ExtrusionFeatureDefs.DEFAULT_RATIO_MAX\n        );\n\n        // Apply initial parameter values.\n        if (params !== undefined) {\n            if (params.extrusionRatio !== undefined) {\n                this.setExtrusionRatio(params.extrusionRatio);\n            }\n        }\n\n        this.onBeforeCompile = chainCallbacks(this.onBeforeCompile, (shader: THREE.Shader) => {\n            ExtrusionFeature.onBeforeCompile(this, shader);\n        });\n\n        this.needsUpdate = ExtrusionFeature.isEnabled(this);\n    }\n\n    /**\n     * Copy extrusionRatio values from other ExtrusionFeature.\n     *\n     * @param source The material to copy property values from.\n     */\n    protected copyExtrusionParameters(source: ExtrusionFeature) {\n        if (source.extrusionRatio !== undefined) {\n            this.setExtrusionRatio(source.extrusionRatio);\n        }\n        return this;\n    }\n}\n\n/**\n * Subclass of [[THREE.MeshBasicMaterial]]. Adds new properties required for [[fadeNear]] and\n * [[fadeFar]]. In addition to the new properties (which update their respective uniforms), it is\n * also required to update the material in their objects [[onBeforeRender]] and [[OnAfterRender]]\n * calls, where their flag [[transparent]] is set and the internal fadeNear/fadeFar values are\n * updated to world space distances.\n *\n * @see [[Tile#addRenderHelper]]\n */\nexport class MapMeshBasicMaterial extends THREE.MeshBasicMaterial\n    implements FadingFeature, ExtrusionFeature, DisplacementFeature {\n    /**\n     * Constructs a new `FadingMeshBasicMaterial`.\n     *\n     * @param params `FadingMeshBasicMaterial` parameters.\n     */\n    constructor(\n        params?: THREE.MeshBasicMaterialParameters &\n            FadingFeatureParameters &\n            ExtrusionFeatureParameters &\n            DisplacementFeatureParameters\n    ) {\n        super(params);\n\n        FadingFeature.patchGlobalShaderChunks();\n\n        this.addFadingProperties();\n        this.applyFadingParameters(params);\n\n        ExtrusionFeature.patchGlobalShaderChunks();\n\n        this.addExtrusionProperties();\n        this.applyExtrusionParameters({ ...params, zFightingWorkaround: true });\n\n        this.addDisplacementProperties();\n        this.applyDisplacementParameters(params);\n    }\n\n    clone(): this {\n        return new MapMeshBasicMaterial().copy(this);\n    }\n\n    copy(source: this): any {\n        super.copy(source);\n        this.copyFadingParameters(source);\n        this.copyExtrusionParameters(source);\n        this.copyDisplacementParameters(source);\n        return this;\n    }\n\n    // Only here to make the compiler happy, these methods will be overriden: The actual\n    // implementations are those in [[FadingFeatureMixin]] and [[ExtrusionFeatureMixin]], see below:\n    //\n    // applyMixinsWithoutProperties(FadingMeshBasicMaterial, [FadingFeatureMixin]);\n    // applyMixinsWithoutProperties(ExtrudionMeshBasicMaterial, [ExtrusionFeatureMixin]);\n    //\n    // Mixin declarations start ---------------------------------------------------------\n\n    get fadeNear(): number {\n        return FadingFeature.DEFAULT_FADE_NEAR;\n    }\n    // tslint:disable-next-line:no-unused-variable\n    set fadeNear(value: number) {\n        // to be overridden\n    }\n\n    get fadeFar(): number {\n        return FadingFeature.DEFAULT_FADE_FAR;\n    }\n    // tslint:disable-next-line:no-unused-variable\n    set fadeFar(value: number) {\n        // to be overridden\n    }\n\n    get extrusionRatio(): number {\n        return ExtrusionFeatureDefs.DEFAULT_RATIO_MAX;\n    }\n    // tslint:disable-next-line:no-unused-variable\n    set extrusionRatio(value: number) {\n        // to be overridden\n    }\n\n    get displacementMap(): THREE.Texture | null {\n        return null;\n    }\n\n    // tslint:disable-next-line:no-unused-variable\n    set displacementMap(value: THREE.Texture | null) {\n        // to be overridden\n    }\n\n    // tslint:disable-next-line:no-unused-variable\n    setDisplacementMap(value: THREE.Texture | null) {\n        // to be overridden\n    }\n\n    protected addFadingProperties(): void {\n        // to be overridden\n    }\n\n    // tslint:disable-next-line:no-unused-variable\n    protected applyFadingParameters(params?: FadingFeatureParameters) {\n        // to be overridden\n    }\n\n    // tslint:disable-next-line:no-unused-variable\n    protected copyFadingParameters(source: FadingFeature) {\n        // to be overridden\n    }\n\n    protected addExtrusionProperties(): void {\n        // to be overridden\n    }\n\n    // tslint:disable-next-line:no-unused-variable\n    protected applyExtrusionParameters(params?: ExtrusionFeatureParameters) {\n        // to be overridden\n    }\n\n    // tslint:disable-next-line:no-unused-variable\n    protected copyExtrusionParameters(source: FadingFeature) {\n        // to be overridden\n    }\n\n    protected addDisplacementProperties(): void {\n        // to be overridden\n    }\n\n    // tslint:disable-next-line:no-unused-variable\n    protected applyDisplacementParameters(params?: DisplacementFeatureParameters) {\n        // to be overridden\n    }\n\n    // tslint:disable-next-line:no-unused-variable\n    protected copyDisplacementParameters(source: DisplacementFeature) {\n        // to be overridden\n    }\n    // Mixin declarations end -----------------------------------------------------------\n}\n\nexport class MapMeshDepthMaterial extends THREE.MeshDepthMaterial implements ExtrusionFeature {\n    constructor(params?: THREE.MeshDepthMaterialParameters & ExtrusionFeatureParameters) {\n        super(params);\n\n        ExtrusionFeature.patchGlobalShaderChunks();\n\n        this.addExtrusionProperties();\n\n        // We need to set these to false, because otherwise three.js complains that there are\n        // outputs of the vertex shader not used in the pixel shader, the properties in question\n        // are `vExtrusionRatio` and `vExtrusionAxis`.\n        this.applyExtrusionParameters({ ...params, zFightingWorkaround: false });\n        this.flatShading = false;\n    }\n\n    // Only here to make the compiler happy, these methods will be overriden: The actual\n    // implementations are those in[[ExtrusionFeatureMixin]], see below:\n    //\n    // applyMixinsWithoutProperties(...);\n    //\n\n    // Mixin declarations start ---------------------------------------------------------\n    get extrusionRatio(): number {\n        return ExtrusionFeatureDefs.DEFAULT_RATIO_MAX;\n    }\n    // tslint:disable-next-line:no-unused-variable\n    set extrusionRatio(value: number) {\n        // to be overridden\n    }\n\n    protected addExtrusionProperties(): void {\n        // to be overridden\n    }\n\n    // tslint:disable-next-line:no-unused-variable\n    protected applyExtrusionParameters(params?: ExtrusionFeatureParameters) {\n        // to be overridden\n    }\n\n    // tslint:disable-next-line:no-unused-variable\n    protected copyExtrusionParameters(source: FadingFeature) {\n        // to be overridden\n    }\n    // Mixin declarations end -----------------------------------------------------------\n}\n\n/**\n * Subclass of THREE.MeshStandardMaterial. Adds new properties required for `fadeNear` and\n * `fadeFar`. In addition to the new properties (which fill respective uniforms), it is also\n * required to update the material in their objects `onBeforeRender` and `OnAfterRender` calls,\n * where their flag `transparent` is set and the internal fadeNear/fadeFar values are updated to\n * world space distances.\n *\n * @see [[Tile#addRenderHelper]]\n */\nexport class MapMeshStandardMaterial extends THREE.MeshStandardMaterial\n    implements FadingFeature, ExtrusionFeature, DisplacementFeature {\n    uniformsNeedUpdate?: boolean;\n\n    /**\n     * Constructs a new `FadingMeshStandardMaterial`.\n     *\n     * @param params `FadingMeshStandardMaterial` parameters.\n     */\n    constructor(\n        params?: THREE.MeshStandardMaterialParameters &\n            FadingFeatureParameters &\n            ExtrusionFeatureParameters &\n            ShadowFeatureParameters\n    ) {\n        super(params);\n\n        FadingFeature.patchGlobalShaderChunks();\n\n        this.addFadingProperties();\n        this.applyFadingParameters(params);\n\n        ExtrusionFeature.patchGlobalShaderChunks();\n\n        this.addExtrusionProperties();\n        this.applyExtrusionParameters({ ...params, zFightingWorkaround: true });\n\n        if (params?.removeDiffuseLight === true) {\n            this.onBeforeCompile = chainCallbacks(this.onBeforeCompile, shader => {\n                shader.fragmentShader = THREE.ShaderChunk.meshphysical_frag.replace(\n                    \"#include <lights_physical_pars_fragment>\",\n                    simpleLightingShadowChunk\n                );\n            });\n        }\n    }\n\n    clone(): this {\n        return new MapMeshStandardMaterial().copy(this);\n    }\n\n    copy(source: this): any {\n        super.copy(source);\n        this.copyFadingParameters(source);\n        this.copyExtrusionParameters(source);\n        return this;\n    }\n\n    /** @override */\n    get displacementMap(): THREE.Texture | null {\n        return super.displacementMap === undefined ? null : super.displacementMap;\n    }\n\n    /** @override */\n    set displacementMap(map: THREE.Texture | null) {\n        if (map === this.displacementMap) {\n            return;\n        }\n\n        if (!map || !this.displacementMap) {\n            this.needsUpdate = true;\n        }\n\n        if (map) {\n            map.needsUpdate = true;\n        }\n        super.displacementMap = map;\n    }\n\n    // Only here to make the compiler happy, these methods will be overriden: The actual\n    // implementations are those in [[FadingFeatureMixin]] and [[ExtrusionFeatureMixin]], see below:\n    //\n    // applyMixinsWithoutProperties(FadingMeshBasicMaterial, [FadingFeatureMixin]);\n    // applyMixinsWithoutProperties(ExtrudionMeshBasicMaterial, [ExtrusionFeatureMixin]);\n    //\n    // Mixin declarations start ---------------------------------------------------------\n\n    get fadeNear(): number {\n        return FadingFeature.DEFAULT_FADE_NEAR;\n    }\n    // tslint:disable-next-line:no-unused-variable\n    set fadeNear(value: number) {\n        // to be overridden\n    }\n\n    get fadeFar(): number {\n        return FadingFeature.DEFAULT_FADE_FAR;\n    }\n    // tslint:disable-next-line:no-unused-variable\n    set fadeFar(value: number) {\n        // to be overridden\n    }\n\n    get extrusionRatio(): number {\n        return ExtrusionFeatureDefs.DEFAULT_RATIO_MAX;\n    }\n    // tslint:disable-next-line:no-unused-variable\n    set extrusionRatio(value: number) {\n        // to be overridden\n    }\n\n    /**\n     * This is needed to simplify the lighting calculation, currently there is no support for\n     * switching this at runtime. It is required here to be a property because the parameters\n     * are applied to this material, and if this isn't here, three.js will complain that the\n     * property is missing.\n     * @internal\n     */\n    get removeDiffuseLight(): boolean {\n        return false;\n    }\n    /** @internal */\n    set removeDiffuseLight(val: boolean) {\n        // Stays empty.\n    }\n\n    protected addFadingProperties(): void {\n        // to be overridden\n    }\n\n    // tslint:disable-next-line:no-unused-variable\n    protected applyFadingParameters(params?: FadingFeatureParameters) {\n        // to be overridden\n    }\n\n    // tslint:disable-next-line:no-unused-variable\n    protected copyFadingParameters(source: FadingFeature) {\n        // to be overridden\n    }\n\n    protected addExtrusionProperties(): void {\n        // to be overridden\n    }\n\n    // tslint:disable-next-line:no-unused-variable\n    protected applyExtrusionParameters(params?: ExtrusionFeatureParameters) {\n        // to be overridden\n    }\n\n    // tslint:disable-next-line:no-unused-variable\n    protected copyExtrusionParameters(source: FadingFeature) {\n        // to be overridden\n    }\n    // Mixin declarations end -----------------------------------------------------------\n}\n\n/**\n * Finish the classes MapMeshBasicMaterial and MapMeshStandardMaterial by assigning them the actual\n * implementations of the mixed in functions.\n */\napplyMixinsWithoutProperties(MapMeshBasicMaterial, [FadingFeatureMixin]);\napplyMixinsWithoutProperties(MapMeshStandardMaterial, [FadingFeatureMixin]);\napplyMixinsWithoutProperties(MapMeshBasicMaterial, [ExtrusionFeatureMixin]);\napplyMixinsWithoutProperties(MapMeshStandardMaterial, [ExtrusionFeatureMixin]);\napplyMixinsWithoutProperties(MapMeshDepthMaterial, [ExtrusionFeatureMixin]);\napplyMixinsWithoutProperties(MapMeshBasicMaterial, [DisplacementFeatureMixin]);\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * Lists supported line caps types/modes.\n */\nexport enum LineCapsModes {\n    CAPS_NONE = 0,\n    CAPS_SQUARE,\n    CAPS_ROUND,\n    CAPS_TRIANGLE_IN,\n    CAPS_TRIANGLE_OUT\n}\n\nexport default {\n    extrude_line_vert_func: `\nvec3 extrudeLine(\n        in vec3 vertexPosition,\n        in float linePosition,\n        in float extrusionWidth,\n        in vec4 bitangent,\n        in vec3 tangent,\n        in float tanHalfAngle,\n        inout vec2 uv\n    ) {\n    vec3 result = vertexPosition;\n    // Retrieve the angle between this segment and the previous one (stored in the bitangent w\n    // component).\n    float angle = bitangent.w;\n    // Extrude according to the angle between segments to properly render narrow joints...\n    if (angle != 0.0) {\n        result += uv.y * extrusionWidth * bitangent.xyz / cos(angle / 2.0);\n        uv.x = linePosition + uv.x * extrusionWidth * uv.y * tanHalfAngle;\n    }\n    // ... or extrude in a simple manner for segments that keep the same direction.\n    else {\n        result += uv.y * extrusionWidth * bitangent.xyz + uv.x * extrusionWidth * tangent;\n        uv.x = linePosition + uv.x * extrusionWidth;\n    }\n    uv.y *= extrusionWidth;\n    return result;\n}\n`,\n    round_edges_and_add_caps: `\n#define CAPS_NONE ${LineCapsModes.CAPS_NONE}\n#define CAPS_SQUARE ${LineCapsModes.CAPS_SQUARE}\n#define CAPS_ROUND ${LineCapsModes.CAPS_ROUND}\n#define CAPS_TRIANGLE_IN ${LineCapsModes.CAPS_TRIANGLE_IN}\n#define CAPS_TRIANGLE_OUT ${LineCapsModes.CAPS_TRIANGLE_OUT}\n\nfloat roundEdgesAndAddCaps(in vec4 coords, in vec3 range) {\n    // Compute the line's width to length ratio.\n    float widthRatio = range.y / range.x;\n\n    // Compute the inner segment distance (same for all cap mode).\n    float dist = abs(coords.y);\n    float segmentBeginMask = clamp(ceil(coords.z - coords.x), 0.0, 1.0);\n    float segmentEndMask = clamp(ceil(coords.x - coords.w), 0.0, 1.0);\n    dist = max(dist, segmentBeginMask * length(vec2((coords.x - coords.z) / widthRatio, coords.y)));\n    dist = max(dist, segmentEndMask * length(vec2((coords.x - coords.w) / widthRatio, coords.y)));\n\n    #if CAPS_MODE != CAPS_ROUND\n    // Compute the caps mask.\n    float capRangeMask = clamp(1.0 - ceil(range.z - drawRange.y), 0.0, 1.0);\n    float beginCapMask = clamp(ceil(drawRange.x - coords.x), 0.0, 1.0);\n    float endCapMask = clamp(ceil(coords.x - drawRange.y), 0.0, 1.0);\n    float capMask = capRangeMask * max(beginCapMask, endCapMask);\n\n    // Compute the outer segment distance (specific for each cap mode).\n    float capDist = max(coords.x - drawRange.y, drawRange.x - coords.x) / widthRatio;\n    #if CAPS_MODE == CAPS_NONE\n    dist = mix(dist, max(abs(coords.y), (capDist + 0.1) / 0.1), capMask);\n    #elif CAPS_MODE == CAPS_SQUARE\n    dist = mix(dist, max(abs(coords.y), capDist), capMask);\n    #elif CAPS_MODE == CAPS_TRIANGLE_OUT\n    dist = mix(dist, abs(coords.y) + capDist, capMask);\n    #elif CAPS_MODE == CAPS_TRIANGLE_IN\n    dist = mix(dist, max(abs(coords.y), (capDist - abs(coords.y)) + capDist), capMask);\n    #endif\n    #endif // CAPS_MODE != CAPS_ROUND\n\n    return dist;\n}\n`,\n    tile_clip_func: `\nvoid tileClip(vec2 tilePos, vec2 tileSize) {\n    if (tileSize.x > 0.0 && (tilePos.x < -tileSize.x / 2.0 || tilePos.x > tileSize.x / 2.0))\n        discard;\n    if (tileSize.y > 0.0 && (tilePos.y < -tileSize.y / 2.0 || tilePos.y > tileSize.y / 2.0))\n        discard;\n}\n`,\n    high_precision_vert_func: `\nvec3 subtractDblEyePos( const in vec3 pos ) {\n    vec3 t1 = positionLow - u_eyepos_lowpart;\n    vec3 e = t1 - positionLow;\n    vec3 t2 = ((-u_eyepos_lowpart - e) + (positionLow - (t1 - e))) + pos - u_eyepos;\n    vec3 high_delta = t1 + t2;\n    vec3 low_delta = t2 - (high_delta - t1);\n    return (high_delta + low_delta);\n}\n`\n};\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\nimport { assert } from \"@here/harp-utils\";\nimport { Color } from \"three\";\nimport { ColorUtils } from \"./ColorUtils\";\n\nconst tmpColor = new Color();\n\n/**\n * Enumeration of supported string encoded numerals.\n */\nexport enum StringEncodedNumeralType {\n    Meters,\n    Pixels,\n    Hex,\n    RGB,\n    RGBA,\n    HSL\n}\n\n/**\n * Interface containing information about a [[StringEncodedNumeral]] format, component size and\n * evaluation.\n */\nexport interface StringEncodedNumeralFormat {\n    readonly type: StringEncodedNumeralType;\n    readonly size: number;\n    readonly regExp: RegExp;\n    mask?: number;\n    decoder: (encodedValue: string, target: number[]) => boolean;\n}\nconst StringEncodedMeters: StringEncodedNumeralFormat = {\n    type: StringEncodedNumeralType.Meters,\n    size: 1,\n    regExp: /^((?=\\.\\d|\\d)(?:\\d+)?(?:\\.?\\d*))m$/,\n    decoder: (encodedValue: string, target: number[]) => {\n        const match = StringEncodedMeters.regExp.exec(encodedValue);\n        return match ? (target[0] = Number(match[1])) !== undefined : false;\n    }\n};\nconst StringEncodedPixels: StringEncodedNumeralFormat = {\n    type: StringEncodedNumeralType.Pixels,\n    size: 1,\n    mask: 1.0,\n    regExp: /^((?=\\.\\d|\\d)(?:\\d+)?(?:\\.?\\d*))px$/,\n    decoder: (encodedValue: string, target: number[]) => {\n        const match = StringEncodedPixels.regExp.exec(encodedValue);\n        if (match === null) {\n            return false;\n        }\n        target[0] = Number(match[1]);\n        return true;\n    }\n};\nconst StringEncodedHex: StringEncodedNumeralFormat = {\n    type: StringEncodedNumeralType.Hex,\n    size: 4,\n    regExp: /^\\#((?:[0-9A-Fa-f][0-9A-Fa-f]){3,4}|[0-9A-Fa-f]{3,4})$/,\n    decoder: (encodedValue: string, target: number[]) => {\n        const match = StringEncodedHex.regExp.exec(encodedValue);\n        if (match === null) {\n            return false;\n        }\n        const hex = match[1];\n        const size = hex.length;\n        // Only few sizes are possible for given reg-exp.\n        assert(\n            size === 3 || size === 4 || size === 6 || size === 8,\n            `Matched incorrect hex color format`\n        );\n        // Note that we simply ignore alpha channel value.\n        // TODO: To be resolved with HARP-7517\n        if (size === 3 || size === 4) {\n            // #RGB or #RGBA\n            target[0] = parseInt(hex.charAt(0) + hex.charAt(0), 16) / 255;\n            target[1] = parseInt(hex.charAt(1) + hex.charAt(1), 16) / 255;\n            target[2] = parseInt(hex.charAt(2) + hex.charAt(2), 16) / 255;\n            target[3] = size === 4 ? parseInt(hex.charAt(3) + hex.charAt(3), 16) / 255 : 1;\n        } else if (size === 6 || size === 8) {\n            // #RRGGBB or #RRGGBBAA\n            target[0] = parseInt(hex.charAt(0) + hex.charAt(1), 16) / 255;\n            target[1] = parseInt(hex.charAt(2) + hex.charAt(3), 16) / 255;\n            target[2] = parseInt(hex.charAt(4) + hex.charAt(5), 16) / 255;\n            target[3] = size === 8 ? parseInt(hex.charAt(6) + hex.charAt(7), 16) / 255 : 1;\n        }\n        return true;\n    }\n};\nconst StringEncodedRGB: StringEncodedNumeralFormat = {\n    type: StringEncodedNumeralType.RGB,\n    size: 3,\n    // tslint:disable-next-line:max-line-length\n    regExp: /^rgb\\( ?(?:([0-9]{1,2}|1[0-9]{1,2}|2[0-4][0-9]|25[0-5]), ?)(?:([0-9]{1,2}|1[0-9]{1,2}|2[0-4][0-9]|25[0-5]), ?)(?:([0-9]{1,2}|1[0-9]{1,2}|2[0-4][0-9]|25[0-5])) ?\\)$/,\n    decoder: (encodedValue: string, target: number[]) => {\n        const channels = StringEncodedRGB.regExp.exec(encodedValue);\n        if (channels === null) {\n            return false;\n        }\n        target[0] = parseInt(channels[1], 10) / 255;\n        target[1] = parseInt(channels[2], 10) / 255;\n        target[2] = parseInt(channels[3], 10) / 255;\n        return true;\n    }\n};\nconst StringEncodedRGBA: StringEncodedNumeralFormat = {\n    type: StringEncodedNumeralType.RGBA,\n    size: 4,\n    // tslint:disable-next-line:max-line-length\n    regExp: /^rgba\\( ?(?:([0-9]{1,2}|1[0-9]{1,2}|2[0-4][0-9]|25[0-5]), ?)(?:([0-9]{1,2}|1[0-9]{1,2}|2[0-4][0-9]|25[0-5]), ?)(?:([0-9]{1,2}|1[0-9]{1,2}|2[0-4][0-9]|25[0-5]), ?)(?:(0(?:\\.[0-9]+)?|1(?:\\.0+)?)) ?\\)$/,\n    decoder: (encodedValue: string, target: number[]) => {\n        const channels = StringEncodedRGBA.regExp.exec(encodedValue);\n        if (channels === null) {\n            return false;\n        }\n        target[0] = parseInt(channels[1], 10) / 255;\n        target[1] = parseInt(channels[2], 10) / 255;\n        target[2] = parseInt(channels[3], 10) / 255;\n        target[3] = parseFloat(channels[4]);\n        return true;\n    }\n};\nconst StringEncodedHSL: StringEncodedNumeralFormat = {\n    type: StringEncodedNumeralType.HSL,\n    size: 3,\n    // tslint:disable-next-line:max-line-length\n    regExp: /^hsl\\( ?((?:[0-9]|[1-9][0-9]|1[0-9]{1,2}|2[0-9]{1,2}|3[0-5][0-9]|360)), ?(?:([0-9]|[1-9][0-9]|100)%), ?(?:([0-9]|[1-9][0-9]|100)%) ?\\)$/,\n    decoder: (encodedValue: string, target: number[]) => {\n        const channels = StringEncodedHSL.regExp.exec(encodedValue);\n        if (channels === null) {\n            return false;\n        }\n        tmpColor.setHSL(\n            parseInt(channels[1], 10) / 360,\n            parseInt(channels[2], 10) / 100,\n            parseInt(channels[3], 10) / 100\n        );\n        target[0] = tmpColor.r;\n        target[1] = tmpColor.g;\n        target[2] = tmpColor.b;\n        return true;\n    }\n};\n\n/**\n * Array of all supported [[StringEncodedNumeralFormat]]s describing sizes, lengths and distances.\n */\nexport const StringEncodedMetricFormats: StringEncodedNumeralFormat[] = [\n    StringEncodedMeters,\n    StringEncodedPixels\n];\n\nconst StringEncodedMetricFormatMaxSize = StringEncodedMetricFormats.reduce(\n    (a, b) => Math.max(a, b.size),\n    0\n);\n\n/**\n * Array of all supported [[StringEncodedNumeralFormat]]s describing color data.\n */\nexport const StringEncodedColorFormats: StringEncodedNumeralFormat[] = [\n    StringEncodedHex,\n    StringEncodedRGB,\n    StringEncodedRGBA,\n    StringEncodedHSL\n];\n\nconst StringEncodedColorFormatMaxSize = StringEncodedColorFormats.reduce(\n    (a, b) => Math.max(a, b.size),\n    0\n);\n\n/**\n * Array of supported [[StringEncodedNumeralFormat]]s (intended to be indexed with\n * [[StringEncodedNumeralType]] enum).\n */\nexport const StringEncodedNumeralFormats: StringEncodedNumeralFormat[] = [\n    ...StringEncodedMetricFormats,\n    ...StringEncodedColorFormats\n];\n\nexport const StringEncodedNumeralFormatMaxSize = Math.max(\n    StringEncodedColorFormatMaxSize,\n    StringEncodedMetricFormatMaxSize\n);\n\nconst tmpBuffer: number[] = new Array(StringEncodedNumeralFormatMaxSize);\n\n/**\n * Parse string encoded numeral values using all known [[StringEncodedNumeralFormats]].\n *\n * @param numeral The string representing numeric value.\n * @param pixelToMeters The ratio used to convert from meters to pixels (default 1.0).\n * @returns Number parsed or __undefined__ if non of the numeral patterns matches the expression\n * provided in [[numeral]].\n */\nexport function parseStringEncodedNumeral(\n    numeral: string,\n    pixelToMeters: number = 1.0\n): number | undefined {\n    let result: number | undefined;\n    const formatMatch = (format: StringEncodedNumeralFormat) => {\n        if (format.decoder(numeral, tmpBuffer)) {\n            switch (format.type) {\n                case StringEncodedNumeralType.Meters:\n                    result = tmpBuffer[0];\n                    break;\n                case StringEncodedNumeralType.Pixels:\n                    result = tmpBuffer[0] * pixelToMeters;\n                    break;\n                case StringEncodedNumeralType.Hex:\n                case StringEncodedNumeralType.RGBA:\n                    result = ColorUtils.getHexFromRgba(\n                        tmpBuffer[0],\n                        tmpBuffer[1],\n                        tmpBuffer[2],\n                        tmpBuffer[3]\n                    );\n                    break;\n                case StringEncodedNumeralType.RGB:\n                case StringEncodedNumeralType.HSL:\n                    result = ColorUtils.getHexFromRgb(tmpBuffer[0], tmpBuffer[1], tmpBuffer[2]);\n                    break;\n                default:\n                    result = tmpBuffer[0];\n                    break;\n            }\n            return true;\n        }\n        return false;\n    };\n    StringEncodedNumeralFormats.some(formatMatch);\n    return result;\n}\n\n/**\n * Parse string encoded color value using all known [[StringEncodedColorFormats]].\n *\n * @param color The string encoded color expression (i.e. '#FFF', 'rgb(255, 0, 0)', etc.).\n * @returns The color parsed or __undefined__ if non of the known representations matches\n * the expression provided in [[color]].\n */\nexport function parseStringEncodedColor(color: string): number | undefined {\n    const matchedFormat = matchFormat(StringEncodedColorFormats, color, tmpBuffer);\n    if (matchedFormat === undefined) {\n        return undefined;\n    }\n    switch (matchedFormat.type) {\n        case StringEncodedNumeralType.Hex:\n        case StringEncodedNumeralType.RGBA:\n            return ColorUtils.getHexFromRgba(\n                tmpBuffer[0],\n                tmpBuffer[1],\n                tmpBuffer[2],\n                tmpBuffer[3]\n            );\n        case StringEncodedNumeralType.RGB:\n        case StringEncodedNumeralType.HSL:\n            return ColorUtils.getHexFromRgb(tmpBuffer[0], tmpBuffer[1], tmpBuffer[2]);\n        default:\n            return tmpBuffer[0];\n    }\n}\n\nfunction matchFormat(\n    formats: StringEncodedNumeralFormat[],\n    numeral: string,\n    result: number[]\n): StringEncodedNumeralFormat | undefined {\n    return formats.find(format => {\n        return format.decoder(numeral, result) ? true : false;\n    });\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport {\n    BaseTechniqueParams,\n    BasicExtrudedLineTechniqueParams,\n    ExtrudedPolygonTechniqueParams,\n    FillTechniqueParams,\n    isTextureBuffer,\n    LineTechniqueParams,\n    MarkerTechniqueParams,\n    PointTechniqueParams,\n    PolygonalTechniqueParams,\n    SegmentsTechniqueParams,\n    ShaderTechniqueParams,\n    SolidLineTechniqueParams,\n    StandardExtrudedLineTechniqueParams,\n    StandardTechniqueParams,\n    TerrainTechniqueParams,\n    TextTechniqueParams,\n    TextureCoordinateType\n} from \"./TechniqueParams\";\n\nimport { Expr, JsonExpr } from \"./Expr\";\nimport { InterpolatedPropertyDefinition } from \"./InterpolatedPropertyDefs\";\nimport {\n    AttrScope,\n    mergeTechniqueDescriptor,\n    TechniqueDescriptor,\n    TechniqueDescriptorRegistry\n} from \"./TechniqueDescriptor\";\n/**\n * Names of the supported texture properties.\n */\nexport const TEXTURE_PROPERTY_KEYS = [\n    \"map\",\n    \"normalMap\",\n    \"displacementMap\",\n    \"roughnessMap\",\n    \"emissiveMap\",\n    \"alphaMap\",\n    \"metalnessMap\",\n    \"bumpMap\"\n];\n\n/**\n * Names of the properties controlling transparency.\n */\nexport const TRANSPARENCY_PROPERTY_KEYS = [\"opacity\", \"transparent\"];\n\n// TODO: Can be removed, when all when interpolators are implemented as [[Expr]]s\nexport type RemoveInterpolatedPropDef<T> = T | InterpolatedPropertyDefinition<any> extends T\n    ? Exclude<T, InterpolatedPropertyDefinition<any>>\n    : T;\nexport type RemoveJsonExpr<T> = T | JsonExpr extends T ? Exclude<T, JsonExpr> : T;\n\n/**\n * Make runtime representation of technique attributes from JSON-compatible typings.\n *\n * Translates\n *  - InterpolatedPropertyDefinition -> InterpolatedProperty\n *  - JsonExpr -> Expr\n */\nexport type MakeTechniqueAttrs<T> = {\n    [P in keyof T]: T[P] | JsonExpr extends T[P]\n        ? RemoveInterpolatedPropDef<RemoveJsonExpr<T[P]>> | Expr\n        : T[P];\n};\n\nexport const techniqueDescriptors: TechniqueDescriptorRegistry = {};\n\nexport const baseTechniqueParamsDescriptor: TechniqueDescriptor<BaseTechniqueParams> = {\n    // TODO: Choose which techniques should support color with transparency.\n    // For now we chosen all, but it maybe not suitable for text or line marker techniques.\n    attrTransparencyColor: \"color\",\n    attrScopes: {\n        renderOrder: AttrScope.TechniqueGeometry,\n        enabled: AttrScope.FeatureGeometry,\n        kind: AttrScope.TechniqueGeometry,\n        transient: AttrScope.TechniqueGeometry,\n        fadeFar: AttrScope.TechniqueRendering,\n        fadeNear: AttrScope.TechniqueRendering\n    }\n};\n\nexport const pointTechniquePropTypes = mergeTechniqueDescriptor<PointTechniqueParams>(\n    baseTechniqueParamsDescriptor,\n    {\n        attrScopes: {\n            texture: AttrScope.TechniqueGeometry,\n            enablePicking: AttrScope.TechniqueGeometry,\n            color: AttrScope.TechniqueRendering,\n            transparent: AttrScope.TechniqueRendering,\n            opacity: AttrScope.TechniqueGeometry\n        }\n    }\n);\n\n/**\n * Runtime representation of [[SquaresStyle]] as parsed by [[StyleSetEvaluator]].\n * For technique parameters see [[PointTechniqueParams]].\n */\nexport interface SquaresTechnique extends MakeTechniqueAttrs<PointTechniqueParams> {\n    name: \"squares\";\n}\n\nexport const squaresTechniquePropTypes = mergeTechniqueDescriptor<SquaresTechnique>(\n    baseTechniqueParamsDescriptor,\n    pointTechniquePropTypes\n);\ntechniqueDescriptors.squares = squaresTechniquePropTypes;\n\n/**\n * Runtime representation of [[CirclesStyle]] as parsed by [[StyleSetEvaluator]].\n * For technique parameters see [[PointTechniqueParams]].\n */\nexport interface CirclesTechnique extends MakeTechniqueAttrs<PointTechniqueParams> {\n    name: \"circles\";\n}\n\nexport const circlesTechniquePropTypes = mergeTechniqueDescriptor<CirclesTechnique>(\n    baseTechniqueParamsDescriptor,\n    pointTechniquePropTypes\n);\ntechniqueDescriptors.circles = circlesTechniquePropTypes;\n\n/**\n * Runtime representation of [[PoiStyle]] as parsed by [[StyleSetEvaluator]].\n * For technique parameters see [[MarkerTechniqueParams]].\n */\nexport interface PoiTechnique extends MakeTechniqueAttrs<MarkerTechniqueParams> {\n    name: \"labeled-icon\";\n}\n\n/**\n * Runtime representation of [[LineMarkerStyle]] as parsed by [[StyleSetEvaluator]].\n * For technique parameters see [[MarkerTechniqueParams]].\n */\nexport interface LineMarkerTechnique extends MakeTechniqueAttrs<MarkerTechniqueParams> {\n    name: \"line-marker\";\n}\n\nconst lineMarkerTechniquePropTypes = mergeTechniqueDescriptor<LineMarkerTechnique>(\n    baseTechniqueParamsDescriptor,\n    {\n        attrScopes: {\n            text: AttrScope.FeatureGeometry,\n            label: AttrScope.FeatureGeometry,\n            useAbbreviation: AttrScope.FeatureGeometry,\n            useIsoCode: AttrScope.FeatureGeometry,\n            priority: AttrScope.TechniqueGeometry,\n            textMinZoomLevel: AttrScope.TechniqueGeometry,\n            textMaxZoomLevel: AttrScope.TechniqueGeometry,\n            iconMinZoomLevel: AttrScope.TechniqueGeometry,\n            iconMaxZoomLevel: AttrScope.TechniqueGeometry,\n            distanceScale: AttrScope.TechniqueGeometry,\n            textMayOverlap: AttrScope.TechniqueGeometry,\n            iconMayOverlap: AttrScope.TechniqueGeometry,\n            textReserveSpace: AttrScope.TechniqueGeometry,\n            iconReserveSpace: AttrScope.TechniqueGeometry,\n            renderTextDuringMovements: AttrScope.TechniqueGeometry,\n            alwaysOnTop: AttrScope.TechniqueGeometry,\n            textIsOptional: AttrScope.TechniqueGeometry,\n            showOnMap: AttrScope.TechniqueGeometry,\n            stackMode: AttrScope.TechniqueGeometry,\n            minDistance: AttrScope.TechniqueGeometry,\n            iconIsOptional: AttrScope.TechniqueGeometry,\n            iconFadeTime: AttrScope.TechniqueGeometry,\n            textFadeTime: AttrScope.TechniqueGeometry,\n            xOffset: AttrScope.TechniqueGeometry,\n            yOffset: AttrScope.TechniqueGeometry,\n            iconXOffset: AttrScope.TechniqueGeometry,\n            iconYOffset: AttrScope.TechniqueGeometry,\n            iconScale: AttrScope.TechniqueGeometry,\n            screenHeight: AttrScope.TechniqueGeometry,\n            screenWidth: AttrScope.TechniqueGeometry,\n            poiTable: AttrScope.TechniqueGeometry,\n            poiName: AttrScope.FeatureGeometry,\n            poiNameField: AttrScope.TechniqueGeometry,\n            imageTexture: AttrScope.FeatureGeometry,\n            imageTextureField: AttrScope.TechniqueGeometry,\n            imageTexturePrefix: AttrScope.TechniqueGeometry,\n            imageTexturePostfix: AttrScope.TechniqueGeometry,\n            style: AttrScope.TechniqueGeometry,\n            fontName: AttrScope.TechniqueGeometry,\n            fontStyle: AttrScope.TechniqueGeometry,\n            fontVariant: AttrScope.TechniqueGeometry,\n            rotation: AttrScope.TechniqueGeometry,\n            tracking: AttrScope.TechniqueGeometry,\n            leading: AttrScope.TechniqueGeometry,\n            maxLines: AttrScope.TechniqueGeometry,\n            lineWidth: AttrScope.TechniqueGeometry,\n            canvasRotation: AttrScope.TechniqueGeometry,\n            lineRotation: AttrScope.TechniqueGeometry,\n            wrappingMode: AttrScope.TechniqueGeometry,\n            hAlignment: AttrScope.TechniqueGeometry,\n            vAlignment: AttrScope.TechniqueGeometry,\n            backgroundColor: AttrScope.TechniqueRendering,\n            backgroundSize: AttrScope.TechniqueRendering,\n            backgroundOpacity: AttrScope.TechniqueRendering,\n            color: AttrScope.TechniqueRendering,\n            opacity: AttrScope.TechniqueRendering,\n            size: AttrScope.TechniqueRendering\n        }\n    }\n);\ntechniqueDescriptors[\"line-marker\"] = lineMarkerTechniquePropTypes;\ntechniqueDescriptors[\"labeled-icon\"] = lineMarkerTechniquePropTypes;\n\n/**\n * Runtime representation of [[SegmentsStyle]] as parsed by [[StyleSetEvaluator]].\n * For technique parameters see [[SegmentsTechniqueParams]].\n */\nexport interface SegmentsTechnique extends MakeTechniqueAttrs<SegmentsTechniqueParams> {\n    name: \"segments\";\n}\n\nconst polygonalTechniqueDescriptor: TechniqueDescriptor<PolygonalTechniqueParams> = {\n    attrScopes: {\n        polygonOffset: AttrScope.TechniqueRendering,\n        polygonOffsetFactor: AttrScope.TechniqueRendering,\n        polygonOffsetUnits: AttrScope.TechniqueRendering,\n        lineColor: AttrScope.TechniqueRendering,\n        lineFadeFar: AttrScope.TechniqueRendering,\n        lineFadeNear: AttrScope.TechniqueRendering\n    }\n};\n/**\n * Runtime representation of [[BasicExtrudedLineStyle]] as parsed by [[StyleSetEvaluator]].\n * For technique parameters see [[BasicExtrudedLineTechniqueParams]].\n */\nexport interface BasicExtrudedLineTechnique\n    extends MakeTechniqueAttrs<BasicExtrudedLineTechniqueParams> {\n    name: \"extruded-line\";\n}\n\n/**\n * Runtime representation of [[StandardExtrudedLineStyle]] as parsed by [[StyleSetEvaluator]].\n * For technique parameters see [[StandardExtrudedLineTechniqueParams]].\n */\nexport interface StandardExtrudedLineTechnique\n    extends MakeTechniqueAttrs<StandardExtrudedLineTechniqueParams> {\n    name: \"extruded-line\";\n}\n\n/**\n * Runtime representation of [[SolidLineStyle]] as parsed by [[StyleSetEvaluator]].\n * For technique parameters see [[SolidLineTechniqueParams]].\n */\nexport interface SolidLineTechnique extends MakeTechniqueAttrs<SolidLineTechniqueParams> {\n    name: \"solid-line\" | \"dashed-line\";\n}\n\nexport const solidLineTechniqueDescriptor = mergeTechniqueDescriptor<SolidLineTechnique>(\n    baseTechniqueParamsDescriptor,\n    polygonalTechniqueDescriptor,\n    {\n        attrScopes: {\n            clipping: AttrScope.TechniqueGeometry,\n            secondaryRenderOrder: AttrScope.TechniqueGeometry,\n            color: AttrScope.TechniqueRendering,\n            opacity: AttrScope.TechniqueRendering,\n            transparent: AttrScope.TechniqueRendering,\n            lineWidth: AttrScope.TechniqueRendering,\n            secondaryWidth: AttrScope.TechniqueRendering,\n            secondaryColor: AttrScope.TechniqueRendering,\n            dashSize: AttrScope.TechniqueRendering,\n            gapSize: AttrScope.TechniqueRendering\n        }\n    }\n);\ntechniqueDescriptors[\"solid-line\"] = solidLineTechniqueDescriptor;\n// TODO: Remove deprecated \"dashed-line\" support in future releases.\ntechniqueDescriptors[\"dashed-line\"] = solidLineTechniqueDescriptor;\n\n/**\n * Runtime representation of [[LineStyle]] as parsed by [[StyleSetEvaluator]].\n * For technique parameters see [[LineTechniqueParams]].\n */\nexport interface LineTechnique extends MakeTechniqueAttrs<LineTechniqueParams> {\n    name: \"line\";\n}\n\nexport const lineTechniqueDescriptor = mergeTechniqueDescriptor<LineTechnique>(\n    baseTechniqueParamsDescriptor,\n    {\n        attrScopes: {\n            // TODO, check, which are really dynamic !\n            color: AttrScope.TechniqueRendering,\n            opacity: AttrScope.TechniqueRendering,\n            transparent: AttrScope.TechniqueRendering,\n            lineWidth: AttrScope.FeatureGeometry\n        }\n    }\n);\n\ntechniqueDescriptors.line = lineTechniqueDescriptor;\n\n/**\n * Runtime representation of [[FillStyle]] as parsed by [[StyleSetEvaluator]].\n * For technique parameters see [[FillTechniqueParams]].\n */\nexport interface FillTechnique extends MakeTechniqueAttrs<FillTechniqueParams> {\n    name: \"fill\";\n}\n\nconst fillTechniqueDescriptor = mergeTechniqueDescriptor<FillTechnique>(\n    baseTechniqueParamsDescriptor,\n    polygonalTechniqueDescriptor,\n    {\n        attrScopes: {\n            color: AttrScope.TechniqueRendering,\n            opacity: AttrScope.TechniqueRendering,\n            transparent: AttrScope.TechniqueRendering,\n            lineWidth: AttrScope.TechniqueRendering\n        }\n    }\n);\ntechniqueDescriptors.fill = fillTechniqueDescriptor;\n\n/**\n * Technique used to render a mesh geometry.\n * For technique parameters see [[StandardTechniqueParams]].\n */\nexport interface StandardTechnique extends MakeTechniqueAttrs<StandardTechniqueParams> {\n    name: \"standard\";\n}\nconst standardTechniqueDescriptor = mergeTechniqueDescriptor<StandardTechnique>(\n    baseTechniqueParamsDescriptor,\n    {\n        attrScopes: {\n            color: AttrScope.FeatureGeometry,\n            vertexColors: AttrScope.FeatureGeometry,\n            wireframe: AttrScope.TechniqueRendering,\n            roughness: AttrScope.TechniqueRendering,\n            metalness: AttrScope.TechniqueRendering,\n            alphaTest: AttrScope.TechniqueRendering,\n            depthTest: AttrScope.TechniqueRendering,\n            transparent: AttrScope.TechniqueRendering,\n            opacity: AttrScope.TechniqueRendering,\n            emissive: AttrScope.TechniqueRendering,\n            emissiveIntensity: AttrScope.TechniqueRendering,\n            refractionRatio: AttrScope.TechniqueRendering,\n            map: AttrScope.TechniqueGeometry,\n            mapProperties: AttrScope.TechniqueGeometry,\n            normalMap: AttrScope.TechniqueGeometry,\n            normalMapProperties: AttrScope.TechniqueGeometry,\n            displacementMap: AttrScope.TechniqueGeometry,\n            displacementMapProperties: AttrScope.TechniqueGeometry,\n            roughnessMap: AttrScope.TechniqueGeometry,\n            roughnessMapProperties: AttrScope.TechniqueGeometry,\n            emissiveMap: AttrScope.TechniqueGeometry,\n            emissiveMapProperties: AttrScope.TechniqueGeometry,\n            bumpMap: AttrScope.TechniqueGeometry,\n            bumpMapProperties: AttrScope.TechniqueGeometry,\n            metalnessMap: AttrScope.TechniqueGeometry,\n            metalnessMapProperties: AttrScope.TechniqueGeometry,\n            alphaMap: AttrScope.TechniqueGeometry,\n            alphaMapProperties: AttrScope.TechniqueGeometry\n        }\n    }\n);\ntechniqueDescriptors.standard = standardTechniqueDescriptor;\n\n/**\n * Runtime representation of [[ExtrudedPolygonStyle]] as parsed by [[StyleSetEvaluator]].\n * For technique parameters see [[ExtrudedPolygonTechniqueParams]].\n */\nexport interface ExtrudedPolygonTechnique\n    extends MakeTechniqueAttrs<ExtrudedPolygonTechniqueParams> {\n    name: \"extruded-polygon\";\n}\n\nconst extrudedPolygonTechniqueDescriptor = mergeTechniqueDescriptor<ExtrudedPolygonTechnique>(\n    baseTechniqueParamsDescriptor,\n    standardTechniqueDescriptor,\n    {\n        attrScopes: {\n            height: AttrScope.FeatureGeometry,\n            floorHeight: AttrScope.FeatureGeometry,\n            color: AttrScope.FeatureGeometry,\n            defaultColor: AttrScope.FeatureGeometry,\n            defaultHeight: AttrScope.FeatureGeometry,\n            constantHeight: AttrScope.FeatureGeometry,\n            boundaryWalls: AttrScope.FeatureGeometry,\n            footprint: AttrScope.FeatureGeometry,\n            maxSlope: AttrScope.FeatureGeometry,\n            enableDepthPrePass: AttrScope.TechniqueGeometry,\n            animateExtrusionDuration: AttrScope.TechniqueGeometry,\n            animateExtrusion: AttrScope.TechniqueRendering,\n            opacity: AttrScope.TechniqueRendering,\n            transparent: AttrScope.TechniqueRendering,\n            lineWidth: AttrScope.TechniqueRendering,\n            lineFadeNear: AttrScope.TechniqueRendering,\n            lineFadeFar: AttrScope.TechniqueRendering,\n            lineColorMix: AttrScope.TechniqueGeometry,\n            lineColor: AttrScope.TechniqueRendering\n        }\n    }\n);\ntechniqueDescriptors[\"extruded-polygon\"] = extrudedPolygonTechniqueDescriptor;\n/**\n * Runtime representation of [[TextStyle]] as parsed by [[StyleSetEvaluator]].\n * For technique parameters see [[TextTechniqueParams]].\n */\nexport interface TextTechnique extends MakeTechniqueAttrs<TextTechniqueParams> {\n    name: \"text\";\n}\n\nconst textTechniqueDescriptor = mergeTechniqueDescriptor<TextTechnique>(\n    baseTechniqueParamsDescriptor,\n    {\n        attrScopes: {\n            text: AttrScope.FeatureGeometry,\n            label: AttrScope.FeatureGeometry,\n            useAbbreviation: AttrScope.FeatureGeometry,\n            useIsoCode: AttrScope.FeatureGeometry,\n\n            minZoomLevel: AttrScope.TechniqueGeometry,\n            maxZoomLevel: AttrScope.TechniqueGeometry,\n            distanceScale: AttrScope.TechniqueGeometry,\n            mayOverlap: AttrScope.TechniqueGeometry,\n            reserveSpace: AttrScope.TechniqueGeometry,\n            textFadeTime: AttrScope.TechniqueGeometry,\n            xOffset: AttrScope.TechniqueGeometry,\n            yOffset: AttrScope.TechniqueGeometry,\n            style: AttrScope.TechniqueGeometry,\n            fontName: AttrScope.TechniqueGeometry,\n            fontStyle: AttrScope.TechniqueGeometry,\n            fontVariant: AttrScope.TechniqueGeometry,\n            rotation: AttrScope.TechniqueGeometry,\n            tracking: AttrScope.TechniqueGeometry,\n            leading: AttrScope.TechniqueGeometry,\n            maxLines: AttrScope.TechniqueGeometry,\n            lineWidth: AttrScope.TechniqueGeometry,\n            canvasRotation: AttrScope.TechniqueGeometry,\n            lineRotation: AttrScope.TechniqueGeometry,\n            wrappingMode: AttrScope.TechniqueGeometry,\n            hAlignment: AttrScope.TechniqueGeometry,\n            vAlignment: AttrScope.TechniqueGeometry,\n            backgroundColor: AttrScope.TechniqueRendering,\n            backgroundSize: AttrScope.TechniqueRendering,\n            backgroundOpacity: AttrScope.TechniqueRendering,\n            color: AttrScope.TechniqueRendering,\n            opacity: AttrScope.TechniqueRendering,\n            priority: AttrScope.TechniqueRendering,\n            size: AttrScope.TechniqueRendering\n        }\n    }\n);\ntechniqueDescriptors.text = textTechniqueDescriptor;\n\n/**\n * Special technique for user-defined shaders.\n * For technique parameters see [[ShaderTechniqueParams]].\n */\nexport interface ShaderTechnique extends MakeTechniqueAttrs<ShaderTechniqueParams> {\n    name: \"shader\";\n}\n\nconst shaderTechniqueDescriptor = mergeTechniqueDescriptor<ShaderTechnique>(\n    baseTechniqueParamsDescriptor,\n    {\n        attrScopes: {\n            primitive: AttrScope.TechniqueGeometry,\n            params: AttrScope.TechniqueRendering\n        }\n    }\n);\n\ntechniqueDescriptors.shader = shaderTechniqueDescriptor;\n\n/**\n * Technique used to render a terrain geometry with textures.\n * For technique parameters see [[TerrainTechniqueParams]].\n */\nexport interface TerrainTechnique extends MakeTechniqueAttrs<TerrainTechniqueParams> {\n    name: \"terrain\";\n}\n\n/**\n * Technique to avoid label rendering on top of certain line geometries.\n * For technique parameters see [[BaseTechniqueParams]].\n */\nexport interface LabelRejectionLineTechnique extends MakeTechniqueAttrs<BaseTechniqueParams> {\n    name: \"label-rejection-line\";\n}\n\n/**\n * Possible techniques that can be used to draw a geometry on the map.\n */\nexport type Technique =\n    | SquaresTechnique\n    | CirclesTechnique\n    | PoiTechnique\n    | LineMarkerTechnique\n    | LineTechnique\n    | SegmentsTechnique\n    | SolidLineTechnique\n    | FillTechnique\n    | StandardTechnique\n    | TerrainTechnique\n    | BasicExtrudedLineTechnique\n    | StandardExtrudedLineTechnique\n    | ExtrudedPolygonTechnique\n    | ShaderTechnique\n    | TextTechnique\n    | LabelRejectionLineTechnique;\n\n/**\n * Additional params used for optimized usage of `Techniques`.\n */\nexport interface IndexedTechniqueParams {\n    /**\n     * Optimization: Index into table in [[StyleSetEvaluator]] or in [[DecodedTile]].\n     * @hidden\n     */\n    _index: number;\n\n    /**\n     * Optimization: Unique [[Technique]] index of [[Style]] from which technique was derived.\n     * @hidden\n     */\n    _styleSetIndex: number;\n\n    /**\n     * The styleSet associated to this [[Technique]].\n     * @hidden\n     */\n    _styleSet?: string;\n\n    /**\n     * The category used to assign render orders to objects created using this [[Technique]].\n     * @hidden\n     */\n    _category?: string;\n\n    /**\n     * The category used to assign render orders to secondary objects\n     * created using this [[Technique]].\n     * @hidden\n     */\n    _secondaryCategory?: string;\n\n    /**\n     * `true` if any of the properties of this technique needs to access\n     * the feature's state.\n     *\n     * @hidden\n     */\n    _usesFeatureState?: boolean;\n\n    /**\n     * Last computed state derived from [[Technique.kind]].\n     */\n    _kindState?: boolean;\n}\n\n/**\n * For efficiency, [[StyleSetEvaluator]] returns [[Techniques]] additional params as defined in\n * [[IndexedTechniqueParams]].\n */\nexport type IndexedTechnique = Technique & IndexedTechniqueParams;\n\n/**\n * Type guard to check if an object is an instance of [[CirclesTechnique]].\n */\nexport function isCirclesTechnique(technique: Technique): technique is CirclesTechnique {\n    return technique.name === \"circles\";\n}\n\n/**\n * Type guard to check if an object is an instance of [[SquaresTechnique]].\n */\nexport function isSquaresTechnique(technique: Technique): technique is SquaresTechnique {\n    return technique.name === \"squares\";\n}\n\n/**\n * Type guard to check if an object is an instance of [[PoiTechnique]].\n */\nexport function isPoiTechnique(technique: Technique): technique is PoiTechnique {\n    return technique.name === \"labeled-icon\";\n}\n\n/**\n * Type guard to check if an object is an instance of [[LineMarkerTechnique]].\n */\nexport function isLineMarkerTechnique(technique: Technique): technique is LineMarkerTechnique {\n    return technique.name === \"line-marker\";\n}\n\n/**\n * Type guard to check if an object is an instance of [[LineTechnique]].\n */\nexport function isLineTechnique(technique: Technique): technique is LineTechnique {\n    return technique.name === \"line\";\n}\n\n/**\n * Type guard to check if an object is an instance of [[SolidLineTechnique]].\n */\nexport function isSolidLineTechnique(technique: Technique): technique is SolidLineTechnique {\n    return technique.name === \"solid-line\" || technique.name === \"dashed-line\";\n}\n\n/**\n * Type guard to check if an object is an instance of [[SolidLineTechnique]] and is a kind that\n * has special dashes.\n * @note Lines with special dashes need line caps to render properly.\n */\nexport function isSpecialDashesLineTechnique(\n    technique: Technique\n): technique is SolidLineTechnique {\n    return (\n        (technique.name === \"solid-line\" || technique.name === \"dashed-line\") &&\n        technique.dashes !== undefined &&\n        technique.dashes !== \"Square\"\n    );\n}\n\n/**\n * Type guard to check if an object is an instance of [[SegmentsTechnique]].\n */\nexport function isSegmentsTechnique(technique: Technique): technique is SegmentsTechnique {\n    return technique.name === \"segments\";\n}\n\n/**\n * Type guard to check if an object is an instance of [[BasicExtrudedLineTechnique]]\n * or [[StandardExtrudedLineTechnique]].\n */\nexport function isExtrudedLineTechnique(\n    technique: Technique\n): technique is BasicExtrudedLineTechnique | StandardExtrudedLineTechnique {\n    return technique.name === \"extruded-line\";\n}\n\n/**\n * Type guard to check if an object is an instance of [[BasicExtrudedLineTechnique]].\n */\nexport function isBasicExtrudedLineTechnique(\n    technique: Technique\n): technique is BasicExtrudedLineTechnique {\n    return isExtrudedLineTechnique(technique) && technique.shading === \"basic\";\n}\n\n/**\n * Type guard to check if an object is an instance of [[StandardExtrudedLineTechnique]].\n */\nexport function isStandardExtrudedLineTechnique(\n    technique: Technique\n): technique is StandardExtrudedLineTechnique {\n    return isExtrudedLineTechnique(technique) && technique.shading === \"standard\";\n}\n\n/**\n * Type guard to check if an object is an instance of [[FillTechnique]].\n */\nexport function isFillTechnique(technique: Technique): technique is FillTechnique {\n    return technique.name === \"fill\";\n}\n\n/**\n * Type guard to check if an object is an instance of [[ExtrudedPolygonTechnique]].\n */\nexport function isExtrudedPolygonTechnique(\n    technique: Technique\n): technique is ExtrudedPolygonTechnique {\n    return technique.name === \"extruded-polygon\";\n}\n\n/**\n * Type guard to check if an object is an instance of [[StandardTechnique]].\n */\nexport function isStandardTechnique(technique: Technique): technique is StandardTechnique {\n    return technique.name === \"standard\";\n}\n\n/**\n * Type guard to check if an object is an instance of [[TerrainTechnique]].\n */\nexport function isTerrainTechnique(technique: Technique): technique is TerrainTechnique {\n    return technique.name === \"terrain\";\n}\n\n/**\n * Type guard to check if an object is an instance of [[TextTechnique]].\n */\nexport function isTextTechnique(technique: Technique): technique is TextTechnique {\n    return technique.name === \"text\";\n}\n\n/**\n * Type guard to check if an object is an instance of [[ShaderTechnique]].\n */\nexport function isShaderTechnique(technique: Technique): technique is ShaderTechnique {\n    return technique.name === \"shader\";\n}\n\nexport function isLabelRejectionLineTechnique(\n    technique: Technique\n): technique is LabelRejectionLineTechnique {\n    return technique.name === \"label-rejection-line\";\n}\n\n/**\n * Check if vertex normals should be generated for this technique (if no normals are in the data).\n * @param technique Technique to check.\n */\nexport function needsVertexNormals(technique: Technique): boolean {\n    return (\n        isFillTechnique(technique) ||\n        isStandardTechnique(technique) ||\n        isTerrainTechnique(technique) ||\n        isStandardExtrudedLineTechnique(technique)\n    );\n}\n\n/**\n * Get the texture coordinate type if the technique supports it.\n */\nexport function textureCoordinateType(technique: Technique): TextureCoordinateType | undefined {\n    if (isStandardTechnique(technique)) {\n        return technique.textureCoordinateType;\n    } else if (isExtrudedPolygonTechnique(technique)) {\n        return technique.textureCoordinateType;\n    } else if (isTerrainTechnique(technique)) {\n        return technique.textureCoordinateType;\n    } else {\n        return undefined;\n    }\n}\n\n/**\n * Add all the buffers of the technique to the transfer list.\n */\nexport function addBuffersToTransferList(technique: Technique, transferList: ArrayBuffer[]) {\n    if (\n        isStandardTechnique(technique) ||\n        isExtrudedPolygonTechnique(technique) ||\n        isTerrainTechnique(technique)\n    ) {\n        for (const texturePropertyKey of TEXTURE_PROPERTY_KEYS) {\n            const textureProperty = (technique as any)[texturePropertyKey];\n            if (isTextureBuffer(textureProperty)) {\n                if (textureProperty.buffer instanceof ArrayBuffer) {\n                    transferList.push(textureProperty.buffer);\n                }\n            }\n        }\n    }\n}\n\n/**\n * Compose full texture name for given image name with technique specified.\n * Some techniques allows to add prefix/postfix to icons names specified, this\n * function uses technique information to create fully qualified texture name.\n * @param imageName base name of the marker icon.\n * @param technique the technique describing POI or line marker.\n * @returns fully qualified texture name for loading from atlas (without extension).\n */\nexport function composeTechniqueTextureName(\n    imageName: string,\n    technique: PoiTechnique | LineMarkerTechnique\n): string {\n    let textureName = imageName;\n    if (typeof technique.imageTexturePrefix === \"string\") {\n        textureName = technique.imageTexturePrefix + textureName;\n    }\n    if (typeof technique.imageTexturePostfix === \"string\") {\n        textureName = textureName + technique.imageTexturePostfix;\n    }\n    return textureName;\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\nimport { Definitions, StyleSet, Theme, ValueMap } from \"@here/harp-datasource-protocol\";\nimport { Projection, TileKey, TilingScheme } from \"@here/harp-geoutils\";\nimport { assert, LoggerManager } from \"@here/harp-utils\";\nimport * as THREE from \"three\";\nimport { MapView } from \"./MapView\";\nimport { Tile } from \"./Tile\";\n\nconst logger = LoggerManager.instance.create(\"DataSource\");\nconst UPDATE_EVENT = { type: \"update\" };\n\n/**\n * Options for a [[DataSource]].\n */\nexport interface DataSourceOptions {\n    /**\n     * The unique name of a [[DataSource]] instance.\n     */\n    name?: string;\n    /**\n     * The name of the [[StyleSet]] to evaluate for the decoding.\n     */\n    styleSetName?: string;\n    /**\n     * The minimum zoom level at which data is available or displayed at\n     * (depending on [[DataSource]] subclass).\n     * @deprecated Use [[minDataLevel]] and [[minDisplayLevel]] instead.\n     */\n    minZoomLevel?: number;\n    /**\n     * The maximum zoom level at which data is available or displayed at\n     * (depending on [[DataSource]] subclass).\n     * @deprecated Use [[maxDataLevel]] and [[maxDisplayLevel]] instead.\n     */\n    maxZoomLevel?: number;\n    /**\n     * The minimum zoom level at which data is available.\n     */\n    minDataLevel?: number;\n    /**\n     * The maximum zoom level at which data is available.\n     */\n    maxDataLevel?: number;\n    /**\n     * The minimum zoom level at which [[DataSource]] is displayed.\n     */\n    minDisplayLevel?: number;\n    /**\n     * The maximum zoom level at which [[DataSource]] is displayed.\n     */\n    maxDisplayLevel?: number;\n    /**\n     * Storage level offset applied to this `DataSource`.\n     */\n    storageLevelOffset?: number;\n}\n\n/**\n * Derive a class from `DataSource` to contribute data and geometries to the [[MapView]].\n */\nexport abstract class DataSource extends THREE.EventDispatcher {\n    /**\n     * A counter to generate unique names for each `DataSource`, if no name is provided in the\n     * constructor.\n     */\n    private static uniqueNameCounter: number = 0;\n\n    /**\n     * Set to `true` if this `DataSource` is enabled; `false` otherwise.\n     */\n    enabled: boolean = true;\n\n    /**\n     * Set to `true` if the [[MapView]] can cache tiles produced by this `DataSource`.\n     */\n    cacheable: boolean = false;\n\n    /**\n     * Set to `true` if the loader should be used to get the tile contents.\n     */\n    useGeometryLoader: boolean = false;\n\n    /**\n     * The unique name of a `DataSource` instance.\n     */\n    name: string;\n\n    /**\n     * Whether the datasource should have a ground plane (this plane covers the tile entirely and\n     * has the minimum possible renderOrder), this can be required in some cases when fallback\n     * parent tiles need to be covered by the children, otherwise the content will overlap.\n     * Default is false\n     */\n    addGroundPlane: boolean = false;\n\n    /**\n     * The minimum zoom level at which data is available.\n     */\n    minDataLevel: number = 1;\n\n    /**\n     * The maximum zoom level at which data is available.\n     */\n    maxDataLevel: number = 20;\n\n    /**\n     * The minimum zoom level at which [[DataSource]] is displayed.\n     */\n    minDisplayLevel: number = 1;\n\n    /**\n     * The maximum zoom level at which [[DataSource]] is displayed.\n     */\n    maxDisplayLevel: number = 20;\n\n    /**\n     * The [[MapView]] instance holding a reference to this `DataSource`.\n     */\n    private m_mapView?: MapView;\n\n    /**\n     * The name of the [[StyleSet]] to evaluate for the decoding.\n     */\n    private m_styleSetName?: string;\n\n    /**\n     * Current value of [[maxGeometryHeight]] property.\n     */\n    private m_maxGeometryHeight = 0;\n\n    /**\n     * Storage level offset applied to this `DataSource`.\n     */\n    private m_storageLevelOffset: number = 0;\n\n    private readonly m_featureStateMap = new Map<number, ValueMap>();\n\n    /**\n     * Constructs a new `DataSource`.\n     *\n     * @param options The options to create the data source.\n     */\n    constructor(options: DataSourceOptions = {}) {\n        super();\n        let { name } = options;\n        const {\n            styleSetName,\n            // tslint:disable-next-line: deprecation\n            minZoomLevel,\n            // tslint:disable-next-line: deprecation\n            maxZoomLevel,\n            minDataLevel,\n            maxDataLevel,\n            minDisplayLevel,\n            maxDisplayLevel,\n            storageLevelOffset\n        } = options;\n        if (name === undefined || name.length === 0) {\n            name = `anonymous-datasource#${++DataSource.uniqueNameCounter}`;\n        }\n        this.name = name;\n\n        this.styleSetName = styleSetName;\n\n        if (minDataLevel !== undefined) {\n            this.minDataLevel = minDataLevel;\n        }\n        if (maxDataLevel !== undefined) {\n            this.maxDataLevel = maxDataLevel;\n        }\n        if (minZoomLevel !== undefined) {\n            // tslint:disable-next-line: deprecation\n            this.minZoomLevel = minZoomLevel;\n        }\n        if (maxZoomLevel !== undefined) {\n            // tslint:disable-next-line: deprecation\n            this.maxZoomLevel = maxZoomLevel;\n        }\n        if (minDisplayLevel !== undefined) {\n            this.minDisplayLevel = minDisplayLevel;\n        }\n        if (maxDisplayLevel !== undefined) {\n            this.maxDisplayLevel = maxDisplayLevel;\n        }\n        if (storageLevelOffset !== undefined) {\n            this.m_storageLevelOffset = storageLevelOffset;\n        }\n    }\n\n    /**\n     * Gets the state of the given feature id.\n     *\n     * @param featureId The id of the feature.\n     */\n    getFeatureState(featureId: number): ValueMap | undefined {\n        return this.m_featureStateMap.get(featureId);\n    }\n\n    /**\n     * Clears the state of all the features of this [[DataSource]].\n     */\n    clearFeatureState() {\n        this.m_featureStateMap.clear();\n    }\n\n    /**\n     * Sets the state of the given feature id.\n     *\n     * ```typescript\n     * dataSource.setFeatureState(featureId, { enabled: true });\n     * ```\n     *\n     * @param featureId The id of the feature.\n     * @param state The new state of the feature.\n     */\n    setFeatureState(featureId: number, state: ValueMap) {\n        this.m_featureStateMap.set(featureId, state);\n    }\n\n    /**\n     * Removes the state associated to the given feature.\n     *\n     * @param featureId The id of the feature.\n     */\n    removeFeatureState(featureId: number) {\n        this.m_featureStateMap.delete(featureId);\n    }\n\n    /**\n     * Returns the name of the [[StyleSet]] to use for the decoding.\n     */\n    get styleSetName(): string | undefined {\n        return this.m_styleSetName;\n    }\n\n    /**\n     * Sets the name of the [[StyleSet]] to use for the decoding. If this [[DataSource]] is already\n     * attached to a [[MapView]], this setter then reapplies [[StyleSet]] with this name found in\n     * [[MapView]]s theme.\n     */\n    set styleSetName(styleSetName: string | undefined) {\n        this.m_styleSetName = styleSetName;\n        if (this.m_mapView !== undefined && styleSetName !== undefined) {\n            this.setTheme(this.m_mapView.theme);\n        }\n    }\n\n    /**\n     * Destroys this `DataSource`.\n     */\n    dispose() {\n        // to be overloaded by subclasses\n    }\n\n    /**\n     * Purges all the caching done by this `DataSource`\n     */\n    clearCache() {\n        // to be overloaded by subclasses\n    }\n\n    /**\n     * Boolean which says whether a [[DataSource]] produces tiles that fully cover the tile, i.e.\n     * tiles underneath are completely hidden. Must be overriden for [[DataSource]]'s that don't\n     * have a ground plane, but which still fully cover the tile, e.g. web tiles.\n     */\n    isFullyCovering(): boolean {\n        return this.addGroundPlane;\n    }\n\n    /**\n     * Returns `true` if this `DataSource` is ready and the [[MapView]] can invoke `getTile()` to\n     * start requesting data.\n     */\n    ready(): boolean {\n        return true;\n    }\n\n    /**\n     * The [[MapView]] that is holding this `DataSource`.\n     */\n    get mapView(): MapView {\n        if (this.m_mapView === undefined) {\n            throw new Error(\"This DataSource was not added to MapView\");\n        }\n\n        return this.m_mapView;\n    }\n\n    /**\n     * The [[Projection]] used by the [[MapView]] that is holding this `DataSource`.\n     *\n     * An `Error` is thrown if you call this method before this `DataSource` has been added\n     * to a [[MapView]].\n     */\n    get projection(): Projection {\n        return this.mapView.projection;\n    }\n\n    /**\n     * This method is called when the `DataSource` is added to a [[MapView]]. Reimplement this\n     * method to provide any custom initialization, such as, to establish a network connection,\n     * or to initialize complex data structures.\n     */\n    async connect(): Promise<void> {\n        // to be overloaded by subclasses\n    }\n\n    /**\n     * Returns the [[TilingScheme]] used by this `DataSource`.\n     */\n    abstract getTilingScheme(): TilingScheme;\n\n    /**\n     * This method is called when this `DataSource` is added to a [[MapView]].\n     *\n     * Reimplementations of this method must invoke the definition of the super class.\n     *\n     * @param mapView The instance of the [[MapView]].\n     */\n    attach(mapView: MapView): void {\n        this.m_mapView = mapView;\n    }\n\n    /**\n     * This method is called when this `DataSource` is removed from a [[MapView]].\n     *\n     * Reimplementations of this method must invoke the definition of the super class.\n     *\n     * @param mapView The instance of the [[MapView]].\n     */\n    detach(mapView: MapView) {\n        assert(this.m_mapView === mapView);\n        this.m_mapView = undefined;\n    }\n\n    /**\n     * Invoked by [[MapView]] to notify when the [[Theme]] has been changed.\n     *\n     * If `DataSource` depends on a `styleSet` or `languages`, it must update its tiles' geometry.\n     *\n     * @deprecated, Use [[setTheme]].\n     *\n     * @param styleSet The new theme that [[MapView]] uses.\n     * @param languages An optional list of languages for the `DataSource`.\n     */\n    // tslint:disable-next-line:no-unused-variable\n    setStyleSet(styleSet?: StyleSet, definitions?: Definitions, languages?: string[]): void {\n        // to be overwritten by subclasses\n    }\n\n    /**\n     * Apply the [[Theme]] to this data source.\n     *\n     * If `DataSource` depends on a `styleSet` defined by this theme or `languages`, it must update\n     * its tiles' geometry.\n     *\n     * @param languages\n     */\n    setTheme(theme: Theme, languages?: string[]): void {\n        // to be overwritten by subclasses\n    }\n\n    /**\n     * Used to configure the languages used by the `DataSource` according to priority;\n     * the first language in the array has the highest priority.\n     *\n     * @param languages An array of ISO 639-1 language codes.\n     */\n    setLanguages(languages?: string[]): void {\n        // to be overloaded by subclasses\n    }\n\n    /**\n     * This method is called when [[MapView]] needs to visualize or preload the content of a\n     * [[TileKey]].\n     *\n     * @param tileKey The unique identifier for a map tile.\n     */\n    abstract getTile(tileKey: TileKey): Tile | undefined;\n\n    /**\n     * This method is called by [[MapView]] before the tile needs to be updated, for example after\n     * a theme change.\n     *\n     * @param tile The [[Tile]] to update.\n     */\n    // tslint:disable-next-line:no-unused-variable\n    updateTile(tile: Tile) {\n        // to be overloaded by subclasses\n    }\n\n    /**\n     * This method is called by the [[MapView]] to determine if the content of the surrounding\n     * tiles must be preloaded.\n     *\n     * @returns `true` if the [[MapView]] should try to preload tiles surrounding the visible\n     * tiles; `false` otherwise. The default is `false`.\n     */\n    shouldPreloadTiles(): boolean {\n        return false;\n    }\n\n    /**\n     * The minimum zoom level at which data is available or displayed at\n     * (depending on [[DataSource]] subclass).\n     * @deprecated Use [[minDataLevel]] and [[minDisplayLevel]] instead.\n     */\n    get minZoomLevel(): number {\n        logger.warn(\n            \"DataSource.minZoomLevel is deprecated. Use minDataLevel and maxDataLevel instead.\"\n        );\n        return this.minDataLevel;\n    }\n\n    set minZoomLevel(level: number) {\n        logger.warn(\n            \"DataSource.minZoomLevel is deprecated. Use minDataLevel and minDisplayLevel instead.\"\n        );\n        this.minDataLevel = level;\n    }\n\n    /**\n     * The maximum zoom level at which data is available or displayed at\n     * (depending on [[DataSource]] subclass).\n     * @deprecated Use [[maxDataLevel]] and [[maxDisplayLevel]] instead.\n     */\n    get maxZoomLevel(): number {\n        logger.warn(\n            \"DataSource.maxZoomLevel is deprecated. Use maxDataLevel and maxDisplayLevel instead.\"\n        );\n        return this.maxDataLevel;\n    }\n\n    set maxZoomLevel(level: number) {\n        logger.warn(\n            \"DataSource.maxZoomLevel is deprecated. Use maxDataLevel and maxDisplayLevel instead.\"\n        );\n        this.maxDataLevel = level;\n    }\n\n    /**\n     * Maximum geometry height above ground level this `DataSource` can produce.\n     *\n     * Used in first stage of frustum culling before [[Tile.maxGeometryHeight]] data is available.\n     *\n     * @default 0.\n     */\n    get maxGeometryHeight() {\n        return this.m_maxGeometryHeight;\n    }\n    set maxGeometryHeight(value: number) {\n        this.m_maxGeometryHeight = value;\n    }\n\n    /**\n     * The difference between storage level and display level of tile.\n     *\n     * Storage level offset is a value applied (added) to current zoom level giving\n     * a final tile level being displayed. This way we may differentate current\n     * zoom level from the storage level that is displayed, giving fine grained\n     * control over the tiles being decoded an displayed.\n     */\n    get storageLevelOffset() {\n        return this.m_storageLevelOffset;\n    }\n\n    /**\n     * Setup the relative offset between storage level and display level of tile.\n     *\n     * @param levelOffset Difference between zoom level and display level.\n     */\n    set storageLevelOffset(levelOffset: number) {\n        this.m_storageLevelOffset = levelOffset;\n    }\n\n    /**\n     * Enables or disables overlay of geometry on elevation. It must be overloaded by data sources\n     * supporting this feature.\n     *\n     * @param value True to enable, false to disable.\n     */\n    setEnableElevationOverlay(enable: boolean) {\n        // to be overloaded by subclasses\n    }\n\n    /**\n     * Computes the data zoom level to use.\n     *\n     * @param zoomLevel The zoom level of the [[MapView]].\n     * @returns The data zoom level to use.\n     */\n    getDataZoomLevel(zoomLevel: number): number {\n        return THREE.MathUtils.clamp(\n            zoomLevel + this.m_storageLevelOffset,\n            this.minDataLevel,\n            this.maxDataLevel\n        );\n    }\n\n    /**\n     * Returns `true` if [[DataSource]] should be displayed for the zoom level.\n     * @param zoomLevel The zoom level of the [[MapView]].\n     */\n    isVisible(zoomLevel: number): boolean {\n        return zoomLevel >= this.minDisplayLevel && zoomLevel <= this.maxDisplayLevel;\n    }\n\n    /**\n     * Returns `true` if [[DataSource]] can load tile with given [[TileKey]] and zoom level.\n     *\n     * @param zoomLevel The zoom level of the [[MapView]].\n     * @param tileKey The unique identifier for a map tile.\n     * @returns `true` if the tile for the given [[TileKey]] can be loaded.\n     */\n    canGetTile(zoomLevel: number, tileKey: TileKey): boolean {\n        return tileKey.level <= zoomLevel;\n    }\n\n    /**\n     * Returns `true` if [[MapView]] should traverse tiles further with given [[TileKey]] and\n     * zoom level.\n     *\n     * @param zoomLevel The zoom level of the [[MapView]].\n     * @param tileKey The unique identifier for a map tile.\n     * @returns `true` if the subtiles of the given [[TileKey]] should be\n     * checked for collisions.\n     */\n    shouldSubdivide(zoomLevel: number, tileKey: TileKey): boolean {\n        return tileKey.level <= zoomLevel;\n    }\n\n    /**\n     * Returns `true` if [[MapView]] should render the text elements with the given [[TileKey]] and\n     * zoom level.\n     *\n     * This is an additional check for the tiles that are already selected for rendering so the\n     * default implementation returns `true`.\n     *\n     * @param zoomLevel The zoom level.\n     * @param tileKey The unique identifier for a map tile.\n     * @returns `true` if the text elements created for the given [[TileKey]] should be rendered.\n     */\n    // tslint:disable-next-line:no-unused-variable\n    shouldRenderText(zoomLevel: number, tileKey: TileKey): boolean {\n        return true;\n    }\n\n    /**\n     * Sends a request to the [[MapView]] to redraw the scene.\n     */\n    requestUpdate() {\n        this.dispatchEvent(UPDATE_EVENT);\n    }\n}\n","/*\n * Copyright (C) 2017-2020 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\nimport {\n    Attachment,\n    BaseTechniqueParams,\n    BufferAttribute,\n    DecodedTile,\n    Env,\n    Expr,\n    ExtrudedPolygonTechnique,\n    FillTechnique,\n    Geometry,\n    GeometryKind,\n    GeometryKindSet,\n    getArrayConstructor,\n    getFeatureId,\n    getPropertyValue,\n    IndexedTechnique,\n    InterleavedBufferAttribute,\n    isCirclesTechnique,\n    isExtrudedLineTechnique,\n    isExtrudedPolygonTechnique,\n    isFillTechnique,\n    isLineMarkerTechnique,\n    isLineTechnique,\n    isPoiTechnique,\n    isSegmentsTechnique,\n    isSolidLineTechnique,\n    isSquaresTechnique,\n    isStandardTechnique,\n    isTerrainTechnique,\n    isTextTechnique,\n    MakeTechniqueAttrs,\n    MapEnv,\n    needsVertexNormals,\n    SolidLineTechnique,\n    StandardExtrudedLineTechnique,\n    Technique,\n    TerrainTechnique,\n    TextPathGeometry\n} from \"@here/harp-datasource-protocol\";\n// tslint:disable:max-line-length\nimport {\n    EdgeLengthGeometrySubdivisionModifier,\n    SubdivisionMode\n} from \"@here/harp-geometry/lib/EdgeLengthGeometrySubdivisionModifier\";\nimport { SphericalGeometrySubdivisionModifier } from \"@here/harp-geometry/lib/SphericalGeometrySubdivisionModifier\";\nimport { EarthConstants, GeoCoordinates, ProjectionType } from \"@here/harp-geoutils\";\nimport {\n    EdgeMaterial,\n    EdgeMaterialParameters,\n    FadingFeature,\n    isHighPrecisionLineMaterial,\n    MapMeshBasicMaterial,\n    MapMeshDepthMaterial,\n    MapMeshStandardMaterial,\n    setShaderMaterialDefine,\n    SolidLineMaterial\n} from \"@here/harp-materials\";\nimport { ContextualArabicConverter } from \"@here/harp-text-canvas\";\nimport { assert } from \"@here/harp-utils\";\nimport * as THREE from \"three\";\nimport { AnimatedExtrusionTileHandler } from \"../AnimatedExtrusionHandler\";\nimport {\n    applyBaseColorToMaterial,\n    applySecondaryColorToMaterial,\n    buildObject,\n    compileTechniques,\n    createMaterial,\n    getBufferAttribute,\n    usesObject3D\n} from \"../DecodedTileHelpers\";\nimport {\n    createDepthPrePassMesh,\n    isRenderDepthPrePassEnabled,\n    setDepthPrePassStencil\n} from \"../DepthPrePass\";\nimport { DisplacementMap, TileDisplacementMap } from \"../DisplacementMap\";\nimport { FALLBACK_RENDER_ORDER_OFFSET } from \"../MapView\";\nimport { MapViewPoints } from \"../MapViewPoints\";\nimport { PathBlockingElement } from \"../PathBlockingElement\";\nimport { TextElement } from \"../text/TextElement\";\nimport { DEFAULT_TEXT_DISTANCE_SCALE } from \"../text/TextElementsRenderer\";\nimport { Tile, TileFeatureData } from \"../Tile\";\nimport { LodMesh } from \"./LodMesh\";\n\nconst tmpVector3 = new THREE.Vector3();\nconst tmpVector2 = new THREE.Vector2();\n\nclass AttachmentCache {\n    readonly bufferAttributes = new Map<BufferAttribute, THREE.BufferAttribute>();\n\n    readonly interleavedAttributes = new Map<\n        InterleavedBufferAttribute,\n        Array<{ name: string; attribute: THREE.InterleavedBufferAttribute }>\n    >();\n}\n\nclass AttachmentInfo {\n    constructor(\n        readonly geometry: Geometry,\n        readonly info: Attachment,\n        readonly cache: AttachmentCache\n    ) {}\n\n    getBufferAttribute(description: BufferAttribute): THREE.BufferAttribute {\n        if (this.cache.bufferAttributes.has(description)) {\n            return this.cache.bufferAttributes.get(description)!;\n        }\n        const attribute = getBufferAttribute(description);\n        this.cache.bufferAttributes.set(description, attribute);\n        return attribute;\n    }\n\n    getInterleavedBufferAttributes(description: InterleavedBufferAttribute) {\n        const interleavedAttributes = this.cache.interleavedAttributes.get(description);\n\n        if (interleavedAttributes) {\n            return interleavedAttributes;\n        }\n\n        const ArrayCtor = getArrayConstructor(description.type);\n        const buffer = new ArrayCtor(description.buffer);\n        const interleavedBuffer = new THREE.InterleavedBuffer(buffer, description.stride);\n\n        const attrs = description.attributes.map(interleavedAttr => {\n            const attribute = new THREE.InterleavedBufferAttribute(\n                interleavedBuffer,\n                interleavedAttr.itemSize,\n                interleavedAttr.offset,\n                false\n            );\n            const name = interleavedAttr.name;\n            return { name, attribute };\n        });\n\n        this.cache.interleavedAttributes.set(description, attrs);\n        return attrs;\n    }\n}\n\n/**\n * Parameters that control fading.\n */\nexport interface FadingParameters {\n    fadeNear?: number;\n    fadeFar?: number;\n}\n\n/**\n * Parameters that control fading for extruded buildings with fading edges.\n */\nexport interface PolygonFadingParameters extends FadingParameters {\n    color?: string | number;\n    colorMix?: number;\n    lineFadeNear?: number;\n    lineFadeFar?: number;\n}\n\n/**\n * Support class to create geometry for a [[Tile]] from a [[DecodedTile]].\n */\nexport class TileGeometryCreator {\n    private static m_instance: TileGeometryCreator;\n\n    /**\n     * The `instance` of the `TileGeometryCreator`.\n     *\n     * @returns TileGeometryCreator\n     */\n    static get instance(): TileGeometryCreator {\n        return this.m_instance || (this.m_instance = new TileGeometryCreator());\n    }\n\n    /**\n     *  Creates an instance of TileGeometryCreator. Access is allowed only through `instance`.\n     */\n    private constructor() {\n        //\n    }\n\n    /**\n     * Apply `enabledKinds` and `disabledKinds` to all techniques in the `decodedTile`. If a\n     * technique is identified as disabled, its property `enabled` is set to `false`.\n     *\n     * @param decodedTile The decodedTile containing the actual tile map data.\n     * @param enabledKinds Optional [[GeometryKindSet]] used to specify which object kinds should be\n     *      created.\n     * @param disabledKinds Optional [[GeometryKindSet]] used to filter objects that should not be\n     *      created.\n     */\n    initDecodedTile(\n        decodedTile: DecodedTile,\n        enabledKinds?: GeometryKindSet | undefined,\n        disabledKinds?: GeometryKindSet | undefined\n    ) {\n        for (const technique of decodedTile.techniques) {\n            // tslint:disable-next-line: deprecation\n            const kind = technique.kind;\n\n            // No info about kind, no way to filter it.\n            if (kind === undefined || (kind instanceof Set && kind.size === 0)) {\n                technique._kindState = true;\n                continue;\n            }\n\n            // Technique is enabled only if enabledKinds is defined and technique belongs to that set or\n            // if that's not the case, disabledKinds must be undefined or technique does not belong to it.\n            technique._kindState =\n                !(disabledKinds !== undefined && disabledKinds.hasOrIntersects(kind)) ||\n                (enabledKinds !== undefined && enabledKinds.hasOrIntersects(kind));\n        }\n\n        for (const srcGeometry of decodedTile.geometries) {\n            for (const group of srcGeometry.groups) {\n                group.createdOffsets = [];\n            }\n        }\n\n        // compile the dynamic expressions.\n        compileTechniques(decodedTile.techniques);\n    }\n\n    /**\n     * Called after the `Tile` has been decoded. It is required to call `initDecodedTile` before\n     * calling this method.\n     *\n     * @see [[TileGeometryCreator#initDecodedTile]]\n     *\n     * @param tile The [[Tile]] to process.\n     * @param decodedTile The decodedTile containing the actual tile map data.\n     */\n    createAllGeometries(tile: Tile, decodedTile: DecodedTile) {\n        const filter = (technique: IndexedTechnique): boolean => {\n            return technique._kindState !== false;\n        };\n\n        this.createObjects(tile, decodedTile, filter);\n\n        this.preparePois(tile, decodedTile);\n\n        // TextElements do not get their geometry created by Tile, but are managed on a\n        // higher level.\n        const textFilter = (technique: IndexedTechnique): boolean => {\n            if (\n                !isPoiTechnique(technique) &&\n                !isLineMarkerTechnique(technique) &&\n                !isTextTechnique(technique)\n            ) {\n                return false;\n            }\n            return filter(technique);\n        };\n        this.createTextElements(tile, decodedTile, textFilter);\n\n        this.createLabelRejectionElements(tile, decodedTile);\n\n        // HARP-7899, disable ground plane for globe\n        if (tile.dataSource.addGroundPlane && tile.projection.type === ProjectionType.Planar) {\n            // The ground plane is required for when we change the zoom back and we fall back to the\n            // parent, in that case we reduce the renderOrder of the parent tile and this ground\n            // place ensures that parent doesn't come through. This value must be above the\n            // renderOrder of all objects in the fallback tile, otherwise there won't be a proper\n            // covering of the parent tile by the children, hence dividing by 2. To put a bit more\n            // concretely, we assume all objects are rendered with a renderOrder between 0 and\n            // FALLBACK_RENDER_ORDER_OFFSET / 2, i.e. 10000. The ground plane is put at -10000, and\n            // the fallback tiles have their renderOrder set between -20000 and -10000\n            TileGeometryCreator.instance.addGroundPlane(tile, -FALLBACK_RENDER_ORDER_OFFSET / 2);\n        }\n    }\n\n    createLabelRejectionElements(tile: Tile, decodedTile: DecodedTile) {\n        if (decodedTile.pathGeometries === undefined) {\n            return;\n        }\n        for (const path of decodedTile.pathGeometries) {\n            tile.addBlockingElement(new PathBlockingElement(path.path));\n        }\n    }\n\n    /**\n     * Processes the given tile and assign default values for geometry kinds,\n     * render orders and label priorities.\n     *\n     * @param {Tile} tile\n     * @param {(GeometryKindSet | undefined)} enabledKinds\n     * @param {(GeometryKindSet | undefined)} disabledKinds\n     */\n    processTechniques(\n        tile: Tile,\n        enabledKinds: GeometryKindSet | undefined,\n        disabledKinds: GeometryKindSet | undefined\n    ): void {\n        const decodedTile = tile.decodedTile;\n\n        if (decodedTile === undefined) {\n            return;\n        }\n\n        this.processPriorities(tile);\n\n        // Speedup and simplify following code: Test all techniques if they intersect with\n        // enabledKinds and disabledKinds, in which case they are flagged. The disabledKinds can be\n        // ignored hereafter.\n        this.initDecodedTile(decodedTile, enabledKinds, disabledKinds);\n    }\n\n    /**\n     * Adds a THREE object to the root of the tile. Sets the owning tiles datasource.name and the\n     * tileKey in the `userData` property of the object, such that the tile it belongs to can be\n     * identified during picking.\n     *\n     * @param tile The [[Tile]] to add the object to.\n     * @param object The object to add to the root of the tile.\n     * @param geometryKind The kind of object. Can be used for filtering.\n     */\n    registerTileObject(\n        tile: Tile,\n        object: THREE.Object3D,\n        geometryKind: GeometryKind | GeometryKindSet | undefined\n    ) {\n        if (object.userData === undefined) {\n            object.userData = {};\n        }\n        const userData = object.userData;\n        userData.tileKey = tile.tileKey;\n        userData.dataSource = tile.dataSource.name;\n\n        userData.kind =\n            geometryKind instanceof Set\n                ? Array.from((geometryKind as GeometryKindSet).values())\n                : Array.isArray(geometryKind)\n                ? geometryKind\n                : [geometryKind];\n\n        // Force a visibility check of all objects.\n        tile.resetVisibilityCounter();\n    }\n\n    /**\n     * Splits the text paths that contain sharp corners.\n     *\n     * @param tile The [[Tile]] to process paths on.\n     * @param textPathGeometries The original path geometries that may have defects.\n     * @param textFilter: Optional filter. Should return true for any text technique that is\n     *      applicable.\n     */\n    prepareTextPaths(\n        textPathGeometries: TextPathGeometry[],\n        decodedTile: DecodedTile,\n        textFilter?: (technique: IndexedTechnique) => boolean\n    ): TextPathGeometry[] {\n        const processedPaths = new Array<TextPathGeometry>();\n        const newPaths = textPathGeometries.slice();\n\n        while (newPaths.length > 0) {\n            const textPath = newPaths.pop();\n\n            if (textPath === undefined) {\n                break;\n            }\n\n            const technique = decodedTile.techniques[textPath.technique];\n            if (\n                !isTextTechnique(technique) ||\n                (textFilter !== undefined && !textFilter(technique))\n            ) {\n                continue;\n            }\n\n            processedPaths.push(textPath);\n        }\n        return processedPaths;\n    }\n\n    /**\n     * Creates [[TextElement]] objects from the decoded tile and list of materials specified. The\n     * priorities of the [[TextElement]]s are updated to simplify label placement.\n     *\n     * @param tile The [[Tile]] to create the testElements on.\n     * @param decodedTile The [[DecodedTile]].\n     * @param textFilter: Optional filter. Should return true for any text technique that is\n     *      applicable.\n     */\n    createTextElements(\n        tile: Tile,\n        decodedTile: DecodedTile,\n        textFilter?: (technique: IndexedTechnique) => boolean\n    ) {\n        const mapView = tile.mapView;\n        const textStyleCache = tile.textStyleCache;\n        const worldOffsetX = tile.computeWorldOffsetX();\n\n        const discreteZoomLevel = Math.floor(mapView.zoomLevel);\n        const discreteZoomEnv = new MapEnv({ $zoom: discreteZoomLevel }, mapView.env);\n\n        if (decodedTile.textPathGeometries !== undefined) {\n            const textPathGeometries = this.prepareTextPaths(\n                decodedTile.textPathGeometries,\n                decodedTile,\n                textFilter\n            );\n\n            for (const textPath of textPathGeometries) {\n                const technique = decodedTile.techniques[textPath.technique];\n\n                if (\n                    technique._kindState === false ||\n                    !isTextTechnique(technique) ||\n                    (textFilter !== undefined && !textFilter(technique))\n                ) {\n                    continue;\n                }\n\n                const path: THREE.Vector3[] = [];\n                for (let i = 0; i < textPath.path.length; i += 3) {\n                    path.push(\n                        new THREE.Vector3(\n                            textPath.path[i] + worldOffsetX,\n                            textPath.path[i + 1],\n                            textPath.path[i + 2]\n                        )\n                    );\n                }\n\n                // Make sorting stable.\n                const priority =\n                    technique.priority !== undefined\n                        ? getPropertyValue(technique.priority, discreteZoomEnv)\n                        : 0;\n                const fadeNear =\n                    technique.fadeNear !== undefined\n                        ? getPropertyValue(technique.fadeNear, discreteZoomEnv)\n                        : technique.fadeNear;\n                const fadeFar =\n                    technique.fadeFar !== undefined\n                        ? getPropertyValue(technique.fadeFar, discreteZoomEnv)\n                        : technique.fadeFar;\n                const userData = textPath.objInfos;\n                const featureId = getFeatureId(userData);\n                const textElement = new TextElement(\n                    ContextualArabicConverter.instance.convert(textPath.text),\n                    path,\n                    textStyleCache.getRenderStyle(technique),\n                    textStyleCache.getLayoutStyle(technique),\n                    priority,\n                    technique.xOffset !== undefined ? technique.xOffset : 0.0,\n                    technique.yOffset !== undefined ? technique.yOffset : 0.0,\n                    featureId,\n                    technique.style,\n                    fadeNear,\n                    fadeFar,\n                    tile.offset\n                );\n                textElement.pathLengthSqr = textPath.pathLengthSqr;\n                textElement.minZoomLevel =\n                    technique.minZoomLevel !== undefined\n                        ? technique.minZoomLevel\n                        : mapView.minZoomLevel;\n                textElement.maxZoomLevel =\n                    technique.maxZoomLevel !== undefined\n                        ? technique.maxZoomLevel\n                        : mapView.maxZoomLevel;\n                textElement.distanceScale =\n                    technique.distanceScale !== undefined\n                        ? technique.distanceScale\n                        : DEFAULT_TEXT_DISTANCE_SCALE;\n                textElement.mayOverlap = technique.mayOverlap === true;\n                textElement.reserveSpace = technique.reserveSpace !== false;\n                // tslint:disable-next-line: deprecation\n                textElement.kind = technique.kind;\n                // Get the userData for text element picking.\n                textElement.userData = textPath.objInfos;\n                textElement.textFadeTime = technique.textFadeTime;\n\n                tile.addTextElement(textElement);\n            }\n        }\n\n        if (decodedTile.textGeometries !== undefined) {\n            for (const text of decodedTile.textGeometries) {\n                if (text.technique === undefined || text.stringCatalog === undefined) {\n                    continue;\n                }\n\n                const technique = decodedTile.techniques[text.technique];\n\n                if (\n                    technique._kindState === false ||\n                    !isTextTechnique(technique) ||\n                    (textFilter !== undefined && !textFilter(technique))\n                ) {\n                    continue;\n                }\n\n                const positions = new THREE.BufferAttribute(\n                    new Float32Array(text.positions.buffer),\n                    text.positions.itemCount\n                );\n\n                const numPositions = positions.count;\n                if (numPositions < 1) {\n                    continue;\n                }\n\n                const priority =\n                    technique.priority !== undefined\n                        ? getPropertyValue(technique.priority, discreteZoomEnv)\n                        : 0;\n                const fadeNear =\n                    technique.fadeNear !== undefined\n                        ? getPropertyValue(technique.fadeNear, discreteZoomEnv)\n                        : technique.fadeNear;\n                const fadeFar =\n                    technique.fadeFar !== undefined\n                        ? getPropertyValue(technique.fadeFar, discreteZoomEnv)\n                        : technique.fadeFar;\n\n                for (let i = 0; i < numPositions; ++i) {\n                    const x = positions.getX(i) + worldOffsetX;\n                    const y = positions.getY(i);\n                    const z = positions.getZ(i);\n                    const label = text.stringCatalog[text.texts[i]];\n                    if (label === undefined) {\n                        // skip missing labels\n                        continue;\n                    }\n\n                    const userData = text.objInfos !== undefined ? text.objInfos[i] : undefined;\n                    const featureId = getFeatureId(userData);\n\n                    const textElement = new TextElement(\n                        ContextualArabicConverter.instance.convert(label!),\n                        new THREE.Vector3(x, y, z),\n                        textStyleCache.getRenderStyle(technique),\n                        textStyleCache.getLayoutStyle(technique),\n                        priority,\n                        technique.xOffset || 0.0,\n                        technique.yOffset || 0.0,\n                        featureId,\n                        technique.style,\n                        undefined,\n                        undefined,\n                        tile.offset\n                    );\n\n                    textElement.minZoomLevel =\n                        technique.minZoomLevel !== undefined\n                            ? technique.minZoomLevel\n                            : mapView.minZoomLevel;\n                    textElement.maxZoomLevel =\n                        technique.maxZoomLevel !== undefined\n                            ? technique.maxZoomLevel\n                            : mapView.maxZoomLevel;\n                    textElement.mayOverlap = technique.mayOverlap === true;\n                    textElement.reserveSpace = technique.reserveSpace !== false;\n                    // tslint:disable-next-line: deprecation\n                    textElement.kind = technique.kind;\n\n                    textElement.fadeNear = fadeNear;\n                    textElement.fadeFar = fadeFar;\n                    textElement.textFadeTime = technique.textFadeTime;\n\n                    // Get the userData for text element picking.\n                    textElement.userData = userData;\n                    tile.addTextElement(textElement);\n                }\n            }\n        }\n    }\n\n    /**\n     * Creates `Tile` objects from the decoded tile and list of materials specified.\n     *\n     * @param tile The [[Tile]] to create the geometry on.\n     * @param decodedTile The [[DecodedTile]].\n     * @param techniqueFilter: Optional filter. Should return true for any technique that is\n     *      applicable.\n     */\n    createObjects(\n        tile: Tile,\n        decodedTile: DecodedTile,\n        techniqueFilter?: (technique: IndexedTechnique) => boolean\n    ) {\n        const materials: THREE.Material[] = [];\n        const mapView = tile.mapView;\n        const dataSource = tile.dataSource;\n        const discreteZoomLevel = Math.floor(mapView.zoomLevel);\n        const discreteZoomEnv = new MapEnv({ $zoom: discreteZoomLevel }, mapView.env);\n        const objects = tile.objects;\n        const viewRanges = mapView.viewRanges;\n        const elevationEnabled = mapView.elevationProvider !== undefined;\n\n        for (const attachment of this.getAttachments(decodedTile)) {\n            const srcGeometry = attachment.geometry;\n            const groups = attachment.info.groups;\n            const groupCount = groups.length;\n\n            for (let groupIndex = 0; groupIndex < groupCount; ) {\n                const group = groups[groupIndex++];\n                const start = group.start;\n                const techniqueIndex = group.technique;\n                const technique = decodedTile.techniques[techniqueIndex];\n\n                if (group.createdOffsets === undefined) {\n                    group.createdOffsets = [];\n                }\n\n                if (\n                    group.createdOffsets!.indexOf(tile.offset) !== -1 ||\n                    technique._kindState === false ||\n                    (techniqueFilter !== undefined && !techniqueFilter(technique))\n                ) {\n                    continue;\n                }\n\n                let count = group.count;\n                group.createdOffsets!.push(tile.offset);\n\n                // compress consecutive groups\n                for (\n                    ;\n                    groupIndex < groupCount && groups[groupIndex].technique === techniqueIndex;\n                    ++groupIndex\n                ) {\n                    if (start + count !== groups[groupIndex].start) {\n                        break;\n                    }\n\n                    count += groups[groupIndex].count;\n\n                    // Mark this group as created, so it does not get processed again.\n                    groups[groupIndex].createdOffsets!.push(tile.offset);\n                }\n\n                if (!usesObject3D(technique)) {\n                    continue;\n                }\n\n                let material: THREE.Material | undefined = materials[techniqueIndex];\n\n                if (material === undefined) {\n                    const onMaterialUpdated = (texture: THREE.Texture) => {\n                        dataSource.requestUpdate();\n                        if (texture !== undefined) {\n                            tile.addOwnedTexture(texture);\n                        }\n                    };\n                    material = createMaterial(\n                        {\n                            technique,\n                            env: mapView.env,\n                            fog: mapView.scene.fog !== null,\n                            shadowsEnabled: mapView.shadowsEnabled\n                        },\n                        onMaterialUpdated\n                    );\n                    if (material === undefined) {\n                        continue;\n                    }\n                    materials[techniqueIndex] = material;\n                }\n\n                // tslint:disable-next-line: deprecation\n                const techniqueKind = technique.kind;\n\n                // Modify the standard textured shader to support height-based coloring.\n                if (isTerrainTechnique(technique)) {\n                    this.setupTerrainMaterial(technique, material, tile.mapView.clearColor);\n                }\n\n                const bufferGeometry = new THREE.BufferGeometry();\n\n                srcGeometry.vertexAttributes?.forEach(vertexAttribute => {\n                    const buffer = attachment.getBufferAttribute(vertexAttribute);\n                    bufferGeometry.setAttribute(vertexAttribute.name, buffer);\n                });\n\n                srcGeometry.interleavedVertexAttributes?.forEach(attr => {\n                    attachment\n                        .getInterleavedBufferAttributes(attr)\n                        .forEach(({ name, attribute }) =>\n                            bufferGeometry.setAttribute(name, attribute)\n                        );\n                });\n\n                const index = attachment.info.index ?? srcGeometry.index;\n                if (index) {\n                    bufferGeometry.setIndex(attachment.getBufferAttribute(index));\n                }\n\n                if (!bufferGeometry.getAttribute(\"normal\") && needsVertexNormals(technique)) {\n                    bufferGeometry.computeVertexNormals();\n                }\n\n                bufferGeometry.addGroup(start, count);\n\n                if (isSolidLineTechnique(technique)) {\n                    // TODO: Unify access to shader defines via SolidLineMaterial setters\n                    assert(!isHighPrecisionLineMaterial(material));\n                    const lineMaterial = material as SolidLineMaterial;\n                    if (\n                        technique.clipping !== false &&\n                        tile.projection.type === ProjectionType.Planar\n                    ) {\n                        tile.boundingBox.getSize(tmpVector3);\n                        tmpVector2.set(tmpVector3.x, tmpVector3.y);\n                        lineMaterial.clipTileSize = tmpVector2;\n                    }\n\n                    if (bufferGeometry.getAttribute(\"color\")) {\n                        setShaderMaterialDefine(lineMaterial, \"USE_COLOR\", true);\n                    }\n                }\n\n                // Add the solid line outlines as a separate object.\n                const hasSolidLinesOutlines: boolean =\n                    isSolidLineTechnique(technique) && technique.secondaryWidth !== undefined;\n\n                // When the source geometry is split in groups, we\n                // should create objects with an array of materials.\n                const hasFeatureGroups =\n                    Expr.isExpr(technique.enabled) &&\n                    srcGeometry.featureStarts &&\n                    srcGeometry.featureStarts.length > 0;\n\n                const object = buildObject(\n                    technique,\n                    bufferGeometry,\n                    hasFeatureGroups ? [material] : material,\n                    tile,\n                    elevationEnabled\n                );\n\n                object.renderOrder = technique.renderOrder!;\n\n                if (attachment.info.uuid !== undefined) {\n                    object.uuid = attachment.info.uuid;\n                    object.userData.geometryId = attachment.info.uuid;\n                }\n\n                if (\n                    (isCirclesTechnique(technique) || isSquaresTechnique(technique)) &&\n                    technique.enablePicking !== undefined\n                ) {\n                    // tslint:disable-next-line:max-line-length\n                    (object as MapViewPoints).enableRayTesting = technique.enablePicking!;\n                }\n\n                if (isLineTechnique(technique) || isSegmentsTechnique(technique)) {\n                    const hasDynamicColor =\n                        Expr.isExpr(technique.color) || Expr.isExpr(technique.opacity);\n                    const fadingParams = this.getFadingParams(discreteZoomEnv, technique);\n                    FadingFeature.addRenderHelper(\n                        object,\n                        viewRanges,\n                        fadingParams.fadeNear,\n                        fadingParams.fadeFar,\n                        false,\n                        hasDynamicColor\n                            ? (renderer, mat) => {\n                                  const lineMaterial = mat as THREE.LineBasicMaterial;\n                                  applyBaseColorToMaterial(\n                                      lineMaterial,\n                                      lineMaterial.color,\n                                      technique,\n                                      technique.color,\n                                      mapView.env\n                                  );\n                              }\n                            : undefined\n                    );\n                }\n\n                if (isSolidLineTechnique(technique)) {\n                    const hasDynamicColor =\n                        Expr.isExpr(technique.color) || Expr.isExpr(technique.opacity);\n                    const fadingParams = this.getFadingParams(discreteZoomEnv, technique);\n\n                    FadingFeature.addRenderHelper(\n                        object,\n                        viewRanges,\n                        fadingParams.fadeNear,\n                        fadingParams.fadeFar,\n                        false,\n                        (renderer, mat) => {\n                            const lineMaterial = mat as SolidLineMaterial;\n                            const unitFactor =\n                                // tslint:disable-next-line: deprecation\n                                technique.metricUnit === \"Pixel\" ? mapView.pixelToWorld : 1.0;\n\n                            if (hasDynamicColor) {\n                                applyBaseColorToMaterial(\n                                    lineMaterial,\n                                    lineMaterial.color,\n                                    technique,\n                                    technique.color,\n                                    mapView.env\n                                );\n                            }\n\n                            lineMaterial.lineWidth =\n                                getPropertyValue(technique.lineWidth, mapView.env) * unitFactor;\n\n                            if (technique.outlineWidth !== undefined) {\n                                lineMaterial.outlineWidth =\n                                    getPropertyValue(technique.outlineWidth, mapView.env) *\n                                    unitFactor;\n                            }\n\n                            if (technique.dashSize !== undefined) {\n                                lineMaterial.dashSize =\n                                    getPropertyValue(technique.dashSize, mapView.env) * unitFactor;\n                            }\n\n                            if (technique.gapSize !== undefined) {\n                                lineMaterial.gapSize =\n                                    getPropertyValue(technique.gapSize, mapView.env) * unitFactor;\n                            }\n\n                            lineMaterial.offset =\n                                getPropertyValue(technique.offset, mapView.env) * unitFactor;\n                        }\n                    );\n                }\n\n                if (isExtrudedLineTechnique(technique)) {\n                    const hasDynamicColor =\n                        Expr.isExpr(technique.color) || Expr.isExpr(technique.opacity);\n                    // extruded lines are normal meshes, and need transparency only when fading or\n                    // dynamic properties is defined.\n                    if (technique.fadeFar !== undefined || hasDynamicColor) {\n                        const fadingParams = this.getFadingParams(\n                            mapView.env,\n                            technique as StandardExtrudedLineTechnique\n                        );\n\n                        FadingFeature.addRenderHelper(\n                            object,\n                            viewRanges,\n                            fadingParams.fadeNear,\n                            fadingParams.fadeFar,\n                            true,\n                            hasDynamicColor\n                                ? (renderer, mat) => {\n                                      const extrudedMaterial = mat as\n                                          | MapMeshStandardMaterial\n                                          | MapMeshBasicMaterial;\n\n                                      applyBaseColorToMaterial(\n                                          extrudedMaterial,\n                                          extrudedMaterial.color,\n                                          technique,\n                                          technique.color!,\n                                          mapView.env\n                                      );\n                                  }\n                                : undefined\n                        );\n                    }\n                }\n\n                this.addUserData(tile, srcGeometry, technique, object);\n\n                if (isExtrudedPolygonTechnique(technique)) {\n                    object.castShadow = mapView.shadowsEnabled;\n                    object.receiveShadow = mapView.shadowsEnabled;\n                } else if (isStandardTechnique(technique) || isFillTechnique(technique)) {\n                    object.receiveShadow = mapView.shadowsEnabled;\n                }\n\n                if (\n                    isExtrudedPolygonTechnique(technique) ||\n                    isStandardTechnique(technique) ||\n                    isFillTechnique(technique)\n                ) {\n                    // filled polygons are normal meshes, and need transparency only when fading or\n                    // dynamic properties is defined.\n                    const hasDynamicPrimaryColor =\n                        Expr.isExpr(technique.color) || Expr.isExpr(technique.opacity);\n                    const hasDynamicSecondaryColor =\n                        isExtrudedPolygonTechnique(technique) && Expr.isExpr(technique.emissive);\n                    const hasDynamicColor = hasDynamicPrimaryColor || hasDynamicSecondaryColor;\n\n                    if (technique.fadeFar !== undefined || hasDynamicColor) {\n                        const fadingParams = this.getFadingParams(discreteZoomEnv, technique);\n                        FadingFeature.addRenderHelper(\n                            object,\n                            viewRanges,\n                            fadingParams.fadeNear,\n                            fadingParams.fadeFar,\n                            true,\n                            hasDynamicColor\n                                ? (renderer, mat) => {\n                                      const polygonMaterial = mat as\n                                          | MapMeshBasicMaterial\n                                          | MapMeshStandardMaterial;\n\n                                      if (hasDynamicPrimaryColor) {\n                                          applyBaseColorToMaterial(\n                                              polygonMaterial,\n                                              polygonMaterial.color,\n                                              technique,\n                                              technique.color!,\n                                              mapView.env\n                                          );\n                                      }\n\n                                      if (\n                                          hasDynamicSecondaryColor &&\n                                          // Just to omit compiler warnings\n                                          isExtrudedPolygonTechnique(technique)\n                                      ) {\n                                          const standardMat = mat as MapMeshStandardMaterial;\n\n                                          applySecondaryColorToMaterial(\n                                              standardMat.emissive,\n                                              technique.emissive!,\n                                              mapView.env\n                                          );\n                                      }\n                                  }\n                                : undefined\n                        );\n                    }\n                }\n\n                const extrudedObjects: Array<{\n                    object: THREE.Object3D;\n                    /**\n                     * If set to `true`, an [[ExtrusionFeature]] that injects extrusion shader\n                     * chunk will be applied to the material. Otherwise, extrusion should\n                     * be added in the material's shader manually.\n                     */\n                    materialFeature: boolean;\n                }> = [];\n\n                const animatedExtrusionHandler = mapView.animatedExtrusionHandler;\n\n                let extrusionAnimationEnabled: boolean | undefined = false;\n\n                if (\n                    isExtrudedPolygonTechnique(technique) &&\n                    animatedExtrusionHandler !== undefined\n                ) {\n                    let animateExtrusionValue = getPropertyValue(\n                        technique.animateExtrusion,\n                        discreteZoomEnv\n                    );\n                    if (animateExtrusionValue !== null) {\n                        animateExtrusionValue =\n                            typeof animateExtrusionValue === \"boolean\"\n                                ? animateExtrusionValue\n                                : typeof animateExtrusionValue === \"number\"\n                                ? animateExtrusionValue !== 0\n                                : false;\n                    }\n                    extrusionAnimationEnabled =\n                        animateExtrusionValue !== null &&\n                        animatedExtrusionHandler.forceEnabled === false\n                            ? animateExtrusionValue\n                            : animatedExtrusionHandler.enabled;\n                }\n\n                const renderDepthPrePass =\n                    isExtrudedPolygonTechnique(technique) &&\n                    isRenderDepthPrePassEnabled(technique, discreteZoomEnv);\n\n                if (renderDepthPrePass) {\n                    const depthPassMesh = createDepthPrePassMesh(object as THREE.Mesh);\n                    // Set geometry kind for depth pass mesh so that it gets the displacement map\n                    // for elevation overlay.\n                    this.registerTileObject(tile, depthPassMesh, techniqueKind);\n                    objects.push(depthPassMesh);\n\n                    if (extrusionAnimationEnabled) {\n                        extrudedObjects.push({\n                            object: depthPassMesh,\n                            materialFeature: true\n                        });\n                    }\n\n                    setDepthPrePassStencil(depthPassMesh, object as THREE.Mesh);\n                }\n\n                this.registerTileObject(tile, object, techniqueKind);\n                objects.push(object);\n\n                // Add the extruded building edges as a separate geometry.\n                if (isExtrudedPolygonTechnique(technique) && attachment.info.edgeIndex) {\n                    const edgeGeometry = new THREE.BufferGeometry();\n                    edgeGeometry.setAttribute(\"position\", bufferGeometry.getAttribute(\"position\"));\n\n                    const colorAttribute = bufferGeometry.getAttribute(\"color\");\n                    if (colorAttribute !== undefined) {\n                        edgeGeometry.setAttribute(\"color\", colorAttribute);\n                    }\n\n                    const extrusionAttribute = bufferGeometry.getAttribute(\"extrusionAxis\");\n                    if (extrusionAttribute !== undefined) {\n                        edgeGeometry.setAttribute(\"extrusionAxis\", extrusionAttribute);\n                    }\n\n                    const normalAttribute = bufferGeometry.getAttribute(\"normal\");\n                    if (normalAttribute !== undefined) {\n                        edgeGeometry.setAttribute(\"normal\", normalAttribute);\n                    }\n\n                    const uvAttribute = bufferGeometry.getAttribute(\"uv\");\n                    if (uvAttribute !== undefined) {\n                        edgeGeometry.setAttribute(\"uv\", uvAttribute);\n                    }\n\n                    edgeGeometry.setIndex(\n                        attachment.getBufferAttribute(attachment.info.edgeIndex!)\n                    );\n\n                    // Read the uniforms from the technique values (and apply the default values).\n                    const extrudedPolygonTechnique = technique as ExtrudedPolygonTechnique;\n\n                    const fadingParams = this.getPolygonFadingParams(\n                        discreteZoomEnv,\n                        extrudedPolygonTechnique\n                    );\n\n                    // Configure the edge material based on the theme values.\n                    const materialParams: EdgeMaterialParameters = {\n                        color: fadingParams.color,\n                        colorMix: fadingParams.colorMix,\n                        fadeNear: fadingParams.lineFadeNear,\n                        fadeFar: fadingParams.lineFadeFar\n                    };\n                    const edgeMaterial = new EdgeMaterial(materialParams);\n                    const edgeObj = new THREE.LineSegments(edgeGeometry, edgeMaterial);\n\n                    // Set the correct render order.\n                    edgeObj.renderOrder = object.renderOrder + 0.1;\n\n                    FadingFeature.addRenderHelper(\n                        edgeObj,\n                        viewRanges,\n                        fadingParams.lineFadeNear,\n                        fadingParams.lineFadeFar,\n                        false,\n                        extrudedPolygonTechnique.lineColor !== undefined &&\n                            Expr.isExpr(extrudedPolygonTechnique.lineColor)\n                            ? () => {\n                                  applyBaseColorToMaterial(\n                                      edgeMaterial,\n                                      edgeMaterial.color,\n                                      extrudedPolygonTechnique,\n                                      extrudedPolygonTechnique.lineColor!,\n                                      mapView.env\n                                  );\n                              }\n                            : undefined\n                    );\n\n                    if (extrusionAnimationEnabled) {\n                        extrudedObjects.push({\n                            object: edgeObj,\n                            materialFeature: false\n                        });\n                    }\n\n                    this.registerTileObject(tile, edgeObj, techniqueKind);\n                    objects.push(edgeObj);\n                }\n\n                // animate the extrusion of buildings\n                if (isExtrudedPolygonTechnique(technique) && extrusionAnimationEnabled) {\n                    extrudedObjects.push({\n                        object,\n                        materialFeature: true\n                    });\n                    object.customDepthMaterial = new MapMeshDepthMaterial({\n                        depthPacking: THREE.RGBADepthPacking\n                    });\n\n                    const extrusionAnimationDuration =\n                        technique.animateExtrusionDuration !== undefined &&\n                        animatedExtrusionHandler.forceEnabled === false\n                            ? technique.animateExtrusionDuration\n                            : animatedExtrusionHandler.duration;\n\n                    tile.animatedExtrusionTileHandler = new AnimatedExtrusionTileHandler(\n                        tile,\n                        extrudedObjects,\n                        extrusionAnimationDuration\n                    );\n                    mapView.animatedExtrusionHandler.add(tile.animatedExtrusionTileHandler);\n                }\n\n                // Add the fill area edges as a separate geometry.\n\n                if (isFillTechnique(technique) && attachment.info.edgeIndex) {\n                    const outlineGeometry = new THREE.BufferGeometry();\n                    outlineGeometry.setAttribute(\n                        \"position\",\n                        bufferGeometry.getAttribute(\"position\")\n                    );\n                    outlineGeometry.setIndex(\n                        attachment.getBufferAttribute(attachment.info.edgeIndex!)\n                    );\n\n                    const fillTechnique = technique as FillTechnique;\n\n                    const fadingParams = this.getPolygonFadingParams(mapView.env, fillTechnique);\n\n                    // Configure the edge material based on the theme values.\n                    const materialParams: EdgeMaterialParameters = {\n                        color: fadingParams.color,\n                        colorMix: fadingParams.colorMix,\n                        fadeNear: fadingParams.lineFadeNear,\n                        fadeFar: fadingParams.lineFadeFar\n                    };\n                    const outlineMaterial = new EdgeMaterial(materialParams);\n                    const outlineObj = new THREE.LineSegments(outlineGeometry, outlineMaterial);\n                    outlineObj.renderOrder = object.renderOrder + 0.1;\n\n                    FadingFeature.addRenderHelper(\n                        outlineObj,\n                        viewRanges,\n                        fadingParams.lineFadeNear,\n                        fadingParams.lineFadeFar,\n                        false,\n                        fillTechnique.lineColor !== undefined &&\n                            Expr.isExpr(fillTechnique.lineColor)\n                            ? (renderer, mat) => {\n                                  const edgeMaterial = mat as EdgeMaterial;\n                                  applyBaseColorToMaterial(\n                                      edgeMaterial,\n                                      edgeMaterial.color,\n                                      fillTechnique,\n                                      fillTechnique.lineColor!,\n                                      mapView.env\n                                  );\n                              }\n                            : undefined\n                    );\n\n                    this.registerTileObject(tile, outlineObj, techniqueKind);\n                    objects.push(outlineObj);\n                }\n\n                // Add the fill area edges as a separate geometry.\n                if (hasSolidLinesOutlines) {\n                    const outlineTechnique = technique as SolidLineTechnique;\n                    const outlineMaterial = material.clone() as SolidLineMaterial;\n                    applyBaseColorToMaterial(\n                        outlineMaterial,\n                        outlineMaterial.color,\n                        outlineTechnique,\n                        outlineTechnique.secondaryColor ?? 0x000000,\n                        discreteZoomEnv\n                    );\n\n                    if (outlineTechnique.secondaryCaps !== undefined) {\n                        outlineMaterial.caps = outlineTechnique.secondaryCaps;\n                    }\n                    const outlineObj = buildObject(\n                        technique,\n                        bufferGeometry,\n                        outlineMaterial,\n                        tile,\n                        elevationEnabled\n                    );\n\n                    outlineObj.renderOrder =\n                        outlineTechnique.secondaryRenderOrder !== undefined\n                            ? outlineTechnique.secondaryRenderOrder\n                            : technique.renderOrder - 0.0000001;\n\n                    this.addUserData(tile, srcGeometry, technique, outlineObj);\n\n                    const fadingParams = this.getFadingParams(discreteZoomEnv, technique);\n                    FadingFeature.addRenderHelper(\n                        outlineObj,\n                        viewRanges,\n                        fadingParams.fadeNear,\n                        fadingParams.fadeFar,\n                        false,\n                        (renderer, mat) => {\n                            const lineMaterial = mat as SolidLineMaterial;\n\n                            const unitFactor =\n                                // tslint:disable-next-line: deprecation\n                                outlineTechnique.metricUnit === \"Pixel\"\n                                    ? mapView.pixelToWorld\n                                    : 1.0;\n\n                            if (outlineTechnique.secondaryColor !== undefined) {\n                                applyBaseColorToMaterial(\n                                    lineMaterial,\n                                    lineMaterial.color,\n                                    outlineTechnique,\n                                    outlineTechnique.secondaryColor,\n                                    mapView.env\n                                );\n                            }\n\n                            if (outlineTechnique.secondaryWidth !== undefined) {\n                                const techniqueLineWidth = getPropertyValue(\n                                    outlineTechnique.lineWidth!,\n                                    mapView.env\n                                );\n                                const techniqueSecondaryWidth = getPropertyValue(\n                                    outlineTechnique.secondaryWidth!,\n                                    mapView.env\n                                );\n                                const techniqueOpacity = getPropertyValue(\n                                    outlineTechnique.opacity,\n                                    mapView.env\n                                );\n                                // hide outline when it's equal or smaller then line to avoid subpixel contour\n                                const lineWidth =\n                                    techniqueSecondaryWidth <= techniqueLineWidth &&\n                                    (techniqueOpacity === null || techniqueOpacity === 1)\n                                        ? 0\n                                        : techniqueSecondaryWidth;\n                                lineMaterial.lineWidth = lineWidth * unitFactor;\n                            }\n                        }\n                    );\n\n                    this.registerTileObject(tile, outlineObj, techniqueKind);\n                    objects.push(outlineObj);\n                }\n            }\n        }\n    }\n\n    /**\n     * Prepare the [[Tile]]s pois. Uses the [[PoiManager]] in [[MapView]].\n     */\n    preparePois(tile: Tile, decodedTile: DecodedTile) {\n        if (decodedTile.poiGeometries !== undefined) {\n            tile.mapView.poiManager.addPois(tile, decodedTile);\n        }\n    }\n\n    /**\n     * Create a ground plane mesh for a tile\n     * @param tile Tile\n     * @param material Material\n     * @param createTexCoords Enable creation of texture coordinates\n     */\n    createGroundPlane(\n        tile: Tile,\n        material: THREE.Material | THREE.Material[],\n        createTexCoords: boolean,\n        shadowsEnabled?: boolean\n    ): THREE.Mesh {\n        const { dataSource, projection, mapView } = tile;\n        const sourceProjection = dataSource.getTilingScheme().projection;\n        const shouldSubdivide = projection.type === ProjectionType.Spherical;\n        const tmpV = new THREE.Vector3();\n\n        function moveTileCenter(geom: THREE.BufferGeometry) {\n            const attr = geom.getAttribute(\"position\") as THREE.BufferAttribute;\n            const posArray = attr.array as Float32Array;\n            for (let i = 0; i < posArray.length; i += 3) {\n                tmpV.set(posArray[i], posArray[i + 1], posArray[i + 2]);\n                projection.reprojectPoint(sourceProjection, tmpV, tmpV);\n                tmpV.sub(tile.center);\n                posArray[i] = tmpV.x;\n                posArray[i + 1] = tmpV.y;\n                posArray[i + 2] = tmpV.z;\n            }\n            attr.needsUpdate = true;\n        }\n\n        // Create plane\n        const { east, west, north, south } = tile.geoBox;\n        const geometry = new THREE.BufferGeometry();\n        const sw = sourceProjection.projectPoint(\n            new GeoCoordinates(south, west),\n            new THREE.Vector3()\n        );\n        const se = sourceProjection.projectPoint(\n            new GeoCoordinates(south, east),\n            new THREE.Vector3()\n        );\n        const nw = sourceProjection.projectPoint(\n            new GeoCoordinates(north, west),\n            new THREE.Vector3()\n        );\n        const ne = sourceProjection.projectPoint(\n            new GeoCoordinates(north, east),\n            new THREE.Vector3()\n        );\n        const posAttr = new THREE.BufferAttribute(\n            new Float32Array([...sw.toArray(), ...se.toArray(), ...nw.toArray(), ...ne.toArray()]),\n            3\n        );\n        geometry.setAttribute(\"position\", posAttr);\n        if (shadowsEnabled === true) {\n            sourceProjection.surfaceNormal(sw, tmpV);\n            // Webmercator needs to have it negated to work correctly.\n            tmpV.negate();\n            const normAttr = new THREE.BufferAttribute(\n                new Float32Array([\n                    ...tmpV.toArray(),\n                    ...tmpV.toArray(),\n                    ...tmpV.toArray(),\n                    ...tmpV.toArray()\n                ]),\n                3\n            );\n            geometry.setAttribute(\"normal\", normAttr);\n        }\n        geometry.setIndex(new THREE.BufferAttribute(new Uint16Array([0, 1, 2, 2, 1, 3]), 1));\n\n        if (createTexCoords) {\n            const uvAttr = new THREE.BufferAttribute(new Float32Array([0, 0, 1, 0, 0, 1, 1, 1]), 2);\n            geometry.setAttribute(\"uv\", uvAttr);\n        }\n\n        if (shouldSubdivide) {\n            const geometries: THREE.BufferGeometry[] = [];\n            const sphericalModifier = new SphericalGeometrySubdivisionModifier(\n                THREE.MathUtils.degToRad(10),\n                sourceProjection\n            );\n            const enableMixedLod = mapView.enableMixedLod || mapView.enableMixedLod === undefined;\n\n            if (enableMixedLod) {\n                // Use a [[LodMesh]] to adapt tesselation of tile depending on zoom level\n                for (let zoomLevelOffset = 0; zoomLevelOffset < 4; ++zoomLevelOffset) {\n                    const subdivision = Math.pow(2, zoomLevelOffset);\n                    const zoomLevelGeometry = geometry.clone();\n                    if (subdivision > 1) {\n                        const edgeModifier = new EdgeLengthGeometrySubdivisionModifier(\n                            subdivision,\n                            tile.geoBox,\n                            SubdivisionMode.All,\n                            sourceProjection\n                        );\n                        edgeModifier.modify(zoomLevelGeometry);\n                    }\n                    sphericalModifier.modify(zoomLevelGeometry);\n                    moveTileCenter(zoomLevelGeometry);\n                    geometries.push(zoomLevelGeometry);\n                }\n                return new LodMesh(geometries, material);\n            } else {\n                // Use static mesh if mixed LOD is disabled\n                sphericalModifier.modify(geometry);\n                moveTileCenter(geometry);\n\n                return new THREE.Mesh(geometry, material);\n            }\n        } else {\n            // Use static mesh for planar projection\n            moveTileCenter(geometry);\n            return new THREE.Mesh(geometry, material);\n        }\n    }\n\n    /**\n     * Creates and add a background plane for the tile.\n     * @param tile Tile\n     * @param renderOrder Render order of the tile\n     */\n    addGroundPlane(tile: Tile, renderOrder: number) {\n        const shadowsEnabled = tile.mapView.shadowsEnabled;\n        const material = this.createGroundPlaneMaterial(\n            new THREE.Color(tile.mapView.clearColor),\n            tile.mapView.shadowsEnabled,\n            tile.mapView.projection.type === ProjectionType.Spherical\n        );\n        const mesh = this.createGroundPlane(tile, material, false, shadowsEnabled);\n        mesh.receiveShadow = shadowsEnabled;\n        mesh.renderOrder = renderOrder;\n        this.registerTileObject(tile, mesh, GeometryKind.Background);\n        tile.objects.push(mesh);\n    }\n\n    private createGroundPlaneMaterial(\n        color: THREE.Color,\n        shadowsEnabled: boolean,\n        depthWrite: boolean\n    ): THREE.Material {\n        if (shadowsEnabled) {\n            return new MapMeshStandardMaterial({\n                color,\n                visible: true,\n                depthWrite,\n                removeDiffuseLight: true\n            });\n        } else {\n            return new MapMeshBasicMaterial({\n                color,\n                visible: true,\n                depthWrite\n            });\n        }\n    }\n\n    /**\n     * Gets the attachments of the given [[DecodedTile]].\n     *\n     * @param decodedTile The [[DecodedTile]].\n     */\n    private *getAttachments(decodedTile: DecodedTile): Generator<AttachmentInfo> {\n        const cache = new AttachmentCache();\n\n        for (const geometry of decodedTile.geometries) {\n            // the main attachment\n\n            const mainAttachment: Attachment = {\n                index: geometry.index,\n                edgeIndex: geometry.edgeIndex,\n                uuid: geometry.uuid,\n                groups: geometry.groups\n            };\n\n            yield new AttachmentInfo(geometry, mainAttachment, cache);\n\n            if (geometry.attachments) {\n                // the additional attachments\n                for (const info of geometry.attachments) {\n                    yield new AttachmentInfo(geometry, info, cache);\n                }\n            }\n        }\n    }\n\n    /**\n     * Process the given [[Tile]] and assign default values to render orders\n     * and label priorities.\n     *\n     * @param tile The [[Tile]] to process.\n     */\n    private processPriorities(tile: Tile) {\n        const decodedTile = tile.decodedTile;\n\n        if (decodedTile === undefined) {\n            return;\n        }\n\n        const theme = tile.mapView;\n\n        if (!theme) {\n            return;\n        }\n\n        const { priorities, labelPriorities } = tile.mapView.theme;\n\n        decodedTile.techniques.forEach(technique => {\n            if (\n                isTextTechnique(technique) ||\n                isPoiTechnique(technique) ||\n                isLineMarkerTechnique(technique)\n            ) {\n                // for screen-space techniques the `category` is used to assign\n                // priorities.\n                if (labelPriorities && typeof technique._category === \"string\") {\n                    // override the `priority` when the technique uses `category`.\n                    const priority = labelPriorities.indexOf(technique._category);\n                    if (priority !== -1) {\n                        technique.priority = labelPriorities.length - priority;\n                    }\n                }\n            } else if (priorities && technique._styleSet !== undefined) {\n                // Compute the render order based on the style category and styleSet.\n                const computeRenderOrder = (category: string): number | undefined => {\n                    const priority = priorities?.findIndex(\n                        entry => entry.group === technique._styleSet && entry.category === category\n                    );\n\n                    return priority !== undefined && priority !== -1\n                        ? (priority + 1) * 10\n                        : undefined;\n                };\n\n                if (typeof technique._category === \"string\") {\n                    // override the renderOrder when the technique is using categories.\n                    const renderOrder = computeRenderOrder(technique._category);\n\n                    if (renderOrder !== undefined) {\n                        technique.renderOrder = renderOrder;\n                    }\n                }\n\n                if (typeof technique._secondaryCategory === \"string\") {\n                    // override the secondaryRenderOrder when the technique is using categories.\n                    const secondaryRenderOrder = computeRenderOrder(technique._secondaryCategory);\n\n                    if (secondaryRenderOrder !== undefined) {\n                        (technique as any).secondaryRenderOrder = secondaryRenderOrder;\n                    }\n                }\n            }\n        });\n    }\n\n    private setupTerrainMaterial(\n        technique: TerrainTechnique,\n        material: THREE.Material,\n        terrainColor: number\n    ) {\n        if (technique.displacementMap === undefined) {\n            // Render terrain using the given color.\n            const stdMaterial = material as MapMeshStandardMaterial;\n            stdMaterial.color.set(terrainColor);\n            return;\n        }\n\n        // Render terrain using height-based colors.\n        (material as any).onBeforeCompile = (shader: THREE.Shader) => {\n            shader.fragmentShader = shader.fragmentShader.replace(\n                \"#include <map_pars_fragment>\",\n                `#include <map_pars_fragment>\n    uniform sampler2D displacementMap;\n    uniform float displacementScale;\n    uniform float displacementBias;`\n            );\n            shader.fragmentShader = shader.fragmentShader.replace(\n                \"#include <map_fragment>\",\n                `#ifdef USE_MAP\n    float minElevation = ${EarthConstants.MIN_ELEVATION.toFixed(1)};\n    float maxElevation = ${EarthConstants.MAX_ELEVATION.toFixed(1)};\n    float elevationRange = maxElevation - minElevation;\n\n    float disp = texture2D( displacementMap, vUv ).x * displacementScale + displacementBias;\n    vec4 texelColor = texture2D( map, vec2((disp - minElevation) / elevationRange, 0.0) );\n    texelColor = mapTexelToLinear( texelColor );\n    diffuseColor *= texelColor;\n#endif`\n            );\n            // We remove the displacement map from manipulating the vertices, it is\n            // however still required for the pixel shader, so it can't be directly\n            // removed.\n            shader.vertexShader = shader.vertexShader.replace(\n                \"#include <displacementmap_vertex>\",\n                \"\"\n            );\n        };\n        (material as MapMeshStandardMaterial).displacementMap!.needsUpdate = true;\n    }\n\n    private addUserData(\n        tile: Tile,\n        srcGeometry: Geometry,\n        technique: Technique,\n        object: THREE.Object3D\n    ) {\n        if (isTerrainTechnique(technique)) {\n            assert(\n                Object.keys(object.userData).length === 0,\n                \"Unexpected user data in terrain object\"\n            );\n\n            assert(\n                typeof srcGeometry.objInfos![0] === \"object\",\n                \"Wrong attribute map type for terrain geometry\"\n            );\n\n            const displacementMap = (srcGeometry.objInfos as DisplacementMap[])[0];\n            const tileDisplacementMap: TileDisplacementMap = {\n                tileKey: tile.tileKey,\n                texture: new THREE.DataTexture(\n                    displacementMap.buffer,\n                    displacementMap.xCountVertices,\n                    displacementMap.yCountVertices,\n                    THREE.LuminanceFormat,\n                    THREE.FloatType\n                ),\n                displacementMap,\n                geoBox: tile.geoBox\n            };\n            object.userData = tileDisplacementMap;\n        } else {\n            // Set the feature data for picking with `MapView.intersectMapObjects()` except for\n            // solid-line which uses tile-based picking.\n            const featureData: TileFeatureData = {\n                geometryType: srcGeometry.type,\n                starts: srcGeometry.featureStarts,\n                objInfos: srcGeometry.objInfos\n            };\n            object.userData.feature = featureData;\n            object.userData.technique = technique;\n        }\n    }\n\n    /**\n     * Gets the fading parameters for several kinds of objects.\n     */\n    private getFadingParams(\n        env: Env,\n        technique: MakeTechniqueAttrs<BaseTechniqueParams>\n    ): FadingParameters {\n        const fadeNear =\n            technique.fadeNear !== undefined\n                ? getPropertyValue(technique.fadeNear, env)\n                : FadingFeature.DEFAULT_FADE_NEAR;\n        const fadeFar =\n            technique.fadeFar !== undefined\n                ? getPropertyValue(technique.fadeFar, env)\n                : FadingFeature.DEFAULT_FADE_FAR;\n        return {\n            fadeNear,\n            fadeFar\n        };\n    }\n\n    /**\n     * Gets the fading parameters for several kinds of objects.\n     */\n    private getPolygonFadingParams(\n        env: Env,\n        technique: FillTechnique | ExtrudedPolygonTechnique\n    ): PolygonFadingParameters {\n        let color: string | number | undefined;\n        let colorMix = EdgeMaterial.DEFAULT_COLOR_MIX;\n\n        if (technique.lineColor !== undefined) {\n            color = getPropertyValue(technique.lineColor, env);\n            if (isExtrudedPolygonTechnique(technique)) {\n                const extrudedPolygonTechnique = technique as ExtrudedPolygonTechnique;\n                colorMix =\n                    extrudedPolygonTechnique.lineColorMix !== undefined\n                        ? extrudedPolygonTechnique.lineColorMix\n                        : EdgeMaterial.DEFAULT_COLOR_MIX;\n            }\n        }\n\n        const fadeNear =\n            technique.fadeNear !== undefined\n                ? getPropertyValue(technique.fadeNear, env)\n                : FadingFeature.DEFAULT_FADE_NEAR;\n        const fadeFar =\n            technique.fadeFar !== undefined\n                ? getPropertyValue(technique.fadeFar, env)\n                : FadingFeature.DEFAULT_FADE_FAR;\n\n        const lineFadeNear =\n            technique.lineFadeNear !== undefined\n                ? getPropertyValue(technique.lineFadeNear, env)\n                : fadeNear;\n        const lineFadeFar =\n            technique.lineFadeFar !== undefined\n                ? getPropertyValue(technique.lineFadeFar, env)\n                : fadeFar;\n\n        if (color === undefined) {\n            color = EdgeMaterial.DEFAULT_COLOR;\n        }\n\n        return {\n            color,\n            colorMix,\n            fadeNear,\n            fadeFar,\n            lineFadeNear,\n            lineFadeFar\n        };\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport * as THREE from \"three\";\n\nimport { UnicodeUtils } from \"../utils/UnicodeUtils\";\nimport { Font } from \"./FontCatalog\";\n\n/**\n * Structure containing all the required information necessary to render a BMFont glyph using\n * [[TextCanvas]].\n */\nexport class GlyphData {\n    /**\n     * Unicode character represented by this glyph.\n     */\n    readonly character: string;\n\n    /**\n     * Glyph' direction.\n     */\n    readonly direction: UnicodeUtils.Direction;\n\n    /**\n     * Array containing the positions for all corners of this glyph.\n     */\n    positions: THREE.Vector3[] = [];\n\n    /**\n     * Array containing the source texture coordinates for all corners of this glyph.\n     * Used to sample the original texture atlas pages.\n     */\n    sourceTextureCoordinates: THREE.Vector2[] = [];\n\n    /**\n     * Array containing the dynamic texture coordinates for all corners of this glyph.\n     * Used to sample the dynamic texture atlas page.\n     */\n    dynamicTextureCoordinates: THREE.Vector2[] = [];\n\n    /**\n     * Source texture atlas' page copy index.\n     */\n    copyIndex: number = 0;\n\n    /**\n     * Flag indicating if glyph can be currently rendered.\n     */\n    isInCache: boolean = false;\n\n    /**\n     * Creates a new `GlyphData` object.\n     *\n     * @param codePoint Unicode code point.\n     * @param block Unicode block.\n     * @param width Glyph' width.\n     * @param height Glyph' height.\n     * @param advanceX Amount of pixel to move after placing this glyph.\n     * @param offsetX Horizontal offset from the glyph' origin.\n     * @param offsetY Vertical offset from the glyph' origin.\n     * @param u0 Glyph' left texture coordinate.\n     * @param v0 Glyph' bottom texture coordinate.\n     * @param u1 Glyph' right texture coordinate.\n     * @param v1 Glyph' top texture coordinate.\n     * @param texture Glyph' source texture atlas page.\n     * @param font Glyph' font.\n     *\n     * @returns New `GlyphData`.\n     */\n    constructor(\n        readonly codePoint: number,\n        readonly block: string,\n        readonly width: number,\n        readonly height: number,\n        readonly advanceX: number,\n        readonly offsetX: number,\n        readonly offsetY: number,\n        u0: number,\n        v0: number,\n        u1: number,\n        v1: number,\n        readonly texture: THREE.Texture,\n        readonly font: Font\n    ) {\n        this.character = String.fromCodePoint(codePoint);\n        this.direction = UnicodeUtils.getDirection(codePoint, block);\n\n        const left = this.offsetX;\n        const right = left + this.width;\n        const top = font.metrics.lineHeight - this.offsetY;\n        const bottom = top - this.height;\n\n        this.positions.push(\n            new THREE.Vector3(left, bottom, 1.0),\n            new THREE.Vector3(right, bottom, 1.0),\n            new THREE.Vector3(left, top, 1.0),\n            new THREE.Vector3(right, top, 1.0)\n        );\n\n        this.sourceTextureCoordinates.push(\n            new THREE.Vector2(u0, v0),\n            new THREE.Vector2(u1, v0),\n            new THREE.Vector2(u0, v1),\n            new THREE.Vector2(u1, v1)\n        );\n\n        this.dynamicTextureCoordinates.push(\n            new THREE.Vector2(0.0, 0.0),\n            new THREE.Vector2(1.0, 0.0),\n            new THREE.Vector2(0.0, 1.0),\n            new THREE.Vector2(1.0, 1.0)\n        );\n    }\n\n    /**\n     * Clone this `GlyphData`.\n     *\n     * @returns Cloned `GlyphData`.\n     */\n    clone(): GlyphData {\n        return new GlyphData(\n            this.codePoint,\n            this.block,\n            this.width,\n            this.height,\n            this.advanceX,\n            this.offsetX,\n            this.offsetY,\n            this.sourceTextureCoordinates[0].x,\n            this.sourceTextureCoordinates[0].y,\n            this.sourceTextureCoordinates[3].x,\n            this.sourceTextureCoordinates[3].y,\n            this.texture,\n            this.font\n        );\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\nimport * as THREE from \"three\";\n\nimport { MemoryUsage } from \"../TextCanvas\";\nimport { GlyphData } from \"./GlyphData\";\nimport { TextBufferObject } from \"./TextBufferObject\";\nimport { TextRenderStyle } from \"./TextStyle\";\n\nexport const MAX_CAPACITY = 65536;\nexport const VERTEX_BUFFER_STRIDE = 16;\nexport const INDEX_BUFFER_STRIDE = 1;\nexport const VERTICES_PER_QUAD = 4;\nexport const INDICES_PER_QUAD = 6;\nexport const QUAD_VERTEX_MEMORY_FOOTPRINT = VERTICES_PER_QUAD * VERTEX_BUFFER_STRIDE;\nexport const QUAD_INDEX_MEMORY_FOOTPRINT = INDICES_PER_QUAD * INDEX_BUFFER_STRIDE;\n\n/**\n * Number of bytes for float in an Float32Array.\n */\nconst NUM_BYTES_PER_FLOAT = 4;\n\n/**\n * Number of bytes for integer number in an UInt32Array.\n */\nconst NUM_BYTES_PER_INT32 = 4;\n\n/**\n * Interface containing user-supplied picking data, as well as the [[TextGeometry]] range it's\n * assigned to.\n */\ninterface PickingData {\n    start: number;\n    end: number;\n    data: any;\n}\n\n/**\n * Procedural geometry that holds vertex attribute data for all glyphs in a [[TextCanvas]].\n */\nexport class TextGeometry {\n    /**\n     * Count of currently drawn glyphs.\n     */\n    get drawCount(): number {\n        return this.m_drawCount;\n    }\n\n    /**\n     * Mesh used to render foreground glyphs.\n     */\n    get mesh(): THREE.Mesh {\n        return this.m_mesh;\n    }\n\n    /**\n     * Mesh used to render background glyphs.\n     */\n    get backgroundMesh(): THREE.Mesh {\n        return this.m_bgMesh;\n    }\n    /**\n     * Maximum glyph capacity.\n     */\n    readonly capacity: number;\n\n    private m_currentCapacity: number;\n    private m_drawCount: number;\n    private m_updateOffset: number;\n\n    private m_vertexBuffer: THREE.InterleavedBuffer;\n    private m_positionAttribute: THREE.InterleavedBufferAttribute;\n    private m_uvAttribute: THREE.InterleavedBufferAttribute;\n    private m_colorAttribute: THREE.InterleavedBufferAttribute;\n    private m_bgColorAttribute: THREE.InterleavedBufferAttribute;\n    private m_indexBuffer: THREE.BufferAttribute;\n\n    private m_geometry: THREE.BufferGeometry;\n    private m_mesh: THREE.Mesh;\n    private m_bgMesh: THREE.Mesh;\n\n    private m_pickingCount: number;\n    private m_pickingDataArray: PickingData[];\n\n    /**\n     * Creates a new `TextGeometry`.\n     *\n     * @param material Material used to render foreground glyphs.\n     * @param backgroundMaterial Material used to render background glyphs.\n     * @param initialSize Initial amount of glyphs that can be stored.\n     * @param capacity Maximum glyph capacity.\n     *\n     * @returns New `TextGeometry`.\n     */\n    constructor(\n        readonly scene: THREE.Scene,\n        material: THREE.Material,\n        backgroundMaterial: THREE.Material,\n        initialSize: number,\n        capacity: number\n    ) {\n        this.capacity = Math.min(capacity, MAX_CAPACITY);\n        this.m_currentCapacity = Math.min(initialSize, capacity);\n        this.m_drawCount = 0;\n        this.m_updateOffset = 0;\n        this.m_pickingCount = 0;\n\n        this.m_vertexBuffer = new THREE.InterleavedBuffer(\n            new Float32Array(this.m_currentCapacity * QUAD_VERTEX_MEMORY_FOOTPRINT),\n            VERTEX_BUFFER_STRIDE\n        );\n        this.m_vertexBuffer.setUsage(THREE.DynamicDrawUsage);\n        this.m_positionAttribute = new THREE.InterleavedBufferAttribute(this.m_vertexBuffer, 4, 0);\n        this.m_uvAttribute = new THREE.InterleavedBufferAttribute(this.m_vertexBuffer, 4, 4);\n        this.m_colorAttribute = new THREE.InterleavedBufferAttribute(this.m_vertexBuffer, 4, 8);\n        this.m_bgColorAttribute = new THREE.InterleavedBufferAttribute(this.m_vertexBuffer, 4, 12);\n\n        this.m_indexBuffer = new THREE.BufferAttribute(\n            new Uint32Array(this.m_currentCapacity * QUAD_INDEX_MEMORY_FOOTPRINT),\n            INDEX_BUFFER_STRIDE\n        );\n        this.m_indexBuffer.setUsage(THREE.DynamicDrawUsage);\n\n        this.m_geometry = new THREE.BufferGeometry();\n        this.m_geometry.setAttribute(\"position\", this.m_positionAttribute);\n        this.m_geometry.setAttribute(\"uv\", this.m_uvAttribute);\n        this.m_geometry.setAttribute(\"color\", this.m_colorAttribute);\n        this.m_geometry.setAttribute(\"bgColor\", this.m_bgColorAttribute);\n        this.m_geometry.setIndex(this.m_indexBuffer);\n\n        this.m_pickingDataArray = new Array(this.m_currentCapacity);\n\n        this.m_mesh = new THREE.Mesh(this.m_geometry, material);\n        this.m_bgMesh = new THREE.Mesh(this.m_geometry, backgroundMaterial);\n        this.m_mesh.renderOrder = Number.MAX_SAFE_INTEGER;\n        this.m_bgMesh.renderOrder = Number.MAX_SAFE_INTEGER - 1;\n        this.m_mesh.frustumCulled = false;\n        this.m_bgMesh.frustumCulled = false;\n        this.scene.add(this.m_bgMesh, this.m_mesh);\n    }\n\n    /**\n     * Release all allocated resources.\n     */\n    dispose() {\n        this.scene.remove(this.m_bgMesh, this.m_mesh);\n        this.m_geometry.dispose();\n    }\n\n    /**\n     * Clear the geometry.\n     */\n    clear() {\n        this.m_drawCount = 0;\n        this.m_updateOffset = 0;\n        this.m_pickingCount = 0;\n    }\n\n    /**\n     * Update the GPU resources to reflect the latest additions to the geometry.\n     */\n    update() {\n        if (this.drawCount > this.m_updateOffset) {\n            this.m_vertexBuffer.needsUpdate = true;\n            this.m_vertexBuffer.updateRange.offset =\n                this.m_updateOffset * QUAD_VERTEX_MEMORY_FOOTPRINT;\n            this.m_vertexBuffer.updateRange.count =\n                (this.m_drawCount - this.m_updateOffset) * QUAD_VERTEX_MEMORY_FOOTPRINT;\n            this.m_indexBuffer.needsUpdate = true;\n            this.m_indexBuffer.updateRange.offset =\n                this.m_updateOffset * QUAD_INDEX_MEMORY_FOOTPRINT;\n            this.m_indexBuffer.updateRange.count =\n                (this.m_drawCount - this.m_updateOffset) * QUAD_INDEX_MEMORY_FOOTPRINT;\n        }\n        this.m_updateOffset = this.m_drawCount;\n        this.m_geometry.setDrawRange(0, this.m_drawCount * INDICES_PER_QUAD);\n    }\n\n    /**\n     * Add a new glyph to the `TextGeometry`.\n     *\n     * @param glyphData [[GlyphData]] holding the glyph description.\n     * @param corners Transformed glyph corners.\n     * @param weight Foreground glyph sampling weight.\n     * @param bgWeight Foreground glyph sampling weight.\n     * @param mirrored If `true`, UVs will be horizontally mirrored (needed for RTL punctuation).\n     * @param style Currently set [[TextRenderStyle]].\n     *\n     * @returns Result of the addition.\n     */\n    add(\n        glyphData: GlyphData,\n        corners: THREE.Vector3[],\n        weight: number,\n        bgWeight: number,\n        mirrored: boolean,\n        style: TextRenderStyle\n    ): boolean {\n        if (this.m_drawCount >= this.capacity) {\n            return false;\n        } else if (this.m_drawCount >= this.m_currentCapacity) {\n            const newSize = Math.min(this.m_currentCapacity * 2, this.capacity);\n            this.resizeBuffers(newSize);\n        }\n\n        const baseVertex = this.m_drawCount * VERTICES_PER_QUAD;\n        const baseIndex = this.m_drawCount * INDICES_PER_QUAD;\n\n        for (let i = 0; i < VERTICES_PER_QUAD; ++i) {\n            this.m_positionAttribute.setXYZW(\n                baseVertex + i,\n                corners[i].x,\n                corners[i].y,\n                corners[i].z,\n                (mirrored ? -1.0 : 1.0) * style.rotation\n            );\n            const mirroredUVIdx = mirrored ? ((i + 1) % 2) + Math.floor(i / 2) * 2 : i;\n            this.m_uvAttribute.setXYZW(\n                baseVertex + i,\n                glyphData.dynamicTextureCoordinates[mirroredUVIdx].x,\n                glyphData.dynamicTextureCoordinates[mirroredUVIdx].y,\n                weight,\n                bgWeight\n            );\n            this.m_colorAttribute.setXYZW(\n                baseVertex + i,\n                style.color.r,\n                style.color.g,\n                style.color.b,\n                style.opacity\n            );\n            this.m_bgColorAttribute.setXYZW(\n                baseVertex + i,\n                style.backgroundColor.r,\n                style.backgroundColor.g,\n                style.backgroundColor.b,\n                style.backgroundOpacity\n            );\n        }\n\n        this.m_indexBuffer.setX(baseIndex, baseVertex);\n        this.m_indexBuffer.setX(baseIndex + 1, baseVertex + 1);\n        this.m_indexBuffer.setX(baseIndex + 2, baseVertex + 2);\n        this.m_indexBuffer.setX(baseIndex + 3, baseVertex + 2);\n        this.m_indexBuffer.setX(baseIndex + 4, baseVertex + 1);\n        this.m_indexBuffer.setX(baseIndex + 5, baseVertex + 3);\n\n        ++this.m_drawCount;\n        return true;\n    }\n\n    /**\n     * Add a new glyph to a text buffer.\n     *\n     * @param buffer Target buffer where glyph attributes will be stored.\n     * @param offset Offset of the target buffer.\n     * @param glyphData [[GlyphData]] holding the glyph description.\n     * @param corners Transformed glyph corners.\n     * @param weight Foreground glyph sampling weight.\n     * @param bgWeight Foreground glyph sampling weight.\n     * @param mirrored If `true`, UVs will be mirrored (needed for RTL punctuation).\n     * @param style Currently set [[TextRenderStyle]].\n     */\n    addToBuffer(\n        buffer: Float32Array,\n        offset: number,\n        glyphData: GlyphData,\n        corners: THREE.Vector3[],\n        weight: number,\n        bgWeight: number,\n        mirrored: boolean,\n        style: TextRenderStyle\n    ): void {\n        for (let i = 0; i < VERTICES_PER_QUAD; ++i) {\n            const vertexOffset = offset + VERTEX_BUFFER_STRIDE * i;\n            buffer[vertexOffset] = corners[i].x;\n            buffer[vertexOffset + 1] = corners[i].y;\n            buffer[vertexOffset + 2] = corners[i].z;\n            buffer[vertexOffset + 3] = (mirrored ? -1.0 : 1.0) * style.rotation;\n\n            const mirroredUVIdx = mirrored ? ((i + 1) % 2) + Math.floor(i / 2) * 2 : i;\n            buffer[vertexOffset + 4] = glyphData.dynamicTextureCoordinates[mirroredUVIdx].x;\n            buffer[vertexOffset + 5] = glyphData.dynamicTextureCoordinates[mirroredUVIdx].y;\n            buffer[vertexOffset + 6] = weight;\n            buffer[vertexOffset + 7] = bgWeight;\n\n            buffer[vertexOffset + 8] = style.color.r;\n            buffer[vertexOffset + 9] = style.color.g;\n            buffer[vertexOffset + 10] = style.color.b;\n            buffer[vertexOffset + 11] = style.opacity;\n\n            buffer[vertexOffset + 12] = style.backgroundColor.r;\n            buffer[vertexOffset + 13] = style.backgroundColor.g;\n            buffer[vertexOffset + 14] = style.backgroundColor.b;\n            buffer[vertexOffset + 15] = style.backgroundOpacity;\n        }\n    }\n\n    /**\n     * Add a previously computed [[TextBufferObject]] to the `TextGeometry`. Extra parameters can\n     * be passed to override the passed attribute data.\n     *\n     * @param textBufferObject [[TextBufferObject]] containing computed glyphs.\n     * @param position Override position value.\n     * @param scale Override scale value.\n     * @param rotation Override rotation value.\n     * @param color Override color value.\n     * @param opacity Override opacity value.\n     * @param bgColor Override background color value.\n     * @param bgOpacity Override background opacity value.\n     *\n     * @returns Result of the addition.\n     */\n    addTextBufferObject(\n        textBufferObject: TextBufferObject,\n        position?: THREE.Vector3,\n        scale?: number,\n        rotation?: number,\n        color?: THREE.Color,\n        opacity?: number,\n        bgColor?: THREE.Color,\n        bgOpacity?: number\n    ): boolean {\n        if (this.m_drawCount + textBufferObject.glyphs.length >= this.capacity) {\n            return false;\n        } else if (this.m_drawCount + textBufferObject.glyphs.length >= this.m_currentCapacity) {\n            const newSize = Math.min(this.m_currentCapacity * 2, this.capacity);\n            this.resizeBuffers(newSize);\n        }\n\n        const s = scale || 1.0;\n        const r = rotation || 0.0;\n        const cosR = Math.cos(r);\n        const sinR = Math.sin(r);\n        const offsetX = position !== undefined ? position.x : 0.0;\n        const offsetY = position !== undefined ? position.y : 0.0;\n        const offsetZ = position !== undefined ? position.z : 0.0;\n\n        const buffer = textBufferObject.buffer;\n\n        const rot = buffer[3];\n        const rotSign = rot < 0 ? -1.0 : 1.0;\n\n        const red = color !== undefined ? color.r : buffer[8];\n        const green = color !== undefined ? color.g : buffer[9];\n        const blue = color !== undefined ? color.b : buffer[10];\n        const alpha = opacity !== undefined ? opacity : buffer[11];\n        const bgRed = bgColor !== undefined ? bgColor.r : buffer[12];\n        const bgGreen = bgColor !== undefined ? bgColor.g : buffer[13];\n        const bgBlue = bgColor !== undefined ? bgColor.b : buffer[14];\n        const bgAlpha = bgOpacity !== undefined ? bgOpacity : buffer[15];\n\n        const targetOffset = this.m_drawCount * VERTICES_PER_QUAD;\n        for (let i = 0; i < textBufferObject.glyphs.length; ++i) {\n            const srcOffset = i * QUAD_VERTEX_MEMORY_FOOTPRINT;\n\n            const glyph = textBufferObject.glyphs[i];\n            if (!glyph.isInCache) {\n                return false;\n            }\n\n            const mirrored = buffer[srcOffset + 4] > buffer[srcOffset + VERTEX_BUFFER_STRIDE + 4];\n            const w = buffer[srcOffset + 6];\n            const bw = buffer[srcOffset + 7];\n\n            for (let j = 0; j < VERTICES_PER_QUAD; ++j) {\n                const x = buffer[srcOffset + j * VERTEX_BUFFER_STRIDE];\n                const y = buffer[srcOffset + j * VERTEX_BUFFER_STRIDE + 1];\n                this.m_positionAttribute.setXYZW(\n                    targetOffset + i * VERTICES_PER_QUAD + j,\n                    x * s * cosR + y * s * -sinR + offsetX,\n                    x * s * sinR + y * s * cosR + offsetY,\n                    buffer[srcOffset + j * VERTEX_BUFFER_STRIDE + 2] + offsetZ,\n                    buffer[srcOffset + j * VERTEX_BUFFER_STRIDE + 3] + rotSign * r\n                );\n                const mirroredUVIdx = mirrored ? ((j + 1) % 2) + Math.floor(j / 2) * 2 : j;\n                this.m_uvAttribute.setXYZW(\n                    targetOffset + i * VERTICES_PER_QUAD + j,\n                    glyph.dynamicTextureCoordinates[mirroredUVIdx].x,\n                    glyph.dynamicTextureCoordinates[mirroredUVIdx].y,\n                    w,\n                    (bw - w) / s + w\n                );\n                this.m_colorAttribute.setXYZW(\n                    targetOffset + i * VERTICES_PER_QUAD + j,\n                    red,\n                    green,\n                    blue,\n                    alpha\n                );\n                this.m_bgColorAttribute.setXYZW(\n                    targetOffset + i * VERTICES_PER_QUAD + j,\n                    bgRed,\n                    bgGreen,\n                    bgBlue,\n                    bgAlpha\n                );\n            }\n\n            this.m_indexBuffer.setX(\n                (this.m_drawCount + i) * INDICES_PER_QUAD,\n                (this.m_drawCount + i) * VERTICES_PER_QUAD\n            );\n            this.m_indexBuffer.setX(\n                (this.m_drawCount + i) * INDICES_PER_QUAD + 1,\n                (this.m_drawCount + i) * VERTICES_PER_QUAD + 1\n            );\n            this.m_indexBuffer.setX(\n                (this.m_drawCount + i) * INDICES_PER_QUAD + 2,\n                (this.m_drawCount + i) * VERTICES_PER_QUAD + 2\n            );\n            this.m_indexBuffer.setX(\n                (this.m_drawCount + i) * INDICES_PER_QUAD + 3,\n                (this.m_drawCount + i) * VERTICES_PER_QUAD + 2\n            );\n            this.m_indexBuffer.setX(\n                (this.m_drawCount + i) * INDICES_PER_QUAD + 4,\n                (this.m_drawCount + i) * VERTICES_PER_QUAD + 1\n            );\n            this.m_indexBuffer.setX(\n                (this.m_drawCount + i) * INDICES_PER_QUAD + 5,\n                (this.m_drawCount + i) * VERTICES_PER_QUAD + 3\n            );\n        }\n\n        this.m_drawCount += textBufferObject.glyphs.length;\n        return true;\n    }\n\n    /**\n     * Adds picking data for glyphs from the specified start until the last glyph added.\n     *\n     * @param startIdx First glyph index that this picking data is associated to.\n     * @param endIdx Last glyph index that this picking data is associated to.\n     * @param pickingData Picking data to be added.\n     */\n    addPickingData(startIdx: number, endIdx: number, pickingData: any): boolean {\n        if (this.m_pickingCount >= this.m_currentCapacity) {\n            return false;\n        }\n\n        this.m_pickingDataArray[this.m_pickingCount] = {\n            start: Math.min(startIdx, this.capacity),\n            end: Math.min(endIdx, this.capacity),\n            data: pickingData\n        };\n\n        ++this.m_pickingCount;\n        return true;\n    }\n\n    /**\n     * Fill the picking results for the pixel with the given screen coordinate. If multiple glyphs\n     * are found, the order of the results is unspecified.\n     *\n     * @param screenPosition Screen coordinate of picking position.\n     * @param pickCallback Callback to be called for every picked element.\n     */\n    pick(screenPosition: THREE.Vector2, pickCallback: (pickData: any | undefined) => void) {\n        for (const pickingData of this.m_pickingDataArray) {\n            if (pickingData === undefined) {\n                return;\n            }\n\n            for (let i = pickingData.start; i < pickingData.end; ++i) {\n                const positionIndex = i * VERTICES_PER_QUAD;\n\n                const minX = Math.min(\n                    this.m_positionAttribute.getX(positionIndex + 2),\n                    this.m_positionAttribute.getX(positionIndex + 1)\n                );\n                if (screenPosition.x < minX) {\n                    continue;\n                }\n\n                const maxX = Math.max(\n                    this.m_positionAttribute.getX(positionIndex + 2),\n                    this.m_positionAttribute.getX(positionIndex + 1)\n                );\n                if (screenPosition.x > maxX) {\n                    continue;\n                }\n\n                const minY = Math.min(\n                    this.m_positionAttribute.getY(positionIndex + 2),\n                    this.m_positionAttribute.getY(positionIndex + 1)\n                );\n                if (screenPosition.y < minY) {\n                    continue;\n                }\n\n                const maxY = Math.max(\n                    this.m_positionAttribute.getY(positionIndex + 2),\n                    this.m_positionAttribute.getY(positionIndex + 1)\n                );\n                if (screenPosition.y > maxY) {\n                    continue;\n                }\n\n                pickCallback(pickingData.data);\n                break;\n            }\n        }\n    }\n\n    /**\n     * Update the info with the memory footprint caused by objects owned by the `TextGeometry`.\n     *\n     * @param info The info object to increment with the values from this `TextGeometry`.\n     */\n    updateMemoryUsage(info: MemoryUsage) {\n        const numBytes =\n            this.m_vertexBuffer.count * NUM_BYTES_PER_FLOAT +\n            this.m_indexBuffer.count * NUM_BYTES_PER_INT32;\n        info.heapSize += numBytes;\n        info.gpuSize += numBytes;\n    }\n\n    private resizeBuffers(size: number) {\n        this.m_currentCapacity = size;\n\n        const newVertexBuffer = new Float32Array(size * QUAD_VERTEX_MEMORY_FOOTPRINT);\n        newVertexBuffer.set(this.m_vertexBuffer.array);\n        this.m_vertexBuffer = new THREE.InterleavedBuffer(newVertexBuffer, VERTEX_BUFFER_STRIDE);\n        this.m_vertexBuffer.setUsage(THREE.DynamicDrawUsage);\n        this.m_positionAttribute = new THREE.InterleavedBufferAttribute(this.m_vertexBuffer, 4, 0);\n        this.m_uvAttribute = new THREE.InterleavedBufferAttribute(this.m_vertexBuffer, 4, 4);\n        this.m_colorAttribute = new THREE.InterleavedBufferAttribute(this.m_vertexBuffer, 4, 8);\n        this.m_bgColorAttribute = new THREE.InterleavedBufferAttribute(this.m_vertexBuffer, 4, 12);\n\n        const newIndexBuffer = new Uint32Array(size * QUAD_INDEX_MEMORY_FOOTPRINT);\n        newIndexBuffer.set(this.m_indexBuffer.array);\n        this.m_indexBuffer = new THREE.BufferAttribute(newIndexBuffer, INDEX_BUFFER_STRIDE);\n        this.m_indexBuffer.setUsage(THREE.DynamicDrawUsage);\n\n        this.m_geometry.dispose();\n        this.m_geometry = new THREE.BufferGeometry();\n        this.m_geometry.setAttribute(\"position\", this.m_positionAttribute);\n        this.m_geometry.setAttribute(\"uv\", this.m_uvAttribute);\n        this.m_geometry.setAttribute(\"color\", this.m_colorAttribute);\n        this.m_geometry.setAttribute(\"bgColor\", this.m_bgColorAttribute);\n        this.m_geometry.setIndex(this.m_indexBuffer);\n\n        this.m_pickingDataArray.length = this.m_currentCapacity;\n\n        this.scene.remove(this.m_bgMesh, this.m_mesh);\n        this.m_mesh = new THREE.Mesh(this.m_geometry, this.m_mesh.material);\n        this.m_bgMesh = new THREE.Mesh(this.m_geometry, this.m_bgMesh.material);\n        this.m_mesh.renderOrder = Number.MAX_SAFE_INTEGER;\n        this.m_bgMesh.renderOrder = Number.MAX_SAFE_INTEGER - 1;\n        this.m_mesh.frustumCulled = false;\n        this.m_bgMesh.frustumCulled = false;\n        this.scene.add(this.m_bgMesh, this.m_mesh);\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport * as THREE from \"three\";\n\nimport { GlyphData } from \"../rendering/GlyphData\";\nimport { FontUnit, FontVariant } from \"../rendering/TextStyle\";\nimport { UnicodeUtils } from \"../utils/UnicodeUtils\";\n\n/**\n * Collection of different constants and utility functions used by [[Typesetter]]s.\n */\nexport namespace TypesettingUtils {\n    /**\n     * Ratio between EMs and Pixels.\n     */\n    export const EM_TO_PX = 16.0;\n\n    /**\n     * Ratio between Points and Pixels.\n     */\n    export const PT_TO_PX = 1.25;\n\n    /**\n     * Angle used when emulating italic fonts (oblique).\n     */\n    export const OBLIQUE_ANGLE = 0.174533;\n\n    /**\n     * Horizontal offset used when emulating italic fonts (oblique).\n     */\n    export const OBLIQUE_OFFSET = Math.tan(OBLIQUE_ANGLE);\n\n    /**\n     * Convert between any size specified in any [[FontUnit]] to pixels.\n     *\n     * @param size Font size (specified in `unit`).\n     * @param unit Size unit.\n     * @param originalSize Original size (pixels)\n     *\n     * @returns Pixel size.\n     */\n    export function getPixelSize(size: number, unit: FontUnit, originalSize: number) {\n        let result = size;\n        switch (unit) {\n            case FontUnit.Em:\n                result *= EM_TO_PX;\n                break;\n            case FontUnit.Point:\n                result *= PT_TO_PX;\n                break;\n            case FontUnit.Percent:\n                result *= (1.0 / 100) * originalSize;\n                break;\n        }\n        return result;\n    }\n\n    /**\n     * Gets the scale applied to a certain character when using the [[FontVariant]].`SmallCaps`.\n     *\n     * @param glyphs Array containing [[TransformedGlyphData]].\n     * @param index Index to `glyphDataArray`.\n     * @param fontVariant Currently active [[FontVariant]].\n     *\n     * @returns Glyph `SmallCaps` scale.\n     */\n    export function getSmallCapsScale(\n        glyphs: GlyphData[],\n        smallCapsTransformations: boolean[],\n        index: number,\n        fontVariant: FontVariant\n    ): number {\n        const isSmallCaps =\n            smallCapsTransformations[index] && fontVariant === FontVariant.SmallCaps;\n        return isSmallCaps\n            ? glyphs[index].font.metrics.xHeight / glyphs[index].font.metrics.capHeight\n            : 1.0;\n    }\n\n    /**\n     * Returns the first strong direction (LTR or RTL) found for a given array of [[GlyphData]].\n     *\n     * @param glyphs Array containing [[GlyphData]].\n     * @param offset `glyphDataArray` offset.\n     *\n     * @returns Strong direction.\n     */\n    export function getDirection(glyphs: GlyphData[], offset: number): UnicodeUtils.Direction {\n        let result = UnicodeUtils.Direction.LTR;\n        let index = offset;\n        while (\n            glyphs[index].direction !== UnicodeUtils.Direction.LTR &&\n            glyphs[index].direction !== UnicodeUtils.Direction.RTL &&\n            index < glyphs.length - 1\n        ) {\n            ++index;\n        }\n\n        if (Math.abs(glyphs[index].direction) === 1.0) {\n            result = glyphs[index].direction;\n        }\n        return result;\n    }\n\n    /**\n     * Computes the transformation matrix for a glyph.\n     *\n     * @param transform Matrix used to store the results.\n     * @param position Glyph' position.\n     * @param scale Glyph' scale.\n     * @param rotation [[TextCanvas]] rotation.\n     * @param localRotation Glyph' local rotation.\n     */\n    export function computeGlyphTransform(\n        transform: THREE.Matrix3,\n        position: THREE.Vector3,\n        scale: number,\n        rotation: number,\n        localRotation: number\n    ): void {\n        const cosAngle = Math.cos(rotation);\n        const sinAngle = Math.sin(rotation);\n        const localCosAngle = Math.cos(localRotation);\n        const localSinAngle = Math.sin(localRotation);\n        transform.set(\n            scale * localCosAngle,\n            scale * -localSinAngle,\n            cosAngle * position.x - sinAngle * position.y,\n            scale * localSinAngle,\n            scale * localCosAngle,\n            sinAngle * position.x + cosAngle * position.y,\n            0,\n            0,\n            1.0\n        );\n    }\n\n    /**\n     * Updates the supplied bounds with the computed screen-space corners for a given glyph.\n     *\n     * @param corners Glyph' corners.\n     * @param globalBounds Global text bounds.\n     * @param individualBounds Individual per-character bounds.\n     */\n    export function updateBounds(\n        corners: THREE.Vector3[],\n        globalBounds: THREE.Box2,\n        individualBounds?: { array: THREE.Box2[]; offset: number }\n    ): void {\n        const minX = Math.min(corners[0].x, corners[1].x, corners[2].x, corners[3].x);\n        const maxX = Math.max(corners[0].x, corners[1].x, corners[2].x, corners[3].x);\n        const minY = Math.min(corners[0].y, corners[1].y, corners[2].y, corners[3].y);\n        const maxY = Math.max(corners[0].y, corners[1].y, corners[2].y, corners[3].y);\n\n        if (individualBounds !== undefined) {\n            if (individualBounds.array[individualBounds.offset] !== undefined) {\n                individualBounds.array[individualBounds.offset].min.set(minX, minY);\n                individualBounds.array[individualBounds.offset].max.set(maxX, maxY);\n            } else {\n                individualBounds.array.push(\n                    new THREE.Box2(new THREE.Vector2(minX, minY), new THREE.Vector2(maxX, maxY))\n                );\n            }\n            ++individualBounds.offset;\n        }\n\n        globalBounds.min.set(\n            Math.min(globalBounds.min.x, minX),\n            Math.min(globalBounds.min.y, minY)\n        );\n        globalBounds.max.set(\n            Math.max(globalBounds.max.x, maxX),\n            Math.max(globalBounds.max.y, maxY)\n        );\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport * as THREE from \"three\";\nimport { PickingRaycaster } from \"./PickingRaycaster\";\n\n/**\n * `MapViewPoints` is a class to extend for the `\"circles\"` and `\"squares\"` [[Technique]]s to\n * implement raycasting of [[THREE.Points]] as expected in [[MapView]], that are in screen space. It\n * copies the behaviour of the `raycast` method in [[THREE.Points]] and dispatches it to its\n * children classes, [[Circles]] and [[Squares]], who hold the intersection testing in the\n * `testPoint` method. This class also has the ability to dismiss the testing via the\n * `enableRayTesting` flag.\n *\n * Its main motivation is to handle the point styles of XYZ projects.\n *\n * @see https://github.com/mrdoob/three.js/blob/master/src/objects/Points.js\n */\nexport abstract class MapViewPoints extends THREE.Points {\n    /**\n     * This allows to discard the ray testing.\n     */\n    enableRayTesting: boolean = true;\n\n    /**\n     * Implements the intersection testing in screen space between the drawn points and the ray. The\n     * drawing of the points being different between [[Circles]] and [[Squares]], this method is\n     * implemented in these child classes.\n     *\n     * @param point The point to test.\n     * @param screenPosition The point position on screen.\n     * @param pickCoordinates The picking position on screen.\n     * @param index The index of the point in the [[THREE.Geometry]].\n     * @param distance The distance between the point and the ray origin.\n     * @param intersects The results array.\n     */\n    abstract testPoint(\n        point: THREE.Vector3,\n        screenPosition: THREE.Vector2,\n        pickCoordinates: THREE.Vector2,\n        index: number,\n        distance: number,\n        intersects: THREE.Intersection[]\n    ): void;\n\n    /**\n     * This method is similar to the original method `raycast` in [[THREE.Points]] except that it\n     * then calls the tailored `testPoint` method in the children classes to test intersections\n     * depending on whether the points are circles or squares, which [[THREE.Points]] cannot do.\n     *\n     * @param raycaster The raycaster.\n     * @param intersects The array to fill with the results.\n     */\n    raycast(raycaster: PickingRaycaster, intersects: THREE.Intersection[]) {\n        if (!this.enableRayTesting) {\n            return;\n        }\n\n        const geometry = this.geometry;\n        const matrixWorld = this.matrixWorld;\n        const screenCoords = raycaster.ray.origin\n            .clone()\n            .add(raycaster.ray.direction)\n            .project(raycaster.camera);\n        const mouseCoords = new THREE.Vector2(\n            Math.ceil(((screenCoords.x + 1) / 2) * raycaster.width),\n            Math.ceil(((1 - screenCoords.y) / 2) * raycaster.height)\n        );\n\n        if (geometry instanceof THREE.BufferGeometry) {\n            const point = new THREE.Vector3();\n            const index = geometry.index;\n            const attributes = geometry.attributes;\n            const positions = attributes.position.array;\n            if (index !== null) {\n                const indices = index.array;\n                for (let i = 0, il = indices.length; i < il; i++) {\n                    const a = indices[i];\n                    point.fromArray(positions as number[], a * 3);\n                    const pointInfo = getPointInfo(point, matrixWorld, raycaster);\n                    if (pointInfo.pointIsOnScreen) {\n                        this.testPoint(\n                            point,\n                            pointInfo.absoluteScreenPosition!,\n                            mouseCoords,\n                            i,\n                            pointInfo.distance!,\n                            intersects\n                        );\n                    }\n                }\n            } else {\n                for (let i = 0, l = positions.length / 3; i < l; i++) {\n                    point.fromArray(positions as number[], i * 3);\n                    const pointInfo = getPointInfo(point, matrixWorld, raycaster);\n                    if (pointInfo.pointIsOnScreen) {\n                        this.testPoint(\n                            point,\n                            pointInfo.absoluteScreenPosition!,\n                            mouseCoords,\n                            i,\n                            pointInfo.distance!,\n                            intersects\n                        );\n                    }\n                }\n            }\n        } else {\n            const vertices = geometry.vertices;\n            for (let index = 0; index < vertices.length; index++) {\n                const point = vertices[index];\n                const pointInfo = getPointInfo(point, matrixWorld, raycaster);\n                if (pointInfo.pointIsOnScreen) {\n                    this.testPoint(\n                        point,\n                        pointInfo.absoluteScreenPosition!,\n                        mouseCoords,\n                        index,\n                        pointInfo.distance!,\n                        intersects\n                    );\n                }\n            }\n        }\n    }\n}\n\nfunction getPointInfo(\n    point: THREE.Vector3,\n    matrixWorld: THREE.Matrix4,\n    raycaster: PickingRaycaster\n): {\n    pointIsOnScreen: boolean;\n    absoluteScreenPosition?: THREE.Vector2;\n    distance?: number;\n} {\n    const worldPosition = point.clone();\n    worldPosition.applyMatrix4(matrixWorld);\n    const distance = worldPosition.distanceTo(raycaster.ray.origin);\n    worldPosition.project(raycaster.camera);\n    const relativeScreenPosition = new THREE.Vector2(worldPosition.x, worldPosition.y);\n    const pointIsOnScreen =\n        relativeScreenPosition.x < 1 &&\n        relativeScreenPosition.x > -1 &&\n        relativeScreenPosition.y < 1 &&\n        relativeScreenPosition.y > -1;\n    if (pointIsOnScreen) {\n        worldPosition.x = ((worldPosition.x + 1) / 2) * raycaster.width;\n        worldPosition.y = ((1 - worldPosition.y) / 2) * raycaster.height;\n        const absoluteScreenPosition = new THREE.Vector2(worldPosition.x, worldPosition.y);\n        return {\n            absoluteScreenPosition,\n            pointIsOnScreen,\n            distance\n        };\n    }\n    return {\n        pointIsOnScreen\n    };\n}\n\n/**\n * Point object that implements the raycasting of circles in screen space.\n */\nexport class Circles extends MapViewPoints {\n    /** @override */\n    testPoint(\n        point: THREE.Vector3,\n        screenPosition: THREE.Vector2,\n        pickCoordinates: THREE.Vector2,\n        index: number,\n        distance: number,\n        intersects: THREE.Intersection[]\n    ) {\n        const dx = screenPosition.x - pickCoordinates.x;\n        const dy = screenPosition.y - pickCoordinates.y;\n        const dist = Math.sqrt(dx * dx + dy * dy);\n        const radius = (this.material as THREE.PointsMaterial).size / 2;\n\n        if (dist <= radius) {\n            intersects.push({\n                point,\n                distance,\n                index,\n                object: this\n            });\n        }\n    }\n}\n\n/**\n * Point object that implements the raycasting of squares in screen space.\n */\nexport class Squares extends MapViewPoints {\n    /** @override */\n    testPoint(\n        point: THREE.Vector3,\n        screenPosition: THREE.Vector2,\n        pickCoordinates: THREE.Vector2,\n        index: number,\n        distance: number,\n        intersects: THREE.Intersection[]\n    ) {\n        const dx = screenPosition.x - pickCoordinates.x;\n        const dy = screenPosition.y - pickCoordinates.y;\n        const halfSize = (this.material as THREE.PointsMaterial).size / 2;\n\n        if (Math.abs(dx) <= halfSize && Math.abs(dy) <= halfSize) {\n            intersects.push({\n                point,\n                distance,\n                index,\n                object: this\n            });\n        }\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport * as THREE from \"three\";\n\n/**\n * Usage in Modules:\n *\n * import { DebugContext, debugContext } from \"../lib/DebugContext\";\n *\n * Declare a debug option:\n * debugContext.settings.setOption(\"MY_DBG_OPT\", \"default\");\n *\n * Access an option:\n * if (debugContext.settings.option(\"MY_DBG_OPT\")) {\n *     ...\n * }\n *\n *\n * Access in browser console:\n *\n * window.__debugContext.settings.addEventListener(\"MY_DBG_OPT\", function(event) {\n *  console.log(\"name:\", event.type, \"value:\", event.value)});\n *\n */\n\n/**\n * Allows access to the global `window` object here. The constructor of [[DebugContext]] adds the\n * instance to `window`, so it is available from the browser console.\n */\n\ninterface DebugInfo {\n    __debugContext?: DebugContext;\n}\n\nconst isNode = typeof window === \"undefined\";\n\n/**\n * A `DebugOption` is a pair that consists of an option value and an array of change listeners.\n * Listeners are called up when setting the option's value.\n */\nclass DebugOption extends THREE.EventDispatcher {\n    static SET_EVENT_TYPE: string = \"set\";\n\n    /**\n     * Constructs the `DebugOption`.\n     *\n     * @param value The value of the option.\n     */\n    constructor(public value: any) {\n        super();\n    }\n\n    /**\n     * Updates the value of a given option.\n     *\n     * @param value The new value for the option.\n     * @param name The name of the option to set.\n     */\n    set(value: any, name: string) {\n        this.value = value;\n        this.dispatchEvent({ type: DebugOption.SET_EVENT_TYPE, name, value });\n    }\n}\n\n/**\n * Maintains a map of [[DebugOption]]s. You can add listeners to debug options by passing their\n * names.\n */\nexport class DebugContext {\n    private m_optionsMap: Map<string, DebugOption>;\n\n    /**\n     * Builds a `DebugContext`.\n     */\n    constructor() {\n        this.m_optionsMap = new Map<string, DebugOption>();\n\n        // If we have a `window` object, we store the context in it to make it available in the\n        // console.\n        if (!isNode && typeof window !== \"undefined\" && window) {\n            const debugInfo = window as DebugInfo;\n            debugInfo.__debugContext = this;\n        }\n    }\n\n    /**\n     * Sets the value of an option. Calls change listeners of that option, even if the value has\n     * not been changed. The change listeners provided here are not called during this set\n     * operation.\n     *\n     * @param name Name of the option.\n     * @param value Value of the option.\n     */\n    setValue(name: string, value: any): void {\n        let opt = this.m_optionsMap.get(name);\n        if (!opt) {\n            opt = new DebugOption(value);\n            this.m_optionsMap.set(name, opt);\n        } else {\n            opt.set(value, name);\n        }\n    }\n\n    /**\n     * Gets the option value.\n     *\n     * @param name Name of option.\n     */\n    getValue(name: string): any {\n        const opt = this.m_optionsMap.get(name);\n        return opt ? opt.value : undefined;\n    }\n\n    /**\n     * Determines if the option is registered.\n     *\n     * @param name Name of option.\n     */\n    hasOption(name: string): boolean {\n        return this.m_optionsMap.get(name) !== undefined;\n    }\n\n    /**\n     * Adds a listener to a debug option.\n     *\n     * @param name Name of the option that requires a listener.\n     * @param listener The listener function to add.\n     */\n    addEventListener(name: string, listener: (event: THREE.Event) => void) {\n        const opt = this.m_optionsMap.get(name);\n        if (opt) {\n            opt.addEventListener(DebugOption.SET_EVENT_TYPE, listener);\n        } else {\n            throw Error(\"Unknown option: \" + name);\n        }\n    }\n\n    /**\n     * Checks for a listener in a debug option.\n     *\n     * @param name Name of the option to check for.\n     * @param listener The listener function to check for.\n     */\n    hasEventListener(name: string, listener: (event: THREE.Event) => void) {\n        const opt = this.m_optionsMap.get(name);\n        if (opt) {\n            return opt.hasEventListener(DebugOption.SET_EVENT_TYPE, listener);\n        } else {\n            throw Error(\"Unknown option: \" + name);\n        }\n    }\n\n    /**\n     * Removes a listener from a debug option.\n     *\n     * @param name Name of the option from which to remove a listener.\n     * @param listener The listener function to remove.\n     */\n    removeEventListener(name: string, listener: (event: THREE.Event) => void) {\n        const opt = this.m_optionsMap.get(name);\n        if (opt) {\n            opt.removeEventListener(DebugOption.SET_EVENT_TYPE, listener);\n        } else {\n            throw Error(\"Unknown option: \" + name);\n        }\n    }\n\n    /**\n     * Provides access to the options map. This method is useful for creating an automatic\n     * browser GUI.\n     */\n    get options(): Map<string, any> {\n        return this.m_optionsMap;\n    }\n\n    /**\n     * Clears away all debug options. Currently, `THREE.EventDispatcher` does not provide an API\n     * to remove all event listeners.\n     */\n    clear() {\n        this.m_optionsMap.forEach(option => {\n            option.set(undefined, \"\");\n        });\n    }\n}\n\nexport const debugContext = new DebugContext();\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { GeometryType, getFeatureId, Technique } from \"@here/harp-datasource-protocol\";\nimport * as THREE from \"three\";\n\nimport { OrientedBox3 } from \"@here/harp-geoutils\";\nimport { MapView } from \"./MapView\";\nimport { MapViewPoints } from \"./MapViewPoints\";\nimport { TileFeatureData } from \"./Tile\";\n\n/**\n * Describes the general type of a picked object.\n */\nexport enum PickObjectType {\n    /**\n     * Unspecified.\n     */\n    Unspecified = 0,\n\n    /**\n     * A point object.\n     */\n    Point,\n\n    /**\n     * A line object.\n     */\n    Line,\n\n    /**\n     * An area object.\n     */\n    Area,\n\n    /**\n     * The text part of a [[TextElement]]\n     */\n    Text,\n\n    /**\n     * The Icon of a [[TextElement]].\n     */\n    Icon,\n\n    /**\n     * Any general 3D object, for example, a landmark.\n     */\n    Object3D\n}\n\n/**\n * A general pick result. You can access the details of a picked geometry from the property\n * `intersection`, which is available if a geometry was hit. If a road was hit, a [[RoadPickResult]]\n * is returned, which has additional information, but no `intersection`.\n */\nexport interface PickResult {\n    /**\n     * General type of object.\n     */\n    type: PickObjectType;\n\n    /**\n     * A 2D point in screen coordinates, or a 3D point in world coordinates.\n     */\n    point: THREE.Vector2 | THREE.Vector3;\n\n    /**\n     * Distance from the camera to the picking point; used to determine the closest object.\n     */\n    distance: number;\n\n    /**\n     * An optional feature ID of the picked object; typically applies to the Optimized Map\n     * Vector (OMV) format.\n     */\n    featureId?: number;\n\n    /**\n     * Defined for geometry only.\n     */\n    intersection?: THREE.Intersection;\n\n    /**\n     * Defined for roads or if `enableTechniqueInfo` option is enabled.\n     */\n    technique?: Technique;\n\n    /**\n     * Optional user data that has been defined in the picked object. This object points directly to\n     * information contained in the original [[TileFeatureData]] stored in [[MapView]], and should\n     * not be modified.\n     */\n    userData?: any;\n}\n\nconst tmpOBB = new OrientedBox3();\n\n/**\n * Handles the picking of scene geometry and roads.\n * @internal\n */\nexport class PickHandler {\n    constructor(\n        readonly mapView: MapView,\n        readonly camera: THREE.Camera,\n        public enablePickTechnique = false\n    ) {}\n\n    /**\n     * Does a raycast on all objects in the scene; useful for picking. This function is Limited to\n     * objects that THREE.js can raycast. However, any solid lines that have their geometry in the\n     * shader cannot be tested for intersection.\n     *\n     * @param x The X position in CSS/client coordinates, without the applied display ratio.\n     * @param y The Y position in CSS/client coordinates, without the applied display ratio.\n     * @returns the list of intersection results.\n     */\n    intersectMapObjects(x: number, y: number): PickResult[] {\n        const worldPos = this.mapView.getNormalizedScreenCoordinates(x, y);\n        const rayCaster = this.mapView.raycasterFromScreenPoint(x, y);\n        const pickResults: PickResult[] = [];\n\n        if (this.mapView.textElementsRenderer !== undefined) {\n            const { clientWidth, clientHeight } = this.mapView.canvas;\n            const screenX = worldPos.x * clientWidth * 0.5;\n            const screenY = worldPos.y * clientHeight * 0.5;\n            const scenePosition = new THREE.Vector2(screenX, screenY);\n            this.mapView.textElementsRenderer.pickTextElements(scenePosition, pickResults);\n        }\n\n        const intersects: THREE.Intersection[] = [];\n        const tileList = this.mapView.visibleTileSet.dataSourceTileList;\n        tileList.forEach(dataSourceTileList => {\n            dataSourceTileList.renderedTiles.forEach(tile => {\n                tmpOBB.copy(tile.boundingBox);\n                tmpOBB.position.sub(this.mapView.worldCenter);\n\n                if (tmpOBB.intersectsRay(rayCaster.ray) !== undefined) {\n                    rayCaster.intersectObjects(tile.objects, true, intersects);\n                }\n            });\n        });\n\n        for (const intersect of intersects) {\n            const pickResult: PickResult = {\n                type: PickObjectType.Unspecified,\n                point: intersect.point,\n                distance: intersect.distance,\n                intersection: intersect\n            };\n\n            if (\n                intersect.object.userData === undefined ||\n                intersect.object.userData.feature === undefined\n            ) {\n                pickResults.push(pickResult);\n                continue;\n            }\n\n            const featureData: TileFeatureData = intersect.object.userData.feature;\n            if (this.enablePickTechnique) {\n                pickResult.technique = intersect.object.userData.technique;\n            }\n\n            this.addObjInfo(featureData, intersect, pickResult);\n\n            if (featureData.objInfos !== undefined) {\n                const featureId =\n                    featureData.objInfos.length === 1\n                        ? getFeatureId(featureData.objInfos[0])\n                        : undefined;\n                pickResult.featureId = featureId;\n            }\n\n            let pickObjectType: PickObjectType;\n\n            switch (featureData.geometryType) {\n                case GeometryType.Point:\n                case GeometryType.Text:\n                    pickObjectType = PickObjectType.Point;\n                    break;\n                case GeometryType.Line:\n                case GeometryType.ExtrudedLine:\n                case GeometryType.SolidLine:\n                case GeometryType.TextPath:\n                    pickObjectType = PickObjectType.Line;\n                    break;\n                case GeometryType.Polygon:\n                case GeometryType.ExtrudedPolygon:\n                    pickObjectType = PickObjectType.Area;\n                    break;\n                case GeometryType.Object3D:\n                    pickObjectType = PickObjectType.Object3D;\n                    break;\n                default:\n                    pickObjectType = PickObjectType.Unspecified;\n            }\n\n            pickResult.type = pickObjectType;\n            pickResults.push(pickResult);\n        }\n\n        pickResults.sort((a: PickResult, b: PickResult) => {\n            return a.distance - b.distance;\n        });\n\n        return pickResults;\n    }\n\n    private addObjInfo(\n        featureData: TileFeatureData,\n        intersect: THREE.Intersection,\n        pickResult: PickResult\n    ) {\n        if (featureData.objInfos === undefined) {\n            return;\n        }\n\n        if (pickResult.intersection!.object instanceof MapViewPoints) {\n            pickResult.userData = featureData.objInfos[intersect.index!];\n            return;\n        }\n\n        if (\n            featureData.starts === undefined ||\n            featureData.starts.length === 0 ||\n            (intersect.faceIndex === undefined && intersect.index === undefined)\n        ) {\n            return;\n        }\n\n        if (featureData.starts.length === 1) {\n            pickResult.userData = featureData.objInfos[0];\n            return;\n        }\n\n        const intersectIndex =\n            intersect.faceIndex !== undefined ? intersect.faceIndex * 3 : intersect.index!;\n\n        // TODO: Implement binary search.\n        let objInfosIndex = 0;\n        for (const featureStartIndex of featureData.starts) {\n            if (featureStartIndex > intersectIndex) {\n                break;\n            }\n            objInfosIndex++;\n        }\n        pickResult.userData = featureData.objInfos[objInfosIndex - 1];\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport * as THREE from \"three\";\n\n/**\n * Use `ColorCache` to reuse a color specified by name and save allocation as well as\n * setup time.\n *\n * Implemented as a singleton. Do not modify colors after getting them from the `ColorCache`.\n */\nexport class ColorCache {\n    /**\n     * Return instance of `ColorCache`.\n     */\n    static get instance() {\n        return this.m_instance;\n    }\n\n    private static m_instance: ColorCache = new ColorCache();\n    private m_map: Map<string, THREE.Color> = new Map();\n\n    /**\n     * Returns the color for the given `colorCode`. This function may reuse a previously generated\n     * color, so you cannot modify the contents of the color.\n     *\n     * @param colorCode ThreeJS color code or name. You must provide a valid color code or name,\n     * as this function does not do any validation.\n     */\n    getColor(colorCode: string | number): THREE.Color {\n        if (typeof colorCode === \"number\") {\n            colorCode = \"#\" + colorCode.toString(16).padStart(6, \"0\");\n        }\n\n        let color = this.m_map.get(colorCode);\n        if (color !== undefined) {\n            return color;\n        }\n        color = new THREE.Color(colorCode);\n        this.m_map.set(colorCode, color);\n        return color;\n    }\n\n    /**\n     * Returns the number of elements in the cache.\n     */\n    get size(): number {\n        return this.m_map.size;\n    }\n\n    /**\n     * Clears the cache. Only references to the THREE.Color are removed from the cache.\n     * Consequently, clearing the cache does not cause any negative visual impact.\n     */\n    clear(): void {\n        this.m_map.clear();\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { ViewRanges } from \"@here/harp-datasource-protocol/lib/ViewRanges\";\nimport { EarthConstants, Projection, ProjectionType } from \"@here/harp-geoutils\";\nimport { assert } from \"@here/harp-utils\";\nimport * as THREE from \"three\";\nimport { ElevationProvider } from \"./ElevationProvider\";\nimport { MapViewUtils } from \"./Utils\";\n\nconst epsilon = 0.000001;\n\nexport interface ClipPlanesEvaluator {\n    /**\n     * Minimum elevation to be rendered, values beneath the sea level are negative.\n     */\n    minElevation: number;\n\n    /**\n     * Set maximum elevation to be rendered, values above sea level are positive.\n     */\n    maxElevation: number;\n\n    /**\n     * Compute near and far clipping planes distance.\n     *\n     * Evaluation method should be called on every frame  and camera clip planes updated.\n     * This is related to evaluator implementation and its input data, that may suddenly change\n     * such as camera position or angle, projection type or so.\n     * Some evaluators may not depend on all or even any of input objects, but to preserve\n     * compatibility with any evaluator type it is strongly recommended to update on every frame.\n     * @note The camera clipping planes (near/far properties) aren't automatically updated\n     * via #evaluateClipPlanes() call, user should do it manually if needed.\n     * @param camera The [[THREE.Camera]] in use.\n     * @param projection The geo-projection currently used for encoding geographic data.\n     * @param elevationProvider The optional elevation provider for fine tuned range calculation,\n     * taking into account terrain variability and unevenness.\n     *\n     */\n    evaluateClipPlanes(\n        camera: THREE.Camera,\n        projection: Projection,\n        elevationProvider?: ElevationProvider\n    ): ViewRanges;\n}\n\n/**\n * Simplest camera clip planes evaluator, interpolates near/far planes based on ground distance.\n *\n * At general ground distance to camera along the surface normal is used as reference point for\n * planes evaluation, where near plane distance is set as fraction of this distance refereed as\n * [[nearMultiplier]]. Far plane equation has its own multiplier - [[nearFarMultiplier]],\n * which is applied to near plane and offset giving finally far plane distance.\n * This evaluator supports both planar and spherical projections, although it's behavior is\n * slightly different in each case. General algorithm sets near plane between camera and\n * ground level, while far plane is just calculated using scale and bias approach with far offset\n * and multiplier.\n * @deprecated Class contains the legacy (first and original) clip planes evaluation method, which\n * is widely used in examples thus is still kept for backward compatibility and comparisons.\n */\nexport class InterpolatedClipPlanesEvaluator implements ClipPlanesEvaluator {\n    readonly farMin: number;\n\n    protected m_tmpVectors: THREE.Vector3[] = [\n        new THREE.Vector3(),\n        new THREE.Vector3(),\n        new THREE.Vector3()\n    ];\n    protected m_tmpQuaternion: THREE.Quaternion = new THREE.Quaternion();\n\n    constructor(\n        readonly nearMin: number = 0.1,\n        readonly nearMultiplier: number = 0.1,\n        readonly nearFarMultiplier = 50.0,\n        readonly farOffset = 200.0\n    ) {\n        assert(nearMin > 0);\n        assert(nearFarMultiplier >= 0);\n        assert(farOffset >= 0);\n        this.farMin = nearMin * nearFarMultiplier + farOffset;\n    }\n\n    // tslint:disable-next-line: no-empty\n    set minElevation(elevation: number) {}\n\n    get minElevation(): number {\n        // This evaluator does not support elevation so its always set to 0.\n        return 0;\n    }\n\n    // tslint:disable-next-line: no-empty\n    set maxElevation(elevation: number) {}\n\n    get maxElevation(): number {\n        // This evaluator does not support elevation so its always set to 0.\n        return 0;\n    }\n\n    evaluateClipPlanes(\n        camera: THREE.Camera,\n        projection: Projection,\n        elevationProvider?: ElevationProvider\n    ): ViewRanges {\n        let nearPlane: number = this.nearMin;\n        let farPlane: number = this.farMin;\n        if (projection.type === ProjectionType.Spherical) {\n            // near and far plane for a set up where\n            // the camera is looking at the center of the scene.\n            const r = EarthConstants.EQUATORIAL_RADIUS;\n            const d = camera.position.length();\n            const alpha = Math.asin(r / d);\n            // Extract X, Y, Z axes into tmp vectors array.\n            camera.matrixWorld.extractBasis(\n                this.m_tmpVectors[0],\n                this.m_tmpVectors[1],\n                this.m_tmpVectors[2]\n            );\n            // Setup quaternion based on X axis.\n            this.m_tmpQuaternion.setFromAxisAngle(this.m_tmpVectors[0], alpha);\n            // Acquire forward vector based on Z axis reversed (keep it in tmpVectors[2]).\n            const fwd = this.m_tmpVectors[2].negate();\n            // Apply quaternion rotation to forward vector, store it in tmpVectors[1].\n            const fwdRot = this.m_tmpVectors[1].copy(fwd).applyQuaternion(this.m_tmpQuaternion);\n            // Store camera position tmpVectors[0] and reference it with p.\n            const p = this.m_tmpVectors[0].copy(camera.position);\n            p.addScaledVector(fwdRot, Math.sqrt(d * d - r * r));\n            farPlane = p.sub(camera.position).dot(fwd) + this.farOffset;\n            nearPlane = Math.max(\n                this.nearMin,\n                projection.groundDistance(camera.position) * this.nearMultiplier\n            );\n        } else if (projection.type === ProjectionType.Planar) {\n            const groundDistance = projection.groundDistance(camera.position);\n            nearPlane = Math.max(this.nearMin, groundDistance * this.nearMultiplier);\n            // Will be already clamped to minFar due to clamping above.\n            farPlane = nearPlane * this.nearFarMultiplier + this.farOffset;\n        } else {\n            assert(false, \"Unsupported projection type\");\n        }\n\n        const viewRanges: ViewRanges = {\n            near: nearPlane,\n            far: farPlane,\n            minimum: this.nearMin,\n            maximum: farPlane\n        };\n        return viewRanges;\n    }\n}\n\n/**\n * Abstract evaluator class that adds support for elevation constraints.\n *\n * Classes derived from this should implement algorithms that takes into account rendered\n * features height (elevations), such as ground plane is no more flat (or spherical), but\n * contains geometry that should be overlapped by frustum planes.\n */\nexport abstract class ElevationBasedClipPlanesEvaluator implements ClipPlanesEvaluator {\n    private m_maxElevation: number;\n    private m_minElevation: number;\n\n    constructor(maxElevation: number, minElevation: number) {\n        assert(maxElevation >= minElevation);\n        this.m_minElevation = minElevation;\n        this.m_maxElevation = maxElevation;\n    }\n\n    abstract evaluateClipPlanes(\n        camera: THREE.Camera,\n        projection: Projection,\n        elevationProvider?: ElevationProvider\n    ): ViewRanges;\n\n    /**\n     * Set maximum elevation above sea level to be rendered.\n     *\n     * @param elevation the elevation (altitude) value in world units (meters).\n     * @note If you set this exactly to the maximum rendered feature height (altitude above\n     * the sea, you may notice some flickering or even polygons disappearing related to rounding\n     * errors or depth buffer precision. In such cases increase [[nearFarMargin]] or add a little\n     * bit offset to your assumed maximum elevation.\n     * @note Reasonable values are in between (-DeadSeeDepression, MtEverestHeight>, both values\n     * are defined in [[EarthConstant]] as [[EarthConstant.MIN_ELEVATION]] and\n     * [[EarthConstant.MAX_ELEVATION]] respectively.\n     * @see minElevation for more information about precision and rounding errors.\n     */\n    set maxElevation(elevation: number) {\n        this.m_maxElevation = elevation;\n        // Min elevation should be at least equal or smaller to max elevation.\n        this.m_minElevation = Math.min(elevation, this.m_minElevation);\n    }\n\n    /**\n     * Get maximum elevation to be covered by camera frustum.\n     */\n    get maxElevation(): number {\n        return this.m_maxElevation;\n    }\n\n    /**\n     * Set minimum elevation to be rendered, values beneath the sea level are negative.\n     *\n     * @param elevation the minimum elevation (depression) in world units (meters).\n     * @note If you set this parameter to zero you may not see any features rendered if they are\n     * just below the sea level more than half of [[nearFarMargin]] assumed. Similarly if set to\n     * -100m and rendered features lays exactly in such depression, you may notice that problem.\n     * The errors usually come from projection precision loss and depth buffer nature (significant\n     * precision loss closer to far plane). Thus is such cases either increase the margin (if you\n     * are sure features are just at this elevation, or setup bigger offset for [[minElevation]].\n     * Reasonable values are between <-DeadSeaDepression, MtEverestHeight), where the first denotes\n     * lowest depression on the Earth defined as [[EarthConstants.MIN_ELEVATION]] and the second is\n     * the highest point our planet.\n     * @see https://developer.nvidia.com/content/depth-precision-visualized\n     */\n    set minElevation(elevation: number) {\n        this.m_minElevation = elevation;\n        // Max elevation should be at least equal or bigger than min elevation.\n        this.m_maxElevation = Math.max(elevation, this.m_maxElevation);\n    }\n\n    /**\n     * Get minimum elevation to be covered by camera frustum.\n     */\n    get minElevation(): number {\n        return this.m_minElevation;\n    }\n}\n\n/**\n * Top view, clip planes evaluator that computes view ranges based on ground distance and elevation.\n *\n * This evaluator supports both planar and spherical projections, although it behavior is\n * slightly different in each case. General algorithm sets near plane and far plane close\n * to ground level, but taking into account maximum and minimum elevation of features on the ground.\n *\n * @note This evaluator supports only cameras which are always looking down the ground surface\n * (top-down view) along surface normal and does not preserve correct clip planes when\n * modifying camera pitch (tilt) angle. In simple words it is suitable only for top view camera\n * settings.\n */\nexport class TopViewClipPlanesEvaluator extends ElevationBasedClipPlanesEvaluator {\n    /**\n     * Helper for reducing number of objects created at runtime.\n     */\n    protected m_tmpVectors: THREE.Vector3[] = [\n        new THREE.Vector3(),\n        new THREE.Vector3(),\n        new THREE.Vector3()\n    ];\n    /**\n     * Helper object for reducing performance impact.\n     */\n    protected m_tmpQuaternion: THREE.Quaternion = new THREE.Quaternion();\n    private m_minimumViewRange: ViewRanges;\n\n    /**\n     * Allows to setup near/far offsets (margins), rendered geometry elevation relative to sea\n     * level as also minimum near plane and maximum far plane distance constraints.\n     * It is strongly recommended to set some reasonable [[nearFarMargin]] (offset) between near\n     * and far planes to avoid flickering.\n     * @param maxElevation defines near plane offset from the ground in the surface normal\n     * direction, positive values allows to render elevated terrain features (mountains,\n     * buildings). Defaults to Burj Khalifa building height.\n     * @param minElevation defines far plane offset from the ground surface, negative values moves\n     * far plane below the ground level (use it to render depressions). Default zero - sea level.\n     * @param nearMin minimum allowable near plane distance from camera, must be bigger than zero.\n     * @param nearFarMarginRatio minimum distance between near and far plane, as a ratio of average\n     * near/far plane distance, it have to be significantly bigger than zero (especially if\n     * [[maxElevation]] and [[minElevation]] are equal), otherwise you may notice flickering when\n     * rendering, or even render empty scene if frustum planes are almost equal.\n     * @param farMaxRatio maximum ratio between ground and far plane distance, allows to limit\n     * viewing distance at overall. Have to be bigger than 1.0.\n     * @note Keep in mind that this evaluator does not evaluate terrain (or building) elevation\n     * automatically, to keep such features rendered (between frustum planes) use [[minElevation]],\n     * [[maxElevation]] constraints. You may change this parameters at any time, but it requires\n     * repeating [[evaluatePlanes]] step, if your camera is moving you need to evaluate planes\n     * anyway.\n     * @note You may treat [[minElevation]] and [[maxElevation]] parameters as the maximum and\n     * minimum renderable elevation respectively along the surface normal, when camera is\n     * constantly looking downwards (top-down view). If you need [[ClipPlanesEvaluator]] for\n     * cameras that support tilt or yaw please use [[TiltViewClipPlanesEvaluator]].\n     * @note [[nearFarMaxRatio]] does not limit far plane when spherical projection is in use,\n     * the algorithm used there estimates distance to point on tangent where line from camera\n     * touches the sphere horizon and there is no reason to clamp it.\n     */\n    constructor(\n        maxElevation: number = EarthConstants.MAX_BUILDING_HEIGHT,\n        minElevation: number = 0,\n        readonly nearMin: number = 1.0,\n        readonly nearFarMarginRatio: number = 0.05,\n        readonly farMaxRatio = 6.0\n    ) {\n        super(maxElevation, minElevation);\n        assert(nearMin > 0);\n        assert(nearFarMarginRatio > epsilon);\n        assert(farMaxRatio > 1.0);\n        const nearFarMargin = nearFarMarginRatio * nearMin;\n        this.m_minimumViewRange = {\n            near: nearMin,\n            far: nearMin + nearFarMargin,\n            minimum: this.nearMin,\n            maximum: Math.max(nearMin * farMaxRatio, nearMin + nearFarMargin)\n        };\n    }\n\n    /** @override */\n    evaluateClipPlanes(\n        camera: THREE.Camera,\n        projection: Projection,\n        elevationProvider?: ElevationProvider\n    ): ViewRanges {\n        if (projection.type === ProjectionType.Spherical) {\n            return this.evaluateDistanceSphericalProj(camera, projection, elevationProvider);\n        } else if (projection.type === ProjectionType.Planar) {\n            return this.evaluateDistancePlanarProj(camera, projection, elevationProvider);\n        }\n        assert(false, \"Unsupported projection type\");\n        return { ...this.minimumViewRange };\n    }\n\n    /**\n     * Get minimum view range that is possible to achieve with current evaluator settings.\n     * @note This value will not change after evaluator is constructed.\n     */\n    protected get minimumViewRange(): ViewRanges {\n        return this.m_minimumViewRange;\n    }\n\n    /**\n     * Calculate camera altitude (closest distance) to ground level in world units.\n     * @param camera\n     * @param projection\n     */\n    protected getCameraAltitude(camera: THREE.Camera, projection: Projection): number {\n        return projection.groundDistance(camera.position);\n    }\n\n    protected evaluateDistancePlanarProj(\n        camera: THREE.Camera,\n        projection: Projection,\n        elevationProvider?: ElevationProvider\n    ): ViewRanges {\n        assert(projection.type !== ProjectionType.Spherical);\n\n        let nearPlane: number = this.nearMin;\n        let farPlane: number = this.nearMin * this.farMaxRatio;\n\n        // Calculate distance to closest point on the ground.\n        const groundDistance = this.getCameraAltitude(camera, projection);\n        const farMax = groundDistance * this.farMaxRatio;\n        // We could at least try to keep margins along the eye vector (center of the view) in\n        // tact with pitch angle changes, but this does not solve all tilt angle problems,\n        // rather use more sophisticated evaluator.\n        nearPlane = groundDistance - this.maxElevation;\n        farPlane = groundDistance - this.minElevation;\n\n        // Apply the constraints.\n        nearPlane = Math.max(nearPlane, this.nearMin);\n        farPlane = Math.min(farPlane, farMax);\n        // Apply margins\n        const nearFarMargin = (this.nearFarMarginRatio * (nearPlane + farPlane)) / 2;\n        nearPlane = Math.max(nearPlane - nearFarMargin / 2, this.nearMin);\n        farPlane = Math.max(farPlane + nearFarMargin / 2, nearPlane + nearFarMargin);\n\n        const viewRanges: ViewRanges = {\n            near: nearPlane,\n            far: farPlane,\n            minimum: this.nearMin,\n            maximum: Math.max(farMax, farPlane)\n        };\n        return viewRanges;\n    }\n\n    protected evaluateDistanceSphericalProj(\n        camera: THREE.Camera,\n        projection: Projection,\n        elevationProvider?: ElevationProvider\n    ): ViewRanges {\n        assert(projection.type === ProjectionType.Spherical);\n\n        let nearPlane: number = this.nearMin;\n        let farPlane: number = this.nearMin * this.farMaxRatio;\n\n        // The near plane calculus is quite straight forward and works the same as for planar\n        // projections. We simply search for the closest point of the ground just above\n        // the camera, then we apply margin (elevation) to it along the sphere surface normal:\n        const cameraAltitude = this.getCameraAltitude(camera, projection);\n        nearPlane = cameraAltitude - this.maxElevation;\n\n        // Far plane calculation requires different approaches depending from camera projection:\n        // - perspective\n        // - orthographic\n\n        const r = EarthConstants.EQUATORIAL_RADIUS;\n        let d = camera.position.length();\n        d = d === 0 ? epsilon : d;\n        if (camera.type === \"PerspectiveCamera\") {\n            // This solution computes near and far plane for a set up where\n            // the camera is looking at the center of the scene.\n\n            // The far plane distance calculus requires finding the sphere tangent line that is\n            // co-linear with (goes thru) camera position, such tangent creates right angle\n            // with sphere diameter where it touches its surface (point T). Given that sphere is\n            // always at world origin and camera orbits around it we have (see\n            // #getTangentBasedFarPlane):\n            // angle(OTC) = 90\n            // sin(OCT) = sin(alpha) = r / d\n            // alpha = asin(r / d)\n            const alpha = Math.asin(r / d);\n            // If alpha it bigger than half fov angle, our visibility limit is set by tangent\n            // line, otherwise we need to find top (or right) plane intersection with sphere,\n            // which is definitely closer than the tangent point mentioned above.\n            const cam = camera as THREE.PerspectiveCamera;\n            // Take fov directly if it is vertical, otherwise we translate it using aspect ratio:\n            const aspect = cam.aspect > 1 ? cam.aspect : 1 / cam.aspect;\n            const halfFovAngle = THREE.MathUtils.degToRad((cam.fov * aspect) / 2);\n\n            const farTangent = this.getTangentBasedFarPlane(cam, d, r, alpha);\n            farPlane =\n                halfFovAngle > alpha\n                    ? farTangent\n                    : this.getFovBasedFarPlane(cam, d, r, 2 * halfFovAngle, projection);\n        }\n        // Orthographic camera projection\n        else {\n            farPlane = this.getOrthoBasedFarPlane(d, r);\n        }\n\n        // In extreme cases the largest depression assumed may be further than tangent\n        // based far plane distance, take it into account\n        const farMin = cameraAltitude - this.minElevation;\n        const farMax = cameraAltitude * this.farMaxRatio;\n        // Apply the constraints.\n        nearPlane = Math.max(nearPlane, this.nearMin);\n        farPlane = Math.max(farPlane, farMin);\n        // Apply margins\n        const nearFarMargin = (this.nearFarMarginRatio * (nearPlane + farPlane)) / 2;\n        nearPlane = Math.max(nearPlane - nearFarMargin / 2, this.nearMin);\n        farPlane = Math.max(farPlane + nearFarMargin / 2, nearPlane + nearFarMargin);\n\n        const viewRanges: ViewRanges = {\n            near: nearPlane,\n            far: farPlane,\n            minimum: this.nearMin,\n            maximum: farMax\n        };\n        return viewRanges;\n    }\n\n    /**\n     * Calculate distance from a point to the tangent point of a sphere.\n     *\n     * Returns zero if point is below surface or only very slightly above surface of sphere.\n     * @param d Distance from point to center of sphere\n     * @param r Radius of sphere\n     */\n    protected getTangentDistance(d: number, r: number): number {\n        // There may be situations when maximum elevation still remains below sea level\n        // (elevation < 0) or it is negligible (elevation ~ epsilon)\n        if (d - r < epsilon) {\n            return 0;\n        }\n\n        // The distance to tangent point may be described as:\n        // t = sqrt(d^2 - r^2)\n        return Math.sqrt(d * d - r * r);\n    }\n\n    /**\n     * Calculate far plane depending on furthest visible distance from camera position.\n     *\n     * Furthest visible distance is assumed to be distance from camera to horizon\n     * plus distance from elevated geometry to horizon(so that high objects behind horizon\n     * remain visible).\n     * @param camera The camera of the mapview\n     * @param d Distance from camera to origin\n     * @param r Radius of earth\n     * @param alpha Angle between camera eye vector and tangent\n     */\n    protected getTangentBasedFarPlane(\n        camera: THREE.PerspectiveCamera,\n        d: number,\n        r: number,\n        alpha: number\n    ): number {\n        // Find tangent point intersection distance\n        //         , - ~ ~ ~ - ,\n        //     , '               ' ,        E\n        //   ,           .           ,    . ' far + elev\n        //  ,            .   r + e   , '   /\n        // ,             .     ,  '    ,  /\n        // ,             . O '         , / te\n        // ,             | .           ,/\n        //  ,            |   .  r     ,/\n        //   ,           |      .    ,\n        //     ,         |        , '_____ far\n        //       ' -_, _ | _ ,  ' / T\n        //     near      |      /\n        //               |    / t\n        //             d |  /\n        //               |/\n        //               C\n        const t = this.getTangentDistance(d, r);\n\n        // Because we would like to see elevated geometry that may be visible beyond\n        // the tangent point on ground surface, we need to extend viewing distance along\n        // the tangent line by te (see graph above).\n        const te = this.getTangentDistance(r + this.maxElevation, r);\n\n        // Next step is to project CE vector(length t + te) onto camera eye (forward) vector\n        // to get maximum camera far plane distance.\n        //\n        // Knowing that:\n        // tangentVec.dot(cameraFwdVec) = cos(alpha) * len(tangentVec) * len(cameraFwdVec).\n        // where:\n        // ||cameraFwdVec|| == 1 ^ ||tangentVec|| == t + te\n        // Formula simplifies to:\n        const far = Math.cos(alpha) * (t + te);\n\n        return far;\n    }\n\n    protected getFovBasedFarPlane(\n        camera: THREE.PerspectiveCamera,\n        d: number,\n        r: number,\n        fovAngle: number,\n        projection: Projection\n    ) {\n        // Find intersection point that is closer to tangent point.\n        //\n        //         , - ~ ~ ~ - ,\n        //     , '               ' ,\n        //   ,           .           ,\n        //  ,            .     r     ,' T1\n        // ,             .     ,  '  / ,\n        // ,             . O.'  a   /  ,\n        // ,             | .  `  . /   ,\n        //  ,            |   .  r / TA,\n        //   ,           |    .  /   ,\n        //     ,         |     ./  ,'_____ far\n        //       ' -_, _ | _ , /' T0\n        //     near      |    /\n        //               |   / t\n        //             d | /\n        //               |/\n        //               C\n        //\n        // See:\n        // tslint:disable-next-line: max-line-length\n        // https://www.scratchapixel.com/lessons/3d-basic-rendering/minimal-ray-tracer-rendering-simple-shapes/ray-sphere-intersection\n\n        // Vector from camera to world center\n        const dVec = camera.position;\n        // Extract camera X, Y, Z orientation axes into tmp vectors array.\n        camera.matrixWorld.extractBasis(\n            this.m_tmpVectors[0],\n            this.m_tmpVectors[1],\n            this.m_tmpVectors[2]\n        );\n        // Setup quaternion (X axis based) for angle between frustum plane and camera eye.\n        this.m_tmpQuaternion.setFromAxisAngle(this.m_tmpVectors[0], fovAngle / 2);\n        // Acquire camera (eye) forward vector from Z axis (keep it in tmpVectors[2]).\n        const cameraFwdVec = this.m_tmpVectors[2];\n        // Apply quaternion to forward vector, creating intersection vector, which is\n        // parallel to top or right frustum plane (depending on the aspect ratio).\n        const tVec = this.m_tmpVectors[1].copy(cameraFwdVec).applyQuaternion(this.m_tmpQuaternion);\n        // Calculate camera to origin vector projection onto frustum plane (top or right).\n        // This gives us the length of CTA segment:\n        const cta = dVec.dot(tVec);\n        // If it is negative, it means that the dVec and the tVec points in\n        // opposite directions - there is no intersection - or intersection could\n        // potentially be behind the intersection ray's origin (camera position).\n        if (cta < 0) {\n            // Intersection points are behind camera, camera looks in wrong direction.\n            const groundDistance = this.getCameraAltitude(camera, projection);\n            // Setup far plane to maximum distance.\n            return groundDistance * this.farMaxRatio;\n        }\n        // Knowing the length of |CTA| we just need to subtract the length of |T0TA|\n        // segment from it to get far plane distance.\n        // In order to calculate |T0TA| we firstly need to use use Pythagorean theorem to\n        // find length of |OTA| = a. Here we use the right triangle formed by O-C-TA points:\n        // |OC|^2 = |CTA|^2 + |OTA|^2, where |OTA| = a, |OC| = d, |CTA| = cta\n        // a^2 = d^2 - cta^2\n        const a2 = dVec.dot(dVec) - cta * cta;\n        // Note that if a is greater than sphere radius the ray misses the sphere and\n        // thus there is no intersection at all.\n        const r2 = r * r;\n        assert(a2 <= r2, \"Please use this evaluator only for top view camera poses.\");\n        // Now to find the length of |T0TA| == |T1TA| we use the second right triangle\n        // formed by O-T0-TA points. Of course we know that |T0TA| segment length is\n        // equal to |T1TA|, and |OT0| segment is simply sphere radius.\n        // In order to find |T0TA| length we again use Pythagorean theorem, which says:\n        // |OT0|^2 = |OTA|^2 + |T0TA|^2, where |OTO| = r, |OTA| = a\n        // |T0TA|^2 = r^2 - a^2\n        const tota = Math.sqrt(r2 - a2);\n        // Finally our far plane (intersection point) is defined as:\n        return cta - tota;\n    }\n\n    protected getOrthoBasedFarPlane(d: number, r: number): number {\n        //         , - ~ ~ ~ - ,\n        //     , '               ' ,     E\n        //   ,            .--------- ,-.'- far + elev\n        // | ,            .   r + e , `, |\n        // |,             .     , '     ,| te\n        // |,             . O '.........,|..\n        // |,             |        r    ,|  far\n        // | ,            |            , |\n        // |  ,           |           ,  | t\n        // |    ,         |        , '   |\n        // |      ' -_, _ | _ ,  '       |\n        // |    near      | \\/___________| near - elev\n        // |              |              |\n        // |            d |              |\n        // |              |              |\n        //                C\n        // The distance to tangent point may be described as:\n        const t = d;\n        // Tangent extension due to terrain elevation behind the horizon may be calculated\n        // based on the right triangle:\n        // (r+maxElev)^2 = r^2 + te^2\n        // te = sqrt((r+maxElev)^2 - r^2)\n        // although we may not calculate it if elevation is negligible:\n        const te =\n            this.maxElevation < epsilon\n                ? 0\n                : Math.sqrt(r + this.maxElevation) * (r + this.maxElevation) - r * r;\n        // Both near and far planes distances are directly applied to frustum, because tangents'\n        // lines are parallel to camera look at vector.\n        // Now far plane distance is constituted with:\n        return t + te;\n    }\n}\n\n/**\n * Evaluates camera clipping planes taking into account ground distance and camera angles.\n *\n * This evaluator provides support for camera with varying tilt (pitch) angle, the angle\n * between camera __look at__ vector and the ground surface normal.\n */\nexport class TiltViewClipPlanesEvaluator extends TopViewClipPlanesEvaluator {\n    /**\n     * Calculate the lengths of frustum planes intersection with the ground plane.\n     * This evaluates distances between eye vector (or eye plane in orthographic projection) and\n     * ground intersections of top and bottom frustum planes.\n     * @note This method assumes the world surface (ground) to be flat and\n     * works only with planar projections.\n     *\n     * @param camera The [[THREE.Camera]] instance in use,\n     * @param projection The geo-projection used to convert geographic to world coordinates.\n     */\n    protected getFrustumGroundIntersectionDist(\n        camera: THREE.Camera,\n        projection: Projection\n    ): { top: number; bottom: number } {\n        assert(projection.type !== ProjectionType.Spherical);\n        // This algorithm computes the length of frustum planes before intersecting with a flat\n        // ground surface. Entire computation is split over two projections method and performed\n        // for top and bottom plane, with addition of terrain (ground) elevation which is taken\n        // into account.\n        // The following diagram may help explain the algorithm below.\n        //   🎥\n        //   C\n        //   |\\\n        //   |.\\ .\n        //   | . \\  . t\n        // z |  .  \\   .c2\n        //   |  c1.  \\e ___. max elev\n        //   |     .   \\      .\n        //___|a___D1.____\\E1_____.D2______ g\n        //   C1      .     \\ __. min elev\n        //            .      \\.E2\n        //          b  .    .\n        //              . .\n        //               .\n        // Where:\n        // - C gives the camera position.\n        // - z is the height of the camera above the ground.\n        // - z1 == z2 == z, for perspective camera all planes origin its the same\n        // - a is a right angle.\n        // - e is the look at vector of the camera.\n        // - t and b are the frustum planes of the camera (top and bottom respectively).\n        // - angle between c1 to c2 is the fov.\n        // - c1, c2 - vectors from camera to the ground along frustum planes.\n        // - angles between c1 and e or e and c2 splits fov on equal halves.\n        // - d1 and d2 are the intersection points of the frustum with the world/ground plane.\n        // - angle between z and e is the pitch of the camera.\n        // - angle between g and e is the tilt angle.\n        // - g is the ground/world surface\n        //\n        // The goal is to find distance for top/bottom planes intersections of frustum with ground\n        // plane.\n        // This are the distances from C->D1 and C->D2, and are described as\n        // c1 and c2. Then we may compensate/correct those distances with actual\n        // ground elevations, which is done by simply offsetting camera altitude, as it is\n        // opposite to elevating ground level.\n        const halfPiLimit = Math.PI / 2 - epsilon;\n        const cameraAltitude = this.getCameraAltitude(camera, projection);\n        // tslint:disable-next-line: deprecation\n        const cameraTilt = MapViewUtils.extractCameraTilt(camera, projection);\n        // Angle between z and c2\n        let topAngleRad: number;\n        // Angle between z and c1\n        let bottomAngleRad: number;\n        // Bottom plane origin altitude\n        let z1: number;\n        // Top plane origin altitude\n        let z2: number;\n        // For perspective projection:\n        if (camera.type === \"PerspectiveCamera\") {\n            const cam = (camera as any) as THREE.PerspectiveCamera;\n            // Angle between z and c2, note, the fov is vertical, otherwise we would need to\n            // translate it using aspect ratio:\n            // let aspect = camera.aspect > 1 ? camera.aspect : 1 / camera.aspect;\n            const aspect = 1;\n            // Half fov angle in radians\n            const halfFovAngle = THREE.MathUtils.degToRad((cam.fov * aspect) / 2);\n            topAngleRad = THREE.MathUtils.clamp(\n                cameraTilt + halfFovAngle,\n                -halfPiLimit,\n                halfPiLimit\n            );\n            bottomAngleRad = THREE.MathUtils.clamp(\n                cameraTilt - halfFovAngle,\n                -halfPiLimit,\n                halfPiLimit\n            );\n            z1 = z2 = cameraAltitude;\n        }\n        // For orthographic projection:\n        else {\n            const cam = (camera as any) as THREE.OrthographicCamera;\n            // For orthogonal camera projections we may simply ignore FOV and use 0 for FOV\n            // the top/bottom planes are simply parallel to the eye vector:\n            topAngleRad = bottomAngleRad = cameraTilt;\n            // Although the ray origin is not always the same (eye position) as for\n            // the perspective projections, thus we need to compensate for ortho-cube\n            // dimensions:\n            // sin(tilt) = zc2 / top\n            // sin(tilt) = zc1 / bottom\n            // zc2 = sin(tilt) * top\n            // zc1 = sin(tilt) * bottom\n            const sinBeta = Math.sin(cameraTilt);\n            z2 = cameraAltitude + sinBeta * cam.top;\n            z1 = cameraAltitude - sinBeta * cam.bottom;\n        }\n        // Distance along the top plane to the ground - c2\n        // cos(topAngle) = (z2 - minElev) / |c2|\n        // |c2| = (z2 - minElev) / cos(topAngle)\n        const topDist = (z2 - this.minElevation) / Math.cos(topAngleRad);\n        // Distance along the bottom plane to the ground - c1\n        // cos(bottomAngle) = (z - minElev) / |c1|\n        // |c1| = (z - minElev) / cos(bottomAngle)\n        const bottomDist = (z1 - this.maxElevation) / Math.cos(bottomAngleRad);\n\n        return {\n            top: Math.max(topDist, 0),\n            bottom: Math.max(bottomDist, 0)\n        };\n    }\n\n    /** @override */\n    protected evaluateDistancePlanarProj(\n        camera: THREE.Camera,\n        projection: Projection,\n        elevationProvider?: ElevationProvider\n    ): ViewRanges {\n        assert(projection.type !== ProjectionType.Spherical);\n        const viewRanges = { ...this.minimumViewRange };\n\n        // Generally near/far planes are set to keep top/bottom planes intersection distance.\n        // Then elevations margins are applied. Here margins (min/max elevations) are meant to\n        // be defined as distance along the ground normal vector thus during camera\n        // tilt they may affect near/far planes positions differently.\n        const planesDist = this.getFrustumGroundIntersectionDist(camera, projection);\n\n        // Project clipping plane distances for the top/bottom frustum planes (edges), but\n        // only if we deal with perspective camera type, this step is not required\n        // for orthographic projections, cause all clip planes are parallel to eye vector.\n        if (camera.type === \"PerspectiveCamera\") {\n            const cam = camera as THREE.PerspectiveCamera;\n            // Angle between z and c2, note, the fov is vertical, otherwise we would need to\n            // translate it using aspect ratio:\n            // let aspect = camera.aspect > 1 ? camera.aspect : 1 / camera.aspect;\n            const aspect = 1;\n            // Half fov angle in radians\n            const halfFovAngle = THREE.MathUtils.degToRad((cam.fov * aspect) / 2);\n            const cosHalfFov = Math.cos(halfFovAngle);\n            // cos(halfFov) = near / bottomDist\n            // near = cos(halfFov) * bottomDist\n            viewRanges.near = planesDist.bottom * cosHalfFov;\n            // cos(halfFov) = far / topDist\n            // far = cos(halfFov) * topDist\n            viewRanges.far = planesDist.top * cosHalfFov;\n        }\n        // Orthographic camera projection.\n        else {\n            viewRanges.near = planesDist.bottom;\n            viewRanges.far = planesDist.top;\n        }\n\n        // Compute target (focus) point distance.\n        // tslint:disable-next-line: deprecation\n        const { distance } = MapViewUtils.getTargetAndDistance(\n            projection,\n            camera,\n            elevationProvider\n        );\n        // Clamp values to constraints.\n        const farMax = distance * this.farMaxRatio;\n        viewRanges.near = Math.max(viewRanges.near, this.nearMin);\n        viewRanges.far = Math.min(viewRanges.far, farMax);\n\n        // Apply margins\n        const nearFarMargin = (this.nearFarMarginRatio * (viewRanges.near + viewRanges.far)) / 2;\n        viewRanges.near = Math.max(viewRanges.near - nearFarMargin / 2, this.nearMin);\n        viewRanges.far = Math.max(\n            viewRanges.far + nearFarMargin / 2,\n            viewRanges.near + nearFarMargin\n        );\n        viewRanges.minimum = this.nearMin;\n        viewRanges.maximum = farMax;\n\n        return viewRanges;\n    }\n\n    /** @override */\n    protected evaluateDistanceSphericalProj(\n        camera: THREE.Camera,\n        projection: Projection,\n        elevationProvider?: ElevationProvider\n    ): ViewRanges {\n        assert(projection.type === ProjectionType.Spherical);\n        const viewRanges = { ...this.minimumViewRange };\n\n        // Near plane calculus is pretty straightforward and does not depend on camera tilt:\n        const cameraAltitude = this.getCameraAltitude(camera, projection);\n        viewRanges.near = cameraAltitude - this.maxElevation;\n\n        let halfFovAngle: number = 0;\n        if (camera instanceof THREE.PerspectiveCamera) {\n            // Take fov directly if it is vertical, otherwise we translate it using aspect ratio:\n            const aspect = camera.aspect > 1 ? camera.aspect : 1 / camera.aspect;\n            halfFovAngle = THREE.MathUtils.degToRad((camera.fov * aspect) / 2);\n\n            // Now we need to account for camera tilt and frustum volume, so the longest\n            // frustum edge does not intersects with sphere, it takes the worst case\n            // scenario regardless of camera tilt, so may be improved little bit with more\n            // sophisticated algorithm.\n            viewRanges.near *= Math.cos(halfFovAngle);\n        }\n\n        // Far plane calculation requires different approaches depending from camera projection:\n        // - perspective\n        // - orthographic\n        const cameraToOrigin = this.m_tmpVectors[0].copy(camera.position).negate();\n        const r = EarthConstants.EQUATORIAL_RADIUS;\n        const d = cameraToOrigin.length();\n        let farPlane: number;\n        if (camera instanceof THREE.PerspectiveCamera) {\n            // Step-wise calculate angle between camera eye vector and tangent\n\n            // Calculate angle between surface normal(below camera position) and tangent.\n            const alpha = Math.asin(r / d);\n\n            // Calculate angle between look at and surface normal(below camera position)\n            const cameraPitch = this.getCameraPitch(cameraToOrigin, camera);\n\n            // Calculate angle between camera eye vector and tangent.\n            const modifiedAlpha = Math.abs(alpha - cameraPitch);\n\n            // Use tangent based far plane if horizon is within field of view\n            const farTangent = this.getTangentBasedFarPlane(camera, d, r, modifiedAlpha);\n            farPlane =\n                halfFovAngle >= modifiedAlpha\n                    ? farTangent\n                    : this.getTiltedFovBasedFarPlane(d, r, halfFovAngle, cameraPitch);\n        } else {\n            farPlane = this.getOrthoBasedFarPlane(d, r);\n        }\n        viewRanges.far = farPlane;\n\n        // Compute the focus point (target) distance for current camera and projection setup,\n        // in a same way the MapView component does.\n        // tslint:disable-next-line: deprecation\n        const { distance } = MapViewUtils.getTargetAndDistance(\n            projection,\n            camera,\n            elevationProvider\n        );\n        // Apply the constraints.\n        const farMin = cameraAltitude - this.minElevation;\n        const farMax = distance * this.farMaxRatio;\n        viewRanges.near = Math.max(viewRanges.near, this.nearMin);\n        viewRanges.far = THREE.MathUtils.clamp(viewRanges.far, farMin, farMax);\n\n        // Apply margins.\n        const nearFarMargin = (this.nearFarMarginRatio * (viewRanges.near + viewRanges.far)) / 2;\n        viewRanges.near = Math.max(viewRanges.near - nearFarMargin / 2, this.nearMin);\n        viewRanges.far = Math.max(\n            viewRanges.far + nearFarMargin / 2,\n            viewRanges.near + nearFarMargin\n        );\n\n        // Set minimum and maximum view range.\n        viewRanges.minimum = this.nearMin;\n        viewRanges.maximum = farMax;\n\n        return viewRanges;\n    }\n\n    protected getTiltedFovBasedFarPlane(\n        d: number,\n        r: number,\n        halfFovAngle: number,\n        cameraPitch: number\n    ) {\n        // Find intersection point that is closer to tangent point.\n        //\n        //         , - ~ ~ ~ - ,\n        //     , '               ' ,\n        //   ,           .           ,\n        //  ,            .     r     ,' T1\n        // ,             .     ,  '  / ,\n        // ,             . O.'  a   /  ,\n        // ,             | .  `  . /   ,\n        //  ,            |   .  r / TA,\n        //   ,           |    .  /   ,\n        //     ,         |     ./  ,'_____ far\n        //       ' -_, _ | _ , /' T0\n        //     near      |    /\n        //               |   / t\n        //             d | /\n        //               |/\n        //               C\n        //\n        // See:\n        // tslint:disable-next-line: max-line-length\n        // https://www.scratchapixel.com/lessons/3d-basic-rendering/minimal-ray-tracer-rendering-simple-shapes/ray-sphere-intersection\n\n        // compute length of t (distance to fov intersection with sphere)\n        // with law of cosines:\n        // r² = d² + t² - 2dt * cos(alpha)\n        // solved for t:\n        // t0 = d * cos(alpha) - sqrt(d²*cos²(alpha) - d² + r²)  <-- first intersection\n        // t1 = d * cos(alpha) + sqrt(d²*cos²(alpha) - d² + r²)  <-- second intersection\n        // Use first intersection:\n        const cosAlpha = Math.cos(cameraPitch + halfFovAngle);\n        const dSqr = d * d;\n        const t = d * cosAlpha - Math.sqrt(dSqr * cosAlpha * cosAlpha - dSqr + r * r);\n\n        assert(\n            !isNaN(t),\n            \"Field of view does not intersect sphere. Use tangent based far plane instead.\"\n        );\n\n        // project t onto camera fwd vector\n        const far = Math.cos(halfFovAngle) * t;\n\n        return far;\n    }\n\n    private getCameraPitch(cameraToOrigin: THREE.Vector3, camera: THREE.PerspectiveCamera) {\n        cameraToOrigin.normalize();\n        const lookAt = camera.getWorldDirection(this.m_tmpVectors[1]).normalize();\n        const cosAlpha1 = cameraToOrigin.dot(lookAt);\n        const cameraPitch = Math.acos(THREE.MathUtils.clamp(cosAlpha1, -1.0, 1.0));\n\n        return cameraPitch;\n    }\n}\n\n/**\n * Provides the most basic evaluation concept giving fixed values with some constraints.\n */\nexport class FixedClipPlanesEvaluator implements ClipPlanesEvaluator {\n    readonly minFar: number;\n    private m_nearPlane: number;\n    private m_farPlane: number;\n\n    constructor(readonly minNear: number = 1, readonly minFarOffset: number = 10) {\n        this.minFar = minNear + minFarOffset;\n        this.m_nearPlane = minNear;\n        this.m_farPlane = this.minFar;\n    }\n\n    get nearPlane(): number {\n        return this.m_nearPlane;\n    }\n\n    set nearPlane(fixedNear: number) {\n        this.invalidatePlanes(fixedNear, this.m_farPlane);\n    }\n\n    get farPlane(): number {\n        return this.m_farPlane;\n    }\n\n    set farPlane(fixedFar: number) {\n        this.invalidatePlanes(this.m_nearPlane, fixedFar);\n    }\n\n    // tslint:disable-next-line: no-empty\n    set minElevation(elevation: number) {}\n\n    get minElevation(): number {\n        // This evaluator does not support elevation so its always set to 0.\n        return 0;\n    }\n\n    // tslint:disable-next-line: no-empty\n    set maxElevation(elevation: number) {}\n\n    get maxElevation(): number {\n        // This evaluator does not support elevation so its always set to 0.\n        return 0;\n    }\n\n    /** @override */\n    evaluateClipPlanes(\n        camera: THREE.Camera,\n        projection: Projection,\n        elevationProvider?: ElevationProvider\n    ): ViewRanges {\n        // We do not need to perform actual evaluation cause results are precomputed and\n        // kept stable until somebody changes the properties.\n        const viewRanges: ViewRanges = {\n            near: this.m_nearPlane,\n            far: this.m_farPlane,\n            minimum: this.minNear,\n            maximum: this.m_farPlane\n        };\n        return viewRanges;\n    }\n\n    private invalidatePlanes(near: number, far: number) {\n        // When clamping prefer to extend far plane at about minimum distance, giving\n        // near distance setup priority over far.\n        const nearDist: number = Math.max(this.minNear, near);\n        const farDist: number = Math.max(this.minFar, far, nearDist + this.minFarOffset);\n        this.m_nearPlane = nearDist;\n        this.m_farPlane = farDist;\n    }\n}\n\n/**\n * Factory function that creates default [[ClipPlanesEvaluator]] that calculates near plane based\n * on ground distance and camera orientation.\n *\n * Creates [[TiltViewClipPlanesEvaluator]].\n */\nexport const createDefaultClipPlanesEvaluator = () => new TiltViewClipPlanesEvaluator();\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { ITileDecoder } from \"@here/harp-datasource-protocol\";\nimport { ConcurrentWorkerSet } from \"./ConcurrentWorkerSet\";\nimport { WorkerBasedDecoder } from \"./WorkerBasedDecoder\";\n\n/**\n * Default concurrent decoder helper.\n *\n * A convenient singleton that maintains a separate [[ConcurrentWorkerSet]] for each bundle\n * requested. Provides easy access to [[WorkerBasedDecoder]]s for data sources.\n */\nexport class ConcurrentDecoderFacade {\n    /**\n     * The URL containing a script to fall back (default) to when looking for worker sets\n     * and decoders.\n     */\n    static defaultScriptUrl: string = \"./decoder.bundle.js\";\n\n    /**\n     * The default number of workers.\n     */\n    static defaultWorkerCount?: number = undefined;\n\n    /**\n     * Returns a [[WorkerBasedDecoder]] instance.\n     *\n     * @param decoderServiceType The name of the decoder service type.\n     * @param scriptUrl The optional URL with the workers' script.\n     * @param workerCount The number of web workers to use.\n     */\n    static getTileDecoder(\n        decoderServiceType: string,\n        scriptUrl?: string,\n        workerCount?: number\n    ): ITileDecoder {\n        const workerSet = this.getWorkerSet(scriptUrl, workerCount);\n\n        return new WorkerBasedDecoder(workerSet, decoderServiceType);\n    }\n\n    /**\n     * Returns a [[ConcurrentWorkerSet]] instance based on the script URL specified.\n     *\n     * @param scriptUrl The optional URL with the workers' script. If not specified,\n     * the function uses [[defaultScriptUrl]] instead.\n     * @param workerCount The number of web workers to use.\n     */\n    static getWorkerSet(scriptUrl?: string, workerCount?: number): ConcurrentWorkerSet {\n        if (scriptUrl === undefined) {\n            scriptUrl = this.defaultScriptUrl;\n        }\n\n        let workerSet = this.workerSets[scriptUrl];\n        if (workerSet === undefined) {\n            workerSet = new ConcurrentWorkerSet({\n                scriptUrl,\n                workerCount: workerCount === undefined ? this.defaultWorkerCount : workerCount\n            });\n            this.workerSets[scriptUrl] = workerSet;\n        }\n        return workerSet;\n    }\n\n    /**\n     * Destroys a [[ConcurrentWorkerSet]] instance.\n     *\n     * @param scriptUrl The worker script URL that was used to create the [[ConcurrentWorkerSet]].\n     */\n    static destroyWorkerSet(scriptUrl: string) {\n        const workerSet = this.workerSets[scriptUrl];\n        if (workerSet !== undefined) {\n            workerSet.destroy();\n            delete this.workerSets[scriptUrl];\n        }\n    }\n\n    /**\n     * Destroys all managed [[ConcurrentWorkerSet]]s.\n     */\n    static destroy() {\n        Object.keys(this.workerSets).forEach(name => {\n            this.workerSets[name].destroy();\n        });\n        this.workerSets = {};\n    }\n\n    /**\n     * The [[ConcurrentWorkerSet]] instances which are stored by the script URL.\n     */\n    private static workerSets: {\n        [bundleUrl: string]: ConcurrentWorkerSet;\n    } = {};\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { getOptionValue, MathUtils } from \"@here/harp-utils\";\n\n/**\n * Copyright info attached to data displayed on map. Provided by [[DataSource]] and attached\n * to [[Tile]]s.\n *\n * In most cases, an application should display this information on [[MapView]] to conform with\n * licencing terms of its map data providers.\n *\n * @see [[CopyrightElementHandler]]\n */\nexport interface CopyrightInfo {\n    /**\n     * Unique id of the copyright holder.\n     *\n     * `id`s should be unique. It is recommended to build them from unique identifiers like\n     * registered domain names.\n     *\n     * Examples:\n     *\n     *  * `openstreetmap.org` - for data originating from OpenStreetMap project\n     *  * `naturalearthdata.com` - for data originating from Natural Earth dataset\n     *\n     * Note: [[DataSource]] may return [[CopyrightInfo]] with only `id`, thus defining only holder\n     * of copyright, however, valid attribution may require proper `label` and `link`.\n     *\n     * Entries with same `id` are deduplicated by [[CopyrightInfo.mergeArrays]].\n     */\n    id: string;\n\n    /**\n     * Copyright text to display after the copyright symbol on the map.\n     *\n     * If undefined, `id` is used as text label.\n     * Set it to empty string to not render a copyright info.\n     */\n    label?: string;\n\n    /**\n     * Optional URL pointing to further copyright information.\n     */\n    link?: string;\n\n    /**\n     * Optional, copyright notice year.\n     */\n    year?: number;\n}\n\nexport namespace CopyrightInfo {\n    /**\n     * Merge [[CopyrightInfo]] arrays, removing duplicates.\n     *\n     * `id` and `label` are considered keys in deduplication algorithm.\n     *\n     * @param sources non-duplicate elements from this array are added to `target`\n     * @returns merge of all copyright infos in `sources`\n     */\n    export function mergeArrays(a: CopyrightInfo[], b?: CopyrightInfo[]): CopyrightInfo[] {\n        const result: CopyrightInfo[] = [];\n        for (const source of [a, b]) {\n            if (source === undefined) {\n                continue;\n            }\n\n            for (const sourceInfo of source) {\n                const existingInfo = result.find(\n                    findItem =>\n                        findItem.id === sourceInfo.id ||\n                        (findItem.label !== undefined && findItem.label === sourceInfo.label)\n                );\n\n                if (existingInfo === undefined) {\n                    result.push({ ...sourceInfo });\n                } else {\n                    existingInfo.year = MathUtils.max2(sourceInfo.year, existingInfo.year);\n                    existingInfo.label = getOptionValue(sourceInfo.label, existingInfo.label);\n                    existingInfo.link = getOptionValue(sourceInfo.link, existingInfo.link);\n                }\n            }\n        }\n        return result;\n    }\n\n    /**\n     * Format copyright information to a HTML string that can be displayed in the UI.\n     *\n     * * Empty list returns empty string.\n     * * Entries with empty (but defined) labels are skipped.\n     *\n     * @param copyrightInfo Array of copyrights to format.\n     */\n    export function formatAsHtml(copyrightInfo: CopyrightInfo[]): string {\n        if (copyrightInfo.length === 0) {\n            return \"\";\n        }\n\n        const filtered = copyrightInfo.filter(entry => entry.label !== \"\");\n        if (filtered.length === 0) {\n            return \"\";\n        }\n\n        return (\n            \"© \" +\n            filtered\n                .map(entry => {\n                    const label = entry.label ?? entry.id;\n                    const text = entry.year !== undefined ? `${entry.year} ${label}` : label;\n                    const link = entry.link;\n                    return link\n                        ? `<a href=\"${link}\" target=\"_blank\" rel=\"noreferrer noopener\">${text}</a>`\n                        : `${text}`;\n                })\n                .join(\", \")\n        );\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport {\n    HighPrecisionLineMaterial,\n    HighPrecisionPointMaterial,\n    isHighPrecisionPointMaterial\n} from \"@here/harp-materials\";\nimport {\n    BufferAttribute,\n    BufferGeometry,\n    Camera,\n    Color,\n    Float32BufferAttribute,\n    InterleavedBuffer,\n    InterleavedBufferAttribute,\n    Matrix4,\n    PointsMaterialParameters,\n    ShaderMaterial,\n    ShaderMaterialParameters,\n    Vector3\n} from \"three\";\n\nimport * as HPL from \"./HighPrecisionLines\";\nimport * as HPP from \"./HighPrecisionPoints\";\nimport { triangulateLine } from \"./TriangulateLines\";\n\nexport namespace HighPrecisionUtils {\n    /**\n     * Extract the `float` parts of all vector members, Making this a `Vector3` of `float`.\n     * precision.\n     *\n     * @param v\n     */\n    export function doubleToFloatVec(v: Vector3): Vector3 {\n        return new Vector3(Math.fround(v.x), Math.fround(v.y), Math.fround(v.z));\n    }\n\n    /**\n     * Convert a `Vector3` to `float` (in place!) Returns the minor float vector, which is the\n     * difference of the double elements and their float counterparts.\n     *\n     * @param v Vector3 to convert to float IN-PLACE!\n     */\n    export function makeFloatVec(v: Vector3): Vector3 {\n        const majorX = Math.fround(v.x);\n        const majorY = Math.fround(v.y);\n        const majorZ = Math.fround(v.z);\n\n        const minorVec = new Vector3(v.x - majorX, v.y - majorY, v.z - majorZ);\n\n        v.x = Math.fround(majorX);\n        v.y = Math.fround(majorY);\n        v.z = Math.fround(majorZ);\n\n        return minorVec;\n    }\n\n    /**\n     * Describes addtional postion data needed to render high-precision vertices. Created by\n     * [[createHighPrecisionCameraPos]].\n     */\n    export interface HighPrecisionCameraInfo {\n        /**\n         * View Projection matrix of this high-precision camera.\n         */\n        viewProjection: Matrix4;\n\n        /**\n         * Low-order bits of the high-precision camera's position.\n         */\n        eyePosLo: Vector3;\n\n        /**\n         * High-order bits of the high-precision camera's position.\n         */\n        eyePosHi: Vector3;\n    }\n\n    /**\n     * Describes different properties used when creating a [[HighPrecisionLine]] or\n     * a [[HighPrecisionWireFrameLine]].\n     */\n    export interface HighPrecisionLineParams extends ShaderMaterialParameters {\n        /**\n         * Color of the rendered line.\n         */\n        color?: number | string | Color;\n\n        /**\n         * Width of the rendered line (specified in world units).\n         */\n        lineWidth?: number;\n\n        /**\n         * Add rounded caps to the extremes of the line if set to `true`.\n         */\n        addCircles?: boolean;\n\n        /**\n         * Opacity of the rendered line.\n         */\n        opacity?: number;\n\n        /**\n         * Renders a wireframe line if set to `true`.\n         */\n        wireFrame?: boolean;\n    }\n\n    /**\n     * Calculate high-precision camera position used in vertex shader of high-precision materials.\n     *\n     * @param camera Camera used to get the high-precision position.\n     * @param objectInverseWorldMatrix Inverse World Matrix of the rendered [[HighPrecisionObject]].\n     */\n    export function createHighPrecisionCameraPos(\n        camera: Camera,\n        objectInverseWorldMatrix: Matrix4\n    ): HighPrecisionCameraInfo {\n        const _projScreenMatrix = new Matrix4().copy(camera.projectionMatrix);\n        const mvp = _projScreenMatrix.multiply(camera.matrixWorldInverse);\n        const eyePos = new Vector3(0, 0, 0).applyMatrix4(objectInverseWorldMatrix);\n\n        // split the double float vector into hi and lo parts\n        const eyePosFloat = doubleToFloatVec(eyePos);\n\n        const eyePosLo = doubleToFloatVec(eyePos.sub(eyePosFloat));\n\n        return {\n            viewProjection: mvp,\n            eyePosHi: eyePosFloat,\n            eyePosLo\n        };\n    }\n\n    /**\n     * Updates the high-precision uniform data of a material used to render a\n     * [[HighPrecisionObject]].\n     *\n     * @param object [[HighPrecisionObject]] used for rendering.\n     * @param camera Camera used to get the high-precision position.\n     * @param shaderMaterial Material which uniforms will be updated.\n     */\n    export function updateHpUniforms(\n        object: HPL.HighPrecisionObject,\n        camera: Camera,\n        shaderMaterial: ShaderMaterial\n    ): void {\n        const highPrecisionCameraInfo = createHighPrecisionCameraPos(\n            camera,\n            object.matrixWorldInverse\n        );\n        const mvp = highPrecisionCameraInfo.viewProjection;\n\n        if (shaderMaterial !== undefined && shaderMaterial.isMaterial) {\n            if (\n                shaderMaterial.uniforms &&\n                shaderMaterial.uniforms.u_mvp &&\n                shaderMaterial.uniforms.u_eyepos &&\n                shaderMaterial.uniforms.u_eyepos_lowpart\n            ) {\n                shaderMaterial.uniforms.u_mvp.value = new Float32Array(mvp.elements);\n                shaderMaterial.uniforms.u_eyepos.value = new Float32Array(\n                    highPrecisionCameraInfo.eyePosHi.toArray()\n                );\n                shaderMaterial.uniforms.u_eyepos_lowpart.value = new Float32Array(\n                    highPrecisionCameraInfo.eyePosLo.toArray()\n                );\n            } else {\n                throw Error(\"High pecision material has missing uniforms\");\n            }\n        } else {\n            throw Error(\"High pecision line has no high precision material\");\n        }\n    }\n\n    /**\n     * Assembles the necessary attribute buffers needed to render [[HighPrecisionObject]].\n     *\n     * @param positions Array of positions.\n     */\n    export function createAttributes(\n        positions: ArrayLike<number> | ArrayLike<Vector3>\n    ): {\n        positionHigh: BufferAttribute;\n        positionLow: BufferAttribute;\n    } {\n        if (positions.length > 0) {\n            const v = positions[0];\n\n            if (v === undefined || v === null) {\n                throw Error(\"Empty element in positions\");\n            }\n\n            const positionVec = new Array<number>();\n            const positionVecLow = new Array<number>();\n\n            const addHPValue = (...values: number[]) => {\n                for (const value of values) {\n                    const major = Math.fround(value);\n                    positionVecLow.push(value - major);\n                    positionVec.push(major);\n                }\n            };\n\n            const addHPVector = (vec: Vector3) => {\n                addHPValue(vec.x, vec.y, vec.z);\n            };\n\n            const vAny = v as any;\n            if (vAny.z !== undefined) {\n                (positions as Vector3[]).forEach(vec => {\n                    addHPVector(vec);\n                });\n            } else {\n                if (positionVec.length % 3 !== 0) {\n                    throw Error(\"Positions must be 3D, not 2D\");\n                }\n                (positions as number[]).forEach((n: number): void => {\n                    addHPValue(n);\n                });\n            }\n\n            return {\n                positionHigh: new Float32BufferAttribute(positionVec, 3),\n                positionLow: new Float32BufferAttribute(positionVecLow, 3)\n            };\n        } else {\n            return {\n                positionHigh: new Float32BufferAttribute([], 3),\n                positionLow: new Float32BufferAttribute([], 3)\n            };\n        }\n    }\n\n    /**\n     * Assembles an interleaved buffer containing the position attribute data for a\n     * [[HighPrecisionObject]].\n     *\n     * @param positions Array of positions.\n     * @param stride Stride of the elements in the `positions` array.\n     * @param positionOffset Offset into the `positions` array.\n     */\n    export function addInterleavedAttributes3(\n        positions: ArrayLike<number>,\n        stride: number,\n        positionOffset = 0\n    ): ArrayLike<number> {\n        const newPositions = new Array<number>();\n\n        const end = positions.length;\n\n        for (let i = 0; i < end; i += stride) {\n            for (let j = 0; j < positionOffset; j++) {\n                newPositions.push(positions[i + j]);\n            }\n\n            const x = positions[i + positionOffset];\n            const y = positions[i + positionOffset + 1];\n            const z = positions[i + positionOffset + 2];\n            const majorX = Math.fround(x);\n            const minorX = x - majorX;\n            const majorY = Math.fround(y);\n            const minorY = y - majorY;\n            const majorZ = Math.fround(z);\n            const minorZ = z - majorZ;\n\n            // insert values in interleaved buffer\n            newPositions.push(majorX, majorY, majorZ, minorX, minorY, minorZ);\n\n            for (let j = positionOffset + 3; j < stride; j++) {\n                newPositions.push(positions[i + j]);\n            }\n        }\n\n        return newPositions;\n    }\n\n    /**\n     * Adds the high-precision position attribute data to a [[HighPrecisionObject]].\n     *\n     * @param object [[HighPrecisionObject]] which position attribute will be set.\n     * @param positions Array of positions.\n     */\n    export function setPositions(\n        object: HPL.HighPrecisionObject,\n        positions: ArrayLike<number> | ArrayLike<Vector3>\n    ): number {\n        const attributes = createAttributes(positions);\n\n        object.bufferGeometry.setAttribute(\"position\", attributes.positionHigh);\n        object.bufferGeometry.setAttribute(\"positionLow\", attributes.positionLow);\n\n        return attributes.positionHigh.itemSize;\n    }\n\n    /**\n     * Convert positions from `Array<Vector3>` to `Array<number>`.\n     *\n     * @param positions Array of positions.\n     */\n    export function convertPositions(\n        positions: ArrayLike<number> | ArrayLike<Vector3>\n    ): { positions: number[] } {\n        if (positions.length <= 0) {\n            return { positions: [] };\n        }\n\n        const v = positions[0];\n\n        if (v === undefined || v === null) {\n            throw Error(\"Empty element in positions\");\n        }\n\n        const vAny = v as any;\n        if (vAny.y === undefined && vAny.z === undefined) {\n            return { positions: positions as number[] };\n        }\n\n        const returnPositions = new Array<number>();\n        (positions as Vector3[]).forEach(vec => {\n            returnPositions.push(vec.x, vec.y, vec.z);\n        });\n\n        return { positions: returnPositions };\n    }\n\n    /**\n     * Creates a [[HighPrecisionLine]] or [[HighPrecisionWireFrameLine]] object.\n     *\n     * @param linePositions Array of 2D/3D positions.\n     * @param params Parameters used to configure the created [[HighPrecisionObject]].\n     */\n    export function createLine(\n        linePositions: ArrayLike<number>,\n        params: HighPrecisionLineParams\n    ): HPL.HighPrecisionLine | HPL.HighPrecisionWireFrameLine {\n        const lineWidth = params.lineWidth !== undefined ? params.lineWidth : 5;\n        const addCircles = params.addCircles !== undefined ? params.addCircles : false;\n        const wireFrame = params.wireFrame !== undefined ? params.wireFrame : false;\n\n        const positions: number[] = [];\n        const indices: number[] = [];\n\n        triangulateLine(linePositions, lineWidth, positions, indices, addCircles);\n\n        const hpLineGeometry = new BufferGeometry();\n        const hpPositions = addInterleavedAttributes3(positions, 3);\n        const buffer = new InterleavedBuffer(new Float32Array(hpPositions), 6);\n\n        const positionAttribute = new InterleavedBufferAttribute(buffer, 3, 0, false);\n        const positionLowAttribute = new InterleavedBufferAttribute(buffer, 3, 3, false);\n\n        hpLineGeometry.setAttribute(\"position\", positionAttribute);\n        hpLineGeometry.setAttribute(\"positionLow\", positionLowAttribute);\n        hpLineGeometry.setIndex(new BufferAttribute(new Uint32Array(indices), 1));\n\n        const hpSolidMaterial = new HighPrecisionLineMaterial(params);\n\n        const lineObject = wireFrame\n            ? new HPL.HighPrecisionWireFrameLine(hpLineGeometry, hpSolidMaterial)\n            : new HPL.HighPrecisionLine(hpLineGeometry, hpSolidMaterial);\n\n        lineObject.setupForRendering();\n\n        return lineObject;\n    }\n\n    /**\n     * Creates a group of [[HighPrecisionPoints]].\n     *\n     * @param pointPositions Array of 2D/3D positions.\n     * @param materialParameters Parameters used to configure the material used to render the\n     * created [[HighPrecisionPoints]].\n     */\n    export function createPoints(\n        pointPositions: ArrayLike<number>,\n        materialParameters?: PointsMaterialParameters | HighPrecisionPointMaterial\n    ): HPP.HighPrecisionPoints {\n        const indices: number[] = [];\n\n        // tslint:disable-next-line:prefer-for-of - pointPositions doesn't have iterable interface\n        for (let i = 0; i < pointPositions.length; i++) {\n            indices.push(indices.length / 3);\n        }\n\n        const hpPointsGeometry = new BufferGeometry();\n\n        const hpPointsMaterial = isHighPrecisionPointMaterial(materialParameters)\n            ? materialParameters\n            : new HighPrecisionPointMaterial(materialParameters);\n\n        const pointsObject = new HPP.HighPrecisionPoints(hpPointsGeometry, hpPointsMaterial);\n\n        setPositions(pointsObject, pointPositions);\n\n        pointsObject.setupForRendering();\n\n        return pointsObject;\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\nimport { Value } from \"@here/harp-datasource-protocol/index-decoder\";\n\n/**\n * Feature Modifier ids to choose which OmvFeatureModifer should be used in OmvDecoder.\n */\nexport enum FeatureModifierId {\n    /**\n     * Identifier to use the OmvTomTomFeatureModifier in the OmvDecoder.\n     */\n    tomTom\n}\n\n/**\n * Definition of a filter.\n */\nexport interface OmvFilterString {\n    /**  String value */\n    value: string;\n    /** Match condition */\n    match: OmvFilterString.StringMatch;\n}\n\n/**\n * Adding the match condition type and the matching function to the namespace of `OmvFilterString`.\n */\nexport namespace OmvFilterString {\n    /**\n     * Match condition.\n     */\n    export enum StringMatch {\n        /** Matches any. */\n        Any,\n        /** Exact match. */\n        Match,\n        /** Matches if a test string starts with a filter string. */\n        StartsWith,\n        /** Matches if a test string contains a filter string. */\n        Contains,\n        /** Matches if a test string ends with a filter string. */\n        EndsWith\n    }\n\n    /**\n     * Check for a string against a filter.\n     *\n     * @param str The string to check against a filter.\n     * @param filterString The filter containing the match condition.\n     * @returns `true` if the match condition is satisfied.\n     */\n    export function matchString(str: string, filterString: OmvFilterString): boolean {\n        switch (filterString.match) {\n            case OmvFilterString.StringMatch.Any:\n                return true;\n            case OmvFilterString.StringMatch.Match:\n                return str === filterString.value;\n            case OmvFilterString.StringMatch.StartsWith:\n                return filterString.value.startsWith(str);\n            case OmvFilterString.StringMatch.EndsWith:\n                return filterString.value.endsWith(str);\n            default:\n                return str.indexOf(filterString.value) >= 0;\n        }\n    }\n}\n\n/**\n * Definition of a filter for a feature attribute\n */\nexport interface OmvFilterFeatureAttribute {\n    key: string;\n    value: Value;\n}\n\nexport enum OmvGeometryType {\n    UNKNOWN = 0,\n    POINT = 1,\n    LINESTRING = 2,\n    POLYGON = 3\n}\n\n/**\n * Internal type of a layer filter description, Should not be publicly available.\n *\n * @hidden\n */\nexport interface OmvLayerFilterDescription {\n    name: OmvFilterString;\n    minLevel: number;\n    maxLevel: number;\n}\n\n/**\n * Internal type of a single filter description, Should not be publicly available.\n *\n * @hidden\n */\nexport interface OmvFilterDescription {\n    layerName: OmvFilterString;\n    geometryTypes?: OmvGeometryType[];\n    classes?: OmvFilterString[];\n    minLevel: number;\n    maxLevel: number;\n    featureAttribute?: OmvFilterFeatureAttribute;\n}\n\n/**\n * Internal type of a complete [[OmvFeatureFilter]] description, should not be publicly available.\n *\n * @hidden\n */\nexport interface OmvFeatureFilterDescription {\n    processLayersDefault: boolean;\n    processPointsDefault: boolean;\n    processLinesDefault: boolean;\n    processPolygonsDefault: boolean;\n\n    layersToProcess: OmvLayerFilterDescription[];\n    layersToIgnore: OmvLayerFilterDescription[];\n    pointsToProcess: OmvFilterDescription[];\n    pointsToIgnore: OmvFilterDescription[];\n    linesToProcess: OmvFilterDescription[];\n    linesToIgnore: OmvFilterDescription[];\n    polygonsToProcess: OmvFilterDescription[];\n    polygonsToIgnore: OmvFilterDescription[];\n\n    // enabledKinds and disabledKinds\n    kindsToProcess: string[];\n    kindsToIgnore: string[];\n}\n\n/**\n * Internal interface for options passed from the [[OmvDataSource]] to the decoder.\n *\n * @hidden\n */\nexport interface OmvDecoderOptions {\n    /**\n     * If true, features that have no technique in the theme will be printed to the console (can be\n     * excessive!).\n     */\n    showMissingTechniques?: boolean;\n\n    /**\n     * Gather feature attributes from [[OmvData]]. Defaults to false.\n     */\n    gatherFeatureAttributes?: boolean;\n\n    /**\n     * @deprecated Tile info is not decoded anymore. The same information can be generated\n     * implementing a [[IGeometryProcessor]] and using [[OmvProtobufDataAdapter]] to decode OMV\n     * data.\n     */\n    createTileInfo?: boolean;\n\n    /**\n     * @deprecated Tile info is not decoded anymore. The same information can be generated\n     * implementing a [[IGeometryProcessor]] and using [[OmvProtobufDataAdapter]] to decode OMV\n     * data.\n     */\n    gatherRoadSegments?: boolean;\n\n    /**\n     * Optional storage level offset for [[Tile]]s. Default is -2.\n     */\n    storageLevelOffset?: number;\n\n    /**\n     * If not set to `false` very short text labels will be skipped during decoding based on a\n     * heuristic.\n     */\n    skipShortLabels?: boolean;\n\n    /**\n     * A description for the feature filter which can be safely passed down to the web workers.\n     * It has to be generated with the help of the [[OmvFeatureFilterDescriptionBuilder]] (to\n     * guarantee the correctness).\n     */\n    filterDescription?: OmvFeatureFilterDescription | null;\n\n    /**\n     * Identifier used to choose OmvFeatureModifier, if undefined [[OmvGenericFeatureModifier]] is\n     * used.\n     */\n    featureModifierId?: FeatureModifierId;\n\n    enableElevationOverlay?: boolean;\n}\n\n/**\n * Default OMV tile decoder service type.\n *\n * Used for requesting decoder services using [[WorkerServiceManager]].\n */\nexport const OMV_TILE_DECODER_SERVICE_TYPE = \"omv-tile-decoder\";\n\n/**\n * Default OMV tiler service type.\n *\n * Used for requesting tiler services using [[WorkerServiceManager]].\n */\nexport const OMV_TILER_SERVICE_TYPE = \"omv-tiler\";\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { TileKey } from \"@here/harp-geoutils\";\nimport { DataSource, Tile } from \"@here/harp-mapview\";\n\nexport class OmvTile extends Tile {\n    constructor(dataSource: DataSource, tileKey: TileKey) {\n        super(dataSource, tileKey);\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * Represents an object with `GeoCoordinates` like interface.\n */\nexport interface GeoCoordinatesLike {\n    /** The latitude in degrees. */\n    latitude: number;\n\n    /** The longitude in degrees. */\n    longitude: number;\n\n    /** The optional altitude in meters. */\n    altitude?: number;\n}\n\n/**\n * Type guard to assert that `object` conforms to [[GeoCoordinatesLike]] data interface.\n */\nexport function isGeoCoordinatesLike(object: any): object is GeoCoordinatesLike {\n    return (\n        object &&\n        typeof object.latitude === \"number\" &&\n        typeof object.longitude === \"number\" &&\n        (typeof object.altitude === \"number\" || typeof object.altitude === \"undefined\")\n    );\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * An [[Array]] following the order longitude, latitude, altitude.\n */\nexport type GeoPointLike = [number, number, number?];\n\n/**\n * Type guard to assert that `object` conforms to [[GeoPointLike]] interface.\n */\nexport function isGeoPointLike(geoPoint: any): geoPoint is GeoPointLike {\n    if (Array.isArray(geoPoint)) {\n        const [longitude, latitude, altitude] = geoPoint;\n        return (\n            typeof longitude === \"number\" &&\n            typeof latitude === \"number\" &&\n            (altitude === undefined || typeof altitude === \"number\")\n        );\n    }\n    return false;\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * Represents an object with `LatLng` like interface.\n */\nexport interface LatLngLike {\n    /** The latitude in degrees. */\n    lat: number;\n\n    /** The longitude in degrees. */\n    lng: number;\n}\n\n/**\n * Type guard to assert that `object` conforms to [[LatLngLike]] interface.\n */\nexport function isLatLngLike(object: any): object is LatLngLike {\n    return object && typeof object.lat === \"number\" && typeof object.lng === \"number\";\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { GeoBox } from \"../coordinates/GeoBox\";\nimport { GeoCoordinates } from \"../coordinates/GeoCoordinates\";\nimport { GeoCoordinatesLike } from \"../coordinates/GeoCoordinatesLike\";\nimport { Box3Like, isBox3Like } from \"../math/Box3Like\";\nimport { MathUtils } from \"../math/MathUtils\";\nimport { isOrientedBox3Like, OrientedBox3Like } from \"../math/OrientedBox3Like\";\nimport { Vector3Like } from \"../math/Vector3Like\";\nimport { EarthConstants } from \"./EarthConstants\";\nimport { Projection, ProjectionType } from \"./Projection\";\n\nimport * as THREE from \"three\";\n\nclass EquirectangularProjection extends Projection {\n    static geoToWorldScale: number = 1.0 / (2.0 * Math.PI);\n    static worldToGeoScale: number = (2.0 * Math.PI) / 1.0;\n\n    /** @override */\n    readonly type: ProjectionType = ProjectionType.Planar;\n\n    /** @override */\n    getScaleFactor(_worldPoint: Vector3Like): number {\n        return 1;\n    }\n\n    /** @override */\n    worldExtent<WorldBoundingBox extends Box3Like>(\n        minAltitude: number,\n        maxAltitude: number,\n        result?: WorldBoundingBox\n    ): WorldBoundingBox {\n        if (!result) {\n            result = (new THREE.Box3() as Box3Like) as WorldBoundingBox;\n        }\n        result.min.x = 0.0;\n        result.min.y = 0.0;\n        result.min.z = minAltitude;\n        result.max.x = this.unitScale;\n        result.max.y = this.unitScale / 2;\n        result.max.z = maxAltitude;\n        return result;\n    }\n\n    /** @override */\n    projectPoint<WorldCoordinates extends Vector3Like>(\n        geoPoint: GeoCoordinatesLike,\n        result?: WorldCoordinates\n    ): WorldCoordinates {\n        if (result === undefined) {\n            /*\n             * The following tslint:disable is due to the fact that the [[WorldCoordinates]]\n             * might be a concrete class which is not available at runtime.\n             * Consider the following example:\n             *\n             *  const x: THREE.Vector3 = new THREE.Vector3(0,0,0);\n             *  const result = EquirectangularProjection.projectPoint<THREE.Vector3>(x);\n             *\n             * Note: type of `result` is Vector3Like and not as expected: THREE.Vector3!\n             */\n            // tslint:disable-next-line:no-object-literal-type-assertion\n            result = { x: 0, y: 0, z: 0 } as WorldCoordinates;\n        }\n        result.x =\n            (THREE.MathUtils.degToRad(geoPoint.longitude) + Math.PI) *\n            EquirectangularProjection.geoToWorldScale *\n            this.unitScale;\n        result.y =\n            (THREE.MathUtils.degToRad(geoPoint.latitude) + Math.PI * 0.5) *\n            EquirectangularProjection.geoToWorldScale *\n            this.unitScale;\n        result.z = geoPoint.altitude || 0;\n        return result;\n    }\n\n    /** @override */\n    unprojectPoint(worldPoint: Vector3Like): GeoCoordinates {\n        const geoPoint = GeoCoordinates.fromRadians(\n            (worldPoint.y * EquirectangularProjection.worldToGeoScale) / this.unitScale -\n                Math.PI * 0.5,\n            (worldPoint.x * EquirectangularProjection.worldToGeoScale) / this.unitScale - Math.PI,\n            worldPoint.z\n        );\n        return geoPoint;\n    }\n\n    /** @override */\n    unprojectAltitude(worldPoint: Vector3Like): number {\n        return worldPoint.z;\n    }\n\n    /** @override */\n    projectBox<WorldBoundingBox extends Box3Like | OrientedBox3Like>(\n        geoBox: GeoBox,\n        result?: WorldBoundingBox\n    ): WorldBoundingBox {\n        const worldCenter = this.projectPoint(\n            new GeoCoordinates(geoBox.center.latitude, geoBox.center.longitude, 0)\n        );\n        const { latitudeSpanInRadians, longitudeSpanInRadians, altitudeSpan } = geoBox;\n        const sizeX = longitudeSpanInRadians * EquirectangularProjection.geoToWorldScale;\n        const sizeY = latitudeSpanInRadians * EquirectangularProjection.geoToWorldScale;\n        if (!result) {\n            result = (new THREE.Box3() as Box3Like) as WorldBoundingBox;\n        }\n        if (isBox3Like(result)) {\n            result.min.x = worldCenter.x - sizeX * 0.5 * this.unitScale;\n            result.min.y = worldCenter.y - sizeY * 0.5 * this.unitScale;\n            result.max.x = worldCenter.x + sizeX * 0.5 * this.unitScale;\n            result.max.y = worldCenter.y + sizeY * 0.5 * this.unitScale;\n            if (altitudeSpan !== undefined) {\n                result.min.z = worldCenter.z - altitudeSpan * 0.5;\n                result.max.z = worldCenter.z + altitudeSpan * 0.5;\n            } else {\n                result.min.z = 0;\n                result.max.z = 0;\n            }\n        } else if (isOrientedBox3Like(result)) {\n            MathUtils.newVector3(1, 0, 0, result.xAxis);\n            MathUtils.newVector3(0, 1, 0, result.yAxis);\n            MathUtils.newVector3(0, 0, 1, result.zAxis);\n            result.position.x = worldCenter.x;\n            result.position.y = worldCenter.y;\n            result.position.z = worldCenter.z;\n            result.extents.x = sizeX * 0.5 * this.unitScale;\n            result.extents.y = sizeY * 0.5 * this.unitScale;\n            result.extents.z = Math.max(Number.EPSILON, (altitudeSpan || 0) * 0.5);\n        }\n        return result;\n    }\n\n    /** @override */\n    unprojectBox(worldBox: Box3Like): GeoBox {\n        const minGeo = this.unprojectPoint(worldBox.min);\n        const maxGeo = this.unprojectPoint(worldBox.max);\n        return GeoBox.fromCoordinates(minGeo, maxGeo);\n    }\n\n    /** @override */\n    groundDistance(worldPoint: Vector3Like): number {\n        return worldPoint.z;\n    }\n\n    /** @override */\n    scalePointToSurface(worldPoint: Vector3Like): Vector3Like {\n        worldPoint.z = 0;\n        return worldPoint;\n    }\n\n    /** @override */\n    surfaceNormal(_worldPoint: Vector3Like, normal?: Vector3Like) {\n        if (normal === undefined) {\n            normal = { x: 0, y: 0, z: 1 };\n        } else {\n            normal.x = 0;\n            normal.y = 0;\n            normal.z = 1;\n        }\n        return normal;\n    }\n}\n\n/**\n * Equirectangular [[Projection]] used to convert geo coordinates to unit coordinates and vice\n * versa.\n */\nexport const normalizedEquirectangularProjection: Projection = new EquirectangularProjection(1);\n\n/**\n * Equirectangular [[Projection]] used to convert geo coordinates to world coordinates and vice\n * versa.\n */\nexport const equirectangularProjection: Projection = new EquirectangularProjection(\n    EarthConstants.EQUATORIAL_CIRCUMFERENCE\n);\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { GeoBox } from \"../coordinates/GeoBox\";\nimport { GeoCoordinates } from \"../coordinates/GeoCoordinates\";\nimport { GeoCoordinatesLike } from \"../coordinates/GeoCoordinatesLike\";\nimport { Box3Like, isBox3Like } from \"../math/Box3Like\";\nimport { MathUtils } from \"../math/MathUtils\";\nimport { isOrientedBox3Like, OrientedBox3Like } from \"../math/OrientedBox3Like\";\nimport { Vector3Like } from \"../math/Vector3Like\";\nimport { EarthConstants } from \"./EarthConstants\";\nimport { Projection, ProjectionType } from \"./Projection\";\n\nimport * as THREE from \"three\";\n\n/**\n *\n * https://en.wikipedia.org/wiki/Transverse_Mercator_projection\n * http://mathworld.wolfram.com/MercatorProjection.html\n *\n */\nclass TransverseMercatorProjection extends Projection {\n    /**\n     * Like in regular Mercator projection, there are two points on sphere\n     * with radius about 5 degrees, that is out of projected space.\n     *\n     *\n     * in regular Mercator these points are:\n     *     (90, any), (-90, any)\n     *\n     * and in transverse Mercator:\n     *     (0, 90), (0, -90)\n     *\n     * So, in transverse we need to compute distnce to poles, and clamp if\n     * radius is exceeded\n     */\n    static clampGeoPoint(geoPoint: GeoCoordinatesLike, _unitScale: number) {\n        const lat = geoPoint.latitude;\n        const lon = geoPoint.longitude;\n\n        const r = TransverseMercatorUtils.POLE_RADIUS;\n        const rsq = TransverseMercatorUtils.POLE_RADIUS_SQ;\n\n        const nearestQuarter = Math.round(lon / 90);\n        const deltaLon = nearestQuarter * 90 - lon;\n        if (nearestQuarter % 2 === 0 || Math.abs(deltaLon) > r) {\n            return geoPoint;\n        }\n\n        const deltaLat = lat - 0;\n        const distanceToPoleSq = deltaLon * deltaLon + deltaLat * deltaLat;\n        if (distanceToPoleSq < rsq) {\n            const distanceToPole = Math.sqrt(distanceToPoleSq);\n            const scale = (r - distanceToPole) / distanceToPole;\n            // const quarter = ((nearestQuarter % 4) + 4) % 4;\n            // const dir = quarter === 1 ? -1 : quarter === 3 ? 1 : 0;\n            const dir = 1;\n            const offsetLon = deltaLon === 0 && deltaLat === 0 ? r * dir : deltaLon;\n            return new GeoCoordinates(lat + deltaLat * scale, lon + offsetLon * scale);\n        }\n\n        return geoPoint;\n    }\n\n    /** @override */\n    readonly type: ProjectionType = ProjectionType.Planar;\n\n    private m_phi0: number = 0;\n    private m_lambda0: number = 0;\n\n    constructor(readonly unitScale: number) {\n        super(unitScale);\n    }\n\n    /** @override */\n    getScaleFactor(worldPoint: Vector3Like): number {\n        return Math.cosh((worldPoint.x / this.unitScale - 0.5) * 2 * Math.PI);\n    }\n\n    /** @override */\n    worldExtent<WorldBoundingBox extends Box3Like>(\n        minAltitude: number,\n        maxAltitude: number,\n        result?: WorldBoundingBox\n    ): WorldBoundingBox {\n        if (!result) {\n            result = (new THREE.Box3() as Box3Like) as WorldBoundingBox;\n        }\n        result.min.x = 0;\n        result.min.y = 0;\n        result.min.z = minAltitude;\n        result.max.x = this.unitScale;\n        result.max.y = this.unitScale;\n        result.max.z = maxAltitude;\n        return result;\n    }\n\n    /** @override */\n    projectPoint<WorldCoordinates extends Vector3Like>(\n        geoPoint: GeoCoordinatesLike,\n        result?: WorldCoordinates\n    ): WorldCoordinates {\n        if (!result) {\n            // tslint:disable-next-line:no-object-literal-type-assertion\n            result = { x: 0, y: 0, z: 0 } as WorldCoordinates;\n        }\n\n        const clamped = TransverseMercatorProjection.clampGeoPoint(geoPoint, this.unitScale);\n        const normalLon = clamped.longitude / 360 + 0.5;\n        const offset = normalLon === 1 ? 0 : Math.floor(normalLon);\n        const phi = THREE.MathUtils.degToRad(clamped.latitude);\n        const lambda = THREE.MathUtils.degToRad(clamped.longitude - offset * 360) - this.m_lambda0;\n\n        const B = Math.cos(phi) * Math.sin(lambda);\n        // result.x = 1/2 * Math.log((1 + B) / (1 - B));\n        result.x = Math.atanh(B);\n        result.y = Math.atan2(Math.tan(phi), Math.cos(lambda)) - this.m_phi0;\n\n        const outScale = 0.5 / Math.PI;\n        result.x =\n            this.unitScale * (THREE.MathUtils.clamp(result.x * outScale + 0.5, 0, 1) + offset);\n        result.y = this.unitScale * THREE.MathUtils.clamp(result.y * outScale + 0.5, 0, 1);\n\n        result.z = geoPoint.altitude || 0;\n        return result;\n    }\n\n    /** @override */\n    unprojectPoint(worldPoint: Vector3Like): GeoCoordinates {\n        const tau = Math.PI * 2;\n        const nx = worldPoint.x / this.unitScale;\n        const ny = worldPoint.y / this.unitScale;\n        const offset = nx === 1 ? 0 : Math.floor(nx);\n        const x = tau * (nx - 0.5 - offset);\n        const y = tau * (ny - 0.5);\n        const z = worldPoint.z || 0;\n\n        const D = y + this.m_phi0;\n\n        const phi = Math.asin(Math.sin(D) / Math.cosh(x));\n        const lambda = this.m_lambda0 + Math.atan2(Math.sinh(x), Math.cos(D)) + offset * tau;\n\n        const geoPoint = GeoCoordinates.fromRadians(phi, lambda, z);\n        return geoPoint;\n    }\n\n    /** @override */\n    projectBox<WorldBoundingBox extends Box3Like | OrientedBox3Like>(\n        geoBox: GeoBox,\n        result?: WorldBoundingBox\n    ): WorldBoundingBox {\n        const { north, south, east, west } = geoBox;\n\n        const pointsToCheck = [\n            geoBox.center,\n            geoBox.northEast,\n            geoBox.southWest,\n            new GeoCoordinates(south, east),\n            new GeoCoordinates(north, west)\n        ];\n\n        const E = TransverseMercatorUtils.POLE_EDGE_DEG;\n\n        const containsWestCut = west < -90 && east > -90;\n        const containsEastCut = west < 90 && east > 90;\n        const containsCenterX = west < 0 && east > 0;\n        const containsCenterY = west < E && east > -E && north > 0 && south < 0;\n\n        if (containsWestCut) {\n            pointsToCheck.push(new GeoCoordinates(north, -90));\n            pointsToCheck.push(new GeoCoordinates(south, -90));\n        }\n\n        if (containsEastCut) {\n            pointsToCheck.push(new GeoCoordinates(north, 90));\n            pointsToCheck.push(new GeoCoordinates(south, 90));\n        }\n\n        if (containsCenterX) {\n            pointsToCheck.push(new GeoCoordinates(north, 0));\n            pointsToCheck.push(new GeoCoordinates(south, 0));\n        }\n\n        if (containsCenterY) {\n            pointsToCheck.push(new GeoCoordinates(0, west));\n            pointsToCheck.push(new GeoCoordinates(0, east));\n        }\n\n        TransverseMercatorUtils.alignLatitude(pointsToCheck, pointsToCheck[0]);\n\n        const projected = pointsToCheck.map(p => this.projectPoint(p));\n        const vx = projected.map(p => p.x);\n        const vy = projected.map(p => p.y);\n        const vz = projected.map(p => p.z);\n\n        const minX = Math.min(...vx);\n        const minY = Math.min(...vy);\n        const minZ = Math.min(...vz);\n        const maxX = Math.max(...vx);\n        const maxY = Math.max(...vy);\n        const maxZ = Math.max(...vz);\n\n        if (!result) {\n            result = (new THREE.Box3() as Box3Like) as WorldBoundingBox;\n        }\n        if (isBox3Like(result)) {\n            result.min.x = minX;\n            result.min.y = minY;\n            result.min.z = minZ;\n            result.max.x = maxX;\n            result.max.y = maxY;\n            result.max.z = maxZ;\n        } else if (isOrientedBox3Like(result)) {\n            MathUtils.newVector3(1, 0, 0, result.xAxis);\n            MathUtils.newVector3(0, 1, 0, result.yAxis);\n            MathUtils.newVector3(0, 0, 1, result.zAxis);\n            result.position.x = (minX + maxX) / 2;\n            result.position.y = (minY + maxY) / 2;\n            result.position.z = (minZ + maxZ) / 2;\n            result.extents.x = (maxX - minX) / 2;\n            result.extents.y = (maxY - minY) / 2;\n            result.extents.z = (maxZ - minZ) / 2;\n        } else {\n            throw new Error(\"invalid bounding box\");\n        }\n        return result;\n    }\n\n    /**\n     * There are 8 sub-regions on entire projection space\n     * where both longitude and latitude preserve direction.\n     * If bounding box hits more than one region, it should be splitted\n     * into sub-boxes by regions, (un)projected and then united again.\n     *\n     *\n     * directions in form [latitude / longitude]:\n     *    1 ┌─────────|─────────┐\n     *      │ dr / dl | dl / ul │\n     * 0.75 ----------|----------\n     *      │ ur / dr | ul / ur │\n     * 0.5  ----------|----------\n     *      │ ul / ur | ur / dr │\n     * 0.25 ----------|----------\n     *      │ dl / ul | dr / dl │\n     *      └─────────|─────────┘\n     *     0         0.5        1\n     *     @override\n     */\n    unprojectBox(worldBox: Box3Like): GeoBox {\n        const s = this.unitScale;\n\n        const min = worldBox.min;\n        const max = worldBox.max;\n        const pointsToCheck = [\n            { x: (min.x + max.x) / 2, y: (min.y + max.y) / 2, z: 0 },\n            min,\n            max,\n            { x: min.x, y: max.y, z: 0 },\n            { x: max.x, y: min.y, z: 0 }\n        ];\n\n        const center = 0.5 * s;\n        const lowerQ = 0.25 * s;\n        const upperQ = 0.75 * s;\n\n        const containsCenterX = min.x < center && max.x > center;\n        const containsCenterY = min.y < center && max.y > center;\n        const containsLowerQY = min.y < lowerQ && max.y > lowerQ;\n        const containsUpperQY = min.y < upperQ && max.y > upperQ;\n\n        if (containsCenterY) {\n            pointsToCheck.push({ x: min.x, y: center, z: 0 });\n            pointsToCheck.push({ x: max.x, y: center, z: 0 });\n\n            if (containsCenterX) {\n                pointsToCheck.push({ x: center, y: center, z: 0 });\n            }\n        }\n        if (containsLowerQY) {\n            pointsToCheck.push({ x: min.x, y: lowerQ, z: 0 });\n            pointsToCheck.push({ x: max.x, y: lowerQ, z: 0 });\n\n            if (containsCenterX) {\n                pointsToCheck.push({ x: center, y: lowerQ, z: 0 });\n            }\n        }\n        if (containsUpperQY) {\n            pointsToCheck.push({ x: min.x, y: upperQ, z: 0 });\n            pointsToCheck.push({ x: max.x, y: upperQ, z: 0 });\n\n            if (containsCenterX) {\n                pointsToCheck.push({ x: center, y: upperQ, z: 0 });\n            }\n        }\n\n        const geoPoints = pointsToCheck.map(p => this.unprojectPoint(p));\n        TransverseMercatorUtils.alignLongitude(geoPoints, geoPoints[0]);\n\n        const latitudes = geoPoints.map(g => g.latitude);\n        const longitudes = geoPoints.filter(g => Math.abs(g.latitude) < 90).map(g => g.longitude);\n        const altitudes = geoPoints.map(g => g.altitude || 0);\n\n        const minGeo = new GeoCoordinates(\n            Math.min(...latitudes),\n            Math.min(...longitudes),\n            Math.min(...altitudes)\n        );\n\n        const maxGeo = new GeoCoordinates(\n            Math.max(...latitudes),\n            Math.max(...longitudes),\n            Math.max(...altitudes)\n        );\n\n        const geoBox = GeoBox.fromCoordinates(minGeo, maxGeo);\n        return geoBox;\n    }\n\n    /** @override */\n    unprojectAltitude(worldPoint: Vector3Like): number {\n        return worldPoint.z;\n    }\n\n    /** @override */\n    groundDistance(worldPoint: Vector3Like): number {\n        return worldPoint.z;\n    }\n\n    /** @override */\n    scalePointToSurface(worldPoint: Vector3Like): Vector3Like {\n        worldPoint.z = 0;\n        return worldPoint;\n    }\n\n    /** @override */\n    surfaceNormal(_worldPoint: Vector3Like, normal?: Vector3Like) {\n        if (normal === undefined) {\n            normal = { x: 0, y: 0, z: -1 };\n        } else {\n            normal.x = 0;\n            normal.y = 0;\n            normal.z = -1;\n        }\n        return normal;\n    }\n}\n\nexport class TransverseMercatorUtils {\n    static POLE_EDGE: number = 1.4844222297453323;\n    static POLE_EDGE_DEG: number = THREE.MathUtils.radToDeg(TransverseMercatorUtils.POLE_EDGE);\n    static POLE_RADIUS: number = 90 - TransverseMercatorUtils.POLE_EDGE_DEG;\n    static POLE_RADIUS_SQ: number = Math.pow(TransverseMercatorUtils.POLE_RADIUS, 2);\n\n    /**\n     * There are two regions on projected space that have same geo coordinates,\n     * it's the entire lines   { x: [0..1], y: 0 } and { x: [0..1], y: 1 }\n     * they both have geo coordinates of   (0, [-90..+90])\n     * and should be aligned somehow to fall into first or second region\n     * to make proper bounding boxes, tile bounds, etc.\n     */\n    static alignLatitude(points: GeoCoordinatesLike[], referencePoint: GeoCoordinatesLike): void {\n        const EPSILON = 1e-9;\n\n        for (const point of points) {\n            if (point.latitude === 0) {\n                point.latitude = referencePoint.latitude * EPSILON;\n            }\n        }\n    }\n\n    /**\n     * There are two regions on projected plane,\n     * { x: 0.5, y: [0..0.25] }    and    { x: 0.5, y: [0.75..1] }\n     * that represent longitude edge where -180 and +180 met.\n     * Points falling in this regions should be aligned to get proper boxes etc.\n     */\n    static alignLongitude(points: GeoCoordinatesLike[], referencePoint: GeoCoordinatesLike): void {\n        const bad = referencePoint.longitude < 0 ? 180 : -180;\n        const good = referencePoint.longitude < 0 ? -180 : 180;\n\n        for (const point of points) {\n            if (point.longitude === bad) {\n                point.longitude = good;\n            }\n        }\n    }\n}\n\n/**\n * Transverse Mercator [[Projection]] used to convert geo coordinates to world coordinates\n * and vice versa.\n */\nexport const transverseMercatorProjection: Projection = new TransverseMercatorProjection(\n    EarthConstants.EQUATORIAL_CIRCUMFERENCE\n);\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { GeoBox } from \"../coordinates/GeoBox\";\nimport { Box3Like } from \"../math/Box3Like\";\nimport { Vector3Like } from \"../math/Vector3Like\";\nimport { Projection } from \"../projection/Projection\";\nimport { SubdivisionScheme } from \"./SubdivisionScheme\";\nimport { TileKey } from \"./TileKey\";\nimport { TilingScheme } from \"./TilingScheme\";\n\nimport * as THREE from \"three\";\n\n/**\n * `FlatTileBoundingBoxGenerator` generates bounding boxes in world and geo coordinates for a given\n * TilingScheme.\n */\nexport class FlatTileBoundingBoxGenerator {\n    private readonly m_tilingScheme: TilingScheme;\n    private readonly m_worldDimensions: Vector3Like;\n    private readonly m_worldBox: Box3Like;\n    /**\n     * Creates a new `FlatTileBoundingBoxGenerator` that can generate bounding boxes for the given\n     * TilingScheme.\n     *\n     * @param tilingScheme The [[TilingScheme]] used to compute bounding boxes.\n     * @param minElevation The minimum elevation in meters.\n     * @param maxElevation The maximum elevation in meters.\n     */\n    constructor(\n        readonly tilingScheme: TilingScheme,\n        readonly minElevation: number = 0,\n        readonly maxElevation: number = 0\n    ) {\n        this.m_tilingScheme = tilingScheme;\n        this.m_worldBox = tilingScheme.projection.worldExtent(minElevation, maxElevation);\n        const { min, max } = this.m_worldBox;\n        this.m_worldDimensions = { x: max.x - min.x, y: max.y - min.y, z: max.z - min.z };\n    }\n\n    /**\n     * Returns the [[Projection]] of the [[TilingScheme]].\n     */\n    get projection(): Projection {\n        return this.m_tilingScheme.projection;\n    }\n\n    /**\n     * Returns the [[SubdivisionScheme]] of the [[TilingScheme]].\n     */\n    get subdivisionScheme(): SubdivisionScheme {\n        return this.m_tilingScheme.subdivisionScheme;\n    }\n\n    /**\n     * Returns the bounding box in world coordinates of the given [[TileKey]].\n     *\n     * Example:\n     * ```typescript\n     * const worldBounds = new THREE.Box3();\n     * generator.getWorldBox(geoBox, worldBounds);\n     * console.log(worldBounds.getCenter());\n     * ```\n     *\n     * @param tileKey The TileKey.\n     * @param result The optional object used to store the resulting bounding box in world\n     * coordinates.\n     */\n    getWorldBox(tileKey: TileKey, result?: Box3Like): Box3Like {\n        const level = tileKey.level;\n        const levelDimensionX = this.subdivisionScheme.getLevelDimensionX(level);\n        const levelDimensionY = this.subdivisionScheme.getLevelDimensionY(level);\n        const sizeX = this.m_worldDimensions.x / levelDimensionX;\n        const sizeY = this.m_worldDimensions.y / levelDimensionY;\n        const originX = this.m_worldBox.min.x + sizeX * tileKey.column;\n        const originY = this.m_worldBox.min.y + sizeY * tileKey.row;\n\n        if (!result) {\n            result = new THREE.Box3();\n        }\n\n        result.min.x = originX;\n        result.min.y = originY;\n        result.min.z = this.m_worldBox.min.z;\n        result.max.x = originX + sizeX;\n        result.max.y = originY + sizeY;\n        result.max.z = this.m_worldBox.max.z;\n        return result;\n    }\n\n    /**\n     * Returns the bounding box in geo coordinates for the given [[TileKey]].\n     *\n     * Example:\n     * ```typescript\n     * const geoBox = generator.getGeoBox(worldBounds);\n     * console.log(geoBox.center);\n     * ```\n     *\n     * @param tileKey The [[TileKey]].\n     */\n    getGeoBox(tileKey: TileKey): GeoBox {\n        const worldBox = this.getWorldBox(tileKey);\n        return this.projection.unprojectBox(worldBox);\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { SubdivisionScheme } from \"./SubdivisionScheme\";\n\nclass HalfQuadTreeSubdivisionScheme implements SubdivisionScheme {\n    getSubdivisionX(): number {\n        return 2;\n    }\n    getSubdivisionY(level: number): number {\n        return level === 0 ? 1 : 2;\n    }\n    getLevelDimensionX(level: number): number {\n        // tslint:disable-next-line:no-bitwise\n        return 1 << level;\n    }\n    getLevelDimensionY(level: number): number {\n        // tslint:disable-next-line:no-bitwise\n        return level !== 0 ? 1 << (level - 1) : 1;\n    }\n}\n\n/**\n * A [[SubdivisionScheme]] used to represent half quadtrees. This particular subdivision scheme is\n * used by the HERE tiling scheme.\n */\nexport const halfQuadTreeSubdivisionScheme: SubdivisionScheme = new HalfQuadTreeSubdivisionScheme();\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { TileKey } from \"./TileKey\";\n\nexport class SubTiles implements Iterable<TileKey> {\n    constructor(public tileKey: TileKey, public sizeX: number, public sizeY: number) {}\n\n    [Symbol.iterator](): Iterator<TileKey> {\n        return this.sizeX === 2 && this.sizeY === 2\n            ? SubTiles.ZCurveIterator(this.tileKey)\n            : SubTiles.RowColumnIterator(this.tileKey, this.sizeX, this.sizeY);\n    }\n}\n\nexport namespace SubTiles {\n    export function* RowColumnIterator(\n        parentKey: TileKey,\n        sizeX: number,\n        sizeY: number\n    ): Iterator<TileKey> {\n        for (let y = 0; y < sizeY; y++) {\n            for (let x = 0; x < sizeX; x++) {\n                yield TileKey.fromRowColumnLevel(\n                    parentKey.row * sizeY + y,\n                    parentKey.column * sizeX + x,\n                    parentKey.level + 1\n                );\n            }\n        }\n    }\n\n    export function* ZCurveIterator(parentKey: TileKey): Iterator<TileKey> {\n        // tslint:disable:no-bitwise\n        for (let i = 0; i < 4; i++) {\n            yield TileKey.fromRowColumnLevel(\n                (parentKey.row << 1) | (i >> 1),\n                (parentKey.column << 1) | (i & 1),\n                parentKey.level + 1\n            );\n        }\n        // tslint:enableno-bitwise\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { GeoBox } from \"../coordinates/GeoBox\";\nimport { GeoCoordinates } from \"../coordinates/GeoCoordinates\";\nimport { GeoCoordinatesLike } from \"../coordinates/GeoCoordinatesLike\";\nimport { Vector3Like } from \"../math/Vector3Like\";\nimport { TileKey } from \"./TileKey\";\nimport { TilingScheme } from \"./TilingScheme\";\n\nexport class TileKeyUtils {\n    static geoCoordinatesToTileKey(\n        tilingScheme: TilingScheme,\n        geoPoint: GeoCoordinatesLike,\n        level: number\n    ): TileKey | null {\n        const projection = tilingScheme.projection;\n        const worldPoint = projection.projectPoint(geoPoint);\n\n        return this.worldCoordinatesToTileKey(tilingScheme, worldPoint, level);\n    }\n\n    static worldCoordinatesToTileKey(\n        tilingScheme: TilingScheme,\n        worldPoint: Vector3Like,\n        level: number\n    ): TileKey | null {\n        const projection = tilingScheme.projection;\n        const subdivisionScheme = tilingScheme.subdivisionScheme;\n\n        const cx = subdivisionScheme.getLevelDimensionX(level);\n        const cy = subdivisionScheme.getLevelDimensionY(level);\n\n        const { min, max } = projection.worldExtent(0, 0);\n        const worldSizeX = max.x - min.x;\n        const worldSizeY = max.y - min.y;\n\n        if (worldPoint.x < min.x || worldPoint.x > max.x) {\n            return null;\n        }\n\n        if (worldPoint.y < min.y || worldPoint.y > max.y) {\n            return null;\n        }\n\n        const column = Math.min(cx - 1, Math.floor((cx * (worldPoint.x - min.x)) / worldSizeX));\n        const row = Math.min(cy - 1, Math.floor((cy * (worldPoint.y - min.y)) / worldSizeY));\n\n        return TileKey.fromRowColumnLevel(row, column, level);\n    }\n\n    static geoRectangleToTileKeys(\n        tilingScheme: TilingScheme,\n        geoBox: GeoBox,\n        level: number\n    ): TileKey[] {\n        const wrap = (value: number, lower: number, upper: number) => {\n            if (value < lower) {\n                return upper - ((lower - value) % (upper - lower));\n            }\n\n            return lower + ((value - lower) % (upper - lower));\n        };\n\n        const clamp = (x: number, minVal: number, maxVal: number) => {\n            return Math.min(Math.max(x, minVal), maxVal);\n        };\n\n        // Clamp at the poles and wrap around the international date line.\n        const southWestLongitude = wrap(geoBox.southWest.longitudeInRadians, -Math.PI, Math.PI);\n        const southWestLatitude = clamp(\n            geoBox.southWest.latitudeInRadians,\n            -(Math.PI * 0.5),\n            Math.PI * 0.5\n        );\n        const northEastLongitude = wrap(geoBox.northEast.longitudeInRadians, -Math.PI, Math.PI);\n        const northEastLatitude = clamp(\n            geoBox.northEast.latitudeInRadians,\n            -(Math.PI * 0.5),\n            Math.PI * 0.5\n        );\n        const minTileKey = TileKeyUtils.geoCoordinatesToTileKey(\n            tilingScheme,\n            GeoCoordinates.fromRadians(southWestLatitude, southWestLongitude),\n            level\n        );\n        const maxTileKey = TileKeyUtils.geoCoordinatesToTileKey(\n            tilingScheme,\n            GeoCoordinates.fromRadians(northEastLatitude, northEastLongitude),\n            level\n        );\n        const columnCount = tilingScheme.subdivisionScheme.getLevelDimensionX(level);\n\n        if (!minTileKey || !maxTileKey) {\n            throw new Error(\"Invalid coordinates\");\n        }\n\n        const minColumn = minTileKey.column;\n        let maxColumn = maxTileKey.column;\n\n        // wrap around case\n        if (southWestLongitude > northEastLongitude) {\n            if (maxColumn !== minColumn) {\n                maxColumn += columnCount;\n            } else {\n                // do not duplicate\n                maxColumn += columnCount - 1;\n            }\n        }\n\n        const minRow = Math.min(minTileKey.row, maxTileKey.row);\n        const maxRow = Math.max(minTileKey.row, maxTileKey.row);\n\n        const keys = new Array<TileKey>();\n\n        for (let row = minRow; row <= maxRow; ++row) {\n            for (let column = minColumn; column <= maxColumn; ++column) {\n                keys.push(TileKey.fromRowColumnLevel(row, column % columnCount, level));\n            }\n        }\n\n        return keys;\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { SubdivisionScheme } from \"./SubdivisionScheme\";\nimport { SubTiles } from \"./SubTiles\";\nimport { TileKey } from \"./TileKey\";\n\nexport class TileTreeTraverse {\n    private m_subdivisionScheme: SubdivisionScheme;\n\n    constructor(subdivisionScheme: SubdivisionScheme) {\n        this.m_subdivisionScheme = subdivisionScheme;\n    }\n\n    subTiles(tileKey: TileKey): Iterable<TileKey> {\n        const divX = this.m_subdivisionScheme.getSubdivisionX(tileKey.level);\n        const divY = this.m_subdivisionScheme.getSubdivisionY(tileKey.level);\n\n        return new SubTiles(tileKey, divX, divY);\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { IChannel } from \"./IChannel\";\n\n/**\n * Class for the default console channel.\n */\n\nexport class ConsoleChannel implements IChannel {\n    error(message?: any, ...optionalParams: any[]) {\n        // tslint:disable-next-line:no-console\n        console.error(message, ...optionalParams);\n    }\n\n    debug(message?: any, ...optionalParams: any[]) {\n        // tslint:disable-next-line:no-console\n        console.debug(message, ...optionalParams);\n    }\n\n    info(message?: any, ...optionalParams: any[]) {\n        // tslint:disable-next-line:no-console\n        console.info(message, ...optionalParams);\n    }\n\n    log(message?: any, ...optionalParams: any[]) {\n        // tslint:disable-next-line:no-console\n        console.log(message, ...optionalParams);\n    }\n\n    trace(message?: any, ...optionalParams: any[]) {\n        // tslint:disable-next-line:no-console\n        console.trace(message, ...optionalParams);\n    }\n\n    warn(message?: any, ...optionalParams: any[]) {\n        // tslint:disable-next-line:no-console\n        console.warn(message, ...optionalParams);\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { IChannel } from \"./IChannel\";\nimport { ILogger, LoggerOptions, LogLevel } from \"./ILogger\";\n\n/**\n * Logger class.\n */\nexport class Logger implements ILogger {\n    enabled: boolean = true;\n    level: LogLevel = LogLevel.Trace;\n\n    constructor(readonly name: string, private m_channel: IChannel, options?: LoggerOptions) {\n        if (options !== undefined) {\n            this.update(options);\n        }\n    }\n\n    error(message?: any, ...optionalParams: any[]) {\n        if (this.enabled && this.level <= LogLevel.Error) {\n            this.m_channel.error(this.prefix, message, ...optionalParams);\n        }\n    }\n\n    debug(message?: any, ...optionalParams: any[]) {\n        if (this.enabled && this.level <= LogLevel.Debug) {\n            this.m_channel.debug(this.prefix, message, ...optionalParams);\n        }\n    }\n\n    info(message?: any, ...optionalParams: any[]) {\n        if (this.enabled && this.level <= LogLevel.Info) {\n            this.m_channel.info(this.prefix, message, ...optionalParams);\n        }\n    }\n\n    log(message?: any, ...optionalParams: any[]) {\n        if (this.enabled && this.level <= LogLevel.Log) {\n            this.m_channel.log(this.prefix, message, ...optionalParams);\n        }\n    }\n\n    trace(message?: any, ...optionalParams: any[]) {\n        if (this.enabled && this.level <= LogLevel.Trace) {\n            this.m_channel.trace(this.prefix, message, ...optionalParams);\n        }\n    }\n\n    warn(message?: any, ...optionalParams: any[]) {\n        if (this.enabled && this.level <= LogLevel.Warn) {\n            this.m_channel.warn(this.prefix, message, ...optionalParams);\n        }\n    }\n\n    update(options: LoggerOptions) {\n        this.enabled = options.enabled === undefined ? this.enabled : options.enabled;\n        this.level = options.level === undefined ? this.level : options.level;\n    }\n\n    private get prefix(): string {\n        return this.name + \":\";\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { IChannel } from \"./IChannel\";\nimport { LogLevel } from \"./ILogger\";\n\ndeclare let self: Worker;\n\nexport const WORKERCHANNEL_MSG_TYPE = \"worker-channel-message\";\n\n/**\n * The interface for the messages of the WorkerChannel.\n */\nexport interface IWorkerChannelMessage {\n    message: any[];\n    type: \"worker-channel-message\";\n    level: LogLevel;\n}\n\n/**\n * The class for the worker channel.\n */\nexport class WorkerChannel implements IChannel {\n    error(message?: any, ...optionalParams: any[]) {\n        const workerMessage: IWorkerChannelMessage = {\n            message: [message, ...optionalParams],\n            type: WORKERCHANNEL_MSG_TYPE,\n            level: LogLevel.Error\n        };\n        self.postMessage(workerMessage);\n    }\n\n    debug(message?: any, ...optionalParams: any[]) {\n        const workerMessage: IWorkerChannelMessage = {\n            message: [message, ...optionalParams],\n            type: WORKERCHANNEL_MSG_TYPE,\n            level: LogLevel.Debug\n        };\n        self.postMessage(workerMessage);\n    }\n\n    info(message?: any, ...optionalParams: any[]) {\n        const workerMessage: IWorkerChannelMessage = {\n            message: [message, ...optionalParams],\n            type: WORKERCHANNEL_MSG_TYPE,\n            level: LogLevel.Info\n        };\n        self.postMessage(workerMessage);\n    }\n\n    log(message?: any, ...optionalParams: any[]) {\n        const workerMessage: IWorkerChannelMessage = {\n            message: [message, ...optionalParams],\n            type: WORKERCHANNEL_MSG_TYPE,\n            level: LogLevel.Log\n        };\n        self.postMessage(workerMessage);\n    }\n\n    trace(message?: any, ...optionalParams: any[]) {\n        const workerMessage: IWorkerChannelMessage = {\n            message: [message, ...optionalParams],\n            type: WORKERCHANNEL_MSG_TYPE,\n            level: LogLevel.Trace\n        };\n        self.postMessage(workerMessage);\n    }\n\n    warn(message?: any, ...optionalParams: any[]) {\n        const workerMessage: IWorkerChannelMessage = {\n            message: [message, ...optionalParams],\n            type: WORKERCHANNEL_MSG_TYPE,\n            level: LogLevel.Warn\n        };\n        self.postMessage(workerMessage);\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\nimport * as THREE from \"three\";\n\n/**\n * The base shader to use for [[MapView]]'s composing passes, like [[MSAAMaterial]].\n */\n\nexport const CopyShader: THREE.Shader = {\n    uniforms: {\n        tDiffuse: { value: null },\n        opacity: { value: 1.0 }\n    },\n    vertexShader: `\n    varying vec2 vUv;\n    void main() {\n        vUv = uv;\n        gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n    }`,\n    fragmentShader: `\n    uniform float opacity;\n    uniform sampler2D tDiffuse;\n    varying vec2 vUv;\n    void main() {\n        vec4 texel = texture2D( tDiffuse, vUv );\n        gl_FragColor = opacity * texel;\n    }`\n};\n\n/**\n * The material is used for composing.\n */\nexport class CopyMaterial extends THREE.ShaderMaterial {\n    /**\n     * The constructor of `CopyMaterial`.\n     *\n     * @param uniforms The [[CopyShader]]'s uniforms.\n     */\n    constructor(uniforms: { [uniformName: string]: THREE.IUniform }) {\n        super({\n            name: \"CopyMaterial\",\n            uniforms,\n            vertexShader: CopyShader.vertexShader,\n            fragmentShader: CopyShader.fragmentShader,\n            premultipliedAlpha: true,\n            transparent: false,\n            blending: THREE.NoBlending,\n            depthTest: false,\n            depthWrite: false\n        });\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nexport default {\n    atmosphere_common_utils: `\n\n    float conditionalBranchFree(bool condition, float primary, float secondary) {\n        // Interpolate between primary and secondary:\n        // result = secondary * (1 - factor) + primary * factor\n        // where:\n        // factor = float(condition)\n        return mix(secondary, primary, float(condition));\n    }\n\n    vec3 conditionalBranchFree(bool condition, vec3 primary, vec3 secondary) {\n        return mix(secondary, primary, float(condition));\n    }\n    `,\n    atmosphere_vertex_utils: `\n\n    const float RayleighScaleDepth = 0.25;\n\n    struct AtmosphereColor\n    {\n        vec3 mie;\n        vec3 rayleigh;\n    };\n\n    float scale(float cosAngle)\n    {\n        float x = 1.0 - cosAngle;\n        return RayleighScaleDepth  * exp(-0.00287 + x*(0.459 + x*(3.83 + x*(-6.80 + x*5.25))));\n    }\n\n    float getNearSphereIntersect(vec3 v3Pos, vec3 v3Ray, float fCameraHeight2, float fOuterRadius2) {\n        // Solve simple square equation for the x0 (first point of intersection).\n#if defined(IMPROVE_INTERSECT_PRECISION)\n        // To improve precision instead of simple projection: b = 2.0 * dot(vPos, v3Ray),\n        // we change the equation that gives better results especially around the poles.\n        float fB = 2.0 * length(v3Pos) * dot(normalize(v3Pos), v3Ray);\n#else\n        float fB = 2.0 * dot(v3Pos, v3Ray);\n#endif\n        float fC = fCameraHeight2 - fOuterRadius2;\n        // det = b^2 - 4*a*c, where a = 1\n        float fDet = max(0.0, fB * fB - 4.0 * fC);\n        // Intersection points distances are defined as follows:\n        // x0 = (-b - sqrt(det)) / 2*a ^ x1 = (-b + sqrt(det)) / 2*a\n        // we search for x0:\n        return 0.5 * (-fB - sqrt(fDet));\n    }\n\n    float getFarSphereIntersect(vec3 v3Pos, vec3 v3Ray, float fCameraHeight2, float fOuterRadius2) {\n        // Solve simple square equation for the x1 (second point of intersection).\n#if defined(IMPROVE_INTERSECT_PRECISION)\n        float fB = 2.0 * length(v3Pos) * dot(normalize(v3Pos), v3Ray);\n#else\n        float fB = 2.0 * dot(v3Pos, v3Ray);\n#endif\n        float fC = fCameraHeight2 - fOuterRadius2;\n        // det = b^2 - 4*a*c, where a = 1\n        float fDet = max(0.0, fB * fB - 4.0 * fC);\n        // Compute second intersection distance:\n        // x1 = (-b + sqrt(det)) / 2*a\n        return 0.5 * (-fB + sqrt(fDet));\n    }\n    `,\n    atmosphere_fragment_utils: `\n\n    // Branch free RGB to HSV conversion.\n    // Based on article:\n    // http://lolengine.net/blog/2013/01/13/fast-rgb-to-hsv\n    // and optimized OpenGL SL algorithm\n    // http://lolengine.net/blog/2013/07/27/rgb-to-hsv-in-glsl\n    vec3 rgb2Hsv(vec3 c)\n    {\n        const vec4 RGB_HSV_CONV = vec4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);\n        // Ternary operator may be used explicitly if compiler can use fast conditional move.\n        // vec4 p = c.g < c.b ? vec4(c.bg, RGB_HSV_CONV.wz) : vec4(c.gb, RGB_HSV_CONV.xy);\n        vec4 p = mix(vec4(c.bg, RGB_HSV_CONV.wz), vec4(c.gb, RGB_HSV_CONV.xy), step(c.b, c.g));\n        // vec4 q = c.r < p.x ? vec4(p.xyw, c.r) : vec4(c.r, p.yzx);\n        vec4 q = mix(vec4(p.xyw, c.r), vec4(c.r, p.yzx), step(p.x, c.r));\n\n        float d = q.x - min(q.w, q.y);\n        float e = 1.0e-10;\n        return vec3(abs(q.z + (q.w - q.y) / (6.0 * d + e)), d / (q.x + e), q.x);\n    }\n\n    // Branch free HSV to RGB conversion\n    vec3 hsv2Rgb(vec3 c)\n    {\n        const vec4 HSV_RGB_CONV = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n        vec3 p = abs(fract(c.xxx + HSV_RGB_CONV.xyz) * 6.0 - HSV_RGB_CONV.www);\n        return c.z * mix(HSV_RGB_CONV.xxx, clamp(p - HSV_RGB_CONV.xxx, 0.0, 1.0), c.y);\n    }\n\n    vec3 correctExposure(vec3 rgb, float exposure)\n    {\n        const vec3 fullColor = vec3(1.0);\n        return fullColor - exp(-exposure * rgb);\n    }\n\n    vec3 correctColor(vec3 rgb, vec3 hsvShift)\n    {\n        const float e = 0.0000001;\n        // Convert rgb color to hsv\n        vec3 hsv = rgb2Hsv(rgb);\n        // Shift hue value with angle wrapping\n        hsv.x = mod(hsv.x + hsvShift.x, 1.0);\n        // Shift and clamp saturation\n        hsv.y = clamp(hsv.y + hsvShift.y, 0.0, 1.0);\n        // Change value if it is significant (greater then epsilon)\n        hsv.z = hsv.z > e ? clamp(hsv.z + hsvShift.z, 0.0, 1.0) : 0.0;\n        // Convert shifted hsv back to rgb\n        return hsv2Rgb(hsv);\n    }\n    `\n};\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport * as THREE from \"three\";\n\nimport { assert, LoggerManager } from \"@here/harp-utils\";\nimport { ColorUtils } from \"./ColorUtils\";\nimport { Env } from \"./Env\";\nimport { ExponentialInterpolant } from \"./ExponentialInterpolant\";\nimport { Expr, ExprScope, Value } from \"./Expr\";\nimport { InterpolatedPropertyDefinition, InterpolationMode } from \"./InterpolatedPropertyDefs\";\nimport {\n    parseStringEncodedNumeral,\n    StringEncodedColorFormats,\n    StringEncodedMetricFormats,\n    StringEncodedNumeralFormat,\n    StringEncodedNumeralFormatMaxSize,\n    StringEncodedNumeralFormats,\n    StringEncodedNumeralType\n} from \"./StringEncodedNumeral\";\n\nconst logger = LoggerManager.instance.create(\"InterpolatedProperty\");\n\nconst interpolants = [\n    THREE.DiscreteInterpolant,\n    THREE.LinearInterpolant,\n    THREE.CubicInterpolant,\n    ExponentialInterpolant\n];\n\nconst tmpBuffer = new Array<number>(StringEncodedNumeralFormatMaxSize);\n\n/**\n * Property which value is interpolated across different zoom levels.\n */\nexport interface InterpolatedPropertyDescriptor {\n    /**\n     * Interpolation mode that should be used for this property.\n     */\n    interpolationMode: InterpolationMode;\n\n    /**\n     * Zoom level keys array.\n     */\n    zoomLevels: ArrayLike<number>;\n\n    /**\n     * Property values array.\n     */\n    values: ArrayLike<Value>;\n\n    /**\n     * Exponent used in interpolation. Only valid with `Exponential` [[InterpolationMode]].\n     */\n    exponent?: number;\n\n    /**\n     * @hidden\n     * true if the result should be stored as vector.\n     */\n    _vectorInterpolation?: boolean;\n\n    /**\n     * @hidden\n     * [[StringEncodedNumeral]] type needed to interpret interpolated values back to numbers.\n     */\n    _stringEncodedNumeralType?: StringEncodedNumeralType;\n\n    /**\n     * @hidden\n     * Array of `0` and `1`mask values used to modify the interpolation behaviour of some\n     * [[StringEncodedNumeral]]s.\n     */\n    _stringEncodedNumeralDynamicMask?: Float32Array;\n}\n\nexport class InterpolatedProperty {\n    /**\n     * Convert JSON representation of interpolated property to internal, normalized version that\n     * can be evaluated by [[getPropertyValue]].\n     *\n     * @internal\n     */\n    static fromDefinition(\n        def: InterpolatedPropertyDefinition<Value>\n    ): InterpolatedProperty | undefined {\n        removeDuplicatePropertyValues(def);\n\n        const interpolationMode =\n            def.interpolation !== undefined\n                ? InterpolationMode[def.interpolation]\n                : InterpolationMode.Discrete;\n\n        const zoomLevels = new Float32Array(def.zoomLevels);\n\n        let vectorComponents: number | undefined;\n        if (def.values.every(v => v instanceof THREE.Vector2)) {\n            vectorComponents = 2;\n        } else if (def.values.every(v => v instanceof THREE.Vector3)) {\n            vectorComponents = 3;\n        } else if (def.values.every(v => v instanceof THREE.Vector4)) {\n            vectorComponents = 4;\n        }\n\n        if (vectorComponents !== undefined) {\n            const values = new Float32Array(def.values.length * vectorComponents);\n\n            (def.values as Array<THREE.Vector2 | THREE.Vector3 | THREE.Vector4>).forEach((v, i) =>\n                v.toArray(values, i * vectorComponents!)\n            );\n\n            return new InterpolatedProperty({\n                interpolationMode,\n                zoomLevels,\n                values,\n                _vectorInterpolation: true,\n                exponent: def.exponent\n            });\n        }\n\n        const firstValue = def.values[0];\n        switch (typeof firstValue) {\n            default:\n            case \"number\":\n            case \"boolean\":\n                return new InterpolatedProperty({\n                    interpolationMode,\n                    zoomLevels,\n                    values: new Float32Array(def.values as any),\n                    exponent: def.exponent\n                });\n            case \"string\":\n                // TODO: Minimize effort for pre-matching the numeral format.\n                const matchedFormat = StringEncodedNumeralFormats.find(format =>\n                    format.regExp.test(firstValue)\n                );\n\n                if (matchedFormat === undefined) {\n                    if (interpolationMode === InterpolationMode.Discrete) {\n                        return new InterpolatedProperty({\n                            interpolationMode,\n                            zoomLevels,\n                            values: def.values\n                        });\n                    }\n\n                    logger.error(`No StringEncodedNumeralFormat matched ${firstValue}.`);\n                    return undefined;\n                }\n\n                let needsMask = false;\n\n                const propValues = new Float32Array(def.values.length * matchedFormat.size);\n                const maskValues = new Float32Array(def.values.length);\n                needsMask = processStringEnocodedNumeralInterpolatedProperty(\n                    matchedFormat,\n                    def as InterpolatedPropertyDefinition<string>,\n                    propValues,\n                    maskValues\n                );\n\n                return new InterpolatedProperty({\n                    interpolationMode,\n                    zoomLevels,\n                    values: propValues,\n                    exponent: def.exponent,\n                    _stringEncodedNumeralType: matchedFormat.type,\n                    _stringEncodedNumeralDynamicMask: needsMask ? maskValues : undefined\n                });\n        }\n    }\n\n    constructor(readonly descriptor: InterpolatedPropertyDescriptor) {}\n\n    evaluate(env: Env): Value {\n        const zoom = env.lookup(\"$zoom\") as number;\n        const pixelToMeters = env.lookup(\"$pixelToMeters\") as number;\n        const { _stringEncodedNumeralType } = this.descriptor;\n\n        switch (_stringEncodedNumeralType) {\n            case StringEncodedNumeralType.Meters:\n            case StringEncodedNumeralType.Pixels:\n                return this.getInterpolatedMetric(zoom, pixelToMeters);\n\n            case StringEncodedNumeralType.Hex:\n            case StringEncodedNumeralType.RGB:\n            case StringEncodedNumeralType.RGBA:\n            case StringEncodedNumeralType.HSL:\n                return this.getInterpolatedColor(zoom);\n\n            default:\n                return this.getInterpolatedMetric(zoom, pixelToMeters);\n        }\n    }\n\n    private getInterpolatedMetric(\n        zoom: number,\n        pixelToMeters: number\n    ): number | number[] | THREE.Vector2 | THREE.Vector3 | THREE.Vector4 {\n        const {\n            values,\n            zoomLevels,\n            interpolationMode,\n            exponent,\n            _stringEncodedNumeralDynamicMask,\n            _vectorInterpolation\n        } = this.descriptor;\n        const nChannels = values.length / zoomLevels.length;\n        const interpolant = new interpolants[interpolationMode](zoomLevels, values, nChannels);\n        if (interpolationMode === InterpolationMode.Exponential && exponent !== undefined) {\n            (interpolant as ExponentialInterpolant).exponent = exponent;\n        }\n        interpolant.evaluate(zoom);\n\n        if (_stringEncodedNumeralDynamicMask === undefined) {\n            if (_vectorInterpolation) {\n                if (nChannels === 2) {\n                    return new THREE.Vector2().fromArray(interpolant.resultBuffer);\n                } else if (nChannels === 3) {\n                    return new THREE.Vector3().fromArray(interpolant.resultBuffer);\n                } else if (nChannels === 4) {\n                    return new THREE.Vector4().fromArray(interpolant.resultBuffer);\n                }\n                throw new Error(\"invalid number of components\");\n            }\n            return nChannels === 1 ? interpolant.resultBuffer[0] : [...interpolant.resultBuffer];\n        } else {\n            const maskInterpolant = new interpolants[interpolationMode](\n                zoomLevels,\n                _stringEncodedNumeralDynamicMask,\n                1\n            );\n            if (interpolationMode === InterpolationMode.Exponential && exponent !== undefined) {\n                (maskInterpolant as ExponentialInterpolant).exponent = exponent;\n            }\n            maskInterpolant.evaluate(zoom);\n\n            return (\n                interpolant.resultBuffer[0] *\n                (1 + maskInterpolant.resultBuffer[0] * (pixelToMeters - 1))\n            );\n        }\n    }\n\n    private getInterpolatedColor(level: number): number {\n        const { values, zoomLevels, interpolationMode, exponent } = this.descriptor;\n\n        const nChannels = values.length / zoomLevels.length;\n        const interpolant = new interpolants[interpolationMode](zoomLevels, values, nChannels);\n        if (interpolationMode === InterpolationMode.Exponential && exponent !== undefined) {\n            (interpolant as ExponentialInterpolant).exponent = exponent;\n        }\n        interpolant.evaluate(level);\n\n        assert(nChannels === 3 || nChannels === 4);\n        // ColorUtils.getHexFromRgba() does not clamp the values which may be out of\n        // color channels range (0 <= c <= 1) after interpolation.\n        if (nChannels === 4) {\n            return ColorUtils.getHexFromRgba(\n                THREE.MathUtils.clamp(interpolant.resultBuffer[0], 0, 1),\n                THREE.MathUtils.clamp(interpolant.resultBuffer[1], 0, 1),\n                THREE.MathUtils.clamp(interpolant.resultBuffer[2], 0, 1),\n                THREE.MathUtils.clamp(interpolant.resultBuffer[3], 0, 1)\n            );\n        } else {\n            return ColorUtils.getHexFromRgb(\n                THREE.MathUtils.clamp(interpolant.resultBuffer[0], 0, 1),\n                THREE.MathUtils.clamp(interpolant.resultBuffer[1], 0, 1),\n                THREE.MathUtils.clamp(interpolant.resultBuffer[2], 0, 1)\n            );\n        }\n    }\n}\n\n/**\n * Type guard to check if an object is an instance of `InterpolatedProperty`.\n */\nexport function isInterpolatedProperty(p: any): p is InterpolatedProperty {\n    return p instanceof InterpolatedProperty;\n}\n\n/**\n* Get the value of the specified property in given `env`.\n\n* @param property Property of a technique.\n* @param env The [[Env]] used to evaluate the property\n*/\nexport function getPropertyValue(property: Value | Expr | undefined, env: Env): any {\n    if (Expr.isExpr(property)) {\n        try {\n            return property.evaluate(env, ExprScope.Dynamic);\n        } catch (error) {\n            logger.error(\n                \"failed to evaluate expression\",\n                JSON.stringify(property),\n                \"error\",\n                String(error)\n            );\n            return null;\n        }\n    }\n\n    if (property === null || typeof property === \"undefined\") {\n        return null;\n    } else if (typeof property !== \"string\") {\n        // Property in numeric or array, etc. format\n        return property;\n    } else {\n        // Non-interpolated string encoded numeral parsing\n        const pixelToMeters = (env.lookup(\"$pixelToMeters\") as number) || 1;\n        const value = parseStringEncodedNumeral(property, pixelToMeters);\n        return value !== undefined ? value : property;\n    }\n}\n\nfunction removeDuplicatePropertyValues<T>(p: InterpolatedPropertyDefinition<T>) {\n    const eps = 0.001;\n\n    // detect cubic interpolations and remove stops\n    // closer than `eps`, this is needed to avoid\n    // possible NaN generated by the cubic interpolator.\n    const isCubic = p.interpolation === \"Cubic\";\n\n    for (let i = 0; i < p.values.length; ++i) {\n        const firstIdx = p.zoomLevels.findIndex(a => {\n            return isCubic ? Math.abs(a - p.zoomLevels[i]) < eps : a === p.zoomLevels[i];\n        });\n        if (firstIdx !== i) {\n            p.zoomLevels.splice(--i, 1);\n            p.values.splice(--i, 1);\n        }\n    }\n}\n\nfunction processStringEnocodedNumeralInterpolatedProperty(\n    baseFormat: StringEncodedNumeralFormat,\n    prop: InterpolatedPropertyDefinition<string>,\n    propValues: Float32Array,\n    maskValues: Float32Array\n): boolean {\n    let needsMask = false;\n    const allowedValueFormats =\n        baseFormat.type === StringEncodedNumeralType.Meters ||\n        baseFormat.type === StringEncodedNumeralType.Pixels\n            ? StringEncodedMetricFormats\n            : StringEncodedColorFormats;\n\n    for (let valueIdx = 0; valueIdx < prop.values.length; ++valueIdx) {\n        let matched = false;\n        for (const valueFormat of allowedValueFormats) {\n            const value = prop.values[valueIdx];\n            matched = valueFormat.decoder(value, tmpBuffer);\n            if (!matched) {\n                continue;\n            }\n\n            if (valueFormat.mask !== undefined) {\n                maskValues[valueIdx] = valueFormat.mask;\n                needsMask = true;\n            }\n\n            for (let i = 0; i < valueFormat.size; ++i) {\n                propValues[valueIdx * valueFormat.size + i] = tmpBuffer[i];\n            }\n            break;\n        }\n        if (!matched) {\n            throw Error(\n                `Not all interpolation values match the same format: ${JSON.stringify(prop)}`\n            );\n        }\n    }\n\n    return needsMask;\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { JsonExpr } from \"./Expr\";\nimport { InterpolatedPropertyDefinition } from \"./InterpolatedPropertyDefs\";\n\n/**\n * Available line caps types(`\"None\"`, `\"Round\"`, `\"Square\"`, `\"TriangleOut\"`, `\"TriangleIn\"`).\n * Default is `\"Round\"`.\n */\nexport type LineCaps = \"Square\" | \"Round\" | \"None\" | \"TriangleOut\" | \"TriangleIn\";\n\n/**\n * Available line dash types(`\"Round\"`, `\"Square\"`, `\"Diamond\"`).\n * Default is `\"Square\"`.\n */\nexport type LineDashes = \"Square\" | \"Round\" | \"Diamond\";\n\n/**\n * Standard kinds of geometry.\n */\nexport enum StandardGeometryKind {\n    /**\n     * Used in the enabledKinds/disabledKinds filter to match any kind.\n     */\n    All = \"_all_\",\n\n    /**\n     * Background geometry.\n     */\n    Background = \"background\",\n\n    /**\n     * Terrain geometry.\n     */\n    Terrain = \"terrain\",\n\n    /**\n     * Default value for the FillTechnique.\n     */\n    Area = \"area\",\n\n    /**\n     * Default value for all line techniques.\n     */\n    Line = \"line\",\n\n    /**\n     * Default value for the FillTechnique.\n     */\n    Water = \"water\",\n\n    /**\n     * Political borders.\n     */\n    Border = \"border\",\n\n    /**\n     * Basis for all roads.\n     */\n    Road = \"road\",\n\n    /**\n     * Default value for the ExtrudedPolygonTechnique.\n     */\n    Building = \"building\",\n\n    /**\n     * Default value for the TextTechnique, LineMarkerTechnique and the PoiTechnique.\n     */\n    Label = \"label\",\n\n    /**\n     * Anything that may show up last.\n     */\n    Detail = \"detail\"\n}\n\n/**\n * Geometry kind used for use by [[BaseTechniqueParams.kind]].\n *\n * The kind of geometry is used to group objects together,\n * allowing the group to be hidden or displayed.\n *\n * Any string can be used to specify the kind of the technique in a style in the theme file. Is is\n * suggested to specify multiple kinds for specific types of data. For a highway, the following list\n * of kinds is suggested:\n *\n *    [\"line\", \"road\", \"road:highway\"]\n *\n * If it is a tunnel for a highway:\n *\n *    [\"line\", \"road\", \"road:highway\", \"tunnel\", \"road:tunnel\", \"road:highway:tunnel\"]\n *\n * If specified in this way, specific types of data (here: highway roads) can be enabled and/or\n * disabled.\n */\nexport type GeometryKind = string | StandardGeometryKind;\nexport const GeometryKind = StandardGeometryKind;\n\n/**\n * Decorate property type with possible dynamic variants.\n */\nexport type DynamicProperty<T> = T | JsonExpr | InterpolatedPropertyDefinition<T>;\n\n/*\n * Description of length units inside a style. Supports literal values (interpreted as `m`), `m` and\n * `px`(i.e. `80`, `14px`, `0.6m`, etc.).\n */\nexport type StyleLength = string | number;\n\n/**\n * Description of colors inside a style. Supports hex values as well as CSS hex, rgb and hsl values\n * (i.e. `0xffffff`, `#f00fab`, `#aaa`, `rgb(255, 0 120)`, `hsl(360, 100%, 100%)`, etc.).\n */\nexport type StyleColor = string | number;\n\n/**\n * A set of [[GeometryKind]]s.\n */\nexport class GeometryKindSet extends Set {\n    /**\n     * Return `true` if the Set is a superset of the set 'subset'.\n     */\n    isSuperset(subset: Set<any>): boolean {\n        for (const elem of subset) {\n            if (!this.has(elem)) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    /**\n     * Return `true` if the Set intersects Set 'set'.\n     */\n    hasIntersection(set: any) {\n        for (const elem of set) {\n            if (this.has(elem)) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    /**\n     * Return `true` if the Set either intersects Set 'set' (if set is a Set), of has element 'set'\n     * if set is not a Set.\n     */\n    hasOrIntersects(set: any) {\n        if (set instanceof Set) {\n            return this.hasIntersection(set);\n        }\n        return this.has(set);\n    }\n\n    /**\n     * Return `true` if this set and the array of elements share at least a single element.\n     */\n    hasOrIntersectsArray(subset: any[]) {\n        for (const elem of subset) {\n            if (this.has(elem)) {\n                return true;\n            }\n        }\n        return false;\n    }\n}\n\n/**\n * Common attributes or all [[Technique]]s.\n */\nexport interface BaseTechniqueParams {\n    /**\n     * The name used to identify materials created from this technique.\n     */\n    id?: string;\n\n    /**\n     * The render order of the objects created using this technique.\n     *\n     * If not specified in style file, [[StyleSetEvaluator]] will assign monotonically increasing\n     * values according to style position in file.\n     */\n    renderOrder: number;\n\n    /**\n     * The category of this technique.\n     *\n     * The category is used in conjunction with [[Theme.priorities]]\n     * to assign render orders to the objects created by this [[Style]].\n     */\n    category?: string;\n\n    /**\n     * Optional. If `true`, no IDs will be saved for the geometry this technique creates.\n     */\n    transient?: boolean;\n\n    /**\n     * Distance to the camera (0.0 = camera position, 1.0 = farPlane) at which the object start\n     * fading out (opacity decreases).\n     */\n    fadeNear?: DynamicProperty<number>;\n\n    /**\n     * Distance to the camera (0.0 = camera position, 1.0 = farPlane) at which the object has zero\n     * opacity and stops fading out. An undefined value disables fading.\n     */\n    fadeFar?: DynamicProperty<number>;\n\n    /**\n     * Specified kind of geometry. One kind is set as default in the technique, and can be\n     * overridden in the style.\n     *\n     * @deprecated Use [[enabled]] with expressions based on `['dynamic-properties']` operator.\n     */\n    kind?: GeometryKind | GeometryKindSet;\n\n    /**\n     * Runtime filtering of techniques.\n     *\n     * Use with `['dynamic-properties']` operator for dynamic feature highlight, highlighig etc.\n     *\n     * @see Picking example - [[PickingExample]]\n     */\n    enabled?: DynamicProperty<boolean>;\n}\n\nexport enum TextureCoordinateType {\n    /**\n     * Texture coordinates are in tile space.\n     * SW of the tile will have (0,0) and NE will have (1,1).\n     */\n    TileSpace = \"tile-space\",\n    /**\n     * Texture coordinates are in equirectangular space.\n     * (u, v) = ( (longitude+180) / 360, (latitude+90) / 180).\n     */\n    EquirectangularSpace = \"equirectangular-space\"\n}\n\n/**\n * Standard technique parameters.\n */\nexport interface StandardTechniqueParams extends BaseTechniqueParams {\n    /**\n     * Color of the feature in hexadecimal or CSS-style notation, for example: `\"#e4e9ec\"`,\n     * `\"#fff\"`, `\"rgb(255, 0, 0)\"`, or `\"hsl(35, 11%, 88%)\"`.\n     * See https://threejs.org/docs/#api/en/materials/MeshStandardMaterial.color.\n     * @format color-hex\n     */\n    color?: DynamicProperty<StyleColor>;\n    /**\n     * A value of `true` creates a wireframe geometry. (May not be supported with all techniques).\n     * See https://threejs.org/docs/#api/en/materials/MeshStandardMaterial.wireframe.\n     */\n    wireframe?: boolean;\n    /**\n     * If `vertexColors` is `true`, every vertex has color information, which is interpolated\n     * between vertices.\n     * See https://threejs.org/docs/#api/en/materials/Material.vertexColors.\n     */\n    vertexColors?: boolean;\n    /**\n     * How rough the material appears. `0.0` means a smooth mirror reflection. `1.0` means fully\n     * diffuse. Default is `1.0`.\n     * See https://threejs.org/docs/#api/en/materials/MeshStandardMaterial.roughness.\n     */\n    roughness?: DynamicProperty<number>;\n    /**\n     * How much the material is like a metal. Nonmetallic materials such as wood or stone use `0.0`,\n     * metallic ones use `1.0`, with nothing (usually) in between. Default is `0.0`. A value between\n     * `0.0` and `1.0` can be used for a rusty metal look. If `metalnessMap` is also provided, both\n     * values are multiplied.\n     * See https://threejs.org/docs/#api/en/materials/MeshStandardMaterial.metalness.\n     */\n    metalness?: DynamicProperty<number>;\n    /**\n     * The material will not be rendered if the opacity is lower than this value.\n     * See https://threejs.org/docs/#api/en/materials/Material.alphaTest.\n     */\n    alphaTest?: DynamicProperty<number>;\n    /**\n     * Skip rendering clobbered pixels.\n     * See https://threejs.org/docs/#api/en/materials/Material.depthTest.\n     */\n    depthTest?: boolean;\n    /**\n     * Set to 'true' if line should appear transparent. Rendering transparent lines may come with a\n     * slight performance impact.\n     * See https://threejs.org/docs/#api/en/materials/Material.transparent.\n     */\n    transparent?: boolean;\n    /**\n     * For transparent lines, set a value between 0.0 for totally transparent, to 1.0 for totally\n     * opaque.\n     * See https://threejs.org/docs/#api/en/materials/Material.opacity.\n     */\n    opacity?: DynamicProperty<number>;\n    /**\n     * Emissive (light) color of the material, essentially a solid color unaffected by other\n     * lighting. Default is black.\n     * See https://threejs.org/docs/#api/en/materials/MeshStandardMaterial.emissive.\n     * @format color-hex\n     */\n    emissive?: DynamicProperty<StyleColor>;\n    /**\n     * Intensity of the emissive light. Modulates the emissive color. Default is `1`.\n     * See https://threejs.org/docs/#api/en/materials/MeshStandardMaterial.emissiveIntensity.\n     */\n    emissiveIntensity?: DynamicProperty<number>;\n    /**\n     * The index of refraction (IOR) of air (approximately 1) divided by the index of refraction of\n     * the material. It is used with environment mapping modes `THREE.CubeRefractionMapping` and\n     * `THREE.EquirectangularRefractionMapping`. The refraction ratio should not exceed `1`. Default\n     *  is `0.98`.\n     * See https://threejs.org/docs/#api/en/materials/MeshStandardMaterial.refractionRatio.\n     */\n    refractionRatio?: DynamicProperty<number>;\n\n    /**\n     * Whether and how texture coordinates should be generated. No texture coordinates are\n     * generated if `undefined`.\n     * Should be set if any texture assigned (e.g. `map`, `normalMap`, ...).\n     */\n    textureCoordinateType?: TextureCoordinateType;\n\n    /*\n     * URL or texture buffer that should be used as color map. See:\n     * https://threejs.org/docs/#api/en/materials/MeshStandardMaterial.map\n     */\n    map?: string | TextureBuffer;\n    mapProperties?: TextureProperties;\n\n    /**\n     * URL or texture buffer that should be used as normal map. See:\n     * https://threejs.org/docs/#api/en/materials/MeshStandardMaterial.normalMap\n     */\n    normalMap?: string | TextureBuffer;\n    normalMapType?: number;\n    normalMapProperties?: TextureProperties;\n\n    /**\n     * URL or texture buffer that should be used as displacement map. See:\n     * https://threejs.org/docs/#api/en/materials/MeshStandardMaterial.displacementMap\n     */\n    displacementMap?: string | TextureBuffer;\n    displacementMapProperties?: TextureProperties;\n\n    /**\n     * URL or texture buffer that should be used as roughness map. See:\n     * https://threejs.org/docs/#api/en/materials/MeshStandardMaterial.roughnessMap\n     */\n    roughnessMap?: string | TextureBuffer;\n    roughnessMapProperties?: TextureProperties;\n\n    /**\n     * URL or texture buffer that should be used as emissive map. See:\n     * https://threejs.org/docs/#api/en/materials/MeshStandardMaterial.emissiveMap\n     */\n    emissiveMap?: string | TextureBuffer;\n    emissiveMapProperties?: TextureProperties;\n\n    /**\n     * URL or texture buffer that should be used as bump map. See:\n     * https://threejs.org/docs/#api/en/materials/MeshStandardMaterial.bumpMap\n     */\n    bumpMap?: string | TextureBuffer;\n    bumpMapProperties?: TextureProperties;\n\n    /**\n     * URL or texture buffer that should be used as metalness map. See:\n     * https://threejs.org/docs/#api/en/materials/MeshStandardMaterial.metalnessMap\n     */\n    metalnessMap?: string | TextureBuffer;\n    metalnessMapProperties?: TextureProperties;\n\n    /**\n     * URL or texture buffer that should be used as alpha map. See:\n     * https://threejs.org/docs/#api/en/materials/MeshStandardMaterial.alphaMap\n     */\n    alphaMap?: string | TextureBuffer;\n    alphaMapProperties?: TextureProperties;\n}\n\n/**\n * Possible parameters of [[PointTechnique]].\n */\nexport interface PointTechniqueParams extends BaseTechniqueParams {\n    /**\n     * Color of a point in hexadecimal or CSS-style notation, for example: `\"#e4e9ec\"`, `\"#fff\"`,\n     * `\"rgb(255, 0, 0)\"`, or `\"hsl(35, 11%, 88%)\"`.\n     * @format color-hex\n     */\n    color?: DynamicProperty<StyleColor>;\n    /**\n     * URL of a texture image to be loaded.\n     */\n    texture?: string;\n    /**\n     * Set to `true` if line should appear transparent. Rendering transparent lines may come with a\n     * slight performance impact.\n     */\n    transparent?: boolean;\n    /**\n     * For transparent lines, set a value between 0.0 for totally transparent, to 1.0 for totally\n     * opaque.\n     */\n    opacity?: DynamicProperty<number>;\n    /**\n     * Size of point in pixels.\n     */\n    size?: number;\n    /**\n     * Whether to enable picking on these points.\n     */\n    enablePicking?: boolean;\n}\n\n/**\n * Define the stacking option. Enum values for theme file are in \"kebab-case\".\n */\nexport enum PoiStackMode {\n    /**\n     * Show in a stack.\n     */\n    Show = \"show-in-stack\",\n    /**\n     * Do not show in a stack.\n     */\n    Hide = \"hide-in-stack\",\n    /**\n     * Show category parent in the stack.\n     */\n    ShowParent = \"show-parent\"\n}\n\n/**\n * Technique that describes icons with labels. Used in [[PoiTechnique]] and [[LineMarkerTechnique]]\n * (for road shields).\n */\nexport interface MarkerTechniqueParams extends BaseTechniqueParams {\n    /**\n     * Text to be displayed for feature.\n     *\n     * Defaults to first defined:\n     *  - feature property `label` if present in technique (depreacted)\n     *  - `[\"get\", \"name:short\"]` is `useAbbreviation` is true\n     *  - `[\"get\", \"iso_code\"]` is `useIsoCode` is true\n     *  - `[\"get\", \"name:$LANGUAGE\"]` for each specified language\n     *  - `[\"get\", \"name\"]`\n     *\n     * See [[ExtendedTileInfo.getFeatureText]]\n     */\n    text?: string;\n\n    /**\n     * Field name of object containing the text to be rendered.\n     *\n     * @deprecated, Use `[\"get\", \"FIELD\"]`.\n     */\n    label?: string;\n    /**\n     * If `true`, the abbreviation (field `name:short`) of the elements is used as text.\n     *\n     * @deprecated Use proper expression with [`get`, `name:short`] for this purpose.\n     */\n    useAbbreviation?: boolean;\n    /**\n     * If `true`, the iso code (field 'iso_code') of the elements is used as text.\n     * The `iso_code` field contains the ISO 3166-1 2-letter country code.\n     *\n     * @deprecated Use proper expression with [`get`, `iso_code`] for this purpose.\n     */\n    useIsoCode?: boolean;\n    /**\n     * Priority of marker, defaults to `0`. Markers with highest priority get placed first.\n     */\n    priority?: DynamicProperty<number>;\n    /**\n     * Minimum zoomLevel at which to display the label text. No default.\n     */\n    textMinZoomLevel?: number;\n    /**\n     * Maximum zoomLevel at which to display the label text. No default.\n     */\n    textMaxZoomLevel?: number;\n    /**\n     * Minimum zoomLevel at which to display the label icon. No default.\n     */\n    iconMinZoomLevel?: number;\n    /**\n     * Maximum zoomLevel at which to display the label icon. No default.\n     */\n    iconMaxZoomLevel?: number;\n    /**\n     * Scaling factor of icon. Defaults to 0.5, reducing the size ot 50% in the distance.\n     */\n    distanceScale?: number;\n    /**\n     * If `false`, text may overlap markers.\n     * @default `false`\n     */\n    textMayOverlap?: boolean;\n    /**\n     * If `false`, the icon may overlap text and other icons of lower priority. If not defined, the\n     * property value from `textMayOverlap` will be used.\n     * @default `false`\n     */\n    iconMayOverlap?: boolean;\n    /**\n     * If `false`, text will not reserve screen space, other markers will be able to overlap.\n     * @default `true`\n     */\n    textReserveSpace?: boolean;\n    /**\n     * If `false`, icon will not reserve screen space, other markers will be able to overlap. If not\n     * defined, the property value from `iconReserveSpace` will be used.\n     * @default `true`\n     */\n    iconReserveSpace?: boolean;\n    /**\n     * If `false`, text will not be rendered during animations. Defaults to `true`.\n     */\n    renderTextDuringMovements?: boolean;\n    /**\n     * If `true`, the label will always be rendered on top. If overlapping with other labels with\n     * this flag set, the render order is undefined.\n     * @default `false`\n     */\n    alwaysOnTop?: boolean;\n    /**\n     * If `true`, icon will appear even if the text part is blocked by other labels. Defaults to\n     * `false`.\n     */\n    textIsOptional?: boolean;\n    /**\n     * Should be displayed on map or not. Defaults to `true`.\n     */\n    showOnMap?: boolean;\n    /**\n     * Specify stack mode. Defaults to `ShowInStack`.\n     */\n    stackMode?: PoiStackMode;\n    /**\n     * Minimal distance between markers in screen pixels.\n     */\n    minDistance?: number;\n    /**\n     * If true, the text will appear even if the icon cannot be rendered because of missing icon\n     * graphics. Defaults to `true`.\n     */\n    iconIsOptional?: boolean;\n    /**\n     * Fading time for labels in seconds.\n     */\n    textFadeTime?: number;\n    /**\n     * Fading time for icons in seconds.\n     */\n    iconFadeTime?: number;\n    /**\n     * Horizontal offset (to the right) in screen pixels.\n     */\n    xOffset?: DynamicProperty<number>;\n    /**\n     * Vertical offset (up) in screen pixels.\n     */\n    yOffset?: DynamicProperty<number>;\n    /**\n     * Horizontal offset (to the right) in screen pixels.\n     */\n    iconXOffset?: DynamicProperty<number>;\n    /**\n     * Vertical offset (up) in screen pixels.\n     */\n    iconYOffset?: DynamicProperty<number>;\n    /**\n     * Scaling factor of icon.\n     */\n    iconScale?: number;\n    /**\n     * Vertical height in pixels, controls vertical scaling. Overrides `iconScale`.\n     */\n    screenHeight?: DynamicProperty<number>;\n    /**\n     * Horizontal height in pixels, controls horizontal scaling. Overrides `iconScale`.\n     */\n    screenWidth?: DynamicProperty<number>;\n    /**\n     * Name of the POI table which should be used for this POI.\n     */\n    poiTable?: string;\n    /**\n     * Fixed name to identify POI options in the POI table. If `poiName` has a value, this value\n     * supercedes any value read from the field referenced in `poiNameField`.\n     */\n    poiName?: string;\n    /**\n     * Name of the field to evaluate to get the name of the POI options in the POI table.\n     */\n    poiNameField?: string;\n    /**\n     * Name of [[ImageTexture]] definition to use.\n     */\n    imageTexture?: string;\n    /**\n     * Field name to extract imageTexture content from.\n     */\n    imageTextureField?: string;\n    /**\n     * Prefix for `imageTexture` if `imageTextureField` is used.\n     */\n    imageTexturePrefix?: string;\n    /**\n     * Postfix for `imageTexture` if `imageTextureField` is used.\n     */\n    imageTexturePostfix?: string;\n    /**\n     * Name of the text style.\n     */\n    style?: string;\n    /**\n     * Name of the preferred [[Font]] to be used when rendering.\n     */\n    fontName?: string;\n    /**\n     * Size of the text (pixels).\n     */\n    size?: DynamicProperty<number>;\n    /**\n     * Size of the text background (pixels).\n     */\n    backgroundSize?: DynamicProperty<number>;\n    /**\n     * Glyph style to apply for the currently active [[Font]].\n     */\n    fontStyle?: \"Regular\" | \"Bold\" | \"Italic\" | \"BoldItalic\";\n    /**\n     * Glyph variant to apply for the currently active [[Font]].\n     */\n    fontVariant?: \"Regular\" | \"AllCaps\" | \"SmallCaps\";\n    /**\n     * Glyph local rotation (radians).\n     */\n    rotation?: number;\n    /**\n     * Text color in hexadecimal or CSS-style notation, for example: `\"#e4e9ec\"`, `\"#fff\"`,\n     * `\"rgb(255, 0, 0)\"`, or `\"hsl(35, 11%, 88%)\"`.\n     * @format color-hex\n     */\n    color?: DynamicProperty<StyleColor>;\n    /**\n     * Text background color in hexadecimal or CSS-style notation, for example: `\"#e4e9ec\"`,\n     * `\"#fff\"`, `\"rgb(255, 0, 0)\"`, or `\"hsl(35, 11%, 88%)\"`.\n     * @format color-hex\n     */\n    backgroundColor?: DynamicProperty<StyleColor>;\n    /**\n     * For transparent text, set a value between 0.0 for totally transparent, to 1.0 for totally\n     * opaque.\n     */\n    opacity?: DynamicProperty<number>;\n    /**\n     * Background text opacity value.\n     */\n    backgroundOpacity?: DynamicProperty<number>;\n    /**\n     * Inter-glyph spacing (pixels). Scaled by `size`.\n     */\n    tracking?: DynamicProperty<number>;\n    /**\n     * Inter-line spacing (pixels). Scaled by `size`.\n     */\n    leading?: DynamicProperty<number>;\n    /**\n     * Maximum number of lines for this label.\n     */\n    maxLines?: DynamicProperty<number>;\n    /**\n     * Maximum line width (pixels).\n     */\n    lineWidth?: DynamicProperty<number>;\n    /**\n     * [[TextCanvas]] rotation (radians).\n     */\n    canvasRotation?: DynamicProperty<number>;\n    /**\n     * Line typesetting rotation (radians).\n     */\n    lineRotation?: DynamicProperty<number>;\n    /**\n     * Wrapping (line-breaking) mode.\n     */\n    wrappingMode?: DynamicProperty<\"None\" | \"Character\" | \"Word\">;\n    /**\n     * Text position regarding the baseline.\n     */\n    hAlignment?: DynamicProperty<\"Left\" | \"Center\" | \"Right\">;\n    /**\n     * Text position inside a line.\n     */\n    vAlignment?: DynamicProperty<\"Above\" | \"Center\" | \"Below\">;\n}\n\nexport interface LineTechniqueParams extends BaseTechniqueParams {\n    /**\n     * Color of a line in hexadecimal or CSS-style notation, for example: `\"#e4e9ec\"`, `\"#fff\"`,\n     * `\"rgb(255, 0, 0)\"`, or `\"hsl(35, 11%, 88%)\"`.\n     * @format color-hex\n     */\n    color: DynamicProperty<StyleColor>;\n    /**\n     * Set to true if line should appear transparent. Rendering transparent lines may come with a\n     * slight performance impact.\n     */\n    transparent?: boolean;\n    /**\n     * For transparent lines, set a value between 0.0 for totally transparent, to 1.0 for totally\n     * opaque.\n     */\n    opacity?: DynamicProperty<number>;\n    /**\n     * Width of line in pixels. WebGL implementations will normally render all lines with 1 pixel\n     * width, and ignore this value.\n     */\n    lineWidth: DynamicProperty<number>;\n}\n\n/**\n * Declares a geometry as a segment.\n */\nexport interface SegmentsTechniqueParams extends BaseTechniqueParams {\n    /**\n     * Color of segments in a hexadecimal notation, for example: `\"#e4e9ec\"` or `\"#fff\"`.\n     * @format color-hex\n     */\n    color: DynamicProperty<StyleColor>;\n    /**\n     * Set to `true` if line should appear transparent. Rendering transparent lines may come with a\n     * slight performance impact.\n     */\n    transparent?: boolean;\n    /**\n     * For transparent lines, set a value between `0.0` for fully transparent, to `1.0` for fully\n     * opaque.\n     */\n    opacity?: DynamicProperty<number>;\n    /**\n     * Width of a line in meters.\n     */\n    lineWidth: DynamicProperty<number>;\n}\n\n/**\n * Declares a a geometry as a polygon.\n */\nexport interface PolygonalTechniqueParams {\n    /**\n     * Whether to use polygon offset. Default is false. This corresponds to the\n     * GL_POLYGON_OFFSET_FILL WebGL feature.\n     *\n     * PolygonOffset is used to raise the geometry towards the geometry (for depth calculation\n     * only). Default is false.\n     *\n     * See here: https://sites.google.com/site/threejstuts/home/polygon_offset\n     *\n     * To activate polygonOffset these values have to be set to pull the line \"forwards\":\n     *\n     * transparent: true\n     *\n     * polygonOffset: true\n     *\n     * polygonOffsetFactor : -1.0, (as an example, see link above)\n     *\n     * polygonOffsetUnits: -1 (as an example, see link above)\n     */\n    polygonOffset?: boolean;\n\n    /**\n     * Sets the polygon offset factor. Default is 0.\n     */\n    polygonOffsetFactor?: DynamicProperty<number>;\n\n    /**\n     * Sets the polygon offset units. Default is 0.\n     */\n    polygonOffsetUnits?: DynamicProperty<number>;\n\n    /**\n     * Sets the polygon outline color.\n     * @format color-hex\n     */\n    lineColor?: DynamicProperty<StyleColor>;\n\n    /**\n     * Distance to the camera (0.0 = nearPlane, 1.0 = farPlane) at which the object edges start\n     * fading out.\n     */\n    lineFadeNear?: DynamicProperty<number>;\n\n    /**\n     * Distance to the camera (0.0 = nearPlane, 1.0 = farPlane) at which the object edges become\n     * transparent. A value of <= 0.0 disables fading.\n     */\n    lineFadeFar?: DynamicProperty<number>;\n}\n\n/**\n * Declares a a geometry as a basic extruded line.\n */\nexport interface BasicExtrudedLineTechniqueParams\n    extends BaseTechniqueParams,\n        PolygonalTechniqueParams {\n    /**\n     * A value determining the shading technique. Valid values are \"Basic\" and \"Standard\". Default\n     * is \"Basic\".\n     *\n     * `\"basic\"`   : Simple shading, faster to render. Only simple color and opacity are effective.\n     * `\"standard\"`: Elaborate shading, with metalness, and roughness.\n     *\n     * TODO: is this TechniqueParams or Style prop ?\n     */\n    shading?: \"basic\";\n    /**\n     * Color of a line in hexadecimal or CSS-style notation, for example: `\"#e4e9ec\"`, `\"#fff\"`,\n     * `\"rgb(255, 0, 0)\"`, or `\"hsl(35, 11%, 88%)\"`.\n     * @format color-hex\n     */\n    color: DynamicProperty<StyleColor>;\n    /**\n     * Set to `true` if line should appear transparent. Rendering transparent lines may come with a\n     * slight performance impact.\n     */\n    transparent?: boolean;\n    /**\n     * For transparent lines, set a value between 0.0 for totally transparent, to 1.0 for totally\n     * opaque.\n     */\n    opacity?: DynamicProperty<number>;\n    /**\n     * Width of line in meters for different zoom levels.\n     */\n    lineWidth: DynamicProperty<number>;\n    /**\n     * A value of `true` creates a wireframe geometry. (May not be supported with all techniques).\n     */\n    wireframe?: boolean;\n    /**\n     * Style of both end caps. Possible values: `\"None\"`, `\"Circle\"`. A value of undefined maps to\n     * `\"Circle\"`.\n     */\n    caps?: \"None\" | \"Circle\";\n}\n\n/**\n * Declares a a geometry as a standard extruded line.\n */\nexport interface StandardExtrudedLineTechniqueParams\n    extends StandardTechniqueParams,\n        PolygonalTechniqueParams {\n    /**\n     * A value determining the shading technique. Valid values are `\"basic\"` and `\"standard\"`.\n     * Default is `\"basic\"`.\n     *\n     * `\"basic\"` : Simple shading, faster to render. Only simple color and opacity are effective.\n     * `\"standard\"` : Elaborate shading, with metalness, and roughness.\n     */\n    shading: \"standard\";\n    /**\n     * Width of a line in meters for different zoom levels.\n     */\n    lineWidth: DynamicProperty<number>;\n    /**\n     * Style of both end caps. Possible values: `\"None\"`, `\"Circle\"`. A value of undefined maps to\n     * `\"Circle\"`.\n     */\n    caps?: \"None\" | \"Circle\";\n}\n\n/**\n * Declares a a geometry as a solid line.\n */\nexport interface SolidLineTechniqueParams extends BaseTechniqueParams, PolygonalTechniqueParams {\n    /**\n     * Color of a line in hexadecimal or CSS-style notation, for example: `\"#e4e9ec\"`, `\"#fff\"`,\n     * `\"rgb(255, 0, 0)\"`, or `\"hsl(35, 11%, 88%)\"`.\n     * @format color-hex\n     */\n    color: DynamicProperty<StyleColor>;\n    /**\n     * Color of a line outline in hexadecimal or CSS-style notation,\n     * for example: `\"#e4e9ec\"`, `\"#fff\"`, `\"rgb(255, 0, 0)\"`, or `\"hsl(35, 11%, 88%)\"`.\n     * @format color-hex\n     */\n    outlineColor?: DynamicProperty<StyleColor>;\n    /**\n     * Set to `true` if line should appear transparent. Rendering transparent lines may come with a\n     * slight performance impact.\n     */\n    transparent?: boolean;\n    /**\n     * For transparent lines, set a value between `0.0` for fully transparent, to `1.0` for fully\n     * opaque.\n     */\n    opacity?: DynamicProperty<number>;\n    // TODO: Make pixel units default.\n    /**\n     * @deprecated Specify metrics units as part of the value instead.\n     * Units in which different size properties are specified. Either `Meter` (default) or `Pixel`.\n     */\n    metricUnit?: string;\n    /**\n     * Width of a line in `metricUnit` for different zoom levels.\n     */\n    lineWidth: DynamicProperty<StyleLength>;\n    /**\n     * Outline width of a line in `metricUnit`s for different zoom levels.\n     */\n    outlineWidth?: DynamicProperty<StyleLength>;\n    /**\n     * Clip the line outside the tile if `true`.\n     */\n    clipping?: boolean;\n    /**\n     * Describes line caps type (`\"None\"`, `\"Round\"`, `\"Square\"`, `\"TriangleOut\"`, `\"TriangleIn\"`).\n     * Default is `\"Round\"`.\n     */\n    caps?: LineCaps;\n    /**\n     * Color of secondary line geometry in hexadecimal or CSS-style notation, for example:\n     * `\"#e4e9ec\"`, `\"#fff\"`, `\"rgb(255, 0, 0)\"`, or `\"hsl(35, 11%, 88%)\"`.\n     * @format color-hex\n     */\n    secondaryColor?: DynamicProperty<StyleColor>;\n    /**\n     * Width of secondary line geometry in `metricUnit`s for different zoom levels.\n     */\n    secondaryWidth?: DynamicProperty<StyleLength>;\n    /**\n     * The render order of the secondary line geometry object created using this technique.\n     */\n    secondaryRenderOrder?: number;\n    /**\n     * Describes secondary line caps type (`\"None\"`, `\"Round\"`, `\"Square\"`, `\"TriangleOut\"`,\n     * `\"TriangleIn\"`).\n     * Default is `\"Round\"`.\n     */\n    secondaryCaps?: LineCaps;\n    /**\n     * Describes the category of the secondary geometry object created using this technique.\n     */\n    secondaryCategory?: number;\n    /**\n     * Describes the starting drawing position for the line (in the range [0...1]).\n     * Default is `0.0`.\n     */\n    drawRangeStart?: number;\n    /**\n     * Describes the ending drawing position for the line (in the range [0...1]).\n     * Default is `1.0`.\n     */\n    drawRangeEnd?: number;\n    /**\n     * Describes line dash type (`\"Round\"`, `\"Square\"`, `\"Diamond\"`).\n     * Default is `\"Square\"`.\n     */\n    dashes?: LineDashes;\n    /**\n     * Color of a line dashes in hexadecimal or CSS-style notation,\n     * for example: `\"#e4e9ec\"`, `\"#fff\"`, `\"rgb(255, 0, 0)\"`, or `\"hsl(35, 11%, 88%)\"`.\n     * @format color-hex\n     */\n    dashColor?: DynamicProperty<StyleColor>;\n    /**\n     * Length of a line in meters for different zoom levels.\n     */\n    dashSize?: DynamicProperty<StyleLength>;\n    /**\n     * Size of a gap between lines in meters for different zoom levels.\n     */\n    gapSize?: DynamicProperty<StyleLength>;\n    /**\n     * Size in world units how far to offset the line perpendicular to its direction.\n     */\n    offset?: number;\n}\n\n/**\n * Technique used to draw filled polygons.\n */\nexport interface FillTechniqueParams extends BaseTechniqueParams, PolygonalTechniqueParams {\n    /**\n     * Fill color in hexadecimal or CSS-style notation, for example: `\"#e4e9ec\"`, `\"#fff\"`,\n     * `\"rgb(255, 0, 0)\"`, or `\"hsl(35, 11%, 88%)\"`.\n     * @format color-hex\n     */\n    color?: DynamicProperty<StyleColor>;\n    /**\n     * Set to `true` if line should appear transparent. Rendering transparent lines may come with a\n     * slight performance impact.\n     */\n    transparent?: boolean;\n    /**\n     * For transparent lines, set a value between `0.0` for fully transparent, to `1.0` for fully\n     * opaque.\n     */\n    opacity?: DynamicProperty<number>;\n    /**\n     * A value of `true` creates a wireframe geometry. (May not be supported with all techniques).\n     */\n    wireframe?: boolean;\n    /**\n     * Width of the lines. Currently limited to the [0, 1] range.\n     */\n    lineWidth?: DynamicProperty<number>;\n}\n\n/**\n * Technique used to draw a geometry as an extruded polygon, for example extruded buildings.\n */\nexport interface ExtrudedPolygonTechniqueParams extends StandardTechniqueParams {\n    /**\n     * Renders the footprint lines if set to 'true'.\n     */\n    footprint?: boolean;\n    /**\n     * Set to a negative value to remove all the vertical lines, and to a value between 0.0 and 1.0\n     * to modulate the amount of vertical lines rendered.\n     */\n    maxSlope?: number;\n    /**\n     * Width of the lines. Currently limited to the [0, 1] range.\n     */\n    lineWidth: DynamicProperty<number>;\n    /**\n     * Fill color in hexadecimal or CSS-style notation, for example: `\"#e4e9ec\"`, `\"#fff\"`,\n     * `\"rgb(255, 0, 0)\"`, or `\"hsl(35, 11%, 88%)\"`.\n     * @format color-hex\n     */\n    lineColor?: DynamicProperty<StyleColor>;\n    /**\n     * Mix value between the lineColor(0.0) and the geometry's vertex colors(1.0).\n     */\n    lineColorMix?: number;\n\n    /**\n     * Distance to the camera (0.0 = nearPlane, 1.0 = farPlane) at which the object edges start\n     * fading out.\n     */\n    lineFadeNear?: DynamicProperty<number>;\n    /**\n     * Distance to the camera (0.0 = nearPlane, 1.0 = farPlane) at which the object edges become\n     * transparent. A value of <= 0.0 disables fading.\n     */\n    lineFadeFar?: DynamicProperty<number>;\n\n    /**\n     * Height above ground in world units of extruded polygon.\n     *\n     * Usually, unique per feature, so defaults to `[\"get\", \"height\"]`.\n     */\n    height?: number;\n\n    /**\n     * Height of \"floor\" of extruded polygon in world units of extruded polygon.\n     *\n     * Usually, unique per feature, so defaults to `[\"number\", [\"get\", \"min_height\"], 0]`.\n     */\n    floorHeight?: number;\n\n    /**\n     * In some data sources, for example Tilezen, building extrusion information might be missing.\n     * This attribute allows to define a default height of an extruded polygon in the theme.\n     *\n     * @deprecated use [[height]]\n     */\n    defaultHeight?: number;\n\n    /**\n     * Default color used if feature doesn't provide color attribute\n     * and [[MapEnv]] did not return it too.\n     * @format color-hex\n     */\n    defaultColor?: DynamicProperty<StyleColor>;\n\n    /**\n     * If `true`, the height of the extruded buildings will not be modified by the mercator\n     * projection distortion that happens around the poles.\n     *\n     * @default `false`\n     */\n    constantHeight?: boolean;\n\n    /**\n     * If `false`, wall geometry will not be added along the tile boundaries.\n     * @default `true`\n     */\n    boundaryWalls?: boolean;\n\n    /**\n     * Animate the extrusion of the buildings if set to `true`.\n     */\n    animateExtrusion?: DynamicProperty<boolean>;\n\n    /**\n     * Duration of the building's extrusion in milliseconds\n     */\n    animateExtrusionDuration?: number;\n\n    /**\n     * Control rendering of depth prepass before the actual geometry.\n     *\n     * Depth prepass is a method to render translucent meshes, hence only the visible front faces of\n     * a mesh are actually rendered, removing artifacts caused by blending with internal faces of\n     * the mesh. This method is used for drawing translucent buildings over map background.\n     *\n     * By default, each [[DataSource]] determines how/if enable the depth pre-pass. A value of\n     * `false` forcefully disables depth prepass.\n     */\n    enableDepthPrePass?: boolean;\n}\n\nexport interface ShaderTechniqueMaterialParameters {\n    [name: string]: any;\n}\n\n/**\n * Special technique for user-defined shaders. See\n * https://threejs.org/docs/#api/harp-materials/ShaderMaterial for details.\n */\nexport interface ShaderTechniqueParams extends BaseTechniqueParams {\n    /**\n     * Parameters for shader. See `THREE.ShaderMaterialParameters`.\n     */\n    params: ShaderTechniqueMaterialParameters;\n\n    /**\n     * Type of primitive for the shader technique. Valid values are \"point\" | \"line\" | \"segments\" |\n     * \"mesh\"\n     */\n    primitive: \"point\" | \"line\" | \"segments\" | \"mesh\";\n}\n\n/**\n * Technique used to render a terrain geometry with a texture.\n * When using this technique, the datasource will produce texture coordinates in\n * local tile space (i.e. [0,0] at south-west and [1,1] at north-east tile corner).\n */\nexport interface TerrainTechniqueParams extends StandardTechniqueParams {\n    /**\n     * Colors to be applied at different heights (as a results of a `displacementMap`).\n     */\n    heightBasedColors?: HeightBasedColors;\n\n    /**\n     * If `heightBasedColors` is defined, this value defines the interpolation method used to\n     * generate the height-based gradient texture (defaults to `Discrete`).\n     */\n    heightGradientInterpolation?: \"Discrete\" | \"Linear\" | \"Cubic\";\n\n    /**\n     * If `heightBasedColors` is defined, this value defines the width (in pixels) of the generated\n     * gradient texture (defaults to `128`).\n     */\n    heightGradientWidth?: number;\n}\n\n/**\n * Render geometry as a text.\n */\nexport interface TextTechniqueParams extends BaseTechniqueParams {\n    /**\n     * Text to be displayed for feature.\n     *\n     * Defaults to first defined:\n     *  - feature property `label` if present in technique (depreacted);\n     *  - `[\"get\", \"name:short\"]` is `useAbbreviation` is true;\n     *  - `[\"get\", \"iso_code\"]` is `useIsoCode` is true;\n     *  - `[\"get\", \"name:$LANGUAGE\"]` for each specified language;\n     *  - `[\"get\", \"name\"]`.\n     *\n     * See [[ExtendedTileInfo.getFeatureText]].\n     */\n    text?: string;\n\n    /**\n     * Field name of object containing the text to be rendered.\n     *\n     * @deprecated, Use `[\"get\", \"FIELD\"]`.\n     */\n    label?: string;\n    /**\n     * If `true`, the abbreviation (field `name:short`) of the elements is used as text.\n     *\n     * @deprecated Use proper expression with [`get`, `name:short`] for this purpose.\n     */\n    useAbbreviation?: boolean;\n    /**\n     * If `true`, the iso code (field 'iso_code') of the elements is used as text.\n     * The `iso_code` field contains the ISO 3166-1 2-letter country code.\n     *\n     * @deprecated Use proper expression with [`get`, `iso_code`] for this purpose.\n     */\n    useIsoCode?: boolean;\n    /**\n     * Priority of text, defaults to `0`. Elements with highest priority get placed first.\n     */\n    priority?: DynamicProperty<number>;\n    /**\n     * Minimal zoom level. If the current zoom level is smaller, the technique will not be used.\n     */\n    minZoomLevel?: number;\n    /**\n     * Maximum zoom level. If the current zoom level is larger, the technique will not be used.\n     */\n    maxZoomLevel?: number;\n    /**\n     * Scaling factor of the text. Defaults to 0.5, reducing the size ot 50% in the distance.\n     */\n    distanceScale?: number;\n    /**\n     * If `true`, icon is allowed to overlap other labels or icons of lower priority.\n     * @default `false`\n     */\n    mayOverlap?: boolean;\n    /**\n     * If `true`, element will reserve screen space, other markers of lower priority will not be\n     * able to overlap.\n     * @default `true`\n     */\n    reserveSpace?: boolean;\n    /**\n     * Fading time for labels in seconds.\n     */\n    textFadeTime?: number;\n    /**\n     * Horizontal offset (to the right) in screen pixels.\n     */\n    xOffset?: number;\n    /**\n     * Vertical offset (up) in screen pixels.\n     */\n    yOffset?: number;\n    /**\n     * Name of the text style.\n     */\n    style?: string;\n    /**\n     * Name of the preferred [[Font]] to be used when rendering.\n     */\n    fontName?: string;\n    /**\n     * Size of the text (pixels).\n     */\n    size?: DynamicProperty<number>;\n    /**\n     * Size of the text background (pixels).\n     */\n    backgroundSize?: DynamicProperty<number>;\n    /**\n     * Glyph style to apply for the currently active [[Font]].\n     */\n    fontStyle?: \"Regular\" | \"Bold\" | \"Italic\" | \"BoldItalic\";\n    /**\n     * Glyph variant to apply for the currently active [[Font]].\n     */\n    fontVariant?: \"Regular\" | \"AllCaps\" | \"SmallCaps\";\n    /**\n     * Glyph local rotation (radians).\n     */\n    rotation?: number;\n    /**\n     * Text color in hexadecimal or CSS-style notation, for example: `\"#e4e9ec\"`, `\"#fff\"`,\n     * `\"rgb(255, 0, 0)\"`, or `\"hsl(35, 11%, 88%)\"`.\n     * @format color-hex\n     */\n    color?: DynamicProperty<StyleColor>;\n    /**\n     * Text background color in hexadecimal or CSS-style notation, for example: `\"#e4e9ec\"`,\n     * `\"#fff\"`, `\"rgb(255, 0, 0)\"`, or `\"hsl(35, 11%, 88%)\"`.\n     * @format color-hex\n     */\n    backgroundColor?: DynamicProperty<StyleColor>;\n    /**\n     * For transparent text, set a value between 0.0 for totally transparent, to 1.0 for totally\n     * opaque.\n     */\n    opacity?: DynamicProperty<number>;\n    /**\n     * Background text opacity value.\n     */\n    backgroundOpacity?: DynamicProperty<number>;\n    /**\n     * Inter-glyph spacing (pixels). Scaled by `size`.\n     */\n    tracking?: DynamicProperty<number>;\n    /**\n     * Inter-line spacing (pixels). Scaled by `size`.\n     */\n    leading?: DynamicProperty<number>;\n    /**\n     * Maximum number of lines for this label.\n     */\n    maxLines?: DynamicProperty<number>;\n    /**\n     * Maximum line width (pixels).\n     */\n    lineWidth?: DynamicProperty<number>;\n    /**\n     * [[TextCanvas]] rotation (radians).\n     */\n    canvasRotation?: DynamicProperty<number>;\n    /**\n     * Line typesetting rotation (radians).\n     */\n    lineRotation?: DynamicProperty<number>;\n    /**\n     * Wrapping (line-breaking) mode.\n     */\n    wrappingMode?: DynamicProperty<\"None\" | \"Character\" | \"Word\">;\n    /**\n     * Text position regarding the baseline.\n     */\n    hAlignment?: DynamicProperty<\"Left\" | \"Center\" | \"Right\">;\n    /**\n     * Text position inside a line.\n     */\n    vAlignment?: DynamicProperty<\"Above\" | \"Center\" | \"Below\">;\n}\n\n/**\n * Buffer holding a texture.\n */\nexport interface TextureBuffer {\n    /**\n     * Buffer containing the (compressed) image or the raw texture data.\n     */\n    buffer: ArrayBuffer;\n\n    /**\n     * Mime type of the image or 'image/raw' in case of raw texture data.\n     */\n    type: string;\n\n    /**\n     * Properties for creating a three.js DataTexture\n     * (https://threejs.org/docs/#api/en/textures/DataTexture).\n     */\n    dataTextureProperties?: DataTextureProperties;\n}\n\n/**\n * Type guard to check if an object is an instance of `TextureBuffer`.\n */\nexport function isTextureBuffer(object: any): object is TextureBuffer {\n    return object && object.buffer && typeof object.type === \"string\";\n}\n\n/**\n * Properties of a DataTexture (https://threejs.org/docs/#api/en/textures/DataTexture).\n */\nexport interface DataTextureProperties {\n    width: number;\n    height: number;\n\n    format?: PixelFormat;\n    type?: TextureDataType;\n}\n\n/**\n * Properties of a Texture (https://threejs.org/docs/#api/en/textures/Texture).\n */\nexport interface TextureProperties {\n    /**\n     * Texture horizontal wrapping mode.\n     * See: https://threejs.org/docs/#api/en/textures/Texture.wrapS.\n     */\n    wrapS?: WrappingMode;\n\n    /**\n     * Texture vertical wrapping mode.\n     * See: https://threejs.org/docs/#api/en/textures/Texture.wrapT.\n     */\n    wrapT?: WrappingMode;\n\n    /**\n     * Texture magnification filter.\n     */\n    magFilter?: MagFilter;\n\n    /**\n     * Texture minification filter.\n     */\n    minFilter?: MinFilter;\n\n    /**\n     * Flip texture vertically.\n     * See: https://threejs.org/docs/#api/en/textures/Texture.flipY.\n     */\n    flipY?: boolean;\n\n    /**\n     * Texture horizontal repetition rate.\n     * See: https://threejs.org/docs/#api/en/textures/Texture.repeat.\n     */\n    repeatU?: number;\n\n    /**\n     * Texture vertical repetition rate.\n     * See: https://threejs.org/docs/#api/en/textures/Texture.repeat.\n     */\n    repeatV?: number;\n}\n\n/**\n * Interface containing the definition of different colors to be used at different heights with the\n * [[TerrainTechnique]].\n */\nexport interface HeightBasedColors {\n    heightArray: number[];\n    colorArray: string[];\n}\n\nexport type PixelFormat =\n    | \"Alpha\"\n    | \"RGB\"\n    | \"RGBA\"\n    | \"Luminance\"\n    | \"LuminanceAlpha\"\n    | \"RGBE\"\n    | \"Depth\"\n    | \"DepthStencil\"\n    | \"Red\";\n\nexport type TextureDataType =\n    | \"UnsignedByte\"\n    | \"Byte\"\n    | \"Short\"\n    | \"UnsignedShort\"\n    | \"Int\"\n    | \"UnsignedInt\"\n    | \"Float\"\n    | \"HalfFloat\";\n\n/**\n * Available texture wrapping modes.\n */\nexport type WrappingMode = \"clamp\" | \"repeat\" | \"mirror\";\n\n/**\n * Available texture magnification filters.\n */\nexport type MagFilter = \"nearest\" | \"linear\";\n\n/**\n * Available texture minification filters.\n */\nexport type MinFilter =\n    | \"nearest\"\n    | \"nearestMipMapNearest\"\n    | \"nearestMipMapLinear\"\n    | \"linear\"\n    | \"linearMipMapNearest\"\n    | \"linearMipMapLinear\";\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { Technique } from \"./Techniques\";\n\nexport enum AttrScope {\n    /**\n     * Attributes that affect generation of feature geometry and thus must be resolved at decoding\n     * time.\n     *\n     * They may have huge variancy as they are implemented as vertex attributes or embedded in\n     * generated meshes.\n     *\n     * These attributes are available only in decoding scope.\n     */\n    FeatureGeometry,\n\n    /**\n     * Attributes that are common to whole group of features drawn with this technique.\n     * These attributes affect generated geometry and  thus must be resolved at decoding time.\n     *\n     * They shouldn't have big variancy and evaluate to at least dozens of values as each\n     * combination of these attributes consitute new technique and material.\n     *\n     * These attributes are available in decoding and rendering scope.\n     */\n    TechniqueGeometry,\n\n    /**\n     * Attributes that are common to whole group of features drawn with this technique.\n     * Attributes that can be changed in resulting object/material from frame to frame. They are\n     * usually implemented as uniforms.\n     *\n     * These attributes may be available only at rendering scope.\n     */\n    TechniqueRendering\n}\n\n/**\n * Extract  property names from [[Technique]]-like interface (excluding `name`) as union of string\n * literals.\n *\n * TechniquePropName<Base\n *\n */\nexport type TechniquePropNames<T> = T extends { name: any } ? keyof Omit<T, \"name\"> : keyof T;\n\nexport type TechniquePropScopes<T> = {\n    [P in TechniquePropNames<T>]?: AttrScope;\n};\n\nexport interface TechniqueDescriptor<T> {\n    attrTransparencyColor?: string;\n    attrScopes: TechniquePropScopes<T>;\n}\n\ntype OneThatMatches<T, P> = T extends P ? T : never;\ntype TechniqueByName<K extends Technique[\"name\"]> = OneThatMatches<Technique, { name: K }>;\n\nexport type TechniqueDescriptorRegistry = {\n    [P in Technique[\"name\"]]?: TechniqueDescriptor<TechniqueByName<P>>;\n};\n\nexport function mergeTechniqueDescriptor<T>(\n    ...descriptors: Array<Partial<TechniqueDescriptor<T>>>\n): TechniqueDescriptor<T> {\n    const result: TechniqueDescriptor<T> = {\n        attrScopes: {}\n    };\n    for (const descriptor of descriptors) {\n        if (descriptor.attrTransparencyColor !== undefined) {\n            result.attrTransparencyColor = descriptor.attrTransparencyColor;\n        }\n        if (descriptor.attrScopes !== undefined) {\n            result.attrScopes = { ...result.attrScopes, ...descriptor.attrScopes };\n        }\n    }\n    return result;\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport {\n    equirectangularProjection,\n    mercatorProjection,\n    normalizedEquirectangularProjection,\n    OrientedBox3,\n    Projection,\n    sphereProjection,\n    Vector3Like,\n    webMercatorProjection\n} from \"@here/harp-geoutils\";\nimport { Env } from \"./Expr\";\nimport { AttrEvaluationContext, evaluateTechniqueAttr } from \"./TechniqueAttr\";\nimport {\n    IndexedTechnique,\n    isLineMarkerTechnique,\n    isPoiTechnique,\n    isTextTechnique,\n    Technique\n} from \"./Techniques\";\nimport { TileInfo } from \"./TileInfo\";\n\n/**\n * This object has geometry data in the form of geometries buffers ready to be used by WebGL.\n * These geometries are not `three.js` objects. They are pure data stored as `ArrayBuffer`s and\n * metadata describing these buffers.\n */\nexport interface DecodedTile {\n    techniques: IndexedTechnique[];\n    geometries: Geometry[];\n    pathGeometries?: PathGeometry[];\n    textPathGeometries?: TextPathGeometry[];\n    textGeometries?: TextGeometry[]; // ### deprecate\n    poiGeometries?: PoiGeometry[];\n    tileInfo?: TileInfo;\n    decodeTime?: number; // time used to decode (in ms)\n\n    /**\n     * The default bounding box in [[Tile]] is based on the geo box of the tile.\n     * For data-sources that have 3d data this is not sufficient so the data-source can provide a\n     * more accurate bounding box once the data is decoded.\n     */\n    boundingBox?: OrientedBox3;\n\n    /**\n     * Data sources not defining a bounding box may define alternatively a maximum geometry height\n     * in meters. The bounding box of the resulting tile will be extended to encompass this height.\n     */\n    maxGeometryHeight?: number;\n\n    /**\n     * Tile data Copyright holder identifiers.\n     *\n     * `id`s should be unique. It is recommended to build them from unique identifiers like\n     * registered domain names.\n     *\n     * @see [[CopyrightInfo]]\n     */\n    copyrightHolderIds?: string[];\n}\n\n/**\n * This object keeps the path of the geometry. Space of the path depends on the\n * use case, so could be either world or local tile space.\n */\nexport interface PathGeometry {\n    path: Vector3Like[];\n}\n\n/**\n * Attributes corresponding to some decoded geometry. It may be either a map\n * of multiple attributes or just a number with the geometry's feature id.\n */\nexport type AttributeMap = {} | number;\n\n/**\n * This object keeps textual data together with metadata to place it on the map.\n */\nexport interface TextPathGeometry {\n    path: number[];\n    pathLengthSqr: number;\n    text: string;\n    technique: number;\n    objInfos?: AttributeMap;\n}\n\n/**\n * Returns an array with the data type specified as parameter.\n *\n * @param attr specifies which type of data is being stored in the array\n */\nexport function getArrayConstructor(attr: BufferElementType) {\n    switch (attr) {\n        case \"float\":\n            return Float32Array;\n        case \"uint8\":\n            return Uint8Array;\n        case \"uint16\":\n            return Uint16Array;\n        case \"uint32\":\n            return Uint32Array;\n        case \"int8\":\n            return Int8Array;\n        case \"int16\":\n            return Int16Array;\n        case \"int32\":\n            return Int32Array;\n    }\n}\n\n/**\n * Structured clone compliant WebGL interleaved buffer with its metadata attached.\n */\nexport interface InterleavedBufferAttribute {\n    buffer: ArrayBufferLike;\n    stride: number;\n    type: BufferElementType;\n    attributes: Array<{\n        name: string;\n        itemSize: number;\n        offset: number;\n    }>;\n}\n\n/**\n * Geometry types supported by [[Geometry]] objects.\n */\nexport enum GeometryType {\n    Unspecified = 0,\n    Point,\n    Line,\n    SolidLine,\n    Text,\n    TextPath,\n    ExtrudedLine,\n    Polygon,\n    ExtrudedPolygon,\n    Object3D,\n    Other = 1000\n}\n\n/**\n * Structured clone compliant version of a `three.js` geometry object, consisting of buffers with\n * metadata for map features and objects for example roads, trees or parks.\n */\nexport interface Geometry {\n    type: GeometryType;\n    vertexAttributes?: BufferAttribute[];\n    interleavedVertexAttributes?: InterleavedBufferAttribute[];\n    index?: BufferAttribute;\n    edgeIndex?: BufferAttribute;\n    groups: Group[];\n    uuid?: string;\n\n    /**\n     * Optional sorted list of feature start indices. The indices point into the index attribute.\n     * Feature i starts at featureStarts[i] and ends at featureStarts[i+1]-1, except for the last\n     * feature, which ends at index[index.length-1].\n     */\n    featureStarts?: number[];\n\n    /**\n     * Optional array of objects. It can be used to pass user data from the geometry to the mesh.\n     */\n    objInfos?: AttributeMap[];\n\n    /**\n     * Optional [[Array]] of [[Attachment]]s.\n     */\n    attachments?: Attachment[];\n}\n\n/**\n * Attachments together with [[Geometry]] define the meshes and the objects\n * of a [[Scene]].\n */\nexport interface Attachment {\n    /**\n     * The unique uuid of this [[Attachment]].\n     */\n    uuid?: string;\n\n    /**\n     * The name of this [[Attachment]].\n     */\n    name?: string;\n\n    /**\n     * The index [[BufferAttribute]]. If not provided the index\n     * buffer of the [[Geometry]] will be used.\n     */\n    index?: BufferAttribute;\n\n    /**\n     * Optional additional buffer index used to create an edge object.\n     */\n    edgeIndex?: BufferAttribute;\n\n    /**\n     * The draw [[Group]]]s of this [[Attachment]].\n     */\n    groups: Group[];\n}\n\n/**\n * The data stored in Buffers' elements can be of the following elementary types: float, signed or\n * unsigned integers (8-bit, 16-bit or 32-bit long).\n */\nexport type BufferElementType =\n    | \"float\"\n    | \"uint8\"\n    | \"uint16\"\n    | \"uint32\"\n    | \"int8\"\n    | \"int16\"\n    | \"int32\";\n\n/**\n * Structured clone compliant WebGL buffer and its metadata.\n */\nexport interface BufferAttribute {\n    name: string;\n    buffer: ArrayBufferLike;\n    type: BufferElementType;\n    itemCount: number;\n    normalized?: boolean;\n}\n\n/**\n * Structured clone compliant version of a `three.js` geometry object with text to be rendered.\n * It is composed of buffers with metadata for text objects.\n */\nexport interface TextGeometry {\n    positions: BufferAttribute;\n    texts: number[];\n    technique?: number;\n    stringCatalog?: Array<string | undefined>;\n    objInfos?: AttributeMap[];\n}\n\n/**\n * Structured clone compliant version of a `three.js` geometry object with points of interest (POIs)\n * to be rendered. It is composed of buffers with metadata for POI objects.\n */\nexport interface PoiGeometry {\n    positions: BufferAttribute;\n    texts: number[];\n    /**\n     * Names of the image texture or the name of the POI as indices into the array `stringCatalog`.\n     */\n    imageTextures?: number[];\n    technique?: number;\n    stringCatalog?: Array<string | undefined>;\n    objInfos?: AttributeMap[];\n}\n\n/**\n * Structured clone compliant WebGL group object and its metadata.\n * Its purpose is to make working with groups of objects easier.\n */\nexport interface Group {\n    start: number;\n    count: number;\n    technique: number;\n\n    /**\n     * Contains tile offsets if its [[Geometry]] has been created.\n     */\n    createdOffsets?: number[];\n}\n\n/**\n * Returns the projection object specified in the parameter.\n *\n * @param projectionName string describing projection to be used\n */\nexport function getProjection(projectionName: string): Projection | never {\n    switch (projectionName) {\n        case \"mercator\":\n            return mercatorProjection;\n        case \"webMercator\":\n            return webMercatorProjection;\n        case \"sphere\":\n            return sphereProjection;\n        case \"normalizedEquirectangular\":\n            return normalizedEquirectangularProjection;\n        case \"equirectangular\":\n            return equirectangularProjection;\n        default:\n            throw new Error(`Unknown projection ${projectionName}`);\n    } // switch\n}\n\n/**\n * String with the projection's name.\n *\n * @param projection `Projection` object containing the name of the projection to retrieve\n */\nexport function getProjectionName(projection: Projection): string | never {\n    if (projection === mercatorProjection) {\n        return \"mercator\";\n    } else if (projection === webMercatorProjection) {\n        return \"webMercator\";\n    } else if (projection === sphereProjection) {\n        return \"sphere\";\n    } else if (projection === normalizedEquirectangularProjection) {\n        return \"normalizedEquirectangular\";\n    } else if (projection === equirectangularProjection) {\n        return \"equirectangular\";\n    }\n    throw new Error(\"Unknown projection\");\n}\n\n/**\n * @returns Feature id from the provided attribute map.\n */\nexport function getFeatureId(attributeMap: AttributeMap | undefined): number {\n    if (attributeMap === undefined) {\n        return 0;\n    }\n\n    if (typeof attributeMap === \"number\") {\n        return attributeMap;\n    }\n\n    if (attributeMap.hasOwnProperty(\"$id\")) {\n        return (attributeMap as any).$id as number;\n    }\n\n    return 0;\n}\n\n/**\n * Determine the name of (OMV) feature. It implements the special handling required\n * to determine the text content of a feature from its tags, which are passed in as the `env`.\n *\n * @param env Environment containing the tags from the (OMV) feature.\n * @param useAbbreviation `true` to use the abbreviation if available.\n * @param useIsoCode `true` to use the tag \"iso_code\".\n * @param languages List of languages to use, for example: Specify \"en\" to use the tag \"name_en\"\n *                  as the text of the string. Order reflects priority.\n */\nexport function getFeatureName(\n    env: Env,\n    useAbbreviation?: boolean,\n    useIsoCode?: boolean,\n    languages?: string[]\n): string | undefined {\n    let name;\n    if (useAbbreviation) {\n        const abbreviation = env.lookup(`name:short`);\n        if (typeof abbreviation === \"string\" && abbreviation.length > 0) {\n            return abbreviation;\n        }\n    }\n    if (useIsoCode) {\n        const isoCode = env.lookup(`iso_code`);\n        if (typeof isoCode === \"string\" && isoCode.length > 0) {\n            return isoCode;\n        }\n    }\n    if (languages !== undefined) {\n        for (const lang of languages) {\n            name = env.lookup(`name:${lang}`) || env.lookup(`name_${lang}`);\n            if (typeof name === \"string\" && name.length > 0) {\n                return name;\n            }\n        }\n    }\n    name = env.lookup(\"name\");\n    if (typeof name === \"string\") {\n        return name;\n    }\n    return undefined;\n}\n\n/**\n * Determine the text string of the map feature. It implements the special handling required\n * to determine the text content of a feature from its tags, which are passed in as the `env`.\n *\n * @param feature Feature, including properties from the (OMV) feature.\n * @param technique technique defining how text should be created from feature\n * @param languages List of languages to use, for example: Specify \"en\" to use the tag \"name_en\"\n *                  as the text of the string. Order reflects priority.\n */\nexport function getFeatureText(\n    context: Env | AttrEvaluationContext,\n    technique: Technique,\n    languages?: string[]\n): string | undefined {\n    let useAbbreviation: boolean | undefined;\n    let useIsoCode: boolean | undefined;\n    const env = context instanceof Env ? context : context.env;\n    if (\n        isTextTechnique(technique) ||\n        isPoiTechnique(technique) ||\n        isLineMarkerTechnique(technique)\n    ) {\n        if (technique.text !== undefined) {\n            return evaluateTechniqueAttr(context, technique.text);\n        }\n        // tslint:disable-next-line: deprecation\n        if (technique.label !== undefined) {\n            // tslint:disable-next-line: deprecation\n            const attributeName = evaluateTechniqueAttr(context, technique.label);\n            if (typeof attributeName !== \"string\") {\n                return undefined;\n            }\n            const name = env.lookup(attributeName);\n            return typeof name === \"string\" ? name : undefined;\n        }\n        // tslint:disable-next-line: deprecation\n        useAbbreviation = technique.useAbbreviation;\n        // tslint:disable-next-line: deprecation\n        useIsoCode = technique.useIsoCode;\n    }\n\n    return getFeatureName(env, useAbbreviation, useIsoCode, languages);\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { Theme } from \"@here/harp-datasource-protocol\";\nimport { TileKey, TilingScheme, webMercatorTilingScheme } from \"@here/harp-geoutils\";\nimport { DataSource } from \"./DataSource\";\nimport { TileGeometryCreator } from \"./geometry/TileGeometryCreator\";\nimport { Tile } from \"./Tile\";\n\n/**\n * Provides background geometry for all tiles.\n */\nexport class BackgroundDataSource extends DataSource {\n    private static readonly DEFAULT_TILING_SCHEME = webMercatorTilingScheme;\n    private m_tilingScheme: TilingScheme = BackgroundDataSource.DEFAULT_TILING_SCHEME;\n\n    constructor() {\n        super({ name: \"background\" });\n        this.cacheable = true;\n        this.addGroundPlane = true;\n    }\n\n    updateStorageLevelOffset() {\n        let storageLevelOffset: number | undefined;\n\n        this.mapView.dataSources.forEach(ds => {\n            if (ds === this) {\n                return;\n            }\n            const tilingScheme = ds.getTilingScheme();\n            if (tilingScheme === this.m_tilingScheme) {\n                storageLevelOffset =\n                    storageLevelOffset === undefined\n                        ? ds.storageLevelOffset\n                        : Math.max(storageLevelOffset, ds.storageLevelOffset);\n            }\n        });\n\n        if (storageLevelOffset === undefined) {\n            storageLevelOffset = 0;\n        }\n\n        if (storageLevelOffset !== this.storageLevelOffset) {\n            this.storageLevelOffset = storageLevelOffset;\n            this.mapView.clearTileCache(this.name);\n        }\n    }\n\n    /** @override */\n    setTheme(theme: Theme, languages?: string[]) {\n        this.mapView.clearTileCache(this.name);\n    }\n\n    setTilingScheme(tilingScheme?: TilingScheme) {\n        const newScheme = tilingScheme || BackgroundDataSource.DEFAULT_TILING_SCHEME;\n        if (newScheme === this.m_tilingScheme) {\n            return;\n        }\n\n        this.m_tilingScheme = newScheme;\n        this.updateStorageLevelOffset();\n        this.mapView.clearTileCache(this.name);\n    }\n\n    /** @override */\n    getTilingScheme(): TilingScheme {\n        return this.m_tilingScheme;\n    }\n\n    /** @override */\n    getTile(tileKey: TileKey): Tile | undefined {\n        const tile = new Tile(this, tileKey);\n        tile.forceHasGeometry(true);\n        tile.removeDecodedTile(); // Skip geometry loading.\n        TileGeometryCreator.instance.addGroundPlane(tile, Number.MIN_SAFE_INTEGER);\n\n        return tile;\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { BufferAttribute, BufferGeometry, Vector3 } from \"three\";\n\nconst tmpVectorA = new Vector3();\nconst tmpVectorB = new Vector3();\nconst tmpVectorC = new Vector3();\n\n/**\n * The [[SubdivisionModifier]] subdivides triangle mesh geometries.\n */\nexport abstract class SubdivisionModifier {\n    /**\n     * Constructs a new [[SubdivisionModifier]].\n     */\n    constructor() {\n        // nothing to do\n    }\n\n    /**\n     * Subdivides the faces of the given [[THREE.BufferGeometry]].\n     *\n     * This method modifies (in-place) the vertices and the faces of the geometry.\n     * Please note that only the vertex position and their UV coordinates are subdivided.\n     * Normals, vertex colors and other attributes are left unmodified.\n     *\n     * @param geometry The [[THREE.BufferGeometry]] to subdivide.\n     */\n    modify(geometry: BufferGeometry): BufferGeometry {\n        const positionAttr = geometry.getAttribute(\"position\") as BufferAttribute;\n        const position = Array.from(positionAttr.array);\n\n        const uvAttr = geometry.getAttribute(\"uv\") as BufferAttribute;\n        const uv = uvAttr !== undefined ? Array.from(uvAttr.array) : undefined;\n\n        const edgeAttr = geometry.getAttribute(\"edge\") as BufferAttribute;\n        const edge = edgeAttr !== undefined ? Array.from(edgeAttr.array) : undefined;\n\n        const wallAttr = geometry.getAttribute(\"wall\") as BufferAttribute;\n        const wall = wallAttr !== undefined ? Array.from(wallAttr.array) : undefined;\n\n        const indexAttr = geometry.getIndex() as BufferAttribute;\n        const indices = Array.from(indexAttr.array);\n\n        // A cache containing the indices of the vertices added\n        // when subdiving the faces of the geometry.\n        const cache = new Map<string, number>();\n\n        /**\n         * Returns the index of the vertex positioned in the middle of the given vertices.\n         */\n        function middleVertex(i: number, j: number): number {\n            // Build a unique `key` for the pair of indices `(i, j)`.\n            const key = `${Math.min(i, j)}_${Math.max(i, j)}`;\n\n            const h = cache.get(key);\n\n            if (h !== undefined) {\n                // Nothing to do, a vertex in the middle of (i, j) was already created.\n                return h;\n            }\n\n            // The position of the new vertex.\n            tmpVectorA.set(position[i * 3], position[i * 3 + 1], position[i * 3 + 2]);\n            tmpVectorB.set(position[j * 3], position[j * 3 + 1], position[j * 3 + 2]);\n            tmpVectorC.lerpVectors(tmpVectorA, tmpVectorB, 0.5);\n\n            // The index of the new vertex.\n            const index = position.length / 3;\n            position.push(...tmpVectorC.toArray());\n            // Cache the position of the new vertex.\n            cache.set(key, index);\n\n            // The uvs of the new vertex.\n            if (uv !== undefined) {\n                tmpVectorA.set(uv[i * 2], uv[i * 2 + 1], 0);\n                tmpVectorB.set(uv[j * 2], uv[j * 2 + 1], 0);\n                tmpVectorC.lerpVectors(tmpVectorA, tmpVectorB, 0.5);\n                uv.push(tmpVectorC.x, tmpVectorC.y);\n            }\n\n            // The edge and wall attributes of the new vertex.\n            // If a new vertex has been introduced between i and j, connect the elements\n            // accordingly.\n            if (edge !== undefined) {\n                if (edge[i] === j) {\n                    edge.push(j);\n                    edge[i] = index;\n                } else if (edge[j] === i) {\n                    edge.push(i);\n                    edge[j] = index;\n                } else {\n                    edge.push(-1);\n                }\n            }\n            if (wall !== undefined) {\n                if (wall[i] === j) {\n                    wall.push(j);\n                    wall[i] = index;\n                } else if (wall[j] === i) {\n                    wall.push(i);\n                    wall[j] = index;\n                } else {\n                    wall.push(-1);\n                }\n            }\n\n            return index;\n        }\n\n        const newIndices = [];\n        while (indices.length >= 3) {\n            const v0 = indices.shift()!;\n            const v1 = indices.shift()!;\n            const v2 = indices.shift()!;\n\n            tmpVectorA.set(position[v0 * 3], position[v0 * 3 + 1], position[v0 * 3 + 2]);\n            tmpVectorB.set(position[v1 * 3], position[v1 * 3 + 1], position[v1 * 3 + 2]);\n            tmpVectorC.set(position[v2 * 3], position[v2 * 3 + 1], position[v2 * 3 + 2]);\n\n            const edgeToSplit = this.shouldSplitTriangle(tmpVectorA, tmpVectorB, tmpVectorC);\n\n            switch (edgeToSplit) {\n                case 0: {\n                    const v3 = middleVertex(v0, v1);\n                    indices.push(v0, v3, v2, v3, v1, v2);\n                    break;\n                }\n\n                case 1: {\n                    const v3 = middleVertex(v1, v2);\n                    indices.push(v0, v1, v3, v0, v3, v2);\n                    break;\n                }\n\n                case 2: {\n                    const v3 = middleVertex(v2, v0);\n                    indices.push(v0, v1, v3, v3, v1, v2);\n                    break;\n                }\n\n                case undefined: {\n                    newIndices.push(v0, v1, v2);\n                    break;\n                }\n\n                default:\n                    throw new Error(\"failed to subdivide the given geometry\");\n            }\n        }\n\n        positionAttr.array = new Float32Array(position);\n        positionAttr.count = position.length / positionAttr.itemSize;\n        positionAttr.needsUpdate = true;\n\n        geometry.setIndex(newIndices);\n\n        if (uv !== undefined) {\n            uvAttr.array = new Float32Array(uv);\n            uvAttr.count = uv.length / uvAttr.itemSize;\n            uvAttr.needsUpdate = true;\n        }\n\n        if (edge !== undefined) {\n            edgeAttr.array = new Float32Array(edge);\n            edgeAttr.count = edge.length / edgeAttr.itemSize;\n            edgeAttr.needsUpdate = true;\n        }\n\n        return geometry;\n    }\n\n    /**\n     * Returns if the given triangle should be subdivide.\n     *\n     * Implementations of this function should return the index of\n     * the edge of the triangle to split (0, 1, or 2) or undefined if\n     * the triangle doesn't need to be subdivided.\n     *\n     * @param a The position of the first vertex of the triangle.\n     * @param b The position of the second vertex of the triangle.\n     * @param c The position of the third vertex of the triangle.\n     */\n    protected abstract shouldSplitTriangle(a: Vector3, b: Vector3, c: Vector3): number | undefined;\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nexport * from \"./lib/LRUCache\";\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport * as THREE from \"three\";\n\nconst SdfShaderChunks = {\n    sdf_attributes: `\n        attribute vec4 position;\n        attribute vec4 uv;\n        attribute vec4 color;\n        attribute vec4 bgColor;\n        `,\n    sdf_varying: `\n        varying vec4 vColor;\n        varying float vWeight;\n        varying vec2 vUv;\n        varying float vRotation;\n        `,\n    sdf_varying_computation: `\n        #if BG_TEXT\n        vColor = bgColor;\n        vWeight = uv.w;\n        #else\n        vColor = color;\n        vWeight = uv.z;\n        #endif\n        vUv = vec2(uv.xy);\n        vRotation = position.w;\n        `,\n    sdf_frag_uniforms: `\n        uniform sampler2D sdfTexture;\n        uniform vec4 sdfParams;\n        `,\n    sdf_sampling_functions: `\n        float median(float r, float g, float b) {\n            return max(min(r, g), min(max(r, g), b));\n        }\n\n        float getDistance(vec2 uvOffset) {\n            vec3 sample = texture2D(sdfTexture, vUv.xy + uvOffset).rgb;\n            #if MSDF\n            return median(sample.r, sample.g, sample.b);\n            #else\n            return sample.r;\n            #endif\n        }\n\n        float getOpacity(vec2 uvOffset, float weight) {\n            vec2 uv = vUv + uvOffset;\n            vec2 rotatedUVs = abs(vec2(\n                cos(vRotation) * uv.x - sin(vRotation) * uv.y,\n                sin(vRotation) * uv.x + cos(vRotation) * uv.y));\n\n            float dx = dFdx(rotatedUVs.x) * sdfParams.x;\n            float dy = dFdy(rotatedUVs.y) * sdfParams.y;\n            float toPixels = sdfParams.w * inversesqrt( dx * dx + dy * dy );\n\n            float dist = getDistance(uvOffset) + min(weight, 0.5 - 1.0 / sdfParams.w) - 0.5;\n            return clamp(dist * toPixels + 0.5, 0.0, 1.0);\n        }\n        `\n};\nObject.assign(THREE.ShaderChunk, SdfShaderChunks);\n\nconst clearVertexSource: string = `\n    attribute vec2 position;\n\n    uniform mat4 modelViewMatrix;\n    uniform mat4 projectionMatrix;\n\n    void main() {\n        gl_Position = projectionMatrix * modelViewMatrix * vec4(position.xy, 0.0, 1.0);\n    }`;\n\nconst clearFragmentSource: string = `\n    precision highp float;\n    precision highp int;\n\n    void main() {\n        gl_FragColor = vec4(0.0, 0.0, 0.0, 0.0);\n    }`;\n\nconst copyVertexSource: string = `\n    attribute vec3 position;\n    attribute vec2 uv;\n\n    uniform mat4 modelViewMatrix;\n    uniform mat4 projectionMatrix;\n\n    varying vec3 vUv;\n\n    void main() {\n        vUv = vec3(uv.xy, position.z);\n        gl_Position = projectionMatrix * modelViewMatrix * vec4(position.xy, 0.0, 1.0);\n    }`;\n\nconst copyFragmentSource: string = `\n    precision highp float;\n    precision highp int;\n\n    uniform float pageOffset;\n    uniform sampler2D page0;\n    uniform sampler2D page1;\n    uniform sampler2D page2;\n    uniform sampler2D page3;\n    uniform sampler2D page4;\n    uniform sampler2D page5;\n    uniform sampler2D page6;\n    uniform sampler2D page7;\n\n    varying vec3 vUv;\n\n    void main() {\n        vec4 sample = vec4(0.0);\n        if (vUv.z < pageOffset || vUv.z > (pageOffset + 7.0)) discard;\n        else if (vUv.z < pageOffset + 1.0) sample = texture2D(page0, vUv.xy);\n        else if (vUv.z < pageOffset + 2.0) sample = texture2D(page1, vUv.xy);\n        else if (vUv.z < pageOffset + 3.0) sample = texture2D(page2, vUv.xy);\n        else if (vUv.z < pageOffset + 4.0) sample = texture2D(page3, vUv.xy);\n        else if (vUv.z < pageOffset + 5.0) sample = texture2D(page4, vUv.xy);\n        else if (vUv.z < pageOffset + 6.0) sample = texture2D(page5, vUv.xy);\n        else if (vUv.z < pageOffset + 7.0) sample = texture2D(page6, vUv.xy);\n        else sample = texture2D(page7, vUv.xy);\n\n        gl_FragColor = sample;\n    }`;\n\nconst sdfTextVertexSource: string = `\n    #include <sdf_attributes>\n    #include <sdf_varying>\n\n    uniform mat4 modelViewMatrix;\n    uniform mat4 projectionMatrix;\n\n    void main() {\n        #include <sdf_varying_computation>\n        gl_Position = projectionMatrix * modelViewMatrix * vec4(position.xyz, 1.0);\n    }`;\n\nconst sdfTextFragmentSource: string = `\n    precision highp float;\n    precision highp int;\n\n    #include <sdf_varying>\n    #include <sdf_frag_uniforms>\n    #include <sdf_sampling_functions>\n\n    void main() {\n        vec4 color = vColor;\n        color.a *= getOpacity(vec2(0.0), vWeight);\n        if (color.a < 0.05) {\n            discard;\n        }\n        gl_FragColor = color;\n    }`;\n\n/**\n * @hidden\n * Material used for clearing glyphs from a [[GlyphTextureCache]].\n */\nexport class GlyphClearMaterial extends THREE.RawShaderMaterial {\n    /**\n     * Creates a new `GlyphClearMaterial`.\n     *\n     * @returns New `GlyphClearMaterial`.\n     */\n    constructor() {\n        const shaderParams: THREE.ShaderMaterialParameters = {\n            name: \"GlyphClearMaterial\",\n            vertexShader: clearVertexSource,\n            fragmentShader: clearFragmentSource,\n            uniforms: {},\n            depthTest: false,\n            depthWrite: false\n        };\n        super(shaderParams);\n    }\n}\n\n/**\n * @hidden\n * Material used for copying glyphs into a [[GlyphTextureCache]].\n */\nexport class GlyphCopyMaterial extends THREE.RawShaderMaterial {\n    /**\n     * Creates a new `GlyphCopyMaterial`.\n     *\n     * @returns New `GlyphCopyMaterial`.\n     */\n    constructor() {\n        const shaderParams: THREE.ShaderMaterialParameters = {\n            name: \"GlyphCopyMaterial\",\n            vertexShader: copyVertexSource,\n            fragmentShader: copyFragmentSource,\n            uniforms: {\n                pageOffset: new THREE.Uniform(0.0),\n                page0: new THREE.Uniform(THREE.Texture.DEFAULT_IMAGE),\n                page1: new THREE.Uniform(THREE.Texture.DEFAULT_IMAGE),\n                page2: new THREE.Uniform(THREE.Texture.DEFAULT_IMAGE),\n                page3: new THREE.Uniform(THREE.Texture.DEFAULT_IMAGE),\n                page4: new THREE.Uniform(THREE.Texture.DEFAULT_IMAGE),\n                page5: new THREE.Uniform(THREE.Texture.DEFAULT_IMAGE),\n                page6: new THREE.Uniform(THREE.Texture.DEFAULT_IMAGE),\n                page7: new THREE.Uniform(THREE.Texture.DEFAULT_IMAGE)\n            },\n            depthTest: false,\n            depthWrite: false\n        };\n        super(shaderParams);\n    }\n}\n\n/**\n * @hidden\n * Material parameters passed on [[SdfTextMaterial]] creation.\n */\nexport interface SdfTextMaterialParameters {\n    texture: THREE.Texture;\n    textureSize: THREE.Vector2;\n    size: number;\n    distanceRange: number;\n    isMsdf: boolean;\n    isBackground: boolean;\n    vertexSource?: string;\n    fragmentSource?: string;\n}\n\n/**\n * Material designed to render transformable, high quality SDF text.\n */\nexport class SdfTextMaterial extends THREE.RawShaderMaterial {\n    /**\n     * Creates a new `SdfTextMaterial`.\n     *\n     * @param params Material parameters.\n     *\n     * @returns New `SdfTextMaterial`.\n     */\n    constructor(params: SdfTextMaterialParameters) {\n        const shaderParams: THREE.ShaderMaterialParameters = {\n            name: \"SdfTextMaterial\",\n            vertexShader:\n                params.vertexSource !== undefined ? params.vertexSource : sdfTextVertexSource,\n            fragmentShader:\n                params.fragmentSource !== undefined ? params.fragmentSource : sdfTextFragmentSource,\n            uniforms: {\n                sdfTexture: new THREE.Uniform(params.texture),\n                sdfParams: new THREE.Uniform(\n                    new THREE.Vector4(\n                        params.textureSize.x,\n                        params.textureSize.y,\n                        params.size,\n                        params.distanceRange\n                    )\n                )\n            },\n            defines: {\n                MSDF: params.isMsdf ? 1.0 : 0.0,\n                BG_TEXT: params.isBackground ? 1.0 : 0.0\n            },\n            depthTest: true,\n            depthWrite: true,\n            side: THREE.DoubleSide,\n            transparent: true\n        };\n        super(shaderParams);\n        this.extensions.derivatives = true;\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport * as THREE from \"three\";\nimport { GlyphData } from \"./GlyphData\";\nimport { TextLayoutStyle, TextRenderStyle } from \"./TextStyle\";\n\n/**\n * Object containing vertex buffer data generated by [[TextCanvas]].\n */\nexport class TextBufferObject {\n    /**\n     * Constructs a new `TextBufferObject`.\n     *\n     * @param glyphs Input glyphs.\n     * @param buffer Buffer containing the data generated by [[TextCanvas]].\n     * @param bounds Optional text bounds.\n     * @param characterBounds Optional character bounds.\n     * @param textRenderStyle [[TextRenderStyle]] applied by [[TextCanvas]].\n     * @param textLayoutStyle [[TextLayoutStyle]] applied by [[TextCanvas]].\n     *\n     * @returns New `TextBufferObject`.\n     */\n    constructor(\n        readonly glyphs: GlyphData[],\n        readonly buffer: Float32Array,\n        readonly bounds?: THREE.Box2,\n        readonly characterBounds?: THREE.Box2[],\n        readonly textRenderStyle?: TextRenderStyle,\n        readonly textLayoutStyle?: TextLayoutStyle\n    ) {}\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { FontCatalog } from \"../rendering/FontCatalog\";\nimport { SdfTextMaterial } from \"../rendering/TextMaterials\";\n\n/**\n * Material parameters passed on [[SdfTextMaterial]] creation when using the `\n * `createSdfTextMaterial` helper function.\n */\nexport interface SdfTextMaterialParameters {\n    fontCatalog: FontCatalog;\n    isBackground?: boolean;\n    vertexSource?: string;\n    fragmentSource?: string;\n}\n\n/**\n * Helper function designed to create [[SdfTextMaterials]] that can be rendered using\n * [[TextCanvas]].\n *\n * @param params Material parameters.\n *\n * @returns New `SdfTextMaterial`.\n */\nexport function createSdfTextMaterial(params: SdfTextMaterialParameters): SdfTextMaterial {\n    return new SdfTextMaterial({\n        texture: params.fontCatalog.texture,\n        textureSize: params.fontCatalog.textureSize,\n        size: params.fontCatalog.size,\n        distanceRange: params.fontCatalog.distanceRange,\n        isMsdf: params.fontCatalog.type === \"msdf\",\n        isBackground: params.isBackground === true,\n        vertexSource: params.vertexSource,\n        fragmentSource: params.fragmentSource\n    });\n}\n","/*\n * Copyright (C) 2020 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { Vector3Like } from \"@here/harp-geoutils\";\nimport { sampleBilinear } from \"@here/harp-utils\";\nimport * as THREE from \"three\";\nimport { VertexCache } from \"./VertexCache\";\n\n/**\n * @internal\n * BufferAttribute decorator that displaces on the fly the coordinates in a given attribute using a\n * specified displacement map.\n */\nexport class DisplacedBufferAttribute extends THREE.BufferAttribute {\n    private static MAX_CACHE_SIZE = 6;\n    private m_texture?: Float32Array;\n    private m_textureWidth: number = 0;\n    private m_textureHeight: number = 0;\n    private m_cache = new VertexCache(DisplacedBufferAttribute.MAX_CACHE_SIZE);\n    private m_lastBufferIndex?: number;\n    private m_lastPos = new THREE.Vector3();\n    private m_tmpNormal = new THREE.Vector3();\n\n    /**\n     * Creates an instance of displaced buffer attribute.\n     * @param originalAttribute The buffer attribute to be displaced (e.g. the position attribute).\n     * @param m_normals The normals along which the coordinates will be displaced.\n     * @param m_uvs The uv coordinates to be used to sample the displacement map.\n     * @param displacementMap A texture with the displacement values in 32bit floats.\n     */\n    constructor(\n        public originalAttribute: THREE.BufferAttribute | THREE.InterleavedBufferAttribute,\n        private m_normals: THREE.BufferAttribute | THREE.InterleavedBufferAttribute,\n        private m_uvs: THREE.BufferAttribute | THREE.InterleavedBufferAttribute,\n        displacementMap: THREE.DataTexture\n    ) {\n        super(originalAttribute.array, originalAttribute.itemSize, originalAttribute.normalized);\n        this.resetTexture(displacementMap);\n    }\n\n    /**\n     * Resets the displaced buffer attribute to use new buffer attributes or displacement map.\n     * @param originalAttribute The buffer attribute to be displaced (e.g. the position attribute).\n     * @param normals The normals along which the coordinates will be displaced.\n     * @param uvs  The uv coordinates to be used to sample the displacement map.\n     * @param displacementMap A texture with the displacement values in 32bit floats.\n     */\n    reset(\n        originalAttribute: THREE.BufferAttribute | THREE.InterleavedBufferAttribute,\n        normals: THREE.BufferAttribute | THREE.InterleavedBufferAttribute,\n        uvs: THREE.BufferAttribute | THREE.InterleavedBufferAttribute,\n        displacementMap: THREE.DataTexture\n    ) {\n        this.array = originalAttribute.array;\n        this.itemSize = originalAttribute.itemSize;\n        this.count = this.array.length / this.itemSize;\n        this.normalized = originalAttribute.normalized;\n        this.originalAttribute = originalAttribute;\n        this.m_normals = normals;\n        this.m_uvs = uvs;\n        this.m_cache.clear();\n        this.m_lastBufferIndex = undefined;\n        this.resetTexture(displacementMap);\n    }\n\n    // HARP-9585: These getters are overrides of the base class ones, however tslint doesn't\n    // recognize them as such.\n    getX(index: number): number {\n        return this.getDisplacedCoordinate(index).x;\n    }\n    getY(index: number): number {\n        return this.getDisplacedCoordinate(index).y;\n    }\n    getZ(index: number): number {\n        return this.getDisplacedCoordinate(index).z;\n    }\n\n    private resetTexture(displacementMap: THREE.DataTexture) {\n        this.m_texture = new Float32Array(displacementMap.image.data.buffer);\n        this.m_textureWidth = displacementMap.image.width;\n        this.m_textureHeight = displacementMap.image.height;\n    }\n    private getDisplacedCoordinate(bufferIndex: number): Vector3Like {\n        if (bufferIndex === this.m_lastBufferIndex) {\n            return this.m_lastPos;\n        }\n        this.m_lastBufferIndex = bufferIndex;\n        if (this.m_cache.get(bufferIndex, this.m_lastPos)) {\n            return this.m_lastPos;\n        }\n        this.displacePosition(bufferIndex);\n        this.m_cache.set(bufferIndex, this.m_lastPos);\n        return this.m_lastPos;\n    }\n    private displacePosition(bufferIndex: number) {\n        this.m_lastPos.fromBufferAttribute(\n            this.originalAttribute as THREE.BufferAttribute,\n            bufferIndex\n        );\n        const normals = this.m_normals as THREE.BufferAttribute;\n        this.m_tmpNormal.fromBufferAttribute(normals, bufferIndex);\n        const uvs = this.m_uvs;\n        const u = THREE.MathUtils.clamp(uvs.getX(bufferIndex), 0, 1);\n        const v = THREE.MathUtils.clamp(uvs.getY(bufferIndex), 0, 1);\n        const displacement = sampleBilinear(\n            this.m_texture!,\n            this.m_textureWidth,\n            this.m_textureHeight,\n            u,\n            v\n        );\n        this.m_lastPos.add(this.m_tmpNormal.multiplyScalar(displacement));\n    }\n}\n","/*\n * Copyright (C) 2020 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport * as THREE from \"three\";\nimport { DisplacedBufferAttribute } from \"./DisplacedBufferAttribute\";\n\nconst tmpV1 = new THREE.Vector3();\nconst tmpV2 = new THREE.Vector3();\nconst tmpBox = new THREE.Box3();\n\n/**\n * @internal\n * Range of displacement values found in a given displacement map.\n */\nexport interface DisplacementRange {\n    min: number;\n    max: number;\n}\n\n/**\n * @internal\n * Displace a box in a given direction by a specified range. The original box min and max vertices\n * are translated as a result by displacementRange.min and displacementRange.max respectively.\n * @param box The original box to displace.\n * @param displacementRange The minimum and maximum displacement values.\n * @param displacementDir Direction in which the displacement will be applied.\n * @return The displaced box.\n */\nexport function displaceBox(\n    box: THREE.Box3,\n    displacementRange: DisplacementRange,\n    displacementDir: THREE.Vector3\n): THREE.Box3 {\n    tmpBox.copy(box);\n    const tmpNormalMin = tmpV1.copy(displacementDir);\n    const tmpNormalMax = tmpV2.copy(tmpNormalMin);\n    box.translate(tmpNormalMin.multiplyScalar(displacementRange.min)).union(\n        tmpBox.translate(tmpNormalMax.multiplyScalar(displacementRange.max))\n    );\n    return box;\n}\n\n/**\n * @internal\n * BufferGeometry decorator that displaces on the fly the position attribute using a specified\n * displacement map.\n */\nexport class DisplacedBufferGeometry extends THREE.BufferGeometry {\n    private m_displacedPositions: DisplacedBufferAttribute;\n    private m_originalBoundingBox = new THREE.Box3();\n\n    /**\n     * Creates an instance of displaced buffer geometry.\n     * @param originalGeometry The goeometry to be displaced.\n     * @param displacementMap A texture with the displacement values.\n     * @param displacementRange The displacement value range found in the displacement map.\n     * @param displacedPositions Buffer attribute that will be used for displaced positions if\n     * provided, otherwise a new buffer attribute will be created.\n     */\n    constructor(\n        public originalGeometry: THREE.BufferGeometry,\n        displacementMap: THREE.DataTexture,\n        public displacementRange: DisplacementRange,\n        displacedPositions?: DisplacedBufferAttribute\n    ) {\n        super();\n        if (!displacedPositions) {\n            this.m_displacedPositions = new DisplacedBufferAttribute(\n                originalGeometry.attributes.position,\n                originalGeometry.attributes.normal,\n                originalGeometry.attributes.uv,\n                displacementMap\n            );\n        } else {\n            this.m_displacedPositions = displacedPositions;\n        }\n        this.resetAttributes();\n    }\n\n    /**\n     * Resets the displaced buffer geometry to use new geometry or displacement map.\n     * @param geometry The goeometry to be displaced.\n     * @param displacementMap A texture with the displacement values.\n     * @param displacementRange The displacement value range found in the displacement map.\n     */\n    reset(\n        geometry: THREE.BufferGeometry,\n        displacementMap: THREE.DataTexture,\n        displacementRange: DisplacementRange\n    ) {\n        this.originalGeometry = geometry;\n        const positions = geometry.attributes.position;\n        const normals = geometry.attributes.normal;\n        const uvs = geometry.attributes.uv;\n        this.m_displacedPositions.reset(positions, normals, uvs, displacementMap);\n        const displacementRangeChanged =\n            this.displacementRange.min !== displacementRange.min ||\n            this.displacementRange.max !== displacementRange.max;\n        this.displacementRange = displacementRange;\n        this.resetAttributes();\n        this.resetBoundingVolumes(displacementRangeChanged);\n    }\n\n    // HARP-9585: Override of base class method, however tslint doesn't recognize it as such.\n    // tslint:disable-next-line: explicit-override\n    computeBoundingBox(): void {\n        // Calculate a coarse approximation of the displaced geometry bbox by displacing the\n        // original bbox and enlarging it to cover the whole displacement range.\n        // This approximation is used to avoid having to displace the whole geometry, which will\n        // be done only if the bbox test passes.\n        if (this.originalGeometry.boundingBox === null) {\n            this.originalGeometry.computeBoundingBox();\n        }\n        const origBBox = this.m_originalBoundingBox.copy(this.originalGeometry.boundingBox!);\n        if (this.boundingBox === null) {\n            this.boundingBox = origBBox.clone();\n        } else {\n            this.boundingBox.copy(origBBox);\n        }\n        displaceBox(\n            this.boundingBox,\n            this.displacementRange,\n            tmpV1.fromBufferAttribute(this.attributes.normal as THREE.BufferAttribute, 0)\n        );\n    }\n\n    // HARP-9585: Override of base class method, however tslint doesn't recognize it as such.\n    // tslint:disable-next-line: explicit-override\n    computeBoundingSphere(): void {\n        // Use as coarse approximation the sphere bounding the bbox.\n        if (this.boundingBox === null) {\n            this.computeBoundingBox();\n        }\n        if (this.boundingSphere === null) {\n            this.boundingSphere = new THREE.Sphere();\n        }\n        this.boundingBox!.getBoundingSphere(this.boundingSphere!);\n    }\n\n    private needsBoundingBoxUpdate(displacementRangeChanged: boolean): boolean {\n        return (\n            displacementRangeChanged ||\n            (this.boundingBox !== null &&\n                (!this.originalGeometry.boundingBox ||\n                    !this.m_originalBoundingBox.equals(this.originalGeometry.boundingBox)))\n        );\n    }\n\n    private resetBoundingVolumes(displacementRangeChanged: boolean) {\n        if (this.needsBoundingBoxUpdate(displacementRangeChanged)) {\n            this.computeBoundingBox();\n            if (this.boundingSphere) {\n                this.computeBoundingSphere();\n            }\n        }\n    }\n\n    private resetAttributes() {\n        this.index = this.originalGeometry.index;\n        this.groups = this.originalGeometry.groups;\n        this.drawRange = this.originalGeometry.drawRange;\n        this.attributes = { ...this.originalGeometry.attributes };\n        this.attributes.position = this.m_displacedPositions;\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport * as THREE from \"three\";\n\nimport {\n    Light,\n    MagFilter,\n    MinFilter,\n    PixelFormat,\n    TextureDataType,\n    WrappingMode\n} from \"@here/harp-datasource-protocol\";\n\n/**\n * Returns `three.js` pixel format object basing on a [[PixelFormat]] specified.\n */\nexport function toPixelFormat(format: PixelFormat): THREE.PixelFormat {\n    switch (format) {\n        case \"Alpha\":\n            return THREE.AlphaFormat;\n        case \"RGB\":\n            return THREE.RGBFormat;\n        case \"RGBA\":\n            return THREE.RGBAFormat;\n        case \"Luminance\":\n            return THREE.LuminanceFormat;\n        case \"LuminanceAlpha\":\n            return THREE.LuminanceAlphaFormat;\n        case \"RGBE\":\n            return THREE.RGBEFormat;\n        case \"Depth\":\n            return THREE.DepthFormat;\n        case \"DepthStencil\":\n            return THREE.DepthStencilFormat;\n        case \"Red\":\n            return THREE.RedFormat;\n        default:\n            throw new Error(`invalid pixel format: ${format}`);\n    }\n}\n\n/**\n * Returns `three.js` texture data types based on a [[TextureDataType]] specified.\n */\nexport function toTextureDataType(dataType: TextureDataType): THREE.TextureDataType {\n    switch (dataType) {\n        case \"UnsignedByte\":\n            return THREE.UnsignedByteType;\n        case \"Byte\":\n            return THREE.ByteType;\n        case \"Short\":\n            return THREE.ShortType;\n        case \"UnsignedShort\":\n            return THREE.UnsignedShortType;\n        case \"Int\":\n            return THREE.IntType;\n        case \"UnsignedInt\":\n            return THREE.UnsignedIntType;\n        case \"Float\":\n            return THREE.FloatType;\n        case \"HalfFloat\":\n            return THREE.HalfFloatType;\n        default:\n            throw new Error(`invalid texture data type: ${dataType}`);\n    }\n}\n\n/**\n * Returns `three.js` wrapping mode object based on a [[WrappingMode]] specified.\n */\nexport function toWrappingMode(mode: WrappingMode): THREE.Wrapping {\n    switch (mode) {\n        case \"clamp\":\n            return THREE.ClampToEdgeWrapping;\n        case \"repeat\":\n            return THREE.RepeatWrapping;\n        case \"mirror\":\n            return THREE.MirroredRepeatWrapping;\n        default:\n            throw new Error(`invalid wrapping mode: ${mode}`);\n    }\n}\n\n/**\n * Returns `three.js` texture filter object based on a [[MagFilter]] or [[MinFilter]] specified.\n */\nexport function toTextureFilter(filter: MagFilter | MinFilter): THREE.TextureFilter {\n    switch (filter) {\n        case \"nearest\":\n            return THREE.NearestFilter;\n        case \"nearestMipMapNearest\":\n            return THREE.NearestMipMapNearestFilter;\n        case \"nearestMipMapLinear\":\n            return THREE.NearestMipMapLinearFilter;\n        case \"linear\":\n            return THREE.LinearFilter;\n        case \"linearMipMapNearest\":\n            return THREE.LinearMipMapNearestFilter;\n        case \"linearMipMapLinear\":\n            return THREE.LinearMipMapLinearFilter;\n        default:\n            throw new Error(`invalid texture filter: ${filter}`);\n    }\n}\n\n/**\n * Create a specific light for lighting the map.\n */\nexport function createLight(lightDescription: Light): THREE.Light {\n    switch (lightDescription.type) {\n        case \"ambient\": {\n            const light = new THREE.AmbientLight(\n                lightDescription.color,\n                lightDescription.intensity\n            );\n            light.name = lightDescription.name;\n            return light;\n        }\n        case \"directional\": {\n            const light = new THREE.DirectionalLight(\n                lightDescription.color,\n                lightDescription.intensity\n            );\n            light.name = lightDescription.name;\n            if (lightDescription.castShadow !== undefined) {\n                light.castShadow = lightDescription.castShadow;\n            }\n            if (light.castShadow) {\n                light.shadow.bias = 0.00001;\n                light.shadow.mapSize.width = 1024;\n                light.shadow.mapSize.height = 1024;\n            }\n            light.position.set(\n                lightDescription.direction.x,\n                lightDescription.direction.y,\n                lightDescription.direction.z\n            );\n            light.position.normalize();\n            return light;\n        }\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport * as THREE from \"three\";\n\nimport { Env, ExtrudedPolygonTechnique } from \"@here/harp-datasource-protocol\";\nimport { ColorUtils } from \"@here/harp-datasource-protocol/lib/ColorUtils\";\nimport { enforceBlending, MapMeshStandardMaterial } from \"@here/harp-materials\";\nimport { evaluateBaseColorProperty } from \"./DecodedTileHelpers\";\n\n/**\n * Bitmask used for the depth pre-pass to prevent multiple fragments in the same screen position\n * from rendering color.\n */\nexport const DEPTH_PRE_PASS_STENCIL_MASK = 0x01;\n\n/**\n * Render order offset for the depth pre-pass to ensure that it's rendered first.\n */\nconst DEPTH_PRE_PASS_RENDER_ORDER_OFFSET = 1e-6;\n\n/**\n * Check if technique requires (and not disables) use of depth prepass.\n *\n * Depth prepass is enabled if correct opacity is specified (in range `(0,1)`) _and_ not explicitly\n * disabled by `enableDepthPrePass` option.\n *\n * @param technique [[BaseStandardTechnique]] instance to be checked\n * @param env [[Env]] instance used to evaluate [[Expr]] based properties of [[Technique]]\n */\nexport function isRenderDepthPrePassEnabled(technique: ExtrudedPolygonTechnique, env: Env) {\n    // Depth pass explicitly disabled\n    if (technique.enableDepthPrePass === false) {\n        return false;\n    }\n    let transparent =\n        technique.opacity !== undefined && technique.opacity > 0.0 && technique.opacity < 1.0;\n    // If not opaque then check if transparency may be modified via alpha in base color.\n    // Otherwise we don't need to even test base color because opacity mixed with any base alpha,\n    // will always produce some transparency effect.\n    if (!transparent) {\n        // We do not support switching depth pass during alpha interpolation, ignore zoom level\n        // when calculating base color value.\n        const color = evaluateBaseColorProperty(technique, env);\n        if (color !== undefined) {\n            const alpha = ColorUtils.getAlphaFromHex(color);\n            transparent = alpha > 0.0 && alpha < 1.0;\n        }\n    }\n    return transparent;\n}\n\n/**\n * Creates material for depth prepass.\n *\n * Creates material that writes only to the z-buffer. Updates the original material instance, to\n * support depth prepass.\n *\n * @param baseMaterial The base material of mesh that is updated to work with depth prepass\n *     and then used. This parameter is a template for depth prepass material that is returned.\n * @returns depth prepass material, which is a clone of `baseMaterial` with the adapted settings.\n */\nexport function createDepthPrePassMaterial(baseMaterial: THREE.Material): THREE.Material {\n    baseMaterial.depthWrite = false;\n    baseMaterial.depthFunc = THREE.EqualDepth;\n    baseMaterial.colorWrite = true;\n    enforceBlending(baseMaterial);\n\n    const depthPassMaterial = baseMaterial.clone();\n    depthPassMaterial.depthWrite = true;\n    depthPassMaterial.depthTest = true;\n    depthPassMaterial.depthFunc = THREE.LessDepth;\n    depthPassMaterial.colorWrite = false;\n    depthPassMaterial.opacity = 1.0;\n    depthPassMaterial.blending = THREE.NoBlending;\n    return depthPassMaterial;\n}\n\n// tslint:disable:max-line-length\n/**\n * Clones a given mesh to render it in the depth prepass with another material. Both the original\n * and depth prepass meshes, when rendered in the correct order, create the proper depth prepass\n * effect. The original mesh material is slightly modified by [[createDepthPrePassMaterial]] to\n * support the depth prepass. This method is usable only if the material of this mesh has an\n * opacity value in the range `(0,1)`.\n *\n * The DepthPrePass object is created wis a slightly smaller `renderOrder` as the original mesh\n * to ensure that it's rendered first.\n *\n * @param mesh original mesh\n * @returns `Mesh` depth pre pass\n */\n// tslint:enable:max-line-length\nexport function createDepthPrePassMesh(mesh: THREE.Mesh): THREE.Mesh {\n    const originalGeometry = mesh.geometry;\n\n    if (!(originalGeometry instanceof THREE.BufferGeometry)) {\n        throw new Error(\"#createDepthPassMesh only BufferGeometry is supported\");\n    }\n    const positionAttribute = originalGeometry.getAttribute(\"position\");\n    if (!positionAttribute) {\n        throw new Error(\"#createDepthPassMesh position attribute not found\");\n    }\n\n    const depthPassGeometry = new THREE.BufferGeometry();\n    depthPassGeometry.setAttribute(\"position\", positionAttribute);\n    const uvAttribute = originalGeometry.getAttribute(\"uv\");\n    if (uvAttribute) {\n        depthPassGeometry.setAttribute(\"uv\", uvAttribute);\n    }\n    const normalAttribute = originalGeometry.getAttribute(\"normal\");\n    if (normalAttribute) {\n        depthPassGeometry.setAttribute(\"normal\", normalAttribute);\n    }\n    const extrusionAxisAttribute = originalGeometry.getAttribute(\"extrusionAxis\");\n    if (extrusionAxisAttribute) {\n        depthPassGeometry.setAttribute(\"extrusionAxis\", extrusionAxisAttribute);\n    }\n\n    if (originalGeometry.index) {\n        depthPassGeometry.setIndex(originalGeometry.index);\n    }\n\n    for (const group of originalGeometry.groups) {\n        const { start, count, materialIndex } = group;\n        depthPassGeometry.addGroup(start, count, materialIndex);\n    }\n\n    const depthPassMaterial =\n        mesh.material instanceof Array\n            ? mesh.material.map(createDepthPrePassMaterial)\n            : createDepthPrePassMaterial(mesh.material);\n\n    const depthPassMesh = new THREE.Mesh(depthPassGeometry, depthPassMaterial);\n    depthPassMesh.renderOrder = mesh.renderOrder - DEPTH_PRE_PASS_RENDER_ORDER_OFFSET;\n\n    return depthPassMesh;\n}\n\n/**\n * Sets up all the needed stencil logic needed for the depth pre-pass.\n *\n * This logic is in place to avoid z-fighting artifacts that can appear in geometries that have\n * coplanar triangles inside the same mesh.\n *\n * @param depthMesh Mesh created by `createDepthPrePassMesh`.\n * @param colorMesh Original mesh.\n */\nexport function setDepthPrePassStencil(depthMesh: THREE.Mesh, colorMesh: THREE.Mesh) {\n    // Set up depth mesh stencil logic.\n    // Set the depth pre-pass stencil bit for all processed fragments. We use\n    // `THREE.AlwaysStencilFunc` and not `THREE.NotEqualStencilFunc` to force all fragments to pass\n    // the stencil test and write the correct depth value.\n    const depthMaterial = depthMesh.material as MapMeshStandardMaterial;\n    depthMaterial.stencilWrite = true;\n    depthMaterial.stencilFail = THREE.KeepStencilOp;\n    depthMaterial.stencilZFail = THREE.KeepStencilOp;\n    depthMaterial.stencilZPass = THREE.ReplaceStencilOp;\n    depthMaterial.stencilFunc = THREE.AlwaysStencilFunc;\n    depthMaterial.stencilRef = 0xff;\n    (depthMaterial as any).stencilFuncMask = DEPTH_PRE_PASS_STENCIL_MASK;\n\n    // Set up color mesh stencil logic.\n    // Only write color for pixels with the depth pre-pass stencil bit set. Also, once a pixel is\n    // rendered, set the stencil bit to 0 to prevent subsequent pixels in the same clip position\n    // from rendering color again.\n    const colorMaterial = colorMesh.material as MapMeshStandardMaterial;\n    colorMaterial.stencilWrite = true;\n    colorMaterial.stencilFail = THREE.KeepStencilOp;\n    colorMaterial.stencilZFail = THREE.KeepStencilOp;\n    colorMaterial.stencilZPass = THREE.ZeroStencilOp;\n    colorMaterial.stencilFunc = THREE.EqualStencilFunc;\n    colorMaterial.stencilRef = 0xff;\n    (colorMaterial as any).stencilFuncMask = DEPTH_PRE_PASS_STENCIL_MASK;\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { GeometryKind } from \"@here/harp-datasource-protocol\";\nimport { Projection } from \"@here/harp-geoutils\";\nimport { hasDisplacementFeature } from \"@here/harp-materials\";\nimport { assert } from \"@here/harp-utils\";\nimport * as THREE from \"three\";\nimport { TileDisplacementMap } from \"../DisplacementMap\";\nimport { ElevationProvider } from \"../ElevationProvider\";\nimport { TextElement } from \"../text/TextElement\";\nimport { Tile, TileObject } from \"../Tile\";\n\n/**\n * Overlays the specified object's geometry on the elevation represented by the given displacement\n * map .\n *\n * @param object The object to be overlaid.\n * @param displacementMap Texture representing the elevation data used to overlay the object.\n */\nfunction overlayObject(object: TileObject, displacementMap: THREE.DataTexture): void {\n    if (!(\"material\" in object)) {\n        return;\n    }\n\n    const material = (object as any).material as THREE.Mesh[\"material\"];\n\n    if (Array.isArray(material)) {\n        material.forEach(mat => {\n            if (hasDisplacementFeature(mat)) {\n                mat.displacementMap = displacementMap;\n            }\n        });\n    } else if (material && hasDisplacementFeature(material)) {\n        material.displacementMap = displacementMap;\n    }\n}\n\n/**\n * Overlays the specified coordinates on top of elevation data if available.\n *\n * @param worldCoords World coordinates to overlay.\n * @param elevationProvider Used to sample elevation data.\n * @param displacementMap Elevation data to be sampled.\n * @param projection Projection from geo to world space.\n * @returns `true` if the position was successfully overlaid, `false` otherwise (e.g. elevation\n * data not available).\n */\nfunction overlayPosition(\n    worldCoords: THREE.Vector3,\n    elevationProvider: ElevationProvider,\n    displacementMap: TileDisplacementMap,\n    projection: Projection\n): boolean {\n    // TODO: Move calculation of text element geoCoordinates to decoder.\n    const geoCoords = projection.unprojectPoint(worldCoords);\n\n    if (displacementMap.geoBox.contains(geoCoords)) {\n        geoCoords.altitude = elevationProvider.sampleHeight(geoCoords, displacementMap);\n    } else {\n        geoCoords.altitude = elevationProvider.getHeight(geoCoords, displacementMap.tileKey.level);\n        if (geoCoords.altitude === undefined) {\n            return false;\n        }\n    }\n    projection.projectPoint(geoCoords, worldCoords);\n    return true;\n}\n\n/**\n * Overlays the specified coordinates on top of elevation data if available.\n *\n * @param path World coordinates to overlay.\n * @param elevationProvider Used to sample elevation data.\n * @param displacementMap Elevation data to be sampled.\n * @param projection Projection from geo to world space.\n * @returns `true` if the position was successfully overlaid, `false` otherwise (e.g. elevation\n * data not available).\n */\nfunction overlayPath(\n    path: THREE.Vector3[],\n    elevationProvider: ElevationProvider,\n    displacementMap: TileDisplacementMap,\n    projection: Projection\n): boolean {\n    for (const position of path) {\n        if (!overlayPosition(position, elevationProvider, displacementMap, projection)) {\n            return false;\n        }\n    }\n    return true;\n}\n\n/**\n * Overlays a text element on top of elevation data if available.\n *\n * @param textElement The text element whose geometry will be overlaid.\n * @param elevationProvider  Used to sample elevation data.\n * @param displacementMap Elevation data to be sampled.\n * @param projection Projection from geo to world space.\n */\nexport function overlayTextElement(\n    textElement: TextElement,\n    elevationProvider: ElevationProvider,\n    displacementMap: TileDisplacementMap,\n    projection: Projection\n) {\n    assert(!textElement.elevated);\n    if (!displacementMap) {\n        return;\n    }\n\n    textElement.elevated = textElement.path\n        ? overlayPath(textElement.path, elevationProvider, displacementMap, projection)\n        : overlayPosition(textElement.position, elevationProvider, displacementMap, projection);\n}\n\n/**\n * Overlays the geometry in the given tile on top of elevation data if available. The tile's\n * elevation may be updated with a more precise range.\n *\n * @param tile The tile whose geometry will be overlaid.\n */\nexport function overlayOnElevation(tile: Tile): void {\n    const elevationProvider = tile.mapView.elevationProvider;\n\n    if (elevationProvider === undefined || tile.objects.length === 0) {\n        return;\n    }\n    const firstObject = tile.objects[0];\n    if (\n        !firstObject.userData ||\n        !firstObject.userData.kind ||\n        !firstObject.userData.kind.find((kind: GeometryKind) => {\n            return kind !== GeometryKind.All && kind !== GeometryKind.Terrain;\n        })\n    ) {\n        return;\n    }\n\n    const displacementMap = elevationProvider.getDisplacementMap(tile.tileKey);\n    if (displacementMap === undefined) {\n        return;\n    }\n\n    // Refine tile elevation range, which is initially set to the broader range given by\n    // [[ElevationRangeSource]].\n    const geoBox = displacementMap.geoBox;\n    tile.elevationRange = {\n        minElevation: geoBox.minAltitude ?? 0,\n        maxElevation: geoBox.maxAltitude ?? 0\n    };\n\n    // TODO: HARP-8808 Apply displacement maps once per material.\n    for (const object of tile.objects) {\n        overlayObject(object, displacementMap.texture);\n    }\n}\n","/*\n * Copyright (C) 2017-2020 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { Env, getPropertyValue } from \"@here/harp-datasource-protocol\";\nimport { ProjectionType } from \"@here/harp-geoutils\";\nimport {\n    HorizontalAlignment,\n    MeasurementParameters,\n    TextCanvas,\n    VerticalAlignment\n} from \"@here/harp-text-canvas\";\nimport { assert, Math2D, MathUtils } from \"@here/harp-utils\";\nimport * as THREE from \"three\";\nimport { PoiManager } from \"../poi/PoiManager\";\nimport { PoiRenderer } from \"../poi/PoiRenderer\";\nimport { CollisionBox, DetailedCollisionBox, IBox, ScreenCollisions } from \"../ScreenCollisions\";\nimport { ScreenProjector } from \"../ScreenProjector\";\nimport { AnchorPlacement } from \"./LayoutState\";\nimport { RenderState } from \"./RenderState\";\nimport { PoiInfo, poiIsRenderable, TextElement } from \"./TextElement\";\nimport { TextElementState } from \"./TextElementState\";\nimport { TextElementType } from \"./TextElementType\";\nimport { ViewState } from \"./ViewState\";\n\n/**\n * Minimum number of pixels per character. Used during estimation if there is enough screen space\n * available to render a text.\n */\nconst MIN_AVERAGE_CHAR_WIDTH = 5;\n\n/**\n * Functions related to text element placement.\n */\n\nconst tmpPosition = new THREE.Vector3(0, 0, 0);\nconst tmpCameraDir = new THREE.Vector3(0, 0, 0);\nconst COS_TEXT_ELEMENT_FALLOFF_ANGLE = 0.5877852522924731; // Math.cos(0.3 * Math.PI)\n\n/**\n * Checks whether the distance of the specified text element to the center of the given view is\n * lower than a maximum threshold.\n * @param textElement The textElement of which the view distance will be checked, with coordinates\n * in world space.\n * @param mapView The view that will be used as reference to calculate the distance.\n * @param maxViewDistance The maximum distance value.\n * @returns The text element view distance if it's lower than the maximum value, otherwise\n * `undefined`.\n */\nfunction checkViewDistance(\n    worldCenter: THREE.Vector3,\n    textElement: TextElement,\n    projectionType: ProjectionType,\n    camera: THREE.Camera,\n    maxViewDistance: number\n): number | undefined {\n    const textDistance = computeViewDistance(worldCenter, textElement);\n\n    if (projectionType !== ProjectionType.Spherical) {\n        return textDistance <= maxViewDistance ? textDistance : undefined;\n    }\n\n    // For sphere projection: Filter labels that are close to the horizon\n    tmpPosition.copy(textElement.position).normalize();\n    camera.getWorldPosition(tmpCameraDir).normalize();\n    const cosAlpha = tmpPosition.dot(tmpCameraDir);\n    const viewDistance =\n        cosAlpha > COS_TEXT_ELEMENT_FALLOFF_ANGLE && textDistance <= maxViewDistance\n            ? textDistance\n            : undefined;\n\n    return viewDistance;\n}\n\n/**\n * Computes the distance of the specified text element to the given position.\n * @param refPosition The world coordinates used a reference position to calculate the distance.\n * @param textElement The textElement of which the view distance will be checked. It must have\n * coordinates in world space.\n * @returns The text element view distance.\n * `undefined`.\n */\nexport function computeViewDistance(refPosition: THREE.Vector3, textElement: TextElement): number {\n    let viewDistance: number;\n\n    if (Array.isArray(textElement.points) && textElement.points.length > 1) {\n        const viewDistance0 = refPosition.distanceTo(textElement.points[0]);\n        const viewDistance1 = refPosition.distanceTo(\n            textElement.points[textElement.points.length - 1]\n        );\n\n        viewDistance = Math.min(viewDistance0, viewDistance1);\n    } else {\n        viewDistance = refPosition.distanceTo(textElement.points as THREE.Vector3);\n    }\n\n    return viewDistance;\n}\n\n/**\n * Computes the maximum view distance for text elements as a ratio of the given view's maximum far\n * plane distance.\n * @param viewState The view for which the maximum view distance will be calculated.\n * @param farDistanceLimitRatio The ratio to apply to the maximum far plane distance.\n * @returns Maximum view distance.\n */\nexport function getMaxViewDistance(viewState: ViewState, farDistanceLimitRatio: number): number {\n    return viewState.maxVisibilityDist * farDistanceLimitRatio;\n}\n\n/**\n * State of fading.\n */\nexport enum PrePlacementResult {\n    Ok = 0,\n    NotReady,\n    Invisible,\n    TooFar,\n    Duplicate,\n    Count\n}\n\n/**\n * @hidden\n * Possible placement scenarios in counter clock-wise order, based on centered placements.\n *\n * TODO: HARP-6487 This array should be parsed from the theme style definition.\n */\nconst anchorPlacementsCentered: AnchorPlacement[] = [\n    { h: HorizontalAlignment.Center, v: VerticalAlignment.Above },\n    { h: HorizontalAlignment.Left, v: VerticalAlignment.Center },\n    { h: HorizontalAlignment.Center, v: VerticalAlignment.Below },\n    { h: HorizontalAlignment.Right, v: VerticalAlignment.Center }\n];\n\n/**\n * @hidden\n * Placement anchors in counter clock-wise order, for corner based placements.\n *\n * TODO: HARP-6487 This array should be parsed from the theme style definition.\n */\nconst anchorPlacementsCornered: AnchorPlacement[] = [\n    { h: HorizontalAlignment.Left, v: VerticalAlignment.Above },\n    { h: HorizontalAlignment.Left, v: VerticalAlignment.Below },\n    { h: HorizontalAlignment.Right, v: VerticalAlignment.Below },\n    { h: HorizontalAlignment.Right, v: VerticalAlignment.Above }\n];\n\nconst tmpPlacementPosition = new THREE.Vector3();\nconst tmpPlacementBounds = new THREE.Box2();\n\n/**\n * Applies early rejection tests for a given text element meant to avoid trying to place labels\n * that are not visible, not ready, duplicates etc...\n * @param textElement The Text element to check.\n * @param viewState The view for which the text element will be placed.\n * @param viewCamera The view's camera.\n * @param m_poiManager To prepare pois for rendering.\n * @param [maxViewDistance] If specified, text elements farther than this max distance will be\n * rejected.\n * @returns An object with the result code and the text element view distance\n * ( or `undefined` of the checks failed) as second.\n */\nexport function checkReadyForPlacement(\n    textElement: TextElement,\n    viewState: ViewState,\n    viewCamera: THREE.Camera,\n    poiManager: PoiManager,\n    maxViewDistance?: number\n): { result: PrePlacementResult; viewDistance: number | undefined } {\n    let viewDistance: number | undefined;\n\n    if (!textElement.visible) {\n        return { result: PrePlacementResult.Invisible, viewDistance };\n    }\n\n    // If a PoiTable is specified in the technique, the table is required to be\n    // loaded before the POI can be rendered.\n    if (!poiManager.updatePoiFromPoiTable(textElement)) {\n        // PoiTable has not been loaded, but is required to determine\n        // visibility.\n        return { result: PrePlacementResult.NotReady, viewDistance };\n    }\n\n    // Text element visibility and zoom level ranges must be checked after calling\n    // updatePoiFromPoiTable, since that function may change those values.\n    if (\n        !textElement.visible ||\n        !MathUtils.isClamped(\n            viewState.zoomLevel,\n            textElement.minZoomLevel,\n            textElement.maxZoomLevel\n        )\n    ) {\n        return { result: PrePlacementResult.Invisible, viewDistance };\n    }\n\n    viewDistance =\n        maxViewDistance === undefined\n            ? computeViewDistance(viewState.worldCenter, textElement)\n            : checkViewDistance(\n                  viewState.worldCenter,\n                  textElement,\n                  viewState.projection.type,\n                  viewCamera,\n                  maxViewDistance\n              );\n\n    if (viewDistance === undefined) {\n        return { result: PrePlacementResult.TooFar, viewDistance };\n    }\n\n    return { result: PrePlacementResult.Ok, viewDistance };\n}\n\n/**\n * Computes the offset for a point text accordingly to text alignment (and icon, if any).\n * @param textElement The text element of which the offset will computed. It must be a point\n * label with [[layoutStyle]] and [[bounds]] already computed.\n * @param placement The relative anchor placement (may be different then original alignment).\n * @param scale The scaling factor (due to distance, etc.).\n * @param env The [[Env]] used to evaluate technique attributes.\n * @param offset The offset result.\n */\nfunction computePointTextOffset(\n    textElement: TextElement,\n    placement: AnchorPlacement,\n    scale: number,\n    env: Env,\n    offset: THREE.Vector2 = new THREE.Vector2()\n): THREE.Vector2 {\n    assert(textElement.type === TextElementType.PoiLabel);\n    assert(textElement.layoutStyle !== undefined);\n    assert(textElement.bounds !== undefined);\n\n    offset.x = textElement.xOffset;\n    offset.y = textElement.yOffset;\n\n    switch (placement.v) {\n        case VerticalAlignment.Above:\n            offset.y -= textElement.bounds!.min.y;\n            break;\n        case VerticalAlignment.Center:\n            offset.y -= 0.5 * (textElement.bounds!.max.y + textElement.bounds!.min.y);\n            break;\n    }\n\n    if (textElement.poiInfo !== undefined && poiIsRenderable(textElement.poiInfo)) {\n        assert(textElement.poiInfo.computedWidth !== undefined);\n        assert(textElement.poiInfo.computedHeight !== undefined);\n\n        // Apply offset moving text out of the icon\n        offset.x += textElement.poiInfo.computedWidth! * (0.5 + placement.h);\n        offset.y += textElement.poiInfo.computedHeight! * (0.5 + placement.v);\n\n        // Reverse, mirror or project offsets on different axis depending on the placement\n        // required only for alternative placements.\n        const hAlign = textElement.layoutStyle!.horizontalAlignment;\n        const vAlign = textElement.layoutStyle!.verticalAlignment;\n        if (hAlign !== placement.h || vAlign !== placement.v) {\n            // Read icon offset used.\n            const technique = textElement.poiInfo.technique;\n            let iconXOffset = getPropertyValue(technique.iconXOffset, env);\n            let iconYOffset = getPropertyValue(technique.iconYOffset, env);\n            iconXOffset = typeof iconXOffset === \"number\" ? iconXOffset : 0;\n            iconYOffset = typeof iconYOffset === \"number\" ? iconYOffset : 0;\n\n            // Now mirror the text offset relative to icon so manhattan distance is preserved, when\n            // alternative position is taken, this ensures that text-icon relative position is\n            // the same as in base alignment.\n            const hAlignDiff = hAlign - placement.h;\n            const vAlignDiff = vAlign - placement.v;\n            const relOffsetX = iconXOffset - textElement.xOffset;\n            const relOffsetY = iconYOffset - textElement.yOffset;\n            const centerBased =\n                hAlign === HorizontalAlignment.Center || vAlign === VerticalAlignment.Center;\n            if (centerBased) {\n                // Center based alternative placements.\n                offset.x += 2 * Math.abs(hAlignDiff) * relOffsetX;\n                offset.y -= 2 * vAlignDiff * Math.abs(relOffsetX);\n\n                offset.y += 2 * Math.abs(vAlignDiff) * relOffsetY;\n                offset.x -= 2 * hAlignDiff * Math.abs(relOffsetY);\n            } else {\n                // Corner alternative placements\n                offset.x += 2 * Math.min(Math.abs(hAlignDiff), 0.5) * relOffsetX;\n                offset.y -=\n                    2 *\n                    Math.sign(vAlignDiff) *\n                    Math.min(Math.abs(vAlignDiff), 0.5) *\n                    Math.abs(relOffsetX);\n\n                offset.y += 2 * Math.min(Math.abs(vAlignDiff), 0.5) * relOffsetY;\n                offset.x -=\n                    2 *\n                    Math.sign(hAlignDiff) *\n                    Math.min(Math.abs(hAlignDiff), 0.5) *\n                    Math.abs(relOffsetY);\n            }\n        }\n    }\n\n    offset.multiplyScalar(scale);\n    return offset;\n}\n\nconst tmpBox = new THREE.Box2();\nconst tmpBoxes: THREE.Box2[] = [];\nconst tmpMeasurementParams: MeasurementParameters = {};\nconst tmpCollisionBoxes: CollisionBox[] = [];\nconst tmpCollisionBox = new CollisionBox();\nconst tmpScreenPosition = new THREE.Vector2();\nconst tmpTextOffset = new THREE.Vector2();\nconst tmp2DBox = new Math2D.Box();\nconst pointLabelMargin = new THREE.Vector2(4, 2);\n\nexport enum PlacementResult {\n    Ok,\n    Rejected,\n    Invisible\n}\n\n/**\n * Places an icon on screen.\n * @param iconRenderState The icon state.\n * @param poiInfo Icon information necessary to compute its dimensions.\n * @param screenPosition Screen position of the icon.\n * @param scaleFactor Scaling factor to apply to the icon dimensions.\n * @param screenCollisions Used to check the icon visibility and collisions.\n * @param env Current map env.\n * @returns `PlacementResult.Ok` if icon can be placed, `PlacementResult.Rejected` if there's\n * a collision, `PlacementResult.Invisible` if it's not visible.\n */\nexport function placeIcon(\n    iconRenderState: RenderState,\n    poiInfo: PoiInfo,\n    screenPosition: THREE.Vector2,\n    scaleFactor: number,\n    env: Env,\n    screenCollisions: ScreenCollisions\n): PlacementResult {\n    PoiRenderer.computeIconScreenBox(poiInfo, screenPosition, scaleFactor, env, tmp2DBox);\n    if (!screenCollisions.isVisible(tmp2DBox)) {\n        return PlacementResult.Invisible;\n    }\n\n    const iconSpaceAvailable =\n        poiInfo.mayOverlap === true || !screenCollisions.isAllocated(tmp2DBox);\n\n    if (!iconSpaceAvailable) {\n        return iconRenderState.isVisible() ? PlacementResult.Rejected : PlacementResult.Invisible;\n    }\n    return PlacementResult.Ok;\n}\n\n/**\n * Place a point label text using single or multiple alternative placement anchors.\n *\n * @param labelState State of the point label to place.\n * @param screenPosition Position of the label in screen coordinates.\n * @param scale Scale factor to be applied to label dimensions.\n * @param textCanvas The text canvas where the label will be placed.\n * @param env The [[Env]] used to evaluate technique attributes.\n * @param screenCollisions Used to check collisions with other labels.\n * @param isRejected Whether the label is already rejected (e.g. because its icon was rejected). If\n * `true`, text won't be checked for collision, result will be either `PlacementResult.Invisible`\n * for newly placed (upcoming) label or `PlacementResult.Rejected` if the label was persistent.\n * @param outScreenPosition The final label screen position after applying any offsets.\n * @param multiAnchor The parameter decides if multi-anchor placement algorithm should be\n * used, be default [[false]] meaning try to place label using current alignment settings only.\n * @returns `PlacementResult.Ok` if point __label can be placed__ at the base or any optional\n * anchor point. `PlacementResult.Rejected` if there's a collision for all placements or it's\n * __persistent label with icon rejected and text visible__. Finally `PlacementResult.Invisible`\n * if it's text is not visible at any placement position or it's __new label with text or icon__\n * __rejected__.\n */\nexport function placePointLabel(\n    labelState: TextElementState,\n    screenPosition: THREE.Vector2,\n    scale: number,\n    textCanvas: TextCanvas,\n    env: Env,\n    screenCollisions: ScreenCollisions,\n    isRejected: boolean,\n    outScreenPosition: THREE.Vector3,\n    multiAnchor: boolean = false\n): PlacementResult {\n    assert(labelState.element.layoutStyle !== undefined);\n\n    const layoutStyle = labelState.element.layoutStyle!;\n\n    // For the new labels with rejected icons we don't need to go further.\n    // Make them invisible.\n    const newLabel = !labelState.visible;\n    if (isRejected && newLabel) {\n        return PlacementResult.Invisible;\n    }\n    // For centered point labels and labels with icon rejected, do only current anchor testing.\n    // TODO: HARP-6487 Placements options should be provided from theme style definition.\n    if (\n        !multiAnchor ||\n        isRejected ||\n        (layoutStyle.verticalAlignment === VerticalAlignment.Center &&\n            layoutStyle.horizontalAlignment === HorizontalAlignment.Center)\n    ) {\n        return placePointLabelAtCurrentAnchor(\n            labelState,\n            screenPosition,\n            scale,\n            textCanvas,\n            env,\n            screenCollisions,\n            isRejected,\n            outScreenPosition\n        );\n    }\n    // Otherwise test also alternative text placements.\n    else {\n        return placePointLabelChoosingAnchor(\n            labelState,\n            screenPosition,\n            scale,\n            textCanvas,\n            env,\n            screenCollisions,\n            outScreenPosition\n        );\n    }\n}\n\n/**\n * Try to place a point label text using multiple optional placements.\n *\n * @note Function should be called only for labels with icons not rejected and for text alignments\n * different then [[HorizontalAlignment.Center]] and [[VerticalAlignment.Center]].\n *\n * @param labelState State of the point label to place.\n * @param screenPosition Position of the label in screen coordinates.\n * @param scale Scale factor to be applied to label dimensions.\n * @param textCanvas The text canvas where the label will be placed.\n * @param env The [[Env]] used to evaluate technique attributes.\n * @param screenCollisions Used to check collisions with other labels.\n * @param outScreenPosition The final label screen position after applying any offsets.\n * @returns `PlacementResult.Ok` if label can be placed at the base or optional anchor point,\n * `PlacementResult.Rejected` if there's a collision for all placements, `PlacementResult.Invisible`\n * if it's not visible at any placement position.\n *\n * @internal\n * @hidden\n */\nfunction placePointLabelChoosingAnchor(\n    labelState: TextElementState,\n    screenPosition: THREE.Vector2,\n    scale: number,\n    textCanvas: TextCanvas,\n    env: Env,\n    screenCollisions: ScreenCollisions,\n    outScreenPosition: THREE.Vector3\n): PlacementResult {\n    assert(labelState.element.layoutStyle !== undefined);\n\n    const label = labelState.element;\n\n    // Store label state - persistent or new label.\n    const persistent = labelState.visible;\n\n    // The current implementation does not provide placements options via theme style yet,\n    // so function tries the anchor placements from pre-defined placements arrays.\n    // TODO: HARP-6487 Placements options should be loaded from the theme.\n\n    // Start with last alignment settings if layout state was stored or\n    // simply begin from layout defined in theme.\n    const lastPlacement = labelState.textPlacement;\n    const placementCentered =\n        lastPlacement.h === HorizontalAlignment.Center ||\n        lastPlacement.v === VerticalAlignment.Center;\n    // TODO: HARP-6487: Read placements options from label.layoutStyle.placements.\n    const placements = placementCentered ? anchorPlacementsCentered : anchorPlacementsCornered;\n    const placementsNum = placements.length;\n    // Find current anchor placement on the optional placements list.\n    // Index of exact match.\n    const matchIdx = placements.findIndex(p => p.h === lastPlacement.h && p.v === lastPlacement.v);\n    assert(matchIdx >= 0);\n    // Will be true if all text placements are invisible.\n    let allInvisible: boolean = true;\n    // Iterate all placements starting from current one.\n    for (let i = matchIdx; i < placementsNum + matchIdx; ++i) {\n        const anchorPlacement = placements[i % placementsNum];\n\n        // Bounds may be already calculated for persistent label, force re-calculation only\n        // for alternative (new) placements.\n        const isLastPlacement = i === matchIdx && persistent;\n        // Compute label bounds, visibility or collision according to new layout settings.\n        const placementResult = placePointLabelAtAnchor(\n            labelState,\n            screenPosition,\n            anchorPlacement,\n            scale,\n            textCanvas,\n            env,\n            screenCollisions,\n            false,\n            !isLastPlacement,\n            outScreenPosition\n        );\n\n        // Store last successful (previous) placement coordinates in temp variables.\n        if (isLastPlacement) {\n            assert(label.bounds !== undefined);\n            tmpPlacementPosition.copy(outScreenPosition);\n            tmpPlacementBounds.copy(label.bounds!);\n        }\n\n        // Check the text allocation\n        if (placementResult === PlacementResult.Invisible) {\n            // Persistent label out of screen or the new label that is colliding - next iteration.\n            continue;\n        } else {\n            // This placement is visible, but surely colliding.\n            allInvisible = false;\n        }\n\n        // If text rejected (label collides), proceed to test further placements.\n        if (placementResult === PlacementResult.Rejected) {\n            continue;\n        }\n\n        // Proper placement found.\n        return PlacementResult.Ok;\n    }\n    // Revert recent screen position and bounds.\n    outScreenPosition.copy(tmpPlacementPosition);\n    label.bounds!.copy(tmpPlacementBounds);\n    // Revert back text canvas layout of the last placement.\n    // In case of label rejected this allows to fade out text in the last position.\n    applyTextPlacement(textCanvas, lastPlacement);\n\n    return allInvisible\n        ? // All text's placements out of the screen.\n          PlacementResult.Invisible\n        : persistent\n        ? // All placements are either colliding or out of screen for persistent label.\n          PlacementResult.Rejected\n        : // No placement found for the new label.\n          PlacementResult.Invisible;\n}\n\n/**\n * Places a point label on a specified text canvas using the alignment (anchor) currently set.\n *\n * @param labelState State of the point label to place.\n * @param screenPosition Position of the label in screen coordinates.\n * @param scale Scale factor to be applied to label dimensions.\n * @param textCanvas The text canvas where the label will be placed.\n * @param env The [[Env]] used to evaluate technique attributes.\n * @param screenCollisions Used to check collisions with other labels.\n * @param isRejected Whether the label is already rejected (e.g. because its icon was rejected). If\n * `true`, text won't be checked for collision, result will be either `PlacementResult.Invisible` or\n * `PlacementResult.Rejected`.\n * @param outScreenPosition The final label screen position after applying any offsets.\n * @returns `PlacementResult.Ok` if point label can be placed, `PlacementResult.Rejected` if there's\n * a collision, `PlacementResult.Invisible` if it's not visible.\n *\n * @internal\n * @hidden\n */\nfunction placePointLabelAtCurrentAnchor(\n    labelState: TextElementState,\n    screenPosition: THREE.Vector2,\n    scale: number,\n    textCanvas: TextCanvas,\n    env: Env,\n    screenCollisions: ScreenCollisions,\n    isRejected: boolean,\n    outScreenPosition: THREE.Vector3\n): PlacementResult {\n    assert(labelState.element.layoutStyle !== undefined);\n\n    // Use recently rendered (state stored) layout if available, otherwise theme based style.\n    const lastPlacement = labelState.textPlacement;\n    const result = placePointLabelAtAnchor(\n        labelState,\n        screenPosition,\n        lastPlacement,\n        scale,\n        textCanvas,\n        env,\n        screenCollisions,\n        isRejected,\n        !labelState.visible,\n        outScreenPosition\n    );\n\n    return result;\n}\n\n/**\n * Auxiliary function that tries to place a point label on a text canvas using specified alignment.\n *\n * @param labelState State of the point label to place.\n * @param screenPosition Position of the label in screen coordinates\n * @param placement Text placement relative to the label position.\n * @param scale Scale factor to be applied to label dimensions.\n * @param textCanvas The text canvas where the label will be placed.\n * @param env The [[Env]] used to evaluate technique attributes.\n * @param screenCollisions Used to check collisions with other labels.\n * @param isRejected Whether the label is already rejected (e.g. because its icon was rejected). If\n * `true`, text won't be checked for collision, result will be either `PlacementResult.Invisible` or\n * `PlacementResult.Rejected`.\n * @param forceInvalidation Set to true if text layout or other params has changed such as text\n * re-measurement is required and text buffer need to be invalidated.\n * @param outScreenPosition The final label screen position after applying any offsets.\n * @returns `PlacementResult.Ok` if point label can be placed, `PlacementResult.Rejected` if there's\n * a collision, `PlacementResult.Invisible` if it's not visible.\n *\n * @internal\n * @hidden\n */\nfunction placePointLabelAtAnchor(\n    labelState: TextElementState,\n    screenPosition: THREE.Vector2,\n    placement: AnchorPlacement,\n    scale: number,\n    textCanvas: TextCanvas,\n    env: Env,\n    screenCollisions: ScreenCollisions,\n    isRejected: boolean,\n    forceInvalidation: boolean,\n    outScreenPosition: THREE.Vector3\n): PlacementResult {\n    const label = labelState.element;\n    assert(label.glyphs !== undefined);\n    assert(label.layoutStyle !== undefined);\n\n    const measureText = label.bounds === undefined || forceInvalidation;\n    if (label.bounds === undefined) {\n        label.bounds = new THREE.Box2();\n    }\n\n    // Override label text layout (on TextCanvas) for measurements and text buffer creation.\n    applyTextPlacement(textCanvas, placement);\n\n    if (measureText) {\n        // Setup measurements parameters for textCanvas.measureText().\n        tmpMeasurementParams.outputCharacterBounds = undefined;\n        tmpMeasurementParams.path = undefined;\n        tmpMeasurementParams.pathOverflow = false;\n        tmpMeasurementParams.letterCaseArray = label.glyphCaseArray!;\n        // Compute label bounds according to layout settings.\n        textCanvas.measureText(label.glyphs!, label.bounds, tmpMeasurementParams);\n    }\n\n    // Compute text offset from the anchor point\n    const textOffset = computePointTextOffset(label, placement, scale, env, tmpTextOffset);\n    textOffset.add(screenPosition);\n    tmpBox.copy(label.bounds!);\n    tmpBox.min.multiplyScalar(scale);\n    tmpBox.max.multiplyScalar(scale);\n    // Add margin after scaling, this ensures the margin is consistent across all\n    // labels - regardless of distance scaling (or any other) factor.\n    // TODO: Make the margin configurable\n    tmpBox.expandByVector(pointLabelMargin);\n    tmpBox.translate(textOffset);\n    tmp2DBox.set(\n        tmpBox.min.x,\n        tmpBox.min.y,\n        tmpBox.max.x - tmpBox.min.x,\n        tmpBox.max.y - tmpBox.min.y\n    );\n\n    // Update output screen position.\n    outScreenPosition.set(textOffset.x, textOffset.y, labelState.renderDistance);\n\n    // Check the text visibility if invisible finish immediately\n    // regardless of the persistence state - no fading required.\n    if (!screenCollisions.isVisible(tmp2DBox)) {\n        return PlacementResult.Invisible;\n    }\n\n    const persistent = labelState.visible;\n    // Check if icon's label was already rejected.\n    if (isRejected) {\n        // Allows to fade out persistent label and simply ignore new one.\n        // NOTE:\n        // It might be changed if we would like to render text without icon (at border, etc.).\n        return persistent ? PlacementResult.Rejected : PlacementResult.Invisible;\n    }\n    // Check label's text collision.\n    if (!label.textMayOverlap && screenCollisions.isAllocated(tmp2DBox)) {\n        // Allows to fade persistent and ignore new label.\n        return persistent ? PlacementResult.Rejected : PlacementResult.Invisible;\n    }\n\n    // Don't allocate space for rejected text. When zooming, this allows placement of a\n    // lower priority text element that was displaced by a higher priority one (not\n    // present in the new zoom level) before an even lower priority one takes the space.\n    // Otherwise the lowest priority text will fade in and back out.\n    // TODO: Add a unit test for this scenario.\n    if (label.textReservesSpace) {\n        screenCollisions.allocate(tmp2DBox);\n    }\n\n    // Glyphs arrangement have been changed remove text buffer object which needs to be\n    // re-created.\n    if (measureText) {\n        label.textBufferObject = undefined;\n    }\n\n    // Save current placement in label state.\n    // TextElementState creates layout snapshot solely for alternative placements which saves\n    // memory that could be wasted on unnecessary objects construction.\n    labelState.textPlacement = placement;\n\n    return PlacementResult.Ok;\n}\n\n/**\n * Applied modified text layout style to TextCanvas for further use.\n * @param textCanvas TextCanvas reference.\n * @param placement The text placement to be used.\n */\nfunction applyTextPlacement(textCanvas: TextCanvas, placement: AnchorPlacement) {\n    // Setup TextCanvas layout settings of the new placement as it is required for further\n    // TextBufferObject creation and measurements in addText().\n    textCanvas.textLayoutStyle.horizontalAlignment = placement.h;\n    textCanvas.textLayoutStyle.verticalAlignment = placement.v;\n}\n\n/**\n * Places a path label along a given path on a specified text canvas.\n * @param labelState The state of the path label to place.\n * @param textPath The text path along which the label will be placed.\n * @param screenPosition Position of the label in screen coordinates.\n * @param textCanvas The text canvas where the label will be placed.\n * @param screenCollisions Used to check collisions with other labels.\n * @returns `PlacementResult.Ok` if path label can be placed, `PlacementResult.Rejected` if there's\n * a collision or text doesn't fit into path, `PlacementResult.Invisible` if it's not visible.\n */\nexport function placePathLabel(\n    labelState: TextElementState,\n    textPath: THREE.Path,\n    screenPosition: THREE.Vector2,\n    textCanvas: TextCanvas,\n    screenCollisions: ScreenCollisions\n): PlacementResult {\n    // Recalculate the text bounds for this path label. If measurement fails, the whole\n    // label doesn't fit the path and should be discarded.\n    tmpMeasurementParams.path = textPath;\n    tmpMeasurementParams.outputCharacterBounds = tmpBoxes;\n    tmpMeasurementParams.letterCaseArray = labelState.element.glyphCaseArray!;\n\n    // TODO: HARP-7648. TextCanvas.measureText does the placement as in TextCanvas.addText but\n    // without storing the result. If the measurement succeeds, the placement work is done\n    // twice.\n    // This could be done in one step (e.g measureAndAddText). Collision test could be injected\n    // in the middle as a function.\n    if (!textCanvas.measureText(labelState.element.glyphs!, tmpBox, tmpMeasurementParams)) {\n        return PlacementResult.Rejected;\n    }\n\n    // Coarse collision check.\n    tmpCollisionBox.copy(tmpBox.translate(screenPosition));\n    if (!screenCollisions.isVisible(tmpCollisionBox)) {\n        return PlacementResult.Invisible;\n    }\n\n    let checkGlyphCollision = false;\n    let candidateBoxes: IBox[] | undefined;\n    if (!labelState.element.textMayOverlap) {\n        candidateBoxes = screenCollisions.search(tmpCollisionBox);\n        checkGlyphCollision = candidateBoxes.length > 0;\n    }\n\n    const checkGlyphVisible = !screenCollisions.isFullyVisible(tmpCollisionBox);\n\n    // Perform per-character collision checks.\n    tmpCollisionBoxes.length = tmpBoxes.length;\n    for (let i = 0; i < tmpBoxes.length; ++i) {\n        const glyphBox = tmpBoxes[i].translate(screenPosition);\n        let collisionBox = tmpCollisionBoxes[i];\n        if (collisionBox === undefined) {\n            collisionBox = new CollisionBox(glyphBox);\n            tmpCollisionBoxes[i] = collisionBox;\n        } else {\n            collisionBox.copy(glyphBox);\n        }\n        if (checkGlyphVisible && !screenCollisions.isVisible(collisionBox)) {\n            return PlacementResult.Invisible;\n        }\n\n        if (\n            checkGlyphCollision &&\n            screenCollisions.intersectsDetails(collisionBox, candidateBoxes!)\n        ) {\n            return PlacementResult.Rejected;\n        }\n    }\n    // Allocate collision info if needed.\n    if (labelState.element.textReservesSpace) {\n        const collisionBox = new DetailedCollisionBox(tmpCollisionBox, tmpCollisionBoxes.slice());\n        tmpCollisionBoxes.length = 0;\n        screenCollisions.allocate(collisionBox);\n    }\n    return PlacementResult.Ok;\n}\n\n/**\n * Check if a given path label is too small to be rendered.\n * @param textElement The text element to check.\n * @param screenProjector Used to project coordinates from world to screen space.\n * @param outScreenPoints Label path projected to screen space.\n * @returns `true` if label is too small, `false` otherwise.\n */\nexport function isPathLabelTooSmall(\n    textElement: TextElement,\n    screenProjector: ScreenProjector,\n    outScreenPoints: THREE.Vector2[]\n): boolean {\n    assert(textElement.type === TextElementType.PathLabel);\n\n    // Get the screen points that define the label's segments and create a path with\n    // them.\n    outScreenPoints.length = 0;\n    let anyPointVisible = false;\n\n    for (const pt of textElement.points as THREE.Vector3[]) {\n        // Skip invisible points at the beginning of the path.\n        const screenPoint = anyPointVisible\n            ? screenProjector.project(pt, tmpScreenPosition)\n            : screenProjector.projectOnScreen(pt, tmpScreenPosition);\n        if (screenPoint === undefined) {\n            continue;\n        }\n        anyPointVisible = true;\n\n        outScreenPoints.push(tmpScreenPosition.clone());\n    }\n\n    // TODO: (HARP-3515)\n    //      The rendering of a path label that contains just a single point that is not\n    //      visible is impossible, which is problematic with long paths.\n    //      Fix: Skip/clip the invisible points at beginning and end of the path to get\n    //      the visible part of the path.\n\n    // If not a single point is visible, skip the path\n    if (!anyPointVisible) {\n        return true;\n    }\n\n    // Check/guess if the screen box can hold a string of that length. It is important\n    // to guess that value without measuring the font first to save time.\n    const minScreenSpace = textElement.text.length * MIN_AVERAGE_CHAR_WIDTH;\n\n    tmpBox.setFromPoints(outScreenPoints);\n    const boxDiagonalSq = tmpBox.max.sub(tmpBox.min).lengthSq();\n\n    if (boxDiagonalSq < minScreenSpace * minScreenSpace) {\n        textElement.dbgPathTooSmall = true;\n        return true;\n    }\n\n    return false;\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { Env, getPropertyValue, ImageTexture } from \"@here/harp-datasource-protocol\";\nimport { IconMaterial } from \"@here/harp-materials\";\nimport { MemoryUsage, TextCanvas } from \"@here/harp-text-canvas\";\nimport { assert, LoggerManager, Math2D } from \"@here/harp-utils\";\nimport * as THREE from \"three\";\n\nimport { ColorCache } from \"../ColorCache\";\nimport { ImageItem } from \"../image/Image\";\nimport { MipMapGenerator } from \"../image/MipMapGenerator\";\nimport { MapView } from \"../MapView\";\nimport { ScreenCollisions } from \"../ScreenCollisions\";\nimport { PoiInfo, TextElement } from \"../text/TextElement\";\nimport { BoxBuffer } from \"./BoxBuffer\";\n\nconst logger = LoggerManager.instance.create(\"PoiRenderer\");\n\nconst INVALID_RENDER_BATCH = -1;\nconst tempPos = new THREE.Vector3(0);\n\n/**\n * The `PoiRenderBufferBatch` contains the geometry and the material for all POIs that share the\n * same icon image ([[ImageTexture]]). If the image is the same, all the objects in this batch can\n * share the same material, which makes them renderable in the same draw call, whatever the number\n * of actual objects (WebGL limits apply!).\n *\n * There is a `PoiRenderBufferBatch` for every icon in a texture atlas, since the size of the icon\n * in the atlas as well as the texture coordinates are specified in the `PoiRenderBufferBatch`.\n */\nclass PoiRenderBufferBatch {\n    // Enable trilinear filtering to reduce flickering due to distance scaling\n    static trilinear: boolean = true;\n\n    color: THREE.Color = ColorCache.instance.getColor(\"#000000\");\n\n    boxBuffer: BoxBuffer | undefined;\n\n    private m_material?: THREE.Material | THREE.Material[];\n\n    /**\n     * Create the `PoiRenderBufferBatch`.\n     *\n     * @param mapView The [[MapView]] instance.\n     * @param scene The three.js scene to add the POIs to.\n     * @param imageItem The icon that will have his material shared.\n     * @param renderOrder RenderOrder of the batch geometry's [[Mesh]].\n     */\n    constructor(\n        readonly mapView: MapView,\n        readonly scene: THREE.Scene,\n        readonly imageItem: ImageItem,\n        readonly renderOrder: number\n    ) {}\n\n    /**\n     * Initialize with the [[ImageTexture]]. Loads the image and sets up the icon size, the texture\n     * coordinates and material of the batch. Since image loading is done asynchronously, this\n     * batch cannot be rendered right away. MapView#update is being triggered if it loaded\n     * successfully.\n     */\n    init() {\n        if (this.boxBuffer === undefined) {\n            this.setup();\n        }\n    }\n\n    /**\n     * Clean the `PoiRenderBufferBatch`, remove all icon boxes. Called before starting a new frame.\n     */\n    reset(): void {\n        if (this.boxBuffer === undefined) {\n            this.init();\n        }\n        this.boxBuffer!.reset();\n    }\n\n    /**\n     * Update the geometry with all the added boxes during the frame.\n     */\n    update(): void {\n        if (this.boxBuffer === undefined) {\n            this.init();\n        }\n        this.boxBuffer!.updateBufferGeometry();\n    }\n\n    /**\n     * Update the info with the memory footprint caused by objects owned by the\n     * `PoiRenderBufferBatch`.\n     *\n     * @param info The info object to increment with the values from this `PoiRenderBufferBatch`.\n     */\n    updateMemoryUsage(info: MemoryUsage) {\n        if (this.boxBuffer !== undefined) {\n            this.boxBuffer.updateMemoryUsage(info);\n        }\n    }\n\n    /**\n     * Setup texture and material for the batch.\n     */\n    private setup() {\n        // Texture images should be generated with premultiplied alpha\n        const premultipliedAlpha = true;\n\n        const texture = new THREE.Texture(\n            this.imageItem.imageData as any,\n            THREE.UVMapping,\n            undefined,\n            undefined,\n            PoiRenderBufferBatch.trilinear ? THREE.LinearFilter : THREE.LinearFilter,\n            PoiRenderBufferBatch.trilinear ? THREE.LinearMipMapLinearFilter : THREE.LinearFilter,\n            THREE.RGBAFormat\n        );\n        if (PoiRenderBufferBatch.trilinear && this.imageItem.mipMaps) {\n            // Generate mipmaps for distance scaling of icon\n            texture.mipmaps = this.imageItem.mipMaps;\n            texture.image = texture.mipmaps[0];\n        }\n        texture.flipY = false;\n        texture.premultiplyAlpha = premultipliedAlpha;\n        texture.needsUpdate = true;\n\n        this.m_material = new IconMaterial({\n            map: texture\n        });\n\n        this.boxBuffer = new BoxBuffer(this.m_material, this.renderOrder);\n\n        const mesh = this.boxBuffer.mesh;\n\n        mesh.frustumCulled = false;\n\n        this.scene.add(mesh);\n\n        this.mapView.update();\n    }\n}\n\n/**\n * Contains all [[PoiRenderBufferBatch]]es. Selects (and initializes) the correct batch for a POI.\n */\nclass PoiRenderBuffer {\n    readonly batches: PoiRenderBufferBatch[] = [];\n    private readonly m_batchMap: Map<string, Map<number, number>> = new Map();\n\n    /**\n     * Create the `PoiRenderBuffer`.\n     *\n     * @param mapView The [[MapView]] to be rendered to.\n     * @param textCanvas The [[TextCanvas]] to which scenes this `PoiRenderBuffer` adds geometry to.\n     * The actual scene a [[TextElement]] is added to is specified by the renderOrder of the\n     * [[TextElement]].\n     */\n    constructor(readonly mapView: MapView, readonly textCanvas: TextCanvas) {}\n\n    /**\n     * Register the POI and prepare the [[PoiRenderBufferBatch]] for the POI at first usage.\n     *\n     * @param poiInfo Describes the POI icon.\n     */\n    registerPoi(poiInfo: PoiInfo): number {\n        const { imageItem, imageTexture, imageTextureName } = poiInfo;\n\n        if (\n            imageItem === undefined ||\n            imageTextureName === undefined ||\n            imageTexture === undefined\n        ) {\n            // No image -> invisible -> ignore\n            return INVALID_RENDER_BATCH;\n        }\n\n        const renderOrder = poiInfo.renderOrder!;\n\n        // There is a batch for every ImageDefinition, which could be a texture atlas with many\n        // ImageTextures in it.\n        const batchKey = imageTexture.image;\n        let batchSet = this.m_batchMap.get(batchKey);\n        let mappedIndex: number | undefined;\n        let bufferBatch: PoiRenderBufferBatch;\n\n        if (batchSet === undefined) {\n            batchSet = new Map<number, number>();\n            this.m_batchMap.set(batchKey, batchSet);\n        }\n\n        mappedIndex = batchSet.get(renderOrder);\n        if (mappedIndex !== undefined) {\n            return mappedIndex;\n        }\n        mappedIndex = this.batches.length;\n\n        let layer = this.textCanvas.getLayer(renderOrder);\n        if (layer === undefined) {\n            this.textCanvas.addText(\"\", tempPos, { layer: renderOrder });\n            layer = this.textCanvas.getLayer(renderOrder);\n        }\n\n        bufferBatch = new PoiRenderBufferBatch(\n            this.mapView,\n            layer!.storage.scene,\n            imageItem,\n            renderOrder\n        );\n        bufferBatch.init();\n        batchSet.set(renderOrder, mappedIndex);\n        this.batches.push(bufferBatch);\n        return mappedIndex;\n    }\n\n    /**\n     * Render a POI image at the specified location.\n     *\n     * @param poiInfo PoiInfo containing information for rendering the POI icon.\n     * @param screenBox Box to render icon into in 2D coordinates.\n     * @param viewDistance Box's distance to camera.\n     * @param opacity Opacity of icon to allow fade in/out.\n     */\n    addPoi(poiInfo: PoiInfo, screenBox: Math2D.Box, viewDistance: number, opacity: number): number {\n        const poiRegistered =\n            poiInfo.poiRenderBatch !== undefined && poiInfo.poiRenderBatch !== INVALID_RENDER_BATCH;\n        const batchIndex = poiRegistered ? poiInfo.poiRenderBatch! : this.registerPoi(poiInfo);\n        if (batchIndex === INVALID_RENDER_BATCH) {\n            return INVALID_RENDER_BATCH;\n        }\n        assert(batchIndex >= 0);\n        assert(batchIndex < this.batches.length);\n        assert(poiInfo.uvBox !== undefined);\n\n        if (this.batches[batchIndex].boxBuffer === undefined) {\n            this.batches[batchIndex].init();\n        }\n\n        this.batches[batchIndex].boxBuffer!.addBox(\n            screenBox,\n            poiInfo.uvBox!,\n            this.batches[batchIndex].color,\n            opacity,\n            viewDistance,\n            poiInfo.textElement\n        );\n\n        return batchIndex;\n    }\n\n    /**\n     * Retrieve the [[PoiRenderBufferBatch]] from the array at the specified index. May be invalid\n     * if the imageTexture could not be found\n     *\n     * @param index Index into batch array.\n     */\n    getBatch(index: number): PoiRenderBufferBatch | undefined {\n        if (index >= 0) {\n            assert(index < this.batches.length);\n            return this.batches[index];\n        }\n        // may be invalid if the imageTexture could not be found\n        return undefined;\n    }\n\n    /**\n     * Reset all batches, removing all content from the [[PoiRenderBufferBatch]]es. Called at the\n     * beginning of a frame before the POIs are placed.\n     */\n    reset(): void {\n        for (const batch of this.batches) {\n            batch.reset();\n        }\n    }\n\n    /**\n     * Update the geometry of all [[PoiRenderBufferBatch]]es. Called before rendering.\n     */\n    update(): void {\n        for (const batch of this.batches) {\n            batch.update();\n        }\n    }\n\n    /**\n     * Fill the picking results for the pixel with the given screen coordinate. If multiple\n     * [[PoiInfo]]s are found, the order of the results is unspecified.\n     *\n     * @param screenPosition Screen coordinate of picking position.\n     * @param pickCallback Callback to be called for every picked element.\n     */\n    pickTextElements(\n        screenPosition: THREE.Vector2,\n        pickCallback: (pickData: any | undefined) => void\n    ) {\n        for (const batch of this.batches) {\n            if (batch.boxBuffer === undefined) {\n                batch.init();\n            }\n            batch.boxBuffer!.pickBoxes(screenPosition, pickCallback, batch.imageItem.imageData);\n        }\n    }\n\n    /**\n     * Update the info with the memory footprint caused by objects owned by the `PoiRenderBuffer`.\n     *\n     * @param info The info object to increment with the values from this `PoiRenderBuffer`.\n     */\n    updateMemoryUsage(info: MemoryUsage) {\n        for (const batch of this.batches) {\n            if (batch.imageItem.imageData !== undefined) {\n                const imageBytes =\n                    batch.imageItem.imageData.width * batch.imageItem.imageData.height * 4;\n                info.heapSize += imageBytes;\n                info.gpuSize += imageBytes;\n            }\n            if (batch.boxBuffer !== undefined) {\n                batch.boxBuffer.updateMemoryUsage(info);\n            }\n        }\n    }\n}\n\n/**\n * Manage POI rendering. Uses a [[PoiRenderBuffer]] to actually create the geometry that is being\n * rendered.\n */\nexport class PoiRenderer {\n    /**\n     * Compute screen box for icon. It is required that `prepareRender` has been successfully called\n     * before `computeScreenBox` may be called.\n     *\n     * @param poiInfo PoiInfo containing information for rendering the POI icon.\n     * @param screenPosition Position on screen (2D).\n     * @param scale Scale to apply to icon.\n     * @param env Current zoom level.\n     * @param screenBox Box that will be used to store the result.\n     * @returns The computed screen box for the icon.\n     */\n    static computeIconScreenBox(\n        poiInfo: PoiInfo,\n        screenPosition: THREE.Vector2,\n        scale: number,\n        env: Env,\n        /* out */ screenBox: Math2D.Box = new Math2D.Box()\n    ): Math2D.Box {\n        assert(poiInfo.poiRenderBatch !== undefined);\n        assert(poiInfo.poiRenderBatch !== INVALID_RENDER_BATCH);\n\n        const width = poiInfo.computedWidth! * scale;\n        const height = poiInfo.computedHeight! * scale;\n        const technique = poiInfo.technique;\n        const iconXOffset = getPropertyValue(technique.iconXOffset, env);\n        const iconYOffset = getPropertyValue(technique.iconYOffset, env);\n\n        const centerX =\n            screenPosition.x + (typeof iconXOffset === \"number\" ? iconXOffset : 0) * scale;\n        const centerY =\n            screenPosition.y + (typeof iconYOffset === \"number\" ? iconYOffset : 0) * scale;\n\n        screenBox.x = centerX - width / 2;\n        screenBox.y = centerY - height / 2;\n        screenBox.w = width;\n        screenBox.h = height;\n\n        return screenBox;\n    }\n    // keep track of the missing textures, but only warn once\n    private static m_missingTextureName: Map<string, boolean> = new Map();\n\n    // the render buffer containing all batches, one batch per texture/material.\n    private m_renderBuffer: PoiRenderBuffer;\n\n    // temporary variable to save allocations\n    private m_tempScreenBox = new Math2D.Box();\n\n    /**\n     * Create the `PoiRenderer` for the specified [[MapView]].\n     *\n     * @param mapView The MapView to be rendered to.\n     * @param textCanvas The [[TextCanvas]] this `PoiRenderer` is associated to. POIs are added to\n     * the different layers of this [[TextCanvas]] based on renderOrder.\n     */\n    constructor(readonly mapView: MapView, readonly textCanvas: TextCanvas) {\n        this.m_renderBuffer = new PoiRenderBuffer(mapView, textCanvas);\n    }\n\n    /**\n     * Prepare the POI for rendering, and determine which `poiRenderBatch` should be used. If a\n     * `poiRenderBatch` is assigned, the POI is ready to be rendered.\n     *\n     * @param pointLabel TextElement with PoiInfo for rendering the POI icon.\n     * @param env TODO! The current zoomLevel level of [[MapView]]\n     *\n     * @returns `True` if the space is not already allocated by another object (text label or POI)\n     */\n    prepareRender(pointLabel: TextElement, env: Env): boolean {\n        const poiInfo = pointLabel.poiInfo;\n        if (poiInfo === undefined) {\n            return false;\n        }\n        if (poiInfo.poiRenderBatch === undefined) {\n            this.preparePoi(pointLabel, env);\n        }\n        return poiInfo.poiRenderBatch !== undefined;\n    }\n\n    /**\n     * Reset all batches, removing all content from the [[PoiRenderBuffer]]es. Called at the\n     * beginning of a frame before the POIs are placed.\n     */\n    reset(): void {\n        this.m_renderBuffer.reset();\n    }\n\n    /**\n     * Render the icon.\n     *\n     * @param poiInfo PoiInfo containing information for rendering the POI icon.\n     * @param screenPosition Position on screen (2D):\n     * @param screenCollisions Object handling the collision checks for screen-aligned 2D boxes.\n     * @param viewDistance Box's distance to camera.\n     * @param scale Scaling factor to apply to text and icon.\n     * @param allocateScreenSpace If `true` screen space will be allocated for the icon.\n     * @param opacity Opacity of icon to allow fade in/out.\n     */\n    renderPoi(\n        poiInfo: PoiInfo,\n        screenPosition: THREE.Vector2,\n        screenCollisions: ScreenCollisions,\n        viewDistance: number,\n        scale: number,\n        allocateScreenSpace: boolean,\n        opacity: number,\n        env: Env\n    ): void {\n        assert(poiInfo.poiRenderBatch !== undefined);\n\n        PoiRenderer.computeIconScreenBox(poiInfo, screenPosition, scale, env, this.m_tempScreenBox);\n\n        if (allocateScreenSpace) {\n            screenCollisions.allocate(this.m_tempScreenBox);\n        }\n\n        this.m_renderBuffer.addPoi(poiInfo, this.m_tempScreenBox, viewDistance, opacity);\n    }\n\n    /**\n     * Update the geometry of all [[PoiRenderBuffer]]es. Called before rendering.\n     */\n    update(): void {\n        this.m_renderBuffer.update();\n    }\n\n    /**\n     * Fill the picking results for the pixel with the given screen coordinate. If multiple\n     * [[PoiInfo]]s are found, the order of the results is unspecified.\n     *\n     * @param screenPosition Screen coordinate of picking position.\n     * @param pickCallback Callback to be called for every picked element.\n     */\n    pickTextElements(\n        screenPosition: THREE.Vector2,\n        pickCallback: (pickData: any | undefined) => void\n    ) {\n        this.m_renderBuffer.pickTextElements(screenPosition, pickCallback);\n    }\n\n    /**\n     * Update the info with the memory footprint caused by objects owned by the `PoiRenderer`.\n     *\n     * @param info The info object to increment with the values from this `PoiRenderer`.\n     */\n    getMemoryUsage(info: MemoryUsage) {\n        this.m_renderBuffer.updateMemoryUsage(info);\n    }\n\n    /**\n     * Register the POI at the [[PoiRenderBuffer]] which may require some setup, for example loading\n     * of the actual image.\n     */\n    private preparePoi(pointLabel: TextElement, env: Env): void {\n        const poiInfo = pointLabel.poiInfo;\n        if (poiInfo === undefined || !pointLabel.visible) {\n            return;\n        }\n\n        if (poiInfo.poiRenderBatch !== undefined || poiInfo.isValid === false) {\n            // Already set up, nothing to be done here.\n            return;\n        }\n\n        if (poiInfo.poiTableName !== undefined) {\n            if (this.mapView.poiManager.updatePoiFromPoiTable(pointLabel)) {\n                if (!pointLabel.visible) {\n                    // PoiTable set this POI to not visible.\n                    return;\n                }\n            } else {\n                // PoiTable has not been loaded, but is required to determine visibility.\n                return;\n            }\n        }\n\n        const imageTextureName = poiInfo.imageTextureName;\n\n        const imageTexture = this.mapView.poiManager.getImageTexture(imageTextureName);\n        if (imageTexture === undefined) {\n            // Warn about a missing texture, but only once.\n            if (PoiRenderer.m_missingTextureName.get(imageTextureName) === undefined) {\n                PoiRenderer.m_missingTextureName.set(imageTextureName, true);\n                logger.error(`preparePoi: No imageTexture with name '${imageTextureName}' found`);\n            }\n            poiInfo.isValid = false;\n            return;\n        }\n\n        const imageDefinition = imageTexture.image;\n\n        let imageItem = this.mapView.imageCache.findImageByName(imageDefinition);\n        if (imageItem === undefined) {\n            logger.error(`init: No imageItem found with name '${imageDefinition}'`);\n            poiInfo.isValid = false;\n            return;\n        }\n\n        if (!imageItem.loaded) {\n            if (imageItem.loadingPromise !== undefined) {\n                // already being loaded, will be rendered once available\n                return;\n            }\n            const imageUrl = imageItem.url;\n            const loading = this.mapView.imageCache.loadImage(imageItem);\n            if (loading instanceof Promise) {\n                loading\n                    .then(loadedImageItem => {\n                        if (loadedImageItem === undefined) {\n                            logger.error(`preparePoi: Failed to load imageItem: '${imageUrl}`);\n                            return;\n                        }\n                        this.setupPoiInfo(poiInfo, imageTexture, loadedImageItem, env);\n                    })\n                    .catch(error => {\n                        logger.error(`preparePoi: Failed to load imageItem: '${imageUrl}`, error);\n                        poiInfo.isValid = false;\n                    });\n                return;\n            } else {\n                imageItem = loading;\n            }\n        }\n\n        this.setupPoiInfo(poiInfo, imageTexture, imageItem, env);\n    }\n\n    /**\n     * Setup texture and material for the batch.\n     *\n     * @param poiInfo [[PoiInfo]] to initialize.\n     * @param imageTexture Shared [[ImageTexture]], defines used area in atlas.\n     * @param imageItem Shared [[ImageItem]], contains cached image for texture.\n     * @param env The current zoom level of [[MapView]]\n     */\n    private setupPoiInfo(\n        poiInfo: PoiInfo,\n        imageTexture: ImageTexture,\n        imageItem: ImageItem,\n        env: Env\n    ) {\n        assert(poiInfo.uvBox === undefined);\n\n        if (imageItem === undefined || imageItem.imageData === undefined) {\n            logger.error(\"setupPoiInfo: No imageItem/imageData found\");\n            // invalid render batch number\n            poiInfo.poiRenderBatch = INVALID_RENDER_BATCH;\n            poiInfo.isValid = false;\n            return;\n        }\n\n        const technique = poiInfo.technique;\n\n        const imageWidth = imageItem.imageData.width;\n        const imageHeight = imageItem.imageData.height;\n        const paddedSize = MipMapGenerator.getPaddedSize(imageWidth, imageHeight);\n        const trilinearFiltering = PoiRenderBufferBatch.trilinear && imageItem.mipMaps;\n        const paddedImageWidth = trilinearFiltering ? paddedSize.width : imageWidth;\n        const paddedImageHeight = trilinearFiltering ? paddedSize.height : imageHeight;\n\n        const iconWidth = imageTexture.width !== undefined ? imageTexture.width : imageWidth;\n        const iconHeight = imageTexture.height !== undefined ? imageTexture.height : imageHeight;\n\n        let minS = 0;\n        let maxS = 1;\n        let minT = 0;\n        let maxT = 1;\n\n        let iconScaleH = technique.iconScale !== undefined ? technique.iconScale : 1;\n        let iconScaleV = technique.iconScale !== undefined ? technique.iconScale : 1;\n\n        const width = imageTexture.width !== undefined ? imageTexture.width : imageWidth;\n        const height = imageTexture.height !== undefined ? imageTexture.height : imageHeight;\n        const xOffset = imageTexture.xOffset !== undefined ? imageTexture.xOffset : 0;\n        const yOffset = imageTexture.yOffset !== undefined ? imageTexture.yOffset : 0;\n\n        minS = xOffset / paddedImageWidth;\n        maxS = (xOffset + width) / paddedImageWidth;\n\n        const flipY = false;\n        if (flipY) {\n            minT = (imageHeight - yOffset) / paddedImageHeight;\n            maxT = (imageHeight - yOffset - height) / paddedImageHeight;\n        } else {\n            minT = yOffset / paddedImageHeight;\n            maxT = (yOffset + height) / paddedImageHeight;\n        }\n\n        // minS += 0.5 / imageWidth;\n        // maxS += 0.5 / imageWidth;\n        // minT += 0.5 / imageHeight;\n        // maxT += 0.5 / imageHeight;\n\n        // By default, iconScaleV should be equal to iconScaleH, whatever is set in the style.\n        const screenWidth = getPropertyValue(technique.screenWidth, env);\n        if (screenWidth !== undefined) {\n            iconScaleV = iconScaleH = screenWidth / iconWidth;\n        }\n\n        const screenHeight = getPropertyValue(technique.screenHeight, env);\n        if (screenHeight !== undefined) {\n            iconScaleV = screenHeight / iconHeight;\n            if (screenWidth !== undefined) {\n                iconScaleH = iconScaleV;\n            }\n        }\n\n        // compute stored values in imageTexture\n        poiInfo.computedWidth = iconWidth * iconScaleH;\n        poiInfo.computedHeight = iconHeight * iconScaleV;\n        poiInfo.uvBox = {\n            s0: minS,\n            t0: maxT,\n            s1: maxS,\n            t1: minT\n        };\n        poiInfo.imageItem = imageItem;\n        poiInfo.imageTexture = imageTexture;\n        poiInfo.poiRenderBatch = this.m_renderBuffer.registerPoi(poiInfo);\n        poiInfo.isValid = true;\n\n        assert(poiInfo.poiRenderBatch !== undefined);\n    }\n}\n","/*\n * Copyright (C) 2020 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport * as THREE from \"three\";\n\nimport { ImageItem } from \"./Image\";\n\nconst isNode = typeof window === \"undefined\";\n\n/**\n * Mip map generator resizes textures to next bigger power-of-two size by adding padding\n * and creates mip map levels.\n * @internal\n */\nexport class MipMapGenerator {\n    /**\n     * Gets size of an image padded to the next bigger power-of-two size\n     * @param width Width of image\n     * @param height Height of image\n     */\n    static getPaddedSize(width: number, height: number): { width: number; height: number } {\n        return {\n            width: THREE.MathUtils.ceilPowerOfTwo(width),\n            height: THREE.MathUtils.ceilPowerOfTwo(height)\n        };\n    }\n\n    private m_paddingCanvas?: HTMLCanvasElement;\n    private m_paddingContext?: CanvasRenderingContext2D;\n    private m_resizeCanvas?: HTMLCanvasElement;\n    private m_resizeContext?: CanvasRenderingContext2D;\n\n    constructor() {\n        if (!isNode) {\n            this.m_paddingCanvas = document.createElement(\"canvas\");\n            this.m_paddingContext = this.m_paddingCanvas.getContext(\"2d\")!;\n            this.m_resizeCanvas = document.createElement(\"canvas\");\n            this.m_resizeContext = this.m_resizeCanvas.getContext(\"2d\")!;\n        }\n    }\n\n    /**\n     * Generate downsampled mip map levels from an image.\n     * If the input image is not power-of-two the image is padded to the\n     * next bigger power-of-two size.\n     * @param image Input image\n     * @returns A list of images with mip maps of the input image\n     */\n    generateTextureAtlasMipMap(image: ImageItem): ImageData[] {\n        if (isNode) {\n            throw new Error(\"MipMapGenerator only works in browser.\");\n        }\n\n        if (image.imageData === undefined) {\n            throw new Error(\"Can not generate mip maps. Image data not loaded!\");\n        }\n        const imageData = image.imageData;\n        const mipMaps: ImageData[] = [];\n\n        // Add initial texture with padding as level 0\n        const { width: paddedWidth, height: paddedHeight } = MipMapGenerator.getPaddedSize(\n            imageData.width,\n            imageData.height\n        );\n        this.copyImageWithPadding(imageData, paddedWidth, paddedHeight);\n        mipMaps.push(this.m_paddingContext!.getImageData(0, 0, paddedWidth, paddedHeight));\n\n        let width = paddedWidth * 0.5;\n        let height = paddedHeight * 0.5;\n        while (width >= 1 && height >= 1) {\n            const mipMapLevel = mipMaps.length;\n            const previousImage = mipMaps[mipMapLevel - 1];\n            // Resize previous mip map level\n            mipMaps.push(this.resizeImage(previousImage, width, height));\n            width *= 0.5;\n            height *= 0.5;\n        }\n\n        return mipMaps;\n    }\n\n    /**\n     * Copy image to a canvas and add padding if necessary.\n     * @param image Input image.\n     * @param width Width of output image\n     * @param height Width of output image\n     * @returns Canvas with image and padding.\n     */\n    private copyImageWithPadding(\n        image: ImageData | ImageBitmap,\n        width: number,\n        height: number\n    ): HTMLCanvasElement {\n        this.m_paddingCanvas!.width = width;\n        this.m_paddingCanvas!.height = height;\n\n        this.m_paddingContext!.clearRect(0, 0, width, height);\n        if (image instanceof ImageBitmap) {\n            this.m_paddingContext!.drawImage(image, 0, 0);\n        } else {\n            this.m_paddingContext!.putImageData(image, 0, 0);\n        }\n\n        // Add horizontal padding\n        if (image.width !== width) {\n            this.m_paddingContext!.drawImage(\n                this.m_paddingCanvas!,\n                image.width - 1,\n                0,\n                1,\n                image.height,\n                image.width,\n                0,\n                width - image.width,\n                image.height\n            );\n        }\n\n        // Add vertical padding\n        if (image.height !== height) {\n            this.m_paddingContext!.drawImage(\n                this.m_paddingCanvas!,\n                0,\n                image.height - 1,\n                width,\n                1,\n                0,\n                image.height,\n                width,\n                height - image.height\n            );\n        }\n\n        return this.m_paddingCanvas!;\n    }\n\n    /**\n     * Resize an image.\n     *\n     * Quality of resized image is best when\n     * image.width and image.height are even numbers and the image\n     * is resized by factor 0.5 or 2.\n     * @param image Input image\n     * @param width Width of output image\n     * @param height Height of output image\n     * @return Resized image\n     */\n    private resizeImage(image: ImageData, width: number, height: number): ImageData {\n        //  Copy image data to canvas because ImageData can't be resized directly\n        const paddedImage = this.copyImageWithPadding(image, image.width, image.height);\n\n        // Resize image to resize canvas\n        this.m_resizeCanvas!.width = width;\n        this.m_resizeCanvas!.height = height;\n        this.m_resizeContext!.clearRect(0, 0, width, height);\n        this.m_resizeContext!.drawImage(paddedImage, 0, 0, width, height);\n\n        return this.m_resizeContext!.getImageData(0, 0, width, height);\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { LoggerManager, Math2D } from \"@here/harp-utils\";\nimport * as THREE from \"three\";\nimport { debugContext } from \"./DebugContext\";\n\ndeclare const require: any;\n\n// tslint:disable-next-line:no-var-requires\nconst RBush = require(\"rbush\");\n\nconst logger = LoggerManager.instance.create(\"ScreenCollissions\");\n\nexport interface IBox {\n    minX: number;\n    minY: number;\n    maxX: number;\n    maxY: number;\n}\n\nexport class CollisionBox extends Math2D.Box implements IBox {\n    constructor(box?: Math2D.Box | THREE.Box2 | IBox) {\n        super();\n        if (box !== undefined) {\n            this.copy(box);\n        }\n    }\n\n    copy(box: Math2D.Box | THREE.Box2 | IBox): CollisionBox {\n        if (box instanceof Math2D.Box) {\n            this.set(box.x, box.y, box.w, box.h);\n        } else if (box instanceof THREE.Box2) {\n            this.set(box.min.x, box.min.y, box.max.x - box.min.x, box.max.y - box.min.y);\n        } else {\n            this.set(box.minX, box.minY, box.maxX - box.minX, box.maxY - box.minY);\n        }\n        return this;\n    }\n    get minX(): number {\n        return this.x;\n    }\n    set minX(minX: number) {\n        this.x = minX;\n    }\n    get maxX(): number {\n        return this.x + this.w;\n    }\n    set maxX(maxX: number) {\n        this.w = maxX - this.x;\n    }\n    get minY(): number {\n        return this.y;\n    }\n    set minY(minY: number) {\n        this.y = minY;\n    }\n    get maxY(): number {\n        return this.y + this.h;\n    }\n    set maxY(maxY: number) {\n        this.h = maxY - this.y;\n    }\n}\n\n/**\n * Collision box with additional boxes defining tighter bounds for the enclosed feature\n * (e.g.glyph bounds for text).\n */\nexport class DetailedCollisionBox extends CollisionBox {\n    constructor(box: Math2D.Box | THREE.Box2 | IBox, readonly detailBoxes: CollisionBox[]) {\n        super(box);\n    }\n}\n\nexport interface LineWithBound extends IBox {\n    line: THREE.Line3;\n}\n\nexport function isLineWithBound(box: IBox): box is LineWithBound {\n    return (box as LineWithBound).line !== undefined;\n}\n\nconst tmpCollisionBox = new CollisionBox();\n\nexport class ScreenCollisions {\n    /** The screen bounding box. */\n    readonly screenBounds = new Math2D.Box();\n\n    /** Tree of allocated bounds. */\n\n    private rtree = new RBush();\n\n    /**\n     * Constructs a new ScreenCollisions object.\n     */\n    constructor() {\n        //\n    }\n\n    /**\n     * Resets the list of allocated screen bounds.\n     */\n    reset() {\n        this.rtree.clear();\n    }\n\n    /**\n     * Updates the screen bounds that are used to check if bounding boxes are visible.\n     *\n     * @param width The width of the container.\n     * @param height The height of the container.\n     */\n    update(width: number, height: number) {\n        this.screenBounds.set(width / -2, height / -2, width, height);\n        this.reset();\n    }\n\n    /**\n     * Marks the region of the screen intersecting with the given bounding box as allocated.\n     *\n     * @param bounds The bounding box in NDC scaled coordinates (i.e. top left is -width/2,\n     * -height/2)\n     */\n    allocate(bounds: Math2D.Box | CollisionBox | DetailedCollisionBox): void {\n        const bbox = !(bounds instanceof CollisionBox) ? new CollisionBox(bounds) : bounds;\n        this.rtree.insert(bbox);\n    }\n\n    /**\n     * Inserts the given bounds into the rtree.\n     *\n     * @param bounds The bounding boxes (the bounding boxes must be in the space returned from the\n     * ScreenProjector.project method).\n     */\n    allocateIBoxes(bounds: IBox[]) {\n        this.rtree.load(bounds);\n    }\n\n    /**\n     * Search for all bounds in the tree intersecting with the given box.\n     * @param box The box used for the search.\n     * @returns An array of all IBoxes intersecting with the given box.\n     */\n    search(box: CollisionBox): IBox[] {\n        return this.rtree.search(box);\n    }\n\n    /**\n     * Checks if the given bounding box is already allocated.\n     *\n     * @param bounds The bounding box in world coordinates.\n     */\n    isAllocated(bounds: Math2D.Box | CollisionBox): boolean {\n        const collisionBox = bounds instanceof CollisionBox ? bounds : tmpCollisionBox.copy(bounds);\n        const results = this.search(collisionBox);\n        return this.intersectsDetails(collisionBox, results);\n    }\n\n    /**\n     * Checks if the given screen bounds intersects with the frustum of the active camera.\n     *\n     * @param bounds The bounding box in world coordinates.\n     */\n    isVisible(bounds: Math2D.Box): boolean {\n        return this.screenBounds.intersects(bounds);\n    }\n\n    /**\n     * Checks if the given screen bounds is contained within the frustum of the active camera.\n     *\n     * @param bounds The bounding box in world coordinates.\n     */\n    isFullyVisible(bounds: Math2D.Box): boolean {\n        return this.screenBounds.containsBox(bounds);\n    }\n\n    /**\n     * Test whether a given [[CollisionBox]] intersects with any of the details in the specified\n     * [[IBox]]es.\n     *\n     * @param testBox The box to test for intersection.\n     * @param boxes The candidate boxes the test box may intersect with. It's assumed that the\n     * global bounds of these boxes intersect with the given test box.\n     * @returns `true` if any intersection found.\n     */\n    intersectsDetails(testBox: CollisionBox, boxes: IBox[]): boolean {\n        for (const box of boxes) {\n            if (box instanceof DetailedCollisionBox) {\n                for (const detailBox of box.detailBoxes) {\n                    if (detailBox.intersects(testBox)) {\n                        return true;\n                    }\n                }\n            } else if (isLineWithBound(box)) {\n                const boundedLine = box as LineWithBound;\n                if (this.intersectsLine(testBox, boundedLine)) {\n                    return true;\n                }\n            } else {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    /**\n     * Computes the intersection between the supplied CollisionBox and the LineWithBound.\n     * @note The [[CollisionBox]] is in Screen Bounds space, whereas the line must be\n     * in Screen Coordinate space\n     */\n    private intersectsLine(bbox: CollisionBox, boundedLine: LineWithBound): boolean {\n        const line = boundedLine.line;\n\n        // Note, these aren't normalized, but it doesn't matter, we are just interested\n        // in the sign.\n        const lineXDiffTransformed = line.end.x - line.start.x;\n\n        // Sign of bottom left, bottom right, top left and top right corners.\n        let signBL: number;\n        let signBR: number;\n        let signTL: number;\n        let signTR: number;\n        if (lineXDiffTransformed !== 0) {\n            const lineYDiffTransformed = line.end.y - line.start.y;\n            const normalX = lineYDiffTransformed;\n            const normalY = -lineXDiffTransformed;\n            const D = line.start.y - (lineYDiffTransformed / lineXDiffTransformed) * line.start.x;\n\n            signBL = Math.sign(bbox.minX * normalX + (bbox.minY - D) * normalY);\n            signBR = Math.sign(bbox.maxX * normalX + (bbox.minY - D) * normalY);\n            signTL = Math.sign(bbox.minX * normalX + (bbox.maxY - D) * normalY);\n            signTR = Math.sign(bbox.maxX * normalX + (bbox.maxY - D) * normalY);\n        } else {\n            signBL = Math.sign(bbox.minX - line.start.x);\n            signBR = Math.sign(bbox.maxX - line.start.x);\n            signTL = Math.sign(bbox.minX - line.start.x);\n            signTR = Math.sign(bbox.maxX - line.start.x);\n        }\n        return signBL !== signBR || signBL !== signTL || signBL !== signTR;\n    }\n}\n\n/**\n * @hidden\n *\n * Shows requests for screen space during labelling in an HTML canvas, which should be sized like\n * the actual map canvas. It can be placed on top of the map canvas to show exactly which requests\n * for screen space were done.\n *\n * Also logs statistics.\n */\nexport class ScreenCollisionsDebug extends ScreenCollisions {\n    /** 2D rendering context. */\n    private m_renderContext: CanvasRenderingContext2D | null = null;\n    private m_renderingEnabled = false;\n    private m_numAllocations = 0;\n    private m_numSuccessfulTests = 0;\n    private m_numFailedTests = 0;\n    private m_numSuccessfulVisibilityTests = 0;\n    private m_numFailedVisibilityTests = 0;\n\n    /**\n     * Constructs a new ScreenCollisions object which renders its state to a 2D canvas.\n     */\n    constructor(debugCanvas: HTMLCanvasElement) {\n        super();\n\n        if (debugCanvas !== undefined && debugCanvas !== null) {\n            this.m_renderContext = debugCanvas.getContext(\"2d\");\n        }\n    }\n\n    /**\n     * Resets the list of allocated bounds and clears the debug canvas.\n     * @override\n     */\n    reset() {\n        super.reset();\n\n        this.m_numAllocations = 0;\n        this.m_numSuccessfulTests = 0;\n        this.m_numFailedTests = 0;\n        this.m_numSuccessfulVisibilityTests = 0;\n        this.m_numFailedVisibilityTests = 0;\n    }\n\n    /**\n     * Updates the screen bounds used to check if bounding boxes are visible.\n     *\n     * @param width The width of the container.\n     * @param height The height of the container.\n     * @override\n     */\n    update(width: number, height: number) {\n        if (this.m_renderingEnabled) {\n            logger.log(\n                // tslint:disable-next-line: max-line-length\n                `Allocations: ${this.m_numAllocations} Successful Tests: ${this.m_numSuccessfulTests} Failed Tests: ${this.m_numFailedTests}  Successful Visibility Tests: ${this.m_numSuccessfulVisibilityTests}  Failed Visibility Tests: ${this.m_numFailedVisibilityTests} `\n            );\n        }\n\n        super.update(width, height);\n\n        if (this.m_renderContext !== null) {\n            this.m_renderContext.canvas.width = width;\n            this.m_renderContext.canvas.height = height;\n        }\n\n        // activate in the browser with:\n        // window.__debugContext.setValue(\"DEBUG_SCREEN_COLLISIONS\", true)\n        this.m_renderingEnabled = debugContext.getValue(\"DEBUG_SCREEN_COLLISIONS\");\n    }\n\n    /**\n     * Marks the region of the screen intersecting with the given bounding box as allocated.\n     *\n     * @param bounds the bounding box in world coordinates.\n     * @override\n     */\n    allocate(bounds: Math2D.Box | CollisionBox): void {\n        super.allocate(bounds);\n\n        this.m_numAllocations++;\n\n        if (this.m_renderingEnabled && this.m_renderContext !== null) {\n            this.m_renderContext.strokeStyle = \"#6666ff\";\n            this.m_renderContext.strokeRect(\n                bounds.x - this.screenBounds.x,\n                this.screenBounds.y + this.screenBounds.h - bounds.y,\n                bounds.w,\n                -bounds.h\n            );\n        }\n    }\n\n    /** @override */\n    allocateIBoxes(boundsArray: IBox[]) {\n        for (const bounds of boundsArray) {\n            this.m_numAllocations++;\n\n            if (this.m_renderingEnabled && this.m_renderContext !== null) {\n                this.m_renderContext.strokeStyle = \"#aa2222\";\n                this.m_renderContext.strokeRect(\n                    bounds.minX - this.screenBounds.x,\n                    this.screenBounds.y + this.screenBounds.h - bounds.minY,\n                    bounds.maxX - bounds.minX,\n                    -(bounds.maxY - bounds.minY)\n                );\n            }\n        }\n        super.allocateIBoxes(boundsArray);\n    }\n\n    /** @override */\n    intersectsDetails(testBox: CollisionBox, boxes: IBox[]): boolean {\n        const collisionFound = super.intersectsDetails(testBox, boxes);\n        if (this.m_renderingEnabled && this.m_renderContext !== null) {\n            const padding = collisionFound ? 2 : 1;\n            this.m_renderContext.strokeStyle = collisionFound ? \"#FF0000\" : \"#00ff00\";\n            this.m_renderContext.strokeRect(\n                testBox.x - this.screenBounds.x - padding,\n                this.screenBounds.y + this.screenBounds.h - testBox.y + padding,\n                testBox.w + 2 * padding,\n                -testBox.h - 2 * padding\n            );\n        }\n\n        if (collisionFound) {\n            this.m_numFailedTests++;\n        } else {\n            this.m_numSuccessfulTests++;\n        }\n\n        return collisionFound;\n    }\n\n    /**\n     * Checks if the given screen bounds intersects with the frustum of the active camera.\n     *\n     * @param bounds The bounding box in world coordinates.\n     * @override\n     */\n    isVisible(bounds: Math2D.Box): boolean {\n        const visible = super.isVisible(bounds);\n\n        if (visible) {\n            this.m_numSuccessfulVisibilityTests++;\n        } else {\n            this.m_numFailedVisibilityTests++;\n        }\n        return visible;\n    }\n}\n","!function(t,i){\"object\"==typeof exports&&\"undefined\"!=typeof module?module.exports=i():\"function\"==typeof define&&define.amd?define(i):(t=t||self).RBush=i()}(this,function(){\"use strict\";function t(t,r,e,a,h){!function t(n,r,e,a,h){for(;a>e;){if(a-e>600){var o=a-e+1,s=r-e+1,l=Math.log(o),f=.5*Math.exp(2*l/3),u=.5*Math.sqrt(l*f*(o-f)/o)*(s-o/2<0?-1:1),m=Math.max(e,Math.floor(r-s*f/o+u)),c=Math.min(a,Math.floor(r+(o-s)*f/o+u));t(n,r,m,c,h)}var p=n[r],d=e,x=a;for(i(n,e,r),h(n[a],p)>0&&i(n,e,a);d<x;){for(i(n,d,x),d++,x--;h(n[d],p)<0;)d++;for(;h(n[x],p)>0;)x--}0===h(n[e],p)?i(n,e,x):i(n,++x,a),x<=r&&(e=x+1),r<=x&&(a=x-1)}}(t,r,e||0,a||t.length-1,h||n)}function i(t,i,n){var r=t[i];t[i]=t[n],t[n]=r}function n(t,i){return t<i?-1:t>i?1:0}var r=function(t){void 0===t&&(t=9),this._maxEntries=Math.max(4,t),this._minEntries=Math.max(2,Math.ceil(.4*this._maxEntries)),this.clear()};function e(t,i,n){if(!n)return i.indexOf(t);for(var r=0;r<i.length;r++)if(n(t,i[r]))return r;return-1}function a(t,i){h(t,0,t.children.length,i,t)}function h(t,i,n,r,e){e||(e=p(null)),e.minX=1/0,e.minY=1/0,e.maxX=-1/0,e.maxY=-1/0;for(var a=i;a<n;a++){var h=t.children[a];o(e,t.leaf?r(h):h)}return e}function o(t,i){return t.minX=Math.min(t.minX,i.minX),t.minY=Math.min(t.minY,i.minY),t.maxX=Math.max(t.maxX,i.maxX),t.maxY=Math.max(t.maxY,i.maxY),t}function s(t,i){return t.minX-i.minX}function l(t,i){return t.minY-i.minY}function f(t){return(t.maxX-t.minX)*(t.maxY-t.minY)}function u(t){return t.maxX-t.minX+(t.maxY-t.minY)}function m(t,i){return t.minX<=i.minX&&t.minY<=i.minY&&i.maxX<=t.maxX&&i.maxY<=t.maxY}function c(t,i){return i.minX<=t.maxX&&i.minY<=t.maxY&&i.maxX>=t.minX&&i.maxY>=t.minY}function p(t){return{children:t,height:1,leaf:!0,minX:1/0,minY:1/0,maxX:-1/0,maxY:-1/0}}function d(i,n,r,e,a){for(var h=[n,r];h.length;)if(!((r=h.pop())-(n=h.pop())<=e)){var o=n+Math.ceil((r-n)/e/2)*e;t(i,o,n,r,a),h.push(n,o,o,r)}}return r.prototype.all=function(){return this._all(this.data,[])},r.prototype.search=function(t){var i=this.data,n=[];if(!c(t,i))return n;for(var r=this.toBBox,e=[];i;){for(var a=0;a<i.children.length;a++){var h=i.children[a],o=i.leaf?r(h):h;c(t,o)&&(i.leaf?n.push(h):m(t,o)?this._all(h,n):e.push(h))}i=e.pop()}return n},r.prototype.collides=function(t){var i=this.data;if(!c(t,i))return!1;for(var n=[];i;){for(var r=0;r<i.children.length;r++){var e=i.children[r],a=i.leaf?this.toBBox(e):e;if(c(t,a)){if(i.leaf||m(t,a))return!0;n.push(e)}}i=n.pop()}return!1},r.prototype.load=function(t){if(!t||!t.length)return this;if(t.length<this._minEntries){for(var i=0;i<t.length;i++)this.insert(t[i]);return this}var n=this._build(t.slice(),0,t.length-1,0);if(this.data.children.length)if(this.data.height===n.height)this._splitRoot(this.data,n);else{if(this.data.height<n.height){var r=this.data;this.data=n,n=r}this._insert(n,this.data.height-n.height-1,!0)}else this.data=n;return this},r.prototype.insert=function(t){return t&&this._insert(t,this.data.height-1),this},r.prototype.clear=function(){return this.data=p([]),this},r.prototype.remove=function(t,i){if(!t)return this;for(var n,r,a,h=this.data,o=this.toBBox(t),s=[],l=[];h||s.length;){if(h||(h=s.pop(),r=s[s.length-1],n=l.pop(),a=!0),h.leaf){var f=e(t,h.children,i);if(-1!==f)return h.children.splice(f,1),s.push(h),this._condense(s),this}a||h.leaf||!m(h,o)?r?(n++,h=r.children[n],a=!1):h=null:(s.push(h),l.push(n),n=0,r=h,h=h.children[0])}return this},r.prototype.toBBox=function(t){return t},r.prototype.compareMinX=function(t,i){return t.minX-i.minX},r.prototype.compareMinY=function(t,i){return t.minY-i.minY},r.prototype.toJSON=function(){return this.data},r.prototype.fromJSON=function(t){return this.data=t,this},r.prototype._all=function(t,i){for(var n=[];t;)t.leaf?i.push.apply(i,t.children):n.push.apply(n,t.children),t=n.pop();return i},r.prototype._build=function(t,i,n,r){var e,h=n-i+1,o=this._maxEntries;if(h<=o)return a(e=p(t.slice(i,n+1)),this.toBBox),e;r||(r=Math.ceil(Math.log(h)/Math.log(o)),o=Math.ceil(h/Math.pow(o,r-1))),(e=p([])).leaf=!1,e.height=r;var s=Math.ceil(h/o),l=s*Math.ceil(Math.sqrt(o));d(t,i,n,l,this.compareMinX);for(var f=i;f<=n;f+=l){var u=Math.min(f+l-1,n);d(t,f,u,s,this.compareMinY);for(var m=f;m<=u;m+=s){var c=Math.min(m+s-1,u);e.children.push(this._build(t,m,c,r-1))}}return a(e,this.toBBox),e},r.prototype._chooseSubtree=function(t,i,n,r){for(;r.push(i),!i.leaf&&r.length-1!==n;){for(var e=1/0,a=1/0,h=void 0,o=0;o<i.children.length;o++){var s=i.children[o],l=f(s),u=(m=t,c=s,(Math.max(c.maxX,m.maxX)-Math.min(c.minX,m.minX))*(Math.max(c.maxY,m.maxY)-Math.min(c.minY,m.minY))-l);u<a?(a=u,e=l<e?l:e,h=s):u===a&&l<e&&(e=l,h=s)}i=h||i.children[0]}var m,c;return i},r.prototype._insert=function(t,i,n){var r=n?t:this.toBBox(t),e=[],a=this._chooseSubtree(r,this.data,i,e);for(a.children.push(t),o(a,r);i>=0&&e[i].children.length>this._maxEntries;)this._split(e,i),i--;this._adjustParentBBoxes(r,e,i)},r.prototype._split=function(t,i){var n=t[i],r=n.children.length,e=this._minEntries;this._chooseSplitAxis(n,e,r);var h=this._chooseSplitIndex(n,e,r),o=p(n.children.splice(h,n.children.length-h));o.height=n.height,o.leaf=n.leaf,a(n,this.toBBox),a(o,this.toBBox),i?t[i-1].children.push(o):this._splitRoot(n,o)},r.prototype._splitRoot=function(t,i){this.data=p([t,i]),this.data.height=t.height+1,this.data.leaf=!1,a(this.data,this.toBBox)},r.prototype._chooseSplitIndex=function(t,i,n){for(var r,e,a,o,s,l,u,m=1/0,c=1/0,p=i;p<=n-i;p++){var d=h(t,0,p,this.toBBox),x=h(t,p,n,this.toBBox),v=(e=d,a=x,o=void 0,s=void 0,l=void 0,u=void 0,o=Math.max(e.minX,a.minX),s=Math.max(e.minY,a.minY),l=Math.min(e.maxX,a.maxX),u=Math.min(e.maxY,a.maxY),Math.max(0,l-o)*Math.max(0,u-s)),M=f(d)+f(x);v<m?(m=v,r=p,c=M<c?M:c):v===m&&M<c&&(c=M,r=p)}return r||n-i},r.prototype._chooseSplitAxis=function(t,i,n){var r=t.leaf?this.compareMinX:s,e=t.leaf?this.compareMinY:l;this._allDistMargin(t,i,n,r)<this._allDistMargin(t,i,n,e)&&t.children.sort(r)},r.prototype._allDistMargin=function(t,i,n,r){t.children.sort(r);for(var e=this.toBBox,a=h(t,0,i,e),s=h(t,n-i,n,e),l=u(a)+u(s),f=i;f<n-i;f++){var m=t.children[f];o(a,t.leaf?e(m):m),l+=u(a)}for(var c=n-i-1;c>=i;c--){var p=t.children[c];o(s,t.leaf?e(p):p),l+=u(s)}return l},r.prototype._adjustParentBBoxes=function(t,i,n){for(var r=n;r>=0;r--)o(i[r],t)},r.prototype._condense=function(t){for(var i=t.length-1,n=void 0;i>=0;i--)0===t[i].children.length?i>0?(n=t[i-1].children).splice(n.indexOf(t[i]),1):this.clear():a(t[i],this.toBBox)},r});\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport {\n    ColorUtils,\n    getPropertyValue,\n    LineMarkerTechnique,\n    MapEnv,\n    PoiTechnique,\n    TextStyleDefinition,\n    TextTechnique,\n    Theme\n} from \"@here/harp-datasource-protocol\";\nimport {\n    DefaultTextStyle,\n    FontStyle,\n    FontUnit,\n    FontVariant,\n    HorizontalAlignment,\n    TextCanvas,\n    TextLayoutParameters,\n    TextLayoutStyle,\n    TextRenderParameters,\n    TextRenderStyle,\n    VerticalAlignment,\n    WrappingMode\n} from \"@here/harp-text-canvas\";\nimport { getOptionValue, LoggerManager } from \"@here/harp-utils\";\nimport { ColorCache } from \"../ColorCache\";\nimport { evaluateColorProperty } from \"../DecodedTileHelpers\";\nimport { PoiRenderer } from \"../poi/PoiRenderer\";\nimport { Tile } from \"../Tile\";\nimport { TextCanvasRenderer } from \"./TextCanvasRenderer\";\n\nconst logger = LoggerManager.instance.create(\"TextStyleCache\");\n\nconst defaultTextRenderStyle = new TextRenderStyle({\n    fontSize: {\n        unit: FontUnit.Pixel,\n        size: 32,\n        backgroundSize: 8\n    },\n    color: ColorCache.instance.getColor(\"#6d7477\"),\n    opacity: 1.0,\n    backgroundColor: ColorCache.instance.getColor(\"#f7fbfd\"),\n    backgroundOpacity: 0.5\n});\n\nconst defaultTextLayoutStyle = new TextLayoutStyle({\n    verticalAlignment: VerticalAlignment.Center,\n    horizontalAlignment: HorizontalAlignment.Center\n});\n\nconst DEFAULT_STYLE_NAME = \"default\";\n\n/**\n * [[TextElementsRenderer]] representation of a [[Theme]]'s TextStyle.\n */\nexport interface TextElementStyle {\n    name: string;\n    fontCatalog: string;\n    renderParams: TextRenderParameters;\n    layoutParams: TextLayoutParameters;\n    textCanvas?: TextCanvas;\n    poiRenderer?: PoiRenderer;\n}\n\nexport class TextStyleCache {\n    private m_textStyles: Map<string, TextElementStyle> = new Map();\n    private m_defaultStyle: TextElementStyle = {\n        name: DEFAULT_STYLE_NAME,\n        fontCatalog: \"\",\n        renderParams: defaultTextRenderStyle.params,\n        layoutParams: defaultTextLayoutStyle.params\n    };\n\n    constructor(private m_theme: Theme) {}\n\n    initializeDefaultTextElementStyle(defaultFontCatalogName: string) {\n        if (this.m_theme.textStyles === undefined) {\n            this.m_theme.textStyles = [];\n        }\n        const styles = this.m_theme.textStyles;\n\n        const themedDefaultStyle = styles.find(style => style.name === DEFAULT_STYLE_NAME);\n        if (themedDefaultStyle !== undefined) {\n            this.m_defaultStyle = this.createTextElementStyle(\n                themedDefaultStyle,\n                DEFAULT_STYLE_NAME\n            );\n        } else if (this.m_theme.defaultTextStyle !== undefined) {\n            this.m_defaultStyle = this.createTextElementStyle(\n                this.m_theme.defaultTextStyle,\n                DEFAULT_STYLE_NAME\n            );\n        } else if (styles.length > 0) {\n            this.m_defaultStyle = this.createTextElementStyle(styles[0], DEFAULT_STYLE_NAME);\n        }\n        this.m_defaultStyle.fontCatalog = defaultFontCatalogName;\n    }\n\n    initializeTextElementStyles(\n        defaultPoiRenderer: PoiRenderer,\n        defaultTextCanvas: TextCanvas,\n        textRenderers: TextCanvasRenderer[]\n    ) {\n        // Initialize default text style.\n        if (this.m_defaultStyle.fontCatalog !== undefined) {\n            const styledTextRenderer = textRenderers.find(\n                textRenderer => textRenderer.fontCatalog === this.m_defaultStyle.fontCatalog\n            );\n            this.m_defaultStyle.textCanvas =\n                styledTextRenderer !== undefined ? styledTextRenderer.textCanvas : undefined;\n            this.m_defaultStyle.poiRenderer =\n                styledTextRenderer !== undefined ? styledTextRenderer.poiRenderer : undefined;\n        }\n        if (this.m_defaultStyle.textCanvas === undefined) {\n            if (this.m_defaultStyle.fontCatalog !== undefined) {\n                logger.warn(\n                    `FontCatalog '${this.m_defaultStyle.fontCatalog}' set in TextStyle '${\n                        this.m_defaultStyle.name\n                    }' not found, using default fontCatalog(${\n                        defaultTextCanvas!.fontCatalog.name\n                    }).`\n                );\n            }\n            this.m_defaultStyle.textCanvas = defaultTextCanvas;\n            this.m_defaultStyle.poiRenderer = defaultPoiRenderer;\n        }\n\n        // Initialize theme text styles.\n        this.m_theme.textStyles!.forEach(element => {\n            this.m_textStyles.set(\n                element.name!,\n                this.createTextElementStyle(element, element.name!)\n            );\n        });\n        // tslint:disable-next-line:no-unused-variable\n        for (const [, style] of this.m_textStyles) {\n            if (style.textCanvas === undefined) {\n                if (style.fontCatalog !== undefined) {\n                    const styledTextRenderer = textRenderers.find(\n                        textRenderer => textRenderer.fontCatalog === style.fontCatalog\n                    );\n                    style.textCanvas =\n                        styledTextRenderer !== undefined\n                            ? styledTextRenderer.textCanvas\n                            : undefined;\n                    style.poiRenderer =\n                        styledTextRenderer !== undefined\n                            ? styledTextRenderer.poiRenderer\n                            : undefined;\n                }\n                if (style.textCanvas === undefined) {\n                    if (style.fontCatalog !== undefined) {\n                        logger.warn(\n                            `FontCatalog '${style.fontCatalog}' set in TextStyle '${\n                                style.name\n                            }' not found, using default fontCatalog(${\n                                defaultTextCanvas!.fontCatalog.name\n                            }).`\n                        );\n                    }\n                    style.textCanvas = defaultTextCanvas;\n                    style.poiRenderer = defaultPoiRenderer;\n                }\n            }\n        }\n    }\n\n    /**\n     * Retrieves a [[TextElementStyle]] for [[Theme]]'s [[TextStyle]] id.\n     */\n    getTextElementStyle(styleId?: string): TextElementStyle {\n        let result;\n        if (styleId === undefined) {\n            result = this.m_defaultStyle;\n        } else {\n            result = this.m_textStyles.get(styleId);\n            if (result === undefined) {\n                result = this.m_defaultStyle;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * Gets the appropriate [[TextRenderStyle]] to use for a label. Depends heavily on the label's\n     * [[Technique]] and the current zoomLevel.\n     */\n    createRenderStyle(\n        tile: Tile,\n        technique: TextTechnique | PoiTechnique | LineMarkerTechnique\n    ): TextRenderStyle {\n        const mapView = tile.mapView;\n        const zoomLevel = mapView.zoomLevel;\n        const discreteZoomLevel = Math.floor(zoomLevel);\n\n        // Environment with $zoom forced to integer to achieve stable interpolated values.\n        const discreteZoomEnv = new MapEnv({ $zoom: discreteZoomLevel }, mapView.env);\n\n        const defaultRenderParams = this.m_defaultStyle.renderParams;\n\n        // Sets opacity to 1.0 if default and technique attribute are undefined.\n        const defaultOpacity = getOptionValue(defaultRenderParams.opacity, 1.0);\n        // Interpolate opacity but only on discreet zoom levels (step interpolation).\n        let opacity = getPropertyValue(\n            getOptionValue(technique.opacity, defaultOpacity),\n            discreteZoomEnv\n        );\n\n        let color: THREE.Color | undefined;\n        // Store color (RGB) in cache and multiply opacity value with the color alpha channel.\n        if (technique.color !== undefined) {\n            let hexColor = evaluateColorProperty(technique.color, discreteZoomEnv);\n            if (hexColor !== undefined) {\n                if (ColorUtils.hasAlphaInHex(hexColor)) {\n                    const alpha = ColorUtils.getAlphaFromHex(hexColor);\n                    opacity = opacity * alpha;\n                    hexColor = ColorUtils.removeAlphaFromHex(hexColor);\n                }\n                color = ColorCache.instance.getColor(hexColor);\n            }\n        }\n\n        // Sets background size to 0.0 if default and technique attribute is undefined.\n        const defaultBackgroundSize = getOptionValue(\n            defaultRenderParams.fontSize!.backgroundSize,\n            0\n        );\n        const backgroundSize = getPropertyValue(\n            getOptionValue(technique.backgroundSize, defaultBackgroundSize),\n            discreteZoomEnv\n        );\n\n        const hasBackgroundDefined =\n            technique.backgroundColor !== undefined &&\n            technique.backgroundSize !== undefined &&\n            backgroundSize > 0;\n\n        // Sets background opacity to 1.0 if default and technique value is undefined while\n        // background size and color is specified, otherwise set value in default render\n        // params or 0.0 if neither set. Makes label opaque when backgroundColor and\n        // backgroundSize are set.\n        const defaultBackgroundOpacity = getOptionValue(defaultRenderParams.backgroundOpacity, 0.0);\n        let backgroundOpacity = getPropertyValue(\n            getOptionValue(\n                technique.backgroundOpacity,\n                hasBackgroundDefined ? 1.0 : defaultBackgroundOpacity\n            ),\n            discreteZoomEnv\n        );\n\n        let backgroundColor: THREE.Color | undefined;\n        // Store background color (RGB) in cache and multiply backgroundOpacity by its alpha.\n        if (technique.backgroundColor !== undefined) {\n            let hexBgColor = evaluateColorProperty(technique.backgroundColor, discreteZoomEnv);\n            if (hexBgColor !== undefined) {\n                if (ColorUtils.hasAlphaInHex(hexBgColor)) {\n                    const alpha = ColorUtils.getAlphaFromHex(hexBgColor);\n                    backgroundOpacity = backgroundOpacity * alpha;\n                    hexBgColor = ColorUtils.removeAlphaFromHex(hexBgColor);\n                }\n                backgroundColor = ColorCache.instance.getColor(hexBgColor);\n            }\n        }\n\n        const renderParams = {\n            fontName: getOptionValue(technique.fontName, defaultRenderParams.fontName),\n            fontSize: {\n                unit: FontUnit.Pixel,\n                size: getPropertyValue(\n                    getOptionValue(technique.size, defaultRenderParams.fontSize!.size),\n                    discreteZoomEnv\n                ),\n                backgroundSize\n            },\n            fontStyle:\n                technique.fontStyle === \"Regular\" ||\n                technique.fontStyle === \"Bold\" ||\n                technique.fontStyle === \"Italic\" ||\n                technique.fontStyle === \"BoldItalic\"\n                    ? FontStyle[technique.fontStyle]\n                    : defaultRenderParams.fontStyle,\n            fontVariant:\n                technique.fontVariant === \"Regular\" ||\n                technique.fontVariant === \"AllCaps\" ||\n                technique.fontVariant === \"SmallCaps\"\n                    ? FontVariant[technique.fontVariant]\n                    : defaultRenderParams.fontVariant,\n            rotation: getOptionValue(technique.rotation, defaultRenderParams.rotation),\n            color: getOptionValue(\n                color,\n                getOptionValue(defaultRenderParams.color, DefaultTextStyle.DEFAULT_COLOR)\n            ),\n            backgroundColor: getOptionValue(\n                backgroundColor,\n                getOptionValue(\n                    defaultRenderParams.backgroundColor,\n                    DefaultTextStyle.DEFAULT_BACKGROUND_COLOR\n                )\n            ),\n            opacity,\n            backgroundOpacity\n        };\n\n        const themeRenderParams = this.getTextElementStyle(technique.style).renderParams;\n        const renderStyle = new TextRenderStyle({\n            ...themeRenderParams,\n            ...renderParams\n        });\n\n        return renderStyle;\n    }\n\n    /**\n     * Create the appropriate [[TextRenderStyle]] to use for a label. Depends heavily on the label's\n     * [[Technique]] and the current zoomLevel.\n     *\n     * @param tile The [[Tile]] to process.\n     * @param technique Label's technique.\n     */\n    createLayoutStyle(\n        tile: Tile,\n        technique: TextTechnique | PoiTechnique | LineMarkerTechnique\n    ): TextLayoutStyle {\n        const mapView = tile.mapView;\n        const floorZoomLevel = Math.floor(tile.mapView.zoomLevel);\n\n        const discreteZoomEnv = new MapEnv({ $zoom: floorZoomLevel }, mapView.env);\n\n        const defaultLayoutParams = this.m_defaultStyle.layoutParams;\n\n        const hAlignment = getPropertyValue(technique.hAlignment, discreteZoomEnv) as\n            | string\n            | undefined;\n        const vAlignment = getPropertyValue(technique.vAlignment, discreteZoomEnv) as\n            | string\n            | undefined;\n        const wrapping = getPropertyValue(technique.wrappingMode, discreteZoomEnv) as\n            | string\n            | undefined;\n\n        const horizontalAlignment: HorizontalAlignment | undefined =\n            hAlignment === \"Left\" || hAlignment === \"Center\" || hAlignment === \"Right\"\n                ? HorizontalAlignment[hAlignment]\n                : defaultLayoutParams.horizontalAlignment;\n\n        const verticalAlignment: VerticalAlignment | undefined =\n            vAlignment === \"Above\" || vAlignment === \"Center\" || vAlignment === \"Below\"\n                ? VerticalAlignment[vAlignment]\n                : defaultLayoutParams.verticalAlignment;\n\n        const layoutParams = {\n            tracking:\n                getPropertyValue(technique.tracking, discreteZoomEnv) ??\n                defaultLayoutParams.tracking,\n            leading:\n                getPropertyValue(technique.leading, discreteZoomEnv) ?? defaultLayoutParams.leading,\n            maxLines:\n                getPropertyValue(technique.maxLines, discreteZoomEnv) ??\n                defaultLayoutParams.maxLines,\n            lineWidth:\n                getPropertyValue(technique.lineWidth, discreteZoomEnv) ??\n                defaultLayoutParams.lineWidth,\n            canvasRotation:\n                getPropertyValue(technique.canvasRotation, discreteZoomEnv) ??\n                defaultLayoutParams.canvasRotation,\n            lineRotation:\n                getPropertyValue(technique.lineRotation, discreteZoomEnv) ??\n                defaultLayoutParams.lineRotation,\n            wrappingMode:\n                wrapping === \"None\" || wrapping === \"Character\" || wrapping === \"Word\"\n                    ? WrappingMode[wrapping]\n                    : defaultLayoutParams.wrappingMode,\n            horizontalAlignment,\n            verticalAlignment\n        };\n\n        const themeLayoutParams = this.getTextElementStyle(technique.style);\n        const layoutStyle = new TextLayoutStyle({\n            ...themeLayoutParams,\n            ...layoutParams\n        });\n\n        return layoutStyle;\n    }\n\n    private createTextElementStyle(\n        style: TextStyleDefinition,\n        styleName: string\n    ): TextElementStyle {\n        return {\n            name: styleName,\n            fontCatalog: getOptionValue(style.fontCatalogName, this.m_defaultStyle.fontCatalog),\n            renderParams: {\n                fontName: style.fontName,\n                fontSize: {\n                    unit: FontUnit.Pixel,\n                    size: 32,\n                    backgroundSize: style.backgroundSize || 8\n                },\n                fontStyle:\n                    style.fontStyle === \"Regular\" ||\n                    style.fontStyle === \"Bold\" ||\n                    style.fontStyle === \"Italic\" ||\n                    style.fontStyle === \"BoldItalic\"\n                        ? FontStyle[style.fontStyle]\n                        : undefined,\n                fontVariant:\n                    style.fontVariant === \"Regular\" ||\n                    style.fontVariant === \"AllCaps\" ||\n                    style.fontVariant === \"SmallCaps\"\n                        ? FontVariant[style.fontVariant]\n                        : undefined,\n                rotation: style.rotation,\n                color:\n                    style.color !== undefined\n                        ? ColorCache.instance.getColor(style.color)\n                        : undefined,\n                backgroundColor:\n                    style.backgroundColor !== undefined\n                        ? ColorCache.instance.getColor(style.backgroundColor)\n                        : undefined,\n                opacity: style.opacity,\n                backgroundOpacity: style.backgroundOpacity\n            },\n            layoutParams: {\n                tracking: style.tracking,\n                leading: style.leading,\n                maxLines: style.maxLines,\n                lineWidth: style.lineWidth,\n                canvasRotation: style.canvasRotation,\n                lineRotation: style.lineRotation,\n                wrappingMode:\n                    style.wrappingMode === \"None\" ||\n                    style.wrappingMode === \"Character\" ||\n                    style.wrappingMode === \"Word\"\n                        ? WrappingMode[style.wrappingMode]\n                        : WrappingMode.Word,\n                verticalAlignment:\n                    style.vAlignment === \"Above\" ||\n                    style.vAlignment === \"Center\" ||\n                    style.vAlignment === \"Below\"\n                        ? VerticalAlignment[style.vAlignment]\n                        : VerticalAlignment.Center,\n                horizontalAlignment:\n                    style.hAlignment === \"Left\" ||\n                    style.hAlignment === \"Center\" ||\n                    style.hAlignment === \"Right\"\n                        ? HorizontalAlignment[style.hAlignment]\n                        : HorizontalAlignment.Center\n            }\n        };\n    }\n}\n","/*\n * Copyright (C) 2017-2020 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport * as THREE from \"three\";\n\n/**\n * A mesh that can store multiple versions of a geometry with differents level of detail.\n * The rendered level of detail can be adapted during runtime.\n * @internal\n * @hidden\n */\nexport class LodMesh extends THREE.Mesh {\n    private m_geometries: Array<THREE.Geometry | THREE.BufferGeometry> | undefined;\n\n    /**\n     * Creates a [[LodMesh]] with given geometries and materials\n     * @param geometries A list of geometries with different levels of detail\n     * @param material Material for the mesh\n     */\n    constructor(\n        geometries?: Array<THREE.Geometry | THREE.BufferGeometry>,\n        material?: THREE.Material | THREE.Material[] | undefined\n    ) {\n        super(undefined, material);\n\n        this.geometries = geometries;\n    }\n\n    /**\n     * Update geometries of mesh\n     */\n    set geometries(geometries: Array<THREE.Geometry | THREE.BufferGeometry> | undefined) {\n        // dispose previous geometries\n        if (this.m_geometries !== geometries) {\n            this.disposeGeometries();\n        }\n\n        this.m_geometries = geometries;\n        if (this.geometries && this.m_geometries!.length > 0) {\n            this.geometry = this.m_geometries![0];\n        }\n    }\n\n    /**\n     * Get geometries of mesh\n     */\n    get geometries() {\n        return this.m_geometries;\n    }\n\n    /**\n     * Change the rendered level of detail of the mesh\n     * @param level The level of detail (index of the geometry in the list).\n     */\n    setLevelOfDetail(level: number): void {\n        if (!this.m_geometries || this.m_geometries.length === 0) {\n            return;\n        }\n        level = THREE.MathUtils.clamp(level, 0, this.m_geometries.length - 1);\n\n        this.geometry = this.m_geometries[level];\n    }\n\n    /**\n     * Dispose all geometries of mesh\n     */\n    private disposeGeometries(): void {\n        if (this.m_geometries) {\n            for (const geometry of this.m_geometries!) {\n                geometry.dispose();\n            }\n        }\n        this.geometry.dispose();\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { Vector3 } from \"three\";\n\nimport { MapView } from \"./MapView\";\nimport { MapViewUtils } from \"./Utils\";\n\n/**\n * The default value for camera movement throttling, in milliseconds.\n */\nconst DEFAULT_THROTTLING_TIMEOUT = 300;\n\n/**\n * The `CameraMovementDetector` class checks for changes in camera position and orientation, to\n * detect continuous movements without the animation mode activated in [[MapView]]. If the\n * interaction is not continuous enough, you can use a throttling timer to reduce the number of\n * callbacks.\n */\nexport class CameraMovementDetector {\n    private m_lastAttitude?: MapViewUtils.Attitude;\n    private m_lastCameraPos = new Vector3();\n    private m_newCameraPos = new Vector3();\n    private m_cameraMovedLastFrame: boolean | undefined;\n    private m_throttlingTimerId?: number = undefined;\n    private m_movementDetectorDeadline: number = 0;\n\n    /**\n     * Initializes the detector with timeout value and callbacks. [[MapView]] also provides\n     * events for client code to be notified when these cues occur.\n     *\n     * @param m_throttlingTimeout The delay, in milliseconds, between the last user interaction\n     * detected and the call to `m_movementFinishedFunc`; the default is `300`.\n     * @param m_movementStartedFunc Callback function, called when the user starts interacting.\n     * @param m_movementFinishedFunc Callback function, called when the user stops interacting.\n     */\n    constructor(\n        private m_throttlingTimeout: number | undefined,\n        private m_movementStartedFunc: (() => void) | undefined,\n        private m_movementFinishedFunc: (() => void) | undefined\n    ) {\n        if (this.m_throttlingTimeout === undefined) {\n            this.m_throttlingTimeout = DEFAULT_THROTTLING_TIMEOUT;\n        }\n    }\n\n    /**\n     * Checks if the camera has moved since the last time it was checked. The\n     * `m_movementStartedFunc` is called when a movement starts. If no movement\n     * is detected, a timer for `m_movementFinishedFunc` starts.\n     *\n     * @param mapView [[Mapview]]'s position and camera are checked for modifications.\n     */\n    checkCameraMoved(mapView: MapView, now: number): boolean {\n        const newAttitude = MapViewUtils.extractAttitude(mapView, mapView.camera);\n        const newCameraPos = mapView.camera.getWorldPosition(this.m_newCameraPos);\n\n        if (this.m_lastAttitude === undefined) {\n            this.m_lastCameraPos.copy(newCameraPos);\n            this.m_lastAttitude = newAttitude;\n            return false;\n        }\n        const cameraMoved =\n            !this.m_lastCameraPos.equals(newCameraPos) ||\n            newAttitude.yaw !== this.m_lastAttitude.yaw ||\n            newAttitude.pitch !== this.m_lastAttitude.pitch ||\n            newAttitude.roll !== this.m_lastAttitude.roll;\n\n        if (cameraMoved) {\n            this.m_lastCameraPos.copy(newCameraPos);\n            this.m_lastAttitude = newAttitude;\n        }\n\n        if (cameraMoved !== this.m_cameraMovedLastFrame) {\n            if (cameraMoved) {\n                this.movementStarted();\n            }\n            this.m_cameraMovedLastFrame = cameraMoved;\n        }\n        if (cameraMoved) {\n            // Start timer\n            this.m_movementDetectorDeadline = now + this.m_throttlingTimeout!;\n            this.startMovementFinishedTimer(now);\n        }\n\n        return this.m_cameraMovedLastFrame;\n    }\n\n    /**\n     * Reset the saved camera position. Next time checkCameraMoved is called, it will return\n     * `false`.\n     */\n    clear(mapView: MapView) {\n        const newCameraPos = mapView.camera.getWorldPosition(this.m_newCameraPos);\n        this.m_lastCameraPos.set(newCameraPos.x, newCameraPos.y, newCameraPos.z);\n\n        const newAttitude = MapViewUtils.extractAttitude(mapView, mapView.camera);\n        this.m_lastAttitude = newAttitude;\n    }\n\n    /**\n     * Force change of camera position. Next time checkCameraMoved is called, it will return `true`.\n     */\n    forceMoved() {\n        this.m_lastCameraPos.set(Number.NaN, Number.NaN, Number.NaN);\n    }\n\n    /**\n     * Returns `true` if the camera of this [[MapView]] is currently moving. In this case the\n     * `m_movementFinishedFunc` is waiting to be called after the throttling timer runs out.\n     */\n    get cameraIsMoving() {\n        return this.m_throttlingTimerId !== undefined;\n    }\n\n    /**\n     * Disposes resources and kills the throttling timer.\n     */\n    dispose() {\n        this.removeMovementFinishedTimer();\n        this.m_movementStartedFunc = undefined;\n        this.m_movementFinishedFunc = undefined;\n    }\n\n    /**\n     * Returns `true` if the camera has moved in the last frame.\n     */\n    get cameraMovedLastFrame(): boolean {\n        return this.m_cameraMovedLastFrame === true;\n    }\n\n    private movementStarted() {\n        if (this.m_movementStartedFunc !== undefined) {\n            this.m_movementStartedFunc();\n        }\n    }\n\n    private movementFinished() {\n        this.removeMovementFinishedTimer();\n        if (this.m_movementFinishedFunc !== undefined) {\n            this.m_movementFinishedFunc();\n        }\n    }\n\n    private startMovementFinishedTimer(now: number) {\n        if (this.m_throttlingTimerId === undefined) {\n            const remainingTime = Math.max(0, this.m_movementDetectorDeadline - now);\n            this.m_throttlingTimerId = setTimeout(this.onDeadlineTimer, remainingTime) as any;\n        }\n    }\n\n    private onDeadlineTimer = () => {\n        this.m_throttlingTimerId = undefined;\n        const now = performance.now();\n        if (now >= this.m_movementDetectorDeadline) {\n            this.movementFinished();\n        } else {\n            this.startMovementFinishedTimer(now);\n        }\n    };\n\n    private removeMovementFinishedTimer() {\n        if (this.m_throttlingTimerId !== undefined) {\n            clearTimeout(this.m_throttlingTimerId);\n            this.m_throttlingTimerId = undefined;\n        }\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nexport { IPassManager } from \"./IPassManager\";\nexport {\n    IMapAntialiasSettings,\n    IMapRenderingManager,\n    MapRenderingManager\n} from \"./MapRenderingManager\";\nexport { IPass, Pass } from \"./Pass\";\nexport { MSAARenderPass, MSAASampling } from \"./MSAARenderPass\";\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\nimport { CopyShader, MSAAMaterial } from \"@here/harp-materials\";\nimport * as THREE from \"three\";\n\nimport { Pass } from \"./Pass\";\n\n/**\n * This enum represents the sampling level to apply to a [[MSAARenderPass]] instance. At level 0,\n * only one sample is performed, which is like disabling the MSAA pass.\n */\nexport enum MSAASampling {\n    \"Level_0\",\n    \"Level_1\",\n    \"Level_2\",\n    \"Level_3\",\n    \"Level_4\",\n    \"Level_5\"\n}\n\n/**\n * [[MapView]]'s MSAA implementation. MSAA stands for Multi Sampling Anti-Aliasing, and its concept\n * is to provide a rendering engine with additional color values for each pixel, so they can include\n * the missing bits between them on a screen. WebGL already comes with a native MSAA implementation\n * with four samples. Because of its native nature, it is more efficient and one may not want to use\n * MapView's MSAA implementation when these four samples are satisfying. However in some situations\n * they are not: on low devices, MSAA can impact the framerate and we may desire to reduce the\n * number of samples at runtime. On the other hand, when the interaction stops, the engine also\n * stops rendering the map, and because a map relies on many line-like patterns, aliasing can then\n * turn very noticeable. In such static renders, the number of samples could be dramatically\n * increased on a last frame to render.\n */\nexport class MSAARenderPass extends Pass {\n    /**\n     * The sampling level determines the number of samples that will be performed per frame.\n     * Renders will happen `2 ^ samplingLevel` time(s). `samplingLevel` stands between `0` and `5`.\n     * Therefore there can be between 1 and 32 samples.\n     *\n     * @default `SamplingLevel.Level_1`\n     */\n    samplingLevel: MSAASampling = MSAASampling.Level_1;\n\n    private m_renderTarget: THREE.WebGLRenderTarget | null = null;\n    private readonly m_localCamera: THREE.OrthographicCamera = new THREE.OrthographicCamera(\n        -1,\n        1,\n        1,\n        -1,\n        0,\n        1\n    );\n    private readonly m_quadScene: THREE.Scene = new THREE.Scene();\n    private readonly m_quadUniforms: { [uniformName: string]: THREE.IUniform } =\n        CopyShader.uniforms;\n    private readonly m_quadMaterial: THREE.ShaderMaterial = new MSAAMaterial(this.m_quadUniforms);\n    private readonly m_quad: THREE.Mesh = new THREE.Mesh(\n        new THREE.PlaneBufferGeometry(2, 2),\n        this.m_quadMaterial\n    );\n\n    /**\n     * The constructor for `MSAARenderPass`. It builds an internal scene with a camera looking at a\n     * quad.\n     *\n     * @param m_scene The scene to render.\n     * @param m_camera The camera to render the scene through.\n     */\n    constructor() {\n        super();\n        this.m_quad.frustumCulled = false;\n        this.m_quadScene.add(this.m_quad);\n    }\n\n    /**\n     * Releases all used resources.\n     */\n    dispose() {\n        if (this.m_renderTarget !== null) {\n            this.m_renderTarget.dispose();\n            this.m_renderTarget = null;\n        }\n    }\n\n    /**\n     * The render function of `MSAARenderPass`. At each call of this method, and for each sample,\n     * the [[MapView]] camera provided in the `render` method is offset within the dimension of a\n     * pixel on screen. It then renders the whole scene with this offset to a local\n     * `WebGLRenderTarget` instance, via a `WebGLRenderer` instance. Finally the local camera\n     * created in the constructor shoots the quad and renders to the write buffer or to the frame\n     * buffer. The quad material's opacity is modified so the renders can accumulate in the\n     * targetted buffer.\n     *\n     * The number of samples can be modified at runtime through the enum [[SamplingLevel]].\n     *\n     * If there is no further pass, the [[Pass.renderToScreen]] flag can be set to `true` to\n     * output directly to the framebuffer.\n     *\n     * @param renderer The ThreeJS WebGLRenderer instance to render the scene with.\n     * @param scene The ThreeJS Scene instance to render the scene with.\n     * @param camera The ThreeJS Camera instance to render the scene with.\n     * @param writeBuffer A ThreeJS WebGLRenderTarget instance to render the scene to.\n     * @param readBuffer A ThreeJS WebGLRenderTarget instance to render the scene.\n     * @override\n     */\n    render(\n        renderer: THREE.WebGLRenderer,\n        scene: THREE.Scene,\n        camera: THREE.PerspectiveCamera | THREE.OrthographicCamera,\n        writeBuffer: THREE.WebGLRenderTarget | null,\n        readBuffer: THREE.WebGLRenderTarget\n    ) {\n        if (!this.enabled) {\n            return;\n        }\n\n        // Initiates the local render target with the read buffer's dimensions, if not available.\n        if (this.m_renderTarget === null) {\n            this.m_renderTarget = new THREE.WebGLRenderTarget(readBuffer.width, readBuffer.height, {\n                minFilter: THREE.LinearFilter,\n                magFilter: THREE.LinearFilter,\n                format: THREE.RGBAFormat\n            });\n            this.m_renderTarget.texture.name = \"MSAARenderPass.sample\";\n        }\n        this.m_quadUniforms.tDiffuse.value = this.m_renderTarget.texture;\n\n        const offsets = MSAARenderPass.OffsetVectors[this.samplingLevel];\n\n        const rendererClearColor = renderer.getClearColor();\n        const oldClearColor = rendererClearColor !== undefined ? rendererClearColor.getHex() : 0;\n\n        // The method `camera.setViewOffset` will be called in the next loop. In order to maintain\n        // its usability externally (like for the triple view in mosaic demo) we must cache the\n        // previous values stored in `camera.view` and re-assign them at the end of the pass.\n\n        // 1. Create a default cache object, with default dimensions the size of our read buffer.\n        const oldView = {\n            enabled: camera.view !== null && camera.view.enabled,\n            fullWidth: readBuffer.width,\n            fullHeight: readBuffer.height,\n            x: 0,\n            y: 0,\n            width: readBuffer.width,\n            height: readBuffer.height\n        };\n\n        // 2. If `camera.view` has been enabled previously, then `setViewOffset` has been called\n        // externally: copy the existing `camera.view` values in the cache. Override the cache\n        // object with the values provided externally.\n        if (oldView.enabled && camera.view !== null) {\n            oldView.fullWidth = camera.view.fullWidth;\n            oldView.fullHeight = camera.view.fullHeight;\n            oldView.x = camera.view.offsetX;\n            oldView.y = camera.view.offsetY;\n            oldView.width = camera.view.width;\n            oldView.height = camera.view.height;\n        }\n\n        const oldRenderTarget = renderer.getRenderTarget();\n        for (let i = 0; i < offsets.length; i++) {\n            // 4. Then for each sample, call `setViewOffset` with our object. This also updates the\n            // `camera.view` object in Three.js.\n            const offset = offsets[i];\n            camera.setViewOffset(\n                oldView.fullWidth,\n                oldView.fullHeight,\n                oldView.x + offset[0] / 16,\n                oldView.y + offset[1] / 16,\n                oldView.width,\n                oldView.height\n            );\n\n            // 5. Divide the opacity of the quad by the number of samples to accumulate on the\n            // target buffer, and reduce the impact of the offset on color to reduce banding. Then\n            // render.\n            const uniformCenteredDistribution = -0.5 + (i + 0.5) / offsets.length;\n            const sampleWeight = 1.0 / offsets.length + uniformCenteredDistribution / 32;\n\n            this.m_quadUniforms.opacity.value = sampleWeight;\n\n            renderer.setRenderTarget(this.m_renderTarget);\n            renderer.clear();\n            renderer.render(scene, camera);\n\n            // 6. Render the quad on top of the previous renders.\n\n            // NOTE: three.js doesn't like undefined as renderTarget, but works with `null`\n            renderer.setRenderTarget(this.renderToScreen ? null : writeBuffer);\n            if (i === 0) {\n                renderer.setClearColor(0x000000);\n                renderer.clear();\n            }\n            renderer.render(this.m_quadScene, this.m_localCamera);\n            if (i === 0 && rendererClearColor !== undefined) {\n                renderer.setClearColor(oldClearColor);\n            }\n        }\n        renderer.setRenderTarget(oldRenderTarget);\n\n        // 7. Restore `camera.view` as set externally (or not).\n        if (camera.view !== null) {\n            camera.view.enabled = oldView.enabled;\n            camera.view.offsetX = oldView.x;\n            camera.view.offsetY = oldView.y;\n        }\n    }\n\n    /**\n     * Resize the internal render target to match the new size specified.\n     *\n     * @param width New width to apply to the render target.\n     * @param height New height to apply to the render target.\n     * @override\n     */\n    setSize(width: number, height: number) {\n        if (this.m_renderTarget) {\n            this.m_renderTarget.setSize(width, height);\n        }\n    }\n\n    // tslint:disable:max-line-length\n    /**\n     * The list of offsets to apply to the camera, per sampling level, adapted from :\n     *\n     * @see https://msdn.microsoft.com/en-us/library/windows/desktop/ff476218%28v=vs.85%29.aspx?f=255&MSPPError=-2147217396\n     */\n    // tslint:enable:max-line-length\n    // tslint:disable-next-line:member-ordering\n    static readonly OffsetVectors: number[][][] = [\n        [[0, 0]],\n        [\n            [4, 4],\n            [-4, -4]\n        ],\n        [\n            [-2, -6],\n            [6, -2],\n            [-6, 2],\n            [2, 6]\n        ],\n        [\n            [1, -3],\n            [-1, 3],\n            [5, 1],\n            [-3, -5],\n            [-5, 5],\n            [-7, -1],\n            [3, 7],\n            [7, -7]\n        ],\n        [\n            [1, 1],\n            [-1, -3],\n            [-3, 2],\n            [4, -1],\n            [-5, -2],\n            [2, 5],\n            [5, 3],\n            [3, -5],\n            [-2, 6],\n            [0, -7],\n            [-4, -6],\n            [-6, 4],\n            [-8, 0],\n            [7, -4],\n            [6, 7],\n            [-7, -8]\n        ],\n        [\n            [-4, -7],\n            [-7, -5],\n            [-3, -5],\n            [-5, -4],\n            [-1, -4],\n            [-2, -2],\n            [-6, -1],\n            [-4, 0],\n            [-7, 1],\n            [-1, 2],\n            [-6, 3],\n            [-3, 3],\n            [-7, 6],\n            [-3, 6],\n            [-5, 7],\n            [-1, 7],\n            [5, -7],\n            [1, -6],\n            [6, -5],\n            [4, -4],\n            [2, -3],\n            [7, -2],\n            [1, -1],\n            [4, -1],\n            [2, 1],\n            [6, 2],\n            [0, 4],\n            [4, 4],\n            [2, 5],\n            [7, 5],\n            [5, 6],\n            [3, 7]\n        ]\n    ];\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\nimport { RequestController, WorkerServiceProtocol } from \"@here/harp-datasource-protocol\";\nimport {\n    getOptionValue,\n    IWorkerChannelMessage,\n    LoggerManager,\n    LogLevel,\n    WORKERCHANNEL_MSG_TYPE\n} from \"@here/harp-utils\";\n\nimport { WorkerLoader } from \"./workers/WorkerLoader\";\n\nimport * as THREE from \"three\";\n\nconst logger = LoggerManager.instance.create(\"ConcurrentWorkerSet\");\n\nexport function isLoggingMessage(message: IWorkerChannelMessage): message is IWorkerChannelMessage {\n    return message && typeof message.level === \"number\" && message.type === WORKERCHANNEL_MSG_TYPE;\n}\n\ninterface ReadyPromise {\n    count: number;\n    promise?: Promise<void>;\n    resolve: () => void;\n    reject: (reason: any) => void;\n    error?: any;\n}\n\ninterface RequestEntry {\n    promise: Promise<any>;\n    resolver: (error?: Error, response?: object) => void;\n}\n\nexport interface ConcurrentWorkerSetOptions {\n    /**\n     * The URL of the script for each worker to start.\n     */\n    scriptUrl: string;\n\n    /**\n     * The number of Web Workers for processing data.\n     *\n     * Defaults to CLAMP(`navigator.hardwareConcurrency` - 1, 1, 4) or [[DEFAULT_WORKER_COUNT]].\n     */\n    workerCount?: number;\n\n    /**\n     * Timeout in milliseconds, in which each worker should set initial message.\n     *\n     * @default 10 seconds, see [[DEFAULT_WORKER_INITIALIZATION_TIMEOUT]]\n     */\n    workerConnectionTimeout?: number;\n}\n\n/**\n * Interface for an item in the started worker list queue.\n */\ninterface WorkerEntry {\n    worker: Worker;\n    listener: EventListener;\n}\n\n/**\n * Interface for an item in the request queue. Stores the data to be decoded along with an\n * [[AbortController]].\n */\ninterface WorkerRequestEntry {\n    message: WorkerServiceProtocol.RequestMessage;\n    buffers?: ArrayBuffer[] | undefined;\n    requestController?: RequestController;\n}\n\n/**\n * The default number of Web Workers to use if `navigator.hardwareConcurrency` is unavailable.\n */\nconst DEFAULT_WORKER_COUNT = 2;\n\n/**\n * The default timeout for first message from worker.\n *\n * @see [[WorkerLoader.startWorker]]\n */\nexport const DEFAULT_WORKER_INITIALIZATION_TIMEOUT = 10000;\n\n/**\n * A set of concurrent Web Workers. Acts as a Communication Peer for [[WorkerService]] instances\n * running in Web Workers.\n *\n * Starts and manages a certain number of web workers and provides a means to communicate\n * with them using various communication schemes, such as:\n *  - [[addEventListener]] : receive a unidirectional messages\n *  - [[broadcastMessage]] : send unidirectional broadcast message\n *  - [[invokeRequest]] : send a request that waits for a response, with load balancing\n *  - [[postMessage]] : send a unidirectional message, with load balancing\n *\n * The request queue holds all requests before they are stuffed into the event queue, allows for\n * easy (and early) cancelling of requests. The workers now only get a single new RequestMessage\n * when they return their previous result, or if they are idle. When they are idle, they are stored\n * in m_availableWorkers.\n */\nexport class ConcurrentWorkerSet {\n    private m_workerChannelLogger = LoggerManager.instance.create(\"WorkerChannel\");\n    private readonly m_eventListeners = new Map<string, (message: any) => void>();\n    private m_workers = new Array<Worker>();\n\n    // List of idle workers that can be given the next job. It is using a LIFO scheme to reduce\n    // memory consumption in idle workers.\n    private m_availableWorkers = new Array<Worker>();\n    private m_workerPromises = new Array<Promise<WorkerEntry | undefined>>();\n    private m_workerCount: number | undefined;\n\n    private readonly m_readyPromises = new Map<string, ReadyPromise>();\n    private readonly m_requests: Map<number, RequestEntry> = new Map();\n    private m_workerRequestQueue: WorkerRequestEntry[] = [];\n\n    private m_nextMessageId: number = 0;\n    private m_stopped: boolean = true;\n\n    private m_referenceCount: number = 0;\n\n    /**\n     * Creates a new `ConcurrentWorkerSet`.\n     *\n     * Creates as many Web Workers as specified in `options.workerCount`, from the script provided\n     * in `options.scriptUrl`. If `options.workerCount` is not specified, the value specified in\n     * `navigator.hardwareConcurrency` is used instead.\n     *\n     * The worker set is implicitly started when constructed.\n     */\n    constructor(private m_options: ConcurrentWorkerSetOptions) {\n        this.start();\n    }\n\n    /**\n     * Adds an external reference and increments the internal reference counter by one.\n     *\n     * To implement a reference-count based automatic resource cleanup, use this function with\n     * [[removeReference]].\n     */\n    addReference() {\n        this.m_referenceCount += 1;\n        if (this.m_referenceCount === 1 && this.m_stopped) {\n            this.start();\n        }\n    }\n\n    /**\n     * Decrements the internal reference counter by 1.\n     *\n     * When the internal reference counter reaches 0, this function calls [[dispose]] to clear the\n     * resources.\n     *\n     * Use with [[addReference]] to implement reference-count based automatic resource cleanup.\n     */\n    removeReference() {\n        this.m_referenceCount -= 1;\n        if (this.m_referenceCount === 0) {\n            this.destroy();\n        }\n    }\n\n    /**\n     * Starts workers.\n     *\n     * Use to start workers already stopped by [[stop]] or [[destroy]] calls.\n     *\n     * Note: The worker set is implicitly started on construction - no need to call [[start]] on\n     * fresh instance.\n     *\n     * @param options optional, new worker set options\n     */\n    start(options?: ConcurrentWorkerSetOptions) {\n        if (options !== undefined) {\n            this.m_options = options;\n        }\n        if (!this.m_stopped) {\n            throw new Error(\"ConcurrentWorker set already started\");\n        }\n\n        this.m_workerCount = getOptionValue(\n            this.m_options.workerCount,\n            typeof navigator !== \"undefined\" && navigator.hardwareConcurrency !== undefined\n                ? // We need to have at least one worker\n                  THREE.MathUtils.clamp(navigator.hardwareConcurrency - 1, 1, 2)\n                : undefined,\n            DEFAULT_WORKER_COUNT\n        );\n\n        // Initialize the workers. The workers now have an ID to identify specific workers and\n        // handle their busy state.\n        const timeout = getOptionValue(\n            this.m_options.workerConnectionTimeout,\n            DEFAULT_WORKER_INITIALIZATION_TIMEOUT\n        );\n        for (let workerId = 0; workerId < this.m_workerCount; ++workerId) {\n            const workerPromise = WorkerLoader.startWorker(this.m_options.scriptUrl, timeout).then(\n                worker => {\n                    const listener = (evt: Event): void => {\n                        this.onWorkerMessage(workerId, evt as MessageEvent);\n                    };\n\n                    worker.addEventListener(\"message\", listener);\n                    this.m_workers.push(worker);\n                    this.m_availableWorkers.push(worker);\n                    return {\n                        worker,\n                        listener\n                    };\n                }\n            );\n            this.m_workerPromises.push(workerPromise);\n        }\n        this.m_stopped = false;\n    }\n\n    /**\n     * The number of workers started for this worker set. The value is `undefined` until the workers\n     * have been created.\n     */\n    get workerCount(): number | undefined {\n        return this.m_workerCount;\n    }\n\n    /**\n     * Stops workers.\n     *\n     * Waits for all pending requests to be finished and stops all workers.\n     *\n     * Use [[start]] to start this worker again.\n     *\n     * @returns `Promise` that resolves when all workers are destroyed.\n     */\n    async stop() {\n        this.m_stopped = true;\n\n        await this.waitForAllResponses().then(() => {\n            this.terminateWorkers();\n        });\n    }\n\n    /**\n     * Destroys all workers immediately.\n     *\n     * Resolves all pending request promises with a `worker destroyed` error.\n     *\n     * Use [[start]] to start this worker again.\n     */\n    destroy() {\n        this.m_stopped = true;\n\n        // respond with all pending request\n        this.m_requests.forEach(entry => {\n            entry.resolver(new Error(\"worker destroyed\"));\n        });\n        this.m_requests.clear();\n        this.m_workerRequestQueue = [];\n\n        this.terminateWorkers();\n\n        // clean other stuff\n        this.m_eventListeners.clear();\n    }\n\n    /**\n     * Waits for `service` to be initialized in all workers.\n     *\n     * Each service that starts in a worker sends an [[isInitializedMessage]] to confirm that\n     * it has started successfully. This method resolves when all workers in a set have\n     * `service` initialized.\n     *\n     * Promise is rejected if any of worker fails to start.\n     *\n     * @param serviceId The service identifier.\n     */\n    async connect(serviceId: string): Promise<void> {\n        this.ensureStarted();\n        await Promise.all(this.m_workerPromises);\n        return this.getReadyPromise(serviceId).promise as Promise<void>;\n    }\n\n    /**\n     * Registers an event listener for events that originated in a web worker, for a given\n     * `serviceId`. You can only set one event listener per `serviceId`.\n     *\n     * @param serviceId The service to listen to.\n     * @param callback The callback to invoke for matching events.\n     */\n    addEventListener(serviceId: string, callback: (message: any) => void) {\n        this.m_eventListeners.set(serviceId, callback);\n    }\n\n    /**\n     * Removes a previously set event listener for the given `serviceId`.\n     *\n     * @param serviceId The service from which to remove the event listeners.\n     */\n    removeEventListener(serviceId: string) {\n        this.m_eventListeners.delete(serviceId);\n    }\n\n    /**\n     * Invokes a request that expects a response from a random worker.\n     *\n     * Sends [[RequestMessage]] and resolves when a matching [[ResponseMessage]] is received from\n     * workers. Use this function when interfacing with \"RPC-like\" calls to services.\n     *\n     * @param serviceId The name of service, as registered with the [[WorkerClient]] instance.\n     * @param request The request to process.\n     * @param transferList An optional array of `ArrayBuffer`s to transfer to the worker context.\n     * @param requestController An optional [[RequestController]] to store state of cancelling.\n     *\n     * @returns A `Promise` that resolves with a response from the service.\n     */\n    invokeRequest<Res>(\n        serviceId: string,\n        request: WorkerServiceProtocol.ServiceRequest,\n        transferList?: ArrayBuffer[],\n        requestController?: RequestController\n    ): Promise<Res> {\n        this.ensureStarted();\n\n        const messageId = this.m_nextMessageId++;\n        let resolver: ((error?: any, response?: any) => void) | undefined;\n\n        const promise = new Promise<Res>((resolve, reject) => {\n            resolver = (error?: Error, response?: Res) => {\n                this.m_requests.delete(messageId);\n\n                if (error !== undefined) {\n                    reject(error);\n                } else {\n                    resolve(response as Res);\n                }\n            };\n        });\n        this.m_requests.set(messageId, {\n            promise,\n            resolver: resolver!\n        });\n\n        const message: WorkerServiceProtocol.RequestMessage = {\n            service: serviceId,\n            type: WorkerServiceProtocol.ServiceMessageName.Request,\n            messageId,\n            request\n        };\n        this.postRequestMessage(message, transferList, requestController);\n        return promise;\n    }\n\n    /**\n     * Invokes a request that expects responses from all workers.\n     *\n     * Send [[RequestMessage]]  to all workers and resolves when all workers have sent a matching\n     * [[ResponseMessage]]. Use this function to wait on request that need to happen on all workers\n     * before proceeding (like synchronous worker service creation).\n     *\n     * @param serviceId The name of service, as registered with the [[WorkerClient]] instance.\n     * @param request The request to process.\n     * @param transferList An optional array of `ArrayBuffer`s to transfer to the worker context.\n     *\n     * @returns Array of `Promise`s that resolves with a response from each worker (unspecified\n     * order).\n     */\n    broadcastRequest<Res>(\n        serviceId: string,\n        request:\n            | WorkerServiceProtocol.WorkerServiceManagerRequest\n            | WorkerServiceProtocol.ServiceRequest,\n        transferList?: ArrayBuffer[]\n    ): Promise<Res[]> {\n        this.ensureStarted();\n\n        const promises = [];\n        for (const worker of this.m_workers) {\n            const messageId = this.m_nextMessageId++;\n\n            let resolver: ((error?: any, response?: any) => void) | undefined;\n            const promise = new Promise<Res>((resolve, reject) => {\n                resolver = (error: Error, response: Res) => {\n                    this.m_requests.delete(messageId);\n\n                    if (error !== undefined) {\n                        reject(error);\n                    } else {\n                        resolve(response as Res);\n                    }\n                };\n            });\n            promises.push(promise);\n\n            this.m_requests.set(messageId, {\n                promise,\n                resolver: resolver!\n            });\n\n            const message: WorkerServiceProtocol.RequestMessage = {\n                service: serviceId,\n                type: WorkerServiceProtocol.ServiceMessageName.Request,\n                messageId,\n                request\n            };\n            if (transferList !== undefined) {\n                worker.postMessage(message, transferList);\n            } else {\n                worker.postMessage(message);\n            }\n        }\n\n        return Promise.all(promises);\n    }\n\n    /**\n     * Posts a message to all workers.\n     *\n     * @param message The message to send.\n     * @param buffers Optional buffers to transfer to the workers.\n     */\n    broadcastMessage(message: any, buffers?: ArrayBuffer[] | undefined) {\n        this.ensureStarted();\n\n        if (buffers !== undefined) {\n            this.m_workers.forEach(worker => worker.postMessage(message, buffers));\n        } else {\n            this.m_workers.forEach(worker => worker.postMessage(message));\n        }\n    }\n\n    /**\n     * The size of the request queue for debugging and profiling.\n     */\n    get requestQueueSize() {\n        return this.m_workerRequestQueue.length;\n    }\n\n    /**\n     * The number of workers for debugging and profiling.\n     */\n    get numWorkers() {\n        return this.m_workers.length;\n    }\n\n    /**\n     * The number of workers for debugging and profiling.\n     */\n    get numIdleWorkers() {\n        return this.m_availableWorkers.length;\n    }\n\n    /**\n     * Subclasses must call this function when a worker emits an event.\n     *\n     * @param event The event to dispatch.\n     */\n    protected eventHandler(event: any) {\n        if (typeof event.data.type !== \"string\") {\n            return; // not an event generated by us, ignore.\n        }\n\n        this.dispatchEvent(event.data.type, event);\n    }\n\n    /**\n     * Handles messages received from workers. This method is protected so that the message\n     * reception can be simulated through an extended class, to avoid relying on real workers.\n     *\n     * @param workerId The workerId of the web worker.\n     * @param event The event to dispatch.\n     */\n    private onWorkerMessage = (workerId: number, event: MessageEvent) => {\n        if (WorkerServiceProtocol.isResponseMessage(event.data)) {\n            const response = event.data;\n            if (response.messageId === null) {\n                logger.error(`[${this.m_options.scriptUrl}]: Bad ResponseMessage: no messageId`);\n                return;\n            }\n            const entry = this.m_requests.get(response.messageId);\n            if (entry === undefined) {\n                logger.error(\n                    `[${this.m_options.scriptUrl}]: Bad ResponseMessage: invalid messageId`\n                );\n                return;\n            }\n\n            if (workerId >= 0 && workerId < this.m_workers.length) {\n                const worker = this.m_workers[workerId];\n                this.m_availableWorkers.push(worker);\n                // Check if any new work has been put into the queue.\n                this.checkWorkerRequestQueue();\n            } else {\n                logger.error(`[${this.m_options.scriptUrl}]: onWorkerMessage: invalid workerId`);\n            }\n            if (response.errorMessage !== undefined) {\n                const error = new Error(response.errorMessage);\n                if (response.errorStack !== undefined) {\n                    error.stack = response.errorStack;\n                }\n                entry.resolver(error);\n            } else {\n                entry.resolver(undefined, response.response);\n            }\n        } else if (WorkerServiceProtocol.isInitializedMessage(event.data)) {\n            const readyPromise = this.getReadyPromise(event.data.service);\n            if (++readyPromise.count === this.m_workerPromises.length) {\n                readyPromise.resolve();\n            }\n        } else if (isLoggingMessage(event.data)) {\n            switch (event.data.level) {\n                case LogLevel.Trace:\n                    this.m_workerChannelLogger.trace(...event.data.message);\n                    break;\n                case LogLevel.Debug:\n                    this.m_workerChannelLogger.debug(...event.data.message);\n                    break;\n                case LogLevel.Log:\n                    this.m_workerChannelLogger.log(...event.data.message);\n                    break;\n                case LogLevel.Info:\n                    this.m_workerChannelLogger.info(...event.data.message);\n                    break;\n                case LogLevel.Warn:\n                    this.m_workerChannelLogger.warn(...event.data.message);\n                    break;\n                case LogLevel.Error:\n                    this.m_workerChannelLogger.error(...event.data.message);\n                    break;\n            }\n        } else {\n            this.eventHandler(event);\n        }\n    };\n\n    /**\n     * Posts a [[WorkerServiceProtocol.RequestMessage]] to an available worker. If no worker is\n     * available, the request is put into a queue.\n     *\n     * @param message The message to send.\n     * @param buffers Optional buffers to transfer to the worker.\n     * @param requestController An optional [[RequestController]] to store state of cancelling.\n     */\n    private postRequestMessage(\n        message: WorkerServiceProtocol.RequestMessage,\n        buffers?: ArrayBuffer[] | undefined,\n        requestController?: RequestController\n    ) {\n        this.ensureStarted();\n        if (this.m_workers.length === 0) {\n            throw new Error(\"ConcurrentWorkerSet#postMessage: no workers started\");\n        }\n\n        // Check if the requestController has received the abort signal, in which case the request\n        // is ignored.\n        if (requestController !== undefined && requestController.signal.aborted) {\n            const entry = this.m_requests.get(message.messageId);\n            if (entry === undefined) {\n                logger.error(\n                    `[${this.m_options.scriptUrl}]: Bad RequestMessage: invalid messageId`\n                );\n                return;\n            }\n\n            const err = new Error(\"Aborted\");\n            err.name = \"AbortError\";\n\n            entry.resolver(err, undefined);\n            return;\n        }\n\n        if (this.m_availableWorkers.length > 0) {\n            const worker = this.m_availableWorkers.pop()!;\n\n            if (buffers !== undefined) {\n                worker.postMessage(message, buffers);\n            } else {\n                worker.postMessage(message);\n            }\n        } else {\n            // We need a priority to keep sorting stable, so we have to add a RequestController.\n            if (requestController === undefined) {\n                requestController = new RequestController(0);\n            }\n            if (requestController.priority === 0) {\n                // If the requests do not get a priority, they should keep their sorting order.\n                requestController.priority = -this.m_nextMessageId;\n            }\n            this.m_workerRequestQueue.unshift({\n                message,\n                buffers,\n                requestController\n            });\n        }\n    }\n\n    private ensureStarted() {\n        if (this.m_stopped) {\n            throw new Error(\"ConcurrentWorkerSet stopped\");\n        }\n    }\n\n    private async waitForAllResponses(): Promise<any> {\n        const promises = new Array<Promise<void>>();\n        this.m_requests.forEach(entry => {\n            promises.push(entry.promise);\n        });\n        await Promise.all(promises);\n    }\n\n    private dispatchEvent(id: string, message: any) {\n        const callback = this.m_eventListeners.get(id);\n        if (callback === undefined) {\n            return;\n        } // unknown event, ignore.\n        callback(message);\n    }\n\n    private terminateWorkers() {\n        // terminate all workers\n        this.m_workerPromises.forEach(workerPromise => {\n            workerPromise.then(workerEntry => {\n                if (workerEntry === undefined) {\n                    return;\n                }\n                workerEntry.worker.removeEventListener(\"message\", workerEntry.listener);\n                workerEntry.worker.terminate();\n            });\n        });\n        this.m_workers = [];\n        this.m_workerPromises = [];\n        this.m_availableWorkers = [];\n        this.m_readyPromises.clear();\n    }\n\n    private getReadyPromise(id: string): ReadyPromise {\n        const readyPromise = this.m_readyPromises.get(id);\n        if (readyPromise !== undefined) {\n            return readyPromise;\n        }\n\n        const newPromise: ReadyPromise = {\n            count: 0,\n            promise: undefined,\n            resolve: () => {\n                /* placeholder */\n            },\n            reject: (error: any) => {\n                newPromise.error = error;\n            },\n            error: undefined\n        };\n\n        newPromise.promise = new Promise<void>((resolve, reject) => {\n            const that = newPromise;\n\n            if (that.error !== undefined) {\n                reject(that.error);\n            } else if (that.count === this.m_workerPromises.length) {\n                resolve();\n            }\n\n            that.resolve = resolve;\n            that.reject = reject;\n        });\n\n        this.m_readyPromises.set(id, newPromise);\n        return newPromise;\n    }\n\n    /**\n     * Check the worker request queue, if there are any queued up decoding jobs and idle workers,\n     * they will be executed with postRequestMessage. The requests in the queue are sorted before\n     * the request with the highest priority is selected for processing.\n     */\n    private checkWorkerRequestQueue() {\n        if (this.m_workerRequestQueue.length === 0 || this.m_availableWorkers.length === 0) {\n            return;\n        }\n        this.m_workerRequestQueue.sort((a: WorkerRequestEntry, b: WorkerRequestEntry) => {\n            return a.requestController!.priority - b.requestController!.priority;\n        });\n\n        // Get the request with the highest priority and send it (again).\n        while (this.m_availableWorkers.length > 0 && this.m_workerRequestQueue.length > 0) {\n            const request = this.m_workerRequestQueue.pop()!;\n            this.postRequestMessage(request.message, request.buffers, request.requestController);\n        }\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport \"@here/harp-fetch\";\n\nimport { getUrlOrigin, LoggerManager } from \"@here/harp-utils\";\nimport { isWorkerBootstrapRequest, WorkerBootstrapResponse } from \"./WorkerBootstrapDefs\";\n\nconst logger = LoggerManager.instance.create(\"WorkerLoader\");\n\n/**\n * Set of `Worker` loading and initialization helpers:\n *  - starting Worker from URL with fallback to XHR+blob [[WorkerLoader.startWorker]]\n *  - waiting for proper worker initialization, see [[WorkerLoader.waitWorkerInitialized]]\n */\nexport class WorkerLoader {\n    static directlyFallbackToBlobBasedLoading: boolean = false;\n    static sourceLoaderCache = new Map<string, Promise<string>>();\n    static dependencyUrlMapping: { [name: string]: string } = {};\n\n    /**\n     * Starts worker by first attempting load from `scriptUrl` using native `Worker` constructor.\n     * Then waits (using [[waitWorkerInitialized]]) for first message that indicates successful\n     * initialization.\n     * If `scriptUrl`'s origin is different than `baseUrl`, then in case of error falls back to\n     * [[startWorkerBlob]].\n     *\n     * We must resolve/reject promise at some time, so it is expected that any sane application will\n     * be able to load worker code in some amount of time.\n     * By default, this method timeouts after 10 seconds (configurable using `timeout` argument).\n     *\n     * This method is needed as browsers in general forbid to load worker if it's not on 'same\n     * origin' regardless of Content-Security-Policy.\n     *\n     * For blob-based fallback work, one need to ensure that Content Security Policy (CSP) allows\n     * loading web worker code from `Blob`s. By default browsers, allow 'blob:' for workers, but\n     * this may change.\n     *\n     * Following snippet setups CSP, so workers can be started from blob urls:\n     *\n     *     <head>\n     *         <meta http-equiv=\"Content-Security-Policy\" content=\"child-src blob:\">\n     *     </head>\n     *\n     * Tested on:\n     *   * Chrome 67 / Linux, Window, OSX, Android\n     *   * Firefox 60 / Linux, Windows, OSX\n     *   * Edge 41 / Windows\n     *   * Safari 11 / OSX\n     *   * Samsung Internet 7.2\n     *\n     * See\n     *  * https://benohead.com/cross-domain-cross-browser-web-workers/\n     *  * MapBox\n     *    * https://stackoverflow.com/questions/21913673/execute-web-worker-from-different-origin\n     *    * https://github.com/mapbox/mapbox-gl-js/issues/2658\n     *    * https://github.com/mapbox/mapbox-gl-js/issues/559\n     *    * https://github.com/mapbox/mapbox-gl-js/issues/6058\n     *\n     * Findings:\n     *\n     * * Chrome reports CSP by exception when constructing [[Worker]] instance.\n     * * Firefox reports CSP errors when loading in first event:\n     *   https://bugzilla.mozilla.org/show_bug.cgi?id=1241888\n     * * Firefox 62, Chrome 67 obeys `<meta http-equiv=\"Content-Security-Policy\">` with\n     *   `worker-src blob:` but doesn't obey `worker-src URL` when used\n     * * Chrome 67 doesn't obey CSP `worker-src URL` despite it's documented as supported\n     *   (https://developer.mozilla.org/docs/Web/HTTP/Headers/Content-Security-Policy/worker-src)\n     *\n     * @param scriptUrl web worker script URL\n     * @param timeout timeout in milliseconds, in which worker should set initial message\n     *    (default 10 seconds)\n     */\n    static startWorker(scriptUrl: string, timeout: number = 10000): Promise<Worker> {\n        if (scriptUrl.startsWith(\"blob:\")) {\n            return this.startWorkerImmediately(scriptUrl, timeout);\n        }\n\n        if (this.directlyFallbackToBlobBasedLoading) {\n            return this.startWorkerBlob(scriptUrl, timeout);\n        }\n        return this.startWorkerImmediately(scriptUrl, timeout).catch(error => {\n            if (typeof window !== \"undefined\") {\n                const pageUrl = window.location.href;\n                const fullScriptUrl = new URL(scriptUrl, pageUrl).href;\n                if (getUrlOrigin(fullScriptUrl) === getUrlOrigin(pageUrl)) {\n                    throw error;\n                }\n                logger.log(\n                    \"#startWorker: cross-origin worker construction failed, trying load with blob\"\n                );\n                this.directlyFallbackToBlobBasedLoading = true;\n                return WorkerLoader.startWorkerBlob(scriptUrl, timeout);\n            } else {\n                throw error;\n            }\n        });\n    }\n\n    /**\n     * Start worker, loading it immediately from `scriptUrl`. Waits (using\n     * [[waitWorkerInitialized]]) for successful worker start.\n     *\n     * @param scriptUrl web worker script URL\n     */\n    static startWorkerImmediately(scriptUrl: string, timeout: number): Promise<Worker> {\n        try {\n            const worker = new Worker(scriptUrl);\n            return this.waitWorkerInitialized(worker, timeout);\n        } catch (error) {\n            return Promise.reject(error);\n        }\n    }\n\n    /**\n     * Start worker \"via blob\" by first loading worker script code with [[fetch]], creating `Blob`\n     * and attempting to start worker from blob url. Waits (using [[waitWorkerInitialized]]) for\n     * successful worker start.\n     *\n     * @param scriptUrl web worker script URL\n     */\n    static startWorkerBlob(scriptUrl: string, timeout: number): Promise<Worker> {\n        return this.fetchScriptSourceToBlobUrl(scriptUrl).then(blobUrl => {\n            return this.startWorkerImmediately(blobUrl, timeout);\n        });\n    }\n\n    /**\n     * Fetch script source as `Blob` url.\n     *\n     * Reuses results, if there are many simultaneous requests.\n     *\n     * @param scriptUrl web worker script URL\n     * @return promise that resolves to url of a `Blob` with script source code\n     */\n    static fetchScriptSourceToBlobUrl(scriptUrl: string): Promise<string> {\n        let loadingPromise = this.sourceLoaderCache.get(scriptUrl);\n        if (loadingPromise !== undefined) {\n            return loadingPromise;\n        }\n        loadingPromise = fetch(scriptUrl)\n            .then(response => response.text())\n            .catch(error => {\n                throw new Error(\n                    `WorkerLoader#fetchScriptSourceToBlob: failed to load worker script: ${error}`\n                );\n            })\n            .then(scriptSource => {\n                this.sourceLoaderCache.delete(scriptUrl);\n                const blob = new Blob([scriptSource], { type: \"application/javascript\" });\n                return URL.createObjectURL(blob);\n            });\n        this.sourceLoaderCache.set(scriptUrl, loadingPromise);\n        return loadingPromise;\n    }\n\n    /**\n     * Waits for successful Web Worker start.\n     *\n     * Expects that worker script sends initial message.\n     *\n     * If first event is `message` then assumes that worker has been loaded sussesfully and promise\n     * resolves to `worker` object passed as argument.\n     *\n     * If first event is 'error', then it is assumed that worker failed to load and promise is\n     * rejected.\n     *\n     * (NOTE: The initial 'message' - if received - is immediately replayed using worker's\n     * `dispatchEvent`, so application code can also consume it as confirmation of successful\n     * worker initialization.\n     *\n     * We must resolve/reject promise at some time, so it is expected that any sane application will\n     * be able to load worker code in some amount of time.\n     *\n     * @param worker [[Worker]] instance to be checked\n     * @param timeout timeout in milliseconds, in which worker should set initial message\n     * @returns `Promise` that resolves to `worker` on success\n     */\n    static waitWorkerInitialized(worker: Worker, timeout: number): Promise<Worker> {\n        return new Promise<Worker>((resolve, reject) => {\n            const firstMessageCallback = (event: MessageEvent) => {\n                const message = event.data;\n                if (isWorkerBootstrapRequest(message)) {\n                    const dependencies = message.dependencies;\n                    const resolvedDependencies: string[] = [];\n                    for (const dependency of dependencies) {\n                        const resolved = this.dependencyUrlMapping[dependency];\n                        if (!resolved) {\n                            cleanup();\n                            reject(\n                                new Error(\n                                    `#waitWorkerInitialized: Unable to resolve '${dependency}'` +\n                                        ` as needed by worker script.`\n                                )\n                            );\n                            return;\n                        }\n                        resolvedDependencies.push(resolved);\n                    }\n                    const response: WorkerBootstrapResponse = {\n                        type: \"worker-bootstrap-response\",\n                        resolvedDependencies\n                    };\n                    worker.postMessage(response);\n                    return;\n                }\n\n                cleanup();\n                resolve(worker);\n\n                // We've just consumed first message from worker before client has any chance to\n                // even call `addEventListener` on it, so here after resolve, we wait next tick and\n                // replay message so user has chance to intercept it in its own handler.\n                setTimeout(() => {\n                    worker.dispatchEvent(event);\n                }, 0);\n            };\n            const errorCallback = (error: ErrorEvent) => {\n                cleanup();\n                // Error events do not carry any useful information on tested browsers, so we assume\n                // that any error before 'firstMessageCallback' as failed Worker initialization.\n                let message = \"Error during worker initialization\";\n                if (error.message) {\n                    message = message + `: ${error.message}`;\n                }\n                if (typeof error.filename === \"string\" && typeof error.lineno === \"number\") {\n                    message = message + ` in ${error.filename}:${error.lineno}`;\n                }\n                reject(new Error(message));\n            };\n            const cleanup = () => {\n                clearTimeout(timerId);\n                worker.removeEventListener(\"message\", firstMessageCallback);\n                worker.removeEventListener(\"error\", errorCallback);\n            };\n\n            worker.addEventListener(\"error\", errorCallback);\n            worker.addEventListener(\"message\", firstMessageCallback);\n            const timerId = setTimeout(() => {\n                cleanup();\n                reject(new Error(\"Timeout exceeded when waiting for first message from worker.\"));\n            }, timeout);\n        });\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\nimport {\n    DecodedTile,\n    Definitions,\n    getProjectionName,\n    ITileDecoder,\n    OptionsMap,\n    RequestController,\n    StyleSet,\n    TileInfo,\n    WorkerDecoderProtocol,\n    WorkerServiceProtocol\n} from \"@here/harp-datasource-protocol\";\nimport { Projection, TileKey } from \"@here/harp-geoutils\";\n\nimport { ConcurrentWorkerSet } from \"./ConcurrentWorkerSet\";\n\n/**\n * Identifier of next decoder worker-service. Used to ensure uniqueness of service ids of decoders\n * dedicated to different datasources.\n */\nlet nextUniqueServiceId = 0;\n\n/**\n * Decoder based on [[ConcurrentWorkerSet]].\n *\n * Decodes tiles using workers running in separate contexts (also known as `WebWorkers`):\n * - connection establishment,\n * - sends decode requests,\n * - configuration.\n */\nexport class WorkerBasedDecoder implements ITileDecoder {\n    private serviceId: string;\n    private m_serviceCreated: boolean = false;\n\n    /**\n     * Creates a new `WorkerBasedDecoder`.\n     *\n     * @param workerSet [[ConcurrentWorkerSet]] this tiler will live in.\n     * @param decoderServiceType Service type identifier.\n     */\n    constructor(\n        private readonly workerSet: ConcurrentWorkerSet,\n        private readonly decoderServiceType: string\n    ) {\n        this.workerSet.addReference();\n        this.serviceId = `${this.decoderServiceType}-${nextUniqueServiceId++}`;\n    }\n\n    /**\n     * Dispose of dedicated tile decoder services in workers and remove reference to underlying\n     * [[ConcurrentWorkerSet]].\n     */\n    dispose() {\n        if (this.m_serviceCreated) {\n            this.workerSet\n                .broadcastRequest(WorkerServiceProtocol.WORKER_SERVICE_MANAGER_SERVICE_ID, {\n                    type: WorkerServiceProtocol.Requests.DestroyService,\n                    targetServiceId: this.serviceId\n                })\n                .catch(() => {\n                    /* Ignoring these errors as underlying workers possibly do not exist anymore. */\n                });\n        }\n\n        this.workerSet.removeReference();\n    }\n\n    /**\n     * Connects to [[WorkerServiceManager]]s in underlying [[ConcurrentWorkerSet]] and creates\n     * dedicated [[TileDecoderService]]s in all workers to serve decode requests.\n     */\n    async connect(): Promise<void> {\n        await this.workerSet.connect(WorkerServiceProtocol.WORKER_SERVICE_MANAGER_SERVICE_ID);\n        if (!this.m_serviceCreated) {\n            await this.workerSet.broadcastRequest(\n                WorkerServiceProtocol.WORKER_SERVICE_MANAGER_SERVICE_ID,\n                {\n                    type: WorkerServiceProtocol.Requests.CreateService,\n                    targetServiceType: this.decoderServiceType,\n                    targetServiceId: this.serviceId\n                }\n            );\n            this.m_serviceCreated = true;\n        }\n    }\n\n    /**\n     * Get [[Tile]] from tile decoder service in worker.\n     *\n     * Invokes [[DecodeTileRequest]] on [[TileDecoderService]] running in worker pool.\n     */\n    decodeTile(\n        data: ArrayBufferLike,\n        tileKey: TileKey,\n        projection: Projection,\n        requestController?: RequestController\n    ): Promise<DecodedTile> {\n        const tileKeyCode = tileKey.mortonCode();\n\n        const message: WorkerDecoderProtocol.DecodeTileRequest = {\n            type: WorkerDecoderProtocol.Requests.DecodeTileRequest,\n            tileKey: tileKeyCode,\n            data,\n            projection: getProjectionName(projection)\n        };\n\n        const transferList = data instanceof ArrayBuffer ? [data] : undefined;\n\n        return this.workerSet.invokeRequest(\n            this.serviceId,\n            message,\n            transferList,\n            requestController\n        );\n    }\n\n    /**\n     * Get [[TileInfo]] from tile decoder service in worker.\n     *\n     * Invokes [[TileInfoRequest]] on [[TileDecoderService]] running in worker pool.\n     */\n    getTileInfo(\n        data: ArrayBufferLike,\n        tileKey: TileKey,\n        projection: Projection,\n        requestController?: RequestController\n    ): Promise<TileInfo | undefined> {\n        const tileKeyCode = tileKey.mortonCode();\n\n        const message: WorkerDecoderProtocol.TileInfoRequest = {\n            type: WorkerDecoderProtocol.Requests.TileInfoRequest,\n            tileKey: tileKeyCode,\n            data,\n            projection: getProjectionName(projection)\n        };\n\n        const transferList = data instanceof ArrayBuffer ? [data] : undefined;\n        return this.workerSet.invokeRequest(\n            this.serviceId,\n            message,\n            transferList,\n            requestController\n        );\n    }\n\n    /**\n     * Configure tile decoder service in workers.\n     *\n     * Broadcasts [[ConfigurationMessage]] to all [[TileDecoderService]]s running in worker pool.\n     *\n     * @param styleSet  new [[StyleSet]], undefined means no change\n     * @param languages new list of languages\n     * @param options   new options, undefined options are not changed\n     */\n    configure(\n        styleSet?: StyleSet,\n        definitions?: Definitions,\n        languages?: string[],\n        options?: OptionsMap\n    ): void {\n        const message: WorkerDecoderProtocol.ConfigurationMessage = {\n            service: this.serviceId,\n            type: WorkerDecoderProtocol.DecoderMessageName.Configuration,\n            styleSet,\n            definitions,\n            options,\n            languages\n        };\n\n        this.workerSet.broadcastMessage(message);\n    }\n\n    /**\n     * The number of workers started for this decoder. The value is `undefined` until the workers\n     * have been created.\n     */\n    get workerCount(): number | undefined {\n        return this.workerSet.workerCount;\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { TilingScheme } from \"@here/harp-geoutils\";\nimport { TileKey } from \"@here/harp-geoutils/lib/tiling/TileKey\";\n\n/**\n * Status of the elevation range calculation.\n */\nexport enum CalculationStatus {\n    // Calculated approximately. A more precise result may be available later.\n    PendingApproximate,\n    // Calculation completed. The result is final, won't improve upon retrying.\n    FinalPrecise\n}\n\n/**\n * Elevation range with an optional calculation status.\n */\nexport interface ElevationRange {\n    minElevation: number;\n    maxElevation: number;\n    calculationStatus?: CalculationStatus;\n}\n\n/**\n * Source for elevation ranges per tile. The returned elevation ranges will be used in the visible\n * tile computation to calculate proper bounding boxes.\n */\nexport interface ElevationRangeSource {\n    /**\n     * Compute the elevation range for a given [[TileKey]].\n     * @param tileKey The tile for which the elevation range should be computed.\n     */\n    getElevationRange(tileKey: TileKey): ElevationRange;\n\n    /**\n     * The tiling scheme of this [[ElevationRangeSource]]. [[MapView]] will only apply the elevation\n     * ranges returned by [[getElevationRange]] that have the same [[TilingScheme]].\n     */\n    getTilingScheme(): TilingScheme;\n\n    /**\n     * Connects to the underlying data.\n     */\n    connect(): Promise<void>;\n\n    /**\n     * Returns `true` if this `ElevationRangeSource` is ready and the [[MapView]] can invoke\n     * `getElevationRange()` to start requesting data.\n     */\n    ready(): boolean;\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { MapView } from \"../MapView\";\nimport { ImageItem } from \"./Image\";\nimport { ImageCache } from \"./ImageCache\";\n\n/**\n * Cache images wrapped into [[ImageItem]]s for a [[MapView]]. An image may have multiple names in\n * a theme, the `MapViewImageCache` will take care of that. Registering multiple images with the\n * same name is invalid.\n *\n * The `MapViewImageCache` uses a global [[ImageCache]] to actually store (and generate) the\n * image data.\n */\nexport class MapViewImageCache {\n    private m_name2Url: Map<string, string> = new Map();\n    private m_url2Name: Map<string, string[]> = new Map();\n\n    /**\n     * The constructor for `MapViewImageCache`.\n     *\n     * @param mapView a [[MapView]] instance.\n     */\n    constructor(public mapView: MapView) {}\n\n    /**\n     * Register an existing image by name.\n     *\n     * @param name Name of the image from [[Theme]].\n     * @param url URL of image.\n     * @param image Optional [[ImageData]] of image.\n     */\n    registerImage(\n        name: string | undefined,\n        url: string,\n        image: ImageData | ImageBitmap | undefined\n    ): ImageItem {\n        if (name !== undefined) {\n            if (this.hasName(name)) {\n                throw new Error(\"duplicate name in cache\");\n            }\n\n            const oldNames = this.m_url2Name.get(url);\n            if (oldNames !== undefined) {\n                if (oldNames.indexOf(name) < 0) {\n                    oldNames.push(name);\n                }\n            } else {\n                this.m_url2Name.set(url, [name]);\n            }\n            this.m_name2Url.set(name, url);\n        }\n\n        const imageItem = ImageCache.instance.findImage(url);\n        if (imageItem === undefined) {\n            return ImageCache.instance.registerImage(this.mapView, url, image);\n        }\n        return imageItem;\n    }\n\n    /**\n     * Add an image and optionally start loading it. Once done, the [[ImageData]] or [[ImageBitmap]]\n     * will be stored in the [[ImageItem]].\n     *\n     * @param name Name of image from [[Theme]].\n     * @param url URL of image.\n     * @param startLoading Optional. Pass `true` to start loading the image in the background.\n     */\n    addImage(\n        name: string,\n        url: string,\n        startLoading = true\n    ): ImageItem | Promise<ImageItem | undefined> {\n        const imageItem = this.registerImage(name, url, undefined);\n        if (startLoading === true) {\n            return ImageCache.instance.loadImage(imageItem);\n        }\n\n        return imageItem;\n    }\n\n    /**\n     * Find [[ImageItem]] by its name.\n     *\n     * @param name Name of image.\n     */\n    findImageByName(name: string): ImageItem | undefined {\n        const url = this.m_name2Url.get(name);\n        if (url === undefined) {\n            return undefined;\n        }\n        return ImageCache.instance.findImage(url);\n    }\n\n    /**\n     * Find [[ImageItem]] by URL.\n     *\n     * @param url Url of image.\n     */\n    findImageByUrl(url: string): ImageItem | undefined {\n        return ImageCache.instance.findImage(url);\n    }\n\n    /**\n     * Load an [[ImageItem]]. Returns a promise or a loaded [[ImageItem]].\n     *\n     * @param imageItem ImageItem to load.\n     */\n    loadImage(imageItem: ImageItem): ImageItem | Promise<ImageItem | undefined> {\n        return ImageCache.instance.loadImage(imageItem);\n    }\n\n    /**\n     * Remove all [[ImageItem]]s from the cache. Also removes all [[ImageItem]]s that belong to this\n     * [[MapView]] from the global [[ImageCache]].\n     */\n    clear() {\n        ImageCache.instance.clear(this.mapView);\n        this.m_name2Url = new Map();\n        this.m_url2Name = new Map();\n    }\n\n    /**\n     * Returns number of image names stored in the cache.\n     */\n    get numberOfNames(): number {\n        return this.m_name2Url.size;\n    }\n\n    /**\n     * Returns number of image URLs in the cache.\n     */\n    get numberOfUrls(): number {\n        return this.m_url2Name.size;\n    }\n\n    /**\n     * Return `true` if an image with the given name is known.\n     *\n     * @param name Name of the image.\n     */\n    hasName(name: string): boolean {\n        return this.m_name2Url.get(name) !== undefined;\n    }\n\n    /**\n     * Return `true` if an image with the given URL is known.\n     * @param url URL of image.\n     */\n    hasUrl(url: string): boolean {\n        return this.m_url2Name.get(url) !== undefined;\n    }\n\n    /**\n     * Return the names under which an image with the given URL is saved.\n     */\n    findNames(url: string): string[] | undefined {\n        return this.m_url2Name.get(url);\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { LoggerManager } from \"@here/harp-utils\";\nimport * as THREE from \"three\";\n\nimport { MapView } from \"../MapView\";\nimport { ImageItem } from \"./Image\";\nimport { MipMapGenerator } from \"./MipMapGenerator\";\n\nconst logger = LoggerManager.instance.create(\"ImageCache\");\nconst mipMapGenerator = new MipMapGenerator();\n\n// override declaration of createImageBitmap, add optional options parameter that\n// was removed in typings for TypeScript 3.1\ndeclare function createImageBitmap(\n    image: ImageBitmapSource,\n    sx: number,\n    sy: number,\n    sw: number,\n    sh: number,\n    options?: any\n): Promise<ImageBitmap>;\n\n/**\n * Combines an [[ImageItem]] with a list of [[MapViews]] that reference it.\n */\nclass ImageCacheItem {\n    /**\n     * The list of [[MapView]]s referencing the [[ImageItem]].\n     */\n    mapViews: MapView[] = [];\n\n    /**\n     * Instantiates `ImageCacheItem`.\n     *\n     * @param imageItem The [[ImageItem]] referenced by the associated [[MapView]]s instances.\n     * @param mapView An optional first [[MapView]] referencing the [[ImageItem]].\n     */\n    constructor(public imageItem: ImageItem, mapView?: MapView) {\n        if (mapView !== undefined) {\n            this.mapViews.push(mapView);\n        }\n    }\n}\n\n/**\n * `ImageCache` is a singleton, so it can be used with multiple MapViews on a single page. This\n * allows to have an image loaded only once for multiple views. THREE is doing something similar,\n * but does not allow to share images that have been loaded from a canvas (which we may need to do\n * if we use SVG images for textures).\n *\n * One application that makes our own cache necessary is the generation of our own textures from\n * data that is not an URL.\n *\n * The `ImageCache` can be improved by adding satistics for memory footprint as well.\n */\nexport class ImageCache {\n    /**\n     * Returns the singleton `instance` of the `ImageCache`.\n     */\n    static get instance(): ImageCache {\n        if (ImageCache.m_instance === undefined) {\n            ImageCache.m_instance = new ImageCache();\n        }\n        return ImageCache.m_instance;\n    }\n\n    /**\n     * Dispose the singleton object. Not normally implemented for singletons, but good for\n     * debugging.\n     */\n    static dispose(): void {\n        ImageCache.m_instance = undefined;\n    }\n\n    private static m_instance: ImageCache | undefined;\n\n    private m_images: Map<string, ImageCacheItem> = new Map();\n\n    /**\n     * Add an image definition to the global cache. Useful when the image data is already loaded.\n     *\n     * @param mapView Specifiy which [[MapView]] requests the image.\n     * @param url URL of image.\n     * @param imageData Optional [ImageData]] containing the image content.\n     */\n    registerImage(\n        mapView: MapView,\n        url: string,\n        imageData: ImageData | ImageBitmap | undefined\n    ): ImageItem {\n        let imageCacheItem = this.findImageCacheItem(url);\n        if (imageCacheItem !== undefined) {\n            if (mapView !== undefined && imageCacheItem.mapViews.indexOf(mapView) < 0) {\n                imageCacheItem.mapViews.push(mapView);\n            }\n            return imageCacheItem.imageItem;\n        }\n\n        const mapViews: MapView[] = [];\n        if (mapView !== undefined) {\n            mapViews.push(mapView);\n        }\n\n        imageCacheItem = {\n            imageItem: {\n                url,\n                imageData,\n                loaded: false\n            },\n            mapViews\n        };\n\n        this.m_images.set(url, imageCacheItem);\n\n        return imageCacheItem.imageItem;\n    }\n\n    /**\n     * Add an image definition, and optionally start loading the content.\n     *\n     * @param mapView [[MapView]] requesting the image.\n     * @param url URL of image.\n     * @param startLoading Optional flag. If `true` the image will be loaded in the background.\n     */\n    addImage(\n        mapView: MapView,\n        url: string,\n        startLoading = true\n    ): ImageItem | Promise<ImageItem | undefined> | undefined {\n        const imageItem = this.registerImage(mapView, url, undefined);\n        if (imageItem !== undefined && startLoading === true) {\n            return this.loadImage(imageItem);\n        }\n\n        return imageItem;\n    }\n\n    /**\n     * Find [[ImageItem]] for the specified URL.\n     *\n     * @param url URL of image.\n     * @returns `ImageItem` for the URL if the URL is registered, `undefined` otherwise.\n     */\n    findImage(url: string): ImageItem | undefined {\n        const imageItem = this.m_images.get(url);\n        if (imageItem !== undefined) {\n            return imageItem.imageItem;\n        }\n        return undefined;\n    }\n\n    /**\n     * Clear all [[ImageItem]]s belonging to a [[MapView]]. May remove cached items if no\n     * [[MapView]] are registered anymore.\n     *\n     * @param mapView MapView to remove all [[ImageItem]]s from.\n     */\n    clear(mapView: MapView) {\n        const itemsToRemove: string[] = [];\n\n        this.m_images.forEach(imageItem => {\n            const mapViewIndex = imageItem.mapViews.indexOf(mapView);\n            if (mapViewIndex >= 0) {\n                imageItem.mapViews.splice(mapViewIndex, 1);\n            }\n            if (imageItem.mapViews.length === 0) {\n                itemsToRemove.push(imageItem.imageItem.url);\n            }\n        });\n\n        for (const keyToDelete of itemsToRemove) {\n            this.m_images.delete(keyToDelete);\n        }\n    }\n\n    /**\n     * Clear all [[ImageItem]]s from all [[MapView]]s.\n     */\n    clearAll() {\n        this.m_images = new Map();\n    }\n\n    /**\n     * Returns the number of all cached [[ImageItem]]s.\n     */\n    get size(): number {\n        return this.m_images.size;\n    }\n\n    /**\n     * Load an [[ImageItem]]. If the loading process is already running, it returns the current\n     * promise.\n     *\n     * @param imageItem `ImageItem` containing the URL to load image from.\n     * @returns An [[ImageItem]] if the image has already been loaded, a promise otherwise.\n     */\n    loadImage(imageItem: ImageItem): ImageItem | Promise<ImageItem | undefined> {\n        if (imageItem.imageData !== undefined) {\n            return imageItem;\n        }\n\n        if (imageItem.loadingPromise !== undefined) {\n            return imageItem.loadingPromise;\n        }\n\n        const imageLoader = new THREE.ImageLoader();\n\n        imageItem.loadingPromise = new Promise(resolve => {\n            logger.debug(`Loading image: ${imageItem.url}`);\n            imageLoader.load(\n                imageItem.url,\n                image => {\n                    logger.debug(`... finished loading image: ${imageItem.url}`);\n                    this.renderImage(imageItem, image)\n                        .then(() => {\n                            imageItem.mipMaps = mipMapGenerator.generateTextureAtlasMipMap(\n                                imageItem\n                            );\n                            imageItem.loadingPromise = undefined;\n                            resolve(imageItem);\n                        })\n                        .catch(ex => {\n                            logger.error(`... loading image failed: ${imageItem.url} : ${ex}`);\n                            resolve(undefined);\n                        });\n                },\n                // Loading events no longer supported\n                undefined,\n                errorEvent => {\n                    logger.error(`... loading image failed: ${imageItem.url} : ${errorEvent}`);\n\n                    imageItem.loadingPromise = undefined;\n                    resolve(undefined);\n                }\n            );\n        });\n        return imageItem.loadingPromise;\n    }\n\n    /**\n     * Find the cached [[ImageItem]] by URL.\n     *\n     * @param url URL of image.\n     */\n    private findImageCacheItem(url: string): ImageCacheItem | undefined {\n        return this.m_images.get(url);\n    }\n\n    /**\n     * Render the `ImageItem` by using `createImageBitmap()` or by rendering the image into a\n     * [[HTMLCanvasElement]].\n     *\n     * @param imageItem [[ImageItem]] to assign image data to.\n     * @param image [[HTMLImageElement]] to\n     */\n    private renderImage(\n        imageItem: ImageItem,\n        image: HTMLImageElement\n    ): Promise<ImageData | ImageBitmap | undefined> {\n        return new Promise((resolve, reject) => {\n            // use createImageBitmap if it is available. It should be available in webworkers as\n            // well\n            if (typeof createImageBitmap === \"function\") {\n                const options: ImageBitmapOptions = {\n                    premultiplyAlpha: \"default\"\n                };\n\n                logger.debug(`Creating bitmap image: ${imageItem.url}`);\n                createImageBitmap(image, 0, 0, image.width, image.height, options)\n                    .then(imageBitmap => {\n                        logger.debug(`... finished creating bitmap image: ${imageItem.url}`);\n\n                        imageItem.loadingPromise = undefined;\n                        imageItem.imageData = imageBitmap;\n                        imageItem.loaded = true;\n                        resolve(imageBitmap);\n                    })\n                    .catch(ex => {\n                        logger.error(`... loading image failed: ${imageItem.url} : ${ex}`);\n                        resolve(undefined);\n                    });\n            } else {\n                try {\n                    if (typeof document === \"undefined\") {\n                        logger.error(\"Error: document is not available, cannot generate image\");\n                        reject(\n                            new Error(\n                                \"ImageCache#renderImage: document is not available, cannot \" +\n                                    \"render image to create texture\"\n                            )\n                        );\n                    }\n\n                    // TODO: Extract the rendering to the canvas part and make it configurable for\n                    // the client, so it does not rely on the `document`.\n\n                    // use the image, e.g. draw part of it on a canvas\n                    const canvas = document.createElement(\"canvas\");\n                    canvas.width = image.width;\n                    canvas.height = image.height;\n\n                    const context = canvas.getContext(\"2d\");\n                    if (context !== null) {\n                        logger.debug(\n                            // tslint:disable-next-line: max-line-length\n                            `... finished creating bitmap image in canvas: ${imageItem.url} ${image}`\n                        );\n                        context.drawImage(\n                            image,\n                            0,\n                            0,\n                            image.width,\n                            image.height,\n                            0,\n                            0,\n                            canvas.width,\n                            canvas.height\n                        );\n                        const imageData = context.getImageData(0, 0, image.width, image.height);\n                        imageItem.imageData = imageData;\n                        imageItem.loaded = true;\n                        resolve(imageData);\n                    } else {\n                        logger.error(`renderImage: no context found`);\n                        reject(new Error(`ImageCache#renderImage: no context found`));\n                    }\n                } catch (ex) {\n                    logger.error(`renderImage failed: ${ex}`);\n                    imageItem.imageData = undefined;\n                    imageItem.loaded = true;\n                    reject(new Error(`ImageCache#renderImage failed: ${ex}`));\n                }\n            }\n        });\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { Theme } from \"@here/harp-datasource-protocol\";\nimport { HighPrecisionLineMaterial } from \"@here/harp-materials\";\nimport { assert, MathUtils } from \"@here/harp-utils\";\nimport * as THREE from \"three\";\nimport { MapView } from \"./MapView\";\n\n/**\n * Manages the fog display in [[MapView]].\n */\nexport class MapViewFog {\n    private m_enabled: boolean = true;\n    private m_fog: THREE.Fog = new THREE.Fog(0x000000); // Default color asked by DefinitelyTyped.\n    private m_fogIsDefined: boolean = false;\n    private m_cachedTheme: Theme = { styles: {} };\n\n    /**\n     * Constructs a `MapViewFog` instance.\n     *\n     * @param m_scene The scene used in [[MapView]] that contains the map objects.\n     */\n    constructor(private m_scene: THREE.Scene) {}\n\n    /**\n     * Allows for disabling the fog, even if it is defined in the theme. Use this property for\n     * custom views like the demo app's debug camera. However, if the theme does not define a\n     * fog, enabling this property here has no effect.\n     *\n     * @param value A boolean that specifies whether the fog should be enabled or disabled.\n     */\n    set enabled(enableFog: boolean) {\n        this.m_enabled = enableFog;\n        if (enableFog && this.m_fogIsDefined && this.m_scene.fog === null) {\n            this.add();\n        } else if (!enableFog && this.m_scene.fog !== null) {\n            this.remove();\n        }\n    }\n\n    /**\n     * Returns the current fog status, enabled or disabled.\n     */\n    get enabled(): boolean {\n        return this.m_enabled;\n    }\n\n    /**\n     * Sets the fog depending on the [[Theme]] instance provided. This function is called when a\n     * theme is loaded. Fog is added only if the theme contains a fog definition with a:\n     * - `color` property, used to set the fog color.\n     * - `startRatio` property, used to set the start distance of the fog as a ratio of the far\n     * clipping plane distance.\n     *\n     * @param theme A [[Theme]] instance.\n     */\n    reset(theme: Theme) {\n        this.m_cachedTheme = theme;\n        if (\n            theme !== undefined &&\n            theme.fog !== undefined &&\n            theme.fog.color !== undefined &&\n            theme.fog.startRatio !== undefined\n        ) {\n            this.m_fogIsDefined = true;\n            this.m_fog.color.set(theme.fog.color);\n            if (this.m_enabled && this.m_scene.fog === null) {\n                this.add();\n            }\n        } else {\n            this.m_fogIsDefined = false;\n            if (this.m_scene.fog !== null) {\n                this.remove();\n            }\n        }\n    }\n\n    /**\n     * Updates the fog at runtime, depending on the camera.\n     *\n     * @param camera An instance of a `THREE.Camera` with a `far` property.\n     */\n    update(mapView: MapView, viewDistance?: number) {\n        if (\n            this.m_scene.fog !== null &&\n            this.m_cachedTheme !== undefined &&\n            this.m_cachedTheme.fog &&\n            this.m_cachedTheme.fog.startRatio !== undefined &&\n            (mapView.camera.far !== undefined || viewDistance !== undefined)\n        ) {\n            // If maximum visibility range is available use it instead of camera.far distance,\n            // this makes fog independent from dynamic camera planes and keeps consistent\n            // distance based \"melting\" (fog) effect during a tilt.\n            const viewRange = viewDistance !== undefined ? viewDistance : mapView.camera.far;\n            // TODO: We may move below constants to theme Fog definition\n            // Density of the fog when viewing straight along the horizon line.\n            const horizontalDensity = 1.0;\n            // Theoretical density of the fog when viewing straight from top to down.\n            const verticalDensity = 0.0;\n            // The fraction of the maximum viewing distance along the eye vector\n            // to start applying the fog.\n            const startRatio = this.m_cachedTheme.fog.startRatio;\n            // The fraction of maximum viewing range at which fog fully covers geometry.\n            const endRatio = 1.0;\n            assert(startRatio <= endRatio);\n            const t = Math.abs(Math.cos(mapView.tilt));\n            const density = MathUtils.smoothStep(horizontalDensity, verticalDensity, t);\n            this.m_fog.near = MathUtils.lerp(viewRange * startRatio, viewRange, 1.0 - density);\n            this.m_fog.far = MathUtils.lerp(viewRange * endRatio, viewRange, density);\n            this.m_fog.near = Math.min(this.m_fog.near, mapView.camera.far);\n            this.m_fog.far = Math.min(this.m_fog.far, mapView.camera.far);\n        }\n    }\n\n    /**\n     * Handles fog addition.\n     */\n    private add() {\n        // When the fog is changed, ThreeJS takes care of recompiling its built-in materials...\n        this.m_scene.fog = this.m_fog;\n        // ...except the `RawShaderMaterial`, on purpose, so it needs to be updated from the app.\n        this.setFogInRawShaderMaterials(true);\n    }\n\n    /**\n     * Handles fog removal.\n     */\n    private remove() {\n        // When the fog is changed, ThreeJS takes care of recompiling its built-in materials...\n        this.m_scene.fog = null;\n        // ...except the `RawShaderMaterial`, on purpose, so it needs to be updated from the app.\n        this.setFogInRawShaderMaterials(false);\n    }\n\n    /**\n     * ThreeJS lets users manage the `RawShaderMaterial` themselves, so they need to be modified\n     * explicitly.\n     *\n     * @see https://github.com/mrdoob/three.js/blob/dev/src/renderers/webgl/WebGLProgram.js#L298\n     */\n    private setFogInRawShaderMaterials(enableFog: boolean) {\n        this.m_scene.traverse(object => {\n            if (!(object instanceof THREE.Mesh)) {\n                return;\n            }\n            if (!(object.material instanceof THREE.Material)) {\n                return;\n            }\n            // HighPrecisionLineMaterial does not support fog\n            if (object.material instanceof HighPrecisionLineMaterial) {\n                return;\n            }\n            // We may skip redundant updates.\n            if (object.material.fog === enableFog) {\n                return;\n            }\n            object.material.fog = enableFog;\n            // Fog properties can't be easily changed at runtime (once the material\n            // is rendered at least once) and thus requires building of new shader\n            // program - force material update.\n            object.material.needsUpdate = true;\n        });\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport {\n    AttributeMap,\n    composeTechniqueTextureName,\n    DecodedTile,\n    getFeatureId,\n    getPropertyValue,\n    ImageTexture,\n    IndexedTechnique,\n    IndexedTechniqueParams,\n    isLineMarkerTechnique,\n    isPoiTechnique,\n    LineMarkerTechnique,\n    PoiGeometry,\n    PoiTechnique\n} from \"@here/harp-datasource-protocol\";\nimport { ContextualArabicConverter } from \"@here/harp-text-canvas\";\nimport { assert, assertExists, LoggerManager } from \"@here/harp-utils\";\nimport * as THREE from \"three\";\nimport { MapView } from \"../MapView\";\nimport { TextElement } from \"../text/TextElement\";\nimport { DEFAULT_TEXT_DISTANCE_SCALE } from \"../text/TextElementsRenderer\";\nimport { Tile } from \"../Tile\";\nimport { PoiTable } from \"./PoiTableManager\";\n\nconst logger = LoggerManager.instance.create(\"PoiManager\");\n\n/**\n * Interface for the [[ImageTexture]]s that are defined in the atlas.\n */\ninterface ImageTextureDef {\n    x: number;\n    y: number;\n    width: number;\n    height: number;\n    pixelRatio?: number;\n}\n\n/**\n * POI manager class, responsible for loading the [[PoiGeometry]] objects from the [[DecodedTile]],\n * and preparing them for rendering. Also loads and manages the texture atlases for the icons.\n */\nexport class PoiManager {\n    // Keep track of the missing POI table names, but only warn once.\n    private static m_missingPoiTableName: Map<string, boolean> = new Map();\n    private static m_missingPoiName: Map<string, boolean> = new Map();\n\n    /**\n     * Warn about a missing POI table name, but only once.\n     * @param poiTableName POI mapping table name.\n     * @param poiTable POI table instance.\n     */\n    private static notifyMissingPoiTable(\n        poiTableName: string,\n        poiTable: PoiTable | undefined\n    ): void {\n        if (poiTableName === undefined) {\n            poiTableName = \"undefined\";\n        }\n        if (PoiManager.m_missingPoiTableName.get(poiTableName) === undefined) {\n            PoiManager.m_missingPoiTableName.set(poiTableName, true);\n            if (poiTable !== undefined && !poiTable.loadedOk) {\n                logger.error(`updatePoiFromPoiTable: Could not load POI table '${poiTableName}'!`);\n            } else {\n                logger.error(\n                    `updatePoiFromPoiTable: No POI table with name '${poiTableName}' found!`\n                );\n            }\n        }\n    }\n\n    /**\n     * Warn about a missing POI name, but only once.\n     * @param poiName name of POI.\n     * @param poiTableName POI mapping table name.\n     */\n    private static notifyMissingPoi(poiName: string, poiTableName: string): void {\n        if (poiName === undefined) {\n            poiName = \"undefined\";\n        }\n        const key: string = `${poiTableName}[${poiName}]`;\n        if (PoiManager.m_missingPoiName.get(key) === undefined) {\n            PoiManager.m_missingPoiName.set(key, true);\n            logger.warn(\n                `updatePoiFromPoiTable: ` +\n                    `Cannot find POI info for '${poiName}' in table '${poiTableName}'.`\n            );\n        }\n    }\n\n    private m_imageTextures: Map<string, ImageTexture> = new Map();\n    private m_poiShieldGroups: Map<string, number> = new Map();\n\n    /**\n     * The constructor of the `PoiManager`.\n     *\n     * @param mapView The [[MapView]] instance that should display the POIs.\n     */\n    constructor(readonly mapView: MapView) {}\n\n    /**\n     * Add all POIs from a decoded tile and store them as [[TextElement]]s in the [[Tile]].\n     *\n     * Also handles LineMarkers, which is a recurring marker along a line (road).\n     *\n     * @param tile Tile to add POIs to.\n     * @param decodedTile DecodedTile containing the raw [[PoiGeometry]] objects describing the\n     *  POIs.\n     */\n    addPois(tile: Tile, decodedTile: DecodedTile): void {\n        const poiGeometries = assertExists(decodedTile.poiGeometries);\n        const worldOffsetX = tile.computeWorldOffsetX();\n\n        for (const poiGeometry of poiGeometries) {\n            assert(poiGeometry.technique !== undefined);\n            const techniqueIndex = assertExists(poiGeometry.technique);\n            const technique = decodedTile.techniques[techniqueIndex] as IndexedTechnique;\n\n            if (\n                technique._kindState === false ||\n                (!isLineMarkerTechnique(technique) && !isPoiTechnique(technique))\n            ) {\n                continue;\n            }\n\n            // The POI may be in the data, and there may be a Technique, but the technique may\n            // specify to not show it.\n            if (technique.showOnMap === false) {\n                continue;\n            }\n\n            const positions = new THREE.BufferAttribute(\n                new Float32Array(poiGeometry.positions.buffer),\n                poiGeometry.positions.itemCount\n            );\n\n            if (isLineMarkerTechnique(technique) && positions.count > 0) {\n                this.addLineMarker(tile, poiGeometry, technique, positions, worldOffsetX);\n            } else if (isPoiTechnique(technique)) {\n                this.addPoi(tile, poiGeometry, technique, positions, worldOffsetX);\n            }\n        }\n    }\n\n    /**\n     * Load the texture atlas that defines the segments of the texture that should be used for\n     * specific icons. Creates an [[ImageTexture]] for every element in the atlas, such that it can\n     * be addressed in the theme file.\n     *\n     * @param imageName Name of the image from the theme (NOT the url!).\n     * @param atlas URL of the JSON file defining the texture atlas.\n     */\n    addTextureAtlas(imageName: string, atlas: string) {\n        fetch(atlas)\n            .then(response => {\n                if (!response.ok) {\n                    throw new Error(\n                        `addTextureAtlas: Cannot load textureAtlas: ${response.statusText}`\n                    );\n                }\n\n                return response.json();\n            })\n            .then((jsonAtlas: any | undefined) => {\n                if (jsonAtlas === undefined) {\n                    logger.info(`addTextureAtlas: TextureAtlas empty: ${atlas}`);\n                    return;\n                }\n\n                try {\n                    logger.debug(\n                        `addTextureAtlas: Loading textureAtlas '${atlas}' for image '${imageName}'`\n                    );\n                    for (const textureName of Object.getOwnPropertyNames(jsonAtlas)) {\n                        const imageTextureDef = jsonAtlas[textureName] as ImageTextureDef;\n\n                        const imageTexture: ImageTexture = {\n                            name: textureName,\n                            image: imageName,\n                            xOffset: imageTextureDef.x,\n                            yOffset: imageTextureDef.y,\n                            width: imageTextureDef.width,\n                            height: imageTextureDef.height\n                        };\n\n                        this.addImageTexture(imageTexture);\n                    }\n                } catch (ex) {\n                    logger.error(\n                        `addTextureAtlas: Failed to load textureAtlas ` + `'${atlas}' : ${ex}`\n                    );\n                }\n                this.mapView.update();\n            })\n\n            .catch((reason: any) => {\n                logger.error(`addTextureAtlas: Failed to load textureAtlas '${atlas}' : ${reason}`);\n            });\n    }\n\n    /**\n     * Add an [[ImageTexture]] such that it is available as a named entity for techniques in theme\n     * files.\n     *\n     * @param imageTexture [[ImageTexture]] that should be available for POIs.\n     */\n    addImageTexture(imageTexture: ImageTexture) {\n        if (imageTexture.name === undefined) {\n            logger.error(\"addImageTexture: Name required\", imageTexture);\n            return;\n        }\n        if (this.m_imageTextures.get(imageTexture.name) !== undefined) {\n            logger.warn(\n                `addImageTexture: Name already used: ${imageTexture.name}` + ` (overriding it)`\n            );\n        }\n\n        this.m_imageTextures.set(imageTexture.name, imageTexture);\n    }\n\n    /**\n     * Return the [[ImageTexture]] registered under the specified name.\n     *\n     * @param name Name of the [[ImageTexture]].\n     */\n    getImageTexture(name: string): ImageTexture | undefined {\n        return this.m_imageTextures.get(name);\n    }\n\n    /**\n     * Update the [[TextElement]] with the information taken from the [[PoiTable]] which is\n     * referenced in the [[PoiInfo]] of the pointLabel.\n     *\n     * If the requested [[PoiTable]] is not available yet, the function returns `false`.\n     * If the [[PoiTable]] is not defined, or if the references POI has no entry in\n     * the [[PoiTable]], no action is taken, and the function returns `false`.\n     *\n     * If the [[PoiTable]] has been processed, it returns `true`, indicating that this function\n     * doesn't have to be called again.\n     *\n     * @param pointLabel The [[TextElement]] to update.\n     *\n     * @returns `true` if the [[PoiTable]] has been processed, and the function does not have to be\n     *          called again.\n     */\n    updatePoiFromPoiTable(pointLabel: TextElement): boolean {\n        const poiInfo = pointLabel.poiInfo;\n        // PoiTable requires poiName to be defined otherwise mapping via PoiTable is\n        // not possible, such as table key is not defined.\n        if (\n            poiInfo === undefined ||\n            poiInfo.poiTableName === undefined ||\n            poiInfo.poiName === undefined\n        ) {\n            return true;\n        }\n\n        // Try to acquire PoiTable\n        const poiTableName = poiInfo.poiTableName;\n        const poiTable = this.mapView.poiTableManager.getPoiTable(poiTableName);\n\n        // Check if PoiTable is found, but its still loading.\n        if (poiTable !== undefined && poiTable.isLoading) {\n            // The PoiTable is still loading, we have to try again.\n            return false;\n        }\n\n        // Remove poiTableName to mark this POI as processed.\n        poiInfo.poiTableName = undefined;\n\n        // PoiTable not found or can not be loaded.\n        if (poiTable === undefined || !poiTable.loadedOk) {\n            PoiManager.notifyMissingPoiTable(poiTableName, poiTable);\n            return true;\n        }\n\n        // Try to acquire PoiTableEntry.\n        const poiName = poiInfo.poiName;\n        const poiTableEntry = poiTable.getEntry(poiName);\n        if (poiTableEntry === undefined) {\n            PoiManager.notifyMissingPoi(poiName, poiTableName);\n            return true;\n        }\n\n        if (poiTableEntry.iconName !== undefined && poiTableEntry.iconName.length > 0) {\n            poiInfo.imageTextureName = composeTechniqueTextureName(\n                poiTableEntry.iconName,\n                poiInfo.technique\n            );\n        }\n\n        pointLabel.visible =\n            poiTableEntry.visible !== undefined ? poiTableEntry.visible : pointLabel.visible;\n        pointLabel.priority =\n            poiTableEntry.priority !== undefined ? poiTableEntry.priority : pointLabel.priority;\n        poiInfo.iconMinZoomLevel =\n            poiTableEntry.iconMinLevel !== undefined\n                ? poiTableEntry.iconMinLevel\n                : poiInfo.iconMinZoomLevel;\n        poiInfo.iconMaxZoomLevel =\n            poiTableEntry.iconMaxLevel !== undefined\n                ? poiTableEntry.iconMaxLevel\n                : poiInfo.iconMaxZoomLevel;\n        poiInfo.textMinZoomLevel =\n            poiTableEntry.textMinLevel !== undefined\n                ? poiTableEntry.textMinLevel\n                : poiInfo.textMinZoomLevel;\n        poiInfo.textMaxZoomLevel =\n            poiTableEntry.textMaxLevel !== undefined\n                ? poiTableEntry.textMaxLevel\n                : poiInfo.textMaxZoomLevel;\n\n        pointLabel.updateMinMaxZoomLevelsFromPoiInfo();\n\n        return true;\n    }\n\n    /**\n     * Clear internal state. Applicable when switching themes.\n     */\n    clear() {\n        this.m_imageTextures.clear();\n        this.m_poiShieldGroups.clear();\n    }\n\n    /**\n     * Add the LineMarker as a POI with a series of positions. Make sure that the LineMarkers\n     * having the same visual all get their `shieldGroupIndex` set appropriately, so it can be taken\n     * care of later that not too many of them are rendered (obey `minDistance` attribute).\n     */\n    private addLineMarker(\n        tile: Tile,\n        poiGeometry: PoiGeometry,\n        technique: LineMarkerTechnique & IndexedTechniqueParams,\n        positions: THREE.BufferAttribute,\n        worldOffsetX: number\n    ) {\n        let imageTextureName: string | undefined =\n            technique.imageTexture !== undefined\n                ? composeTechniqueTextureName(technique.imageTexture, technique)\n                : undefined;\n\n        let text: string = \"\";\n        let userData: AttributeMap | undefined;\n        let featureId: number | undefined;\n\n        if (poiGeometry.stringCatalog !== undefined) {\n            assert(poiGeometry.texts.length > 0);\n            text = poiGeometry.stringCatalog[poiGeometry.texts[0]] || \"\";\n            if (poiGeometry.objInfos !== undefined) {\n                userData = poiGeometry.objInfos[0];\n                featureId = getFeatureId(userData);\n            }\n\n            if (poiGeometry.imageTextures !== undefined) {\n                assert(poiGeometry.imageTextures.length > 0);\n                imageTextureName = poiGeometry.stringCatalog[poiGeometry.imageTextures[0]];\n            }\n        }\n\n        // let the combined image texture name (name of image in atlas, not the URL) and\n        // text of the shield be the group key, at worst scenario it may be:\n        // \"undefined-\"\n        const groupKey = String(imageTextureName) + \"-\" + text;\n        let shieldGroupIndex = this.m_poiShieldGroups.get(groupKey);\n        if (shieldGroupIndex === undefined) {\n            shieldGroupIndex = this.m_poiShieldGroups.size;\n            this.m_poiShieldGroups.set(groupKey, shieldGroupIndex);\n        }\n\n        // Debugging help to identify the group of a shield :\n        // text = groupKey + \": \" + text;\n\n        const positionArray: THREE.Vector3[] = [];\n        for (let i = 0; i < positions.count; i += 3) {\n            const x = positions.getX(i) + worldOffsetX;\n            const y = positions.getY(i);\n            const z = positions.getZ(i);\n            positionArray.push(new THREE.Vector3(x, y, z));\n        }\n        const textElement = this.checkCreateTextElement(\n            tile,\n            text,\n            technique,\n            imageTextureName,\n            undefined, // TBD for road shields\n            undefined,\n            shieldGroupIndex,\n            featureId,\n            positionArray,\n            undefined,\n            undefined,\n            userData\n        );\n\n        // If the poi icon is rendered, the label that shows text should also be rendered.\n        // The distance rule of the icon should apply, not the one for text (only) labels.\n        textElement.ignoreDistance = false;\n        tile.addTextElement(textElement);\n    }\n\n    /**\n     * Create and add POI [[TextElement]]s to tile with a series of positions.\n     */\n    private addPoi(\n        tile: Tile,\n        poiGeometry: PoiGeometry,\n        technique: PoiTechnique & IndexedTechniqueParams,\n        positions: THREE.BufferAttribute,\n        worldOffsetX: number\n    ) {\n        if (poiGeometry.stringCatalog === undefined) {\n            return;\n        }\n\n        const techniqueTextureName: string | undefined =\n            technique.imageTexture !== undefined\n                ? composeTechniqueTextureName(technique.imageTexture, technique)\n                : undefined;\n\n        const poiTechnique = technique as PoiTechnique;\n        const poiTableName = poiTechnique.poiTable;\n        let poiName = poiTechnique.poiName;\n\n        for (let i = 0; i < positions.count; ++i) {\n            const x = positions.getX(i) + worldOffsetX;\n            const y = positions.getY(i);\n            const z = positions.getZ(i);\n\n            assert(poiGeometry.texts.length > i);\n            let imageTextureName = techniqueTextureName;\n            const text: string = poiGeometry.stringCatalog[poiGeometry.texts[i]] || \"\";\n            const userData =\n                poiGeometry.objInfos !== undefined ? poiGeometry.objInfos[i] : undefined;\n            const featureId = getFeatureId(userData);\n            if (poiGeometry.imageTextures !== undefined && poiGeometry.imageTextures[i] >= 0) {\n                assert(poiGeometry.imageTextures.length > i);\n                imageTextureName = poiGeometry.stringCatalog[poiGeometry.imageTextures[i]];\n            }\n            if (poiTableName !== undefined) {\n                // The POI name to be used is taken from the data, since it will\n                // specify the name of the texture to use.\n\n                // The POI name in the technique may override the POI name from the\n                // data.\n                poiName =\n                    poiTechnique.poiName === undefined ? imageTextureName : poiTechnique.poiName;\n\n                imageTextureName = undefined;\n            }\n\n            const textElement = this.checkCreateTextElement(\n                tile,\n                text,\n                technique,\n                imageTextureName,\n                poiTableName,\n                poiName,\n                0,\n                featureId,\n                x,\n                y,\n                z,\n                userData\n            );\n\n            tile.addTextElement(textElement);\n        }\n    }\n\n    /**\n     * Create the [[TextElement]] for a POI. Even if the POI has no text, it is required that there\n     * is a [[TextElement]], since POIs are hooked onto [[TextElement]]s for sorting.(Sorted by\n     * priority attribute).\n     */\n    private checkCreateTextElement(\n        tile: Tile,\n        text: string,\n        technique: (PoiTechnique | LineMarkerTechnique) & IndexedTechniqueParams,\n        imageTextureName: string | undefined,\n        poiTableName: string | undefined,\n        poiName: string | undefined,\n        shieldGroupIndex: number,\n        featureId: number | undefined,\n        x: number | THREE.Vector3[],\n        y: number | undefined,\n        z: number | undefined,\n        userData?: {}\n    ): TextElement {\n        const priority = technique.priority !== undefined ? technique.priority : 0;\n        const positions = Array.isArray(x) ? (x as THREE.Vector3[]) : new THREE.Vector3(x, y, z);\n\n        // The current zoomlevel of mapview. Since this method is called for all tiles in the\n        // VisibleTileSet we can be sure that the current zoomlevel matches the zoomlevel where\n        // the tile should be shown.\n        const env = this.mapView.env;\n        const fadeNear =\n            technique.fadeNear !== undefined\n                ? getPropertyValue(technique.fadeNear, env)\n                : technique.fadeNear;\n        const fadeFar =\n            technique.fadeFar !== undefined\n                ? getPropertyValue(technique.fadeFar, env)\n                : technique.fadeFar;\n        const xOffset = getPropertyValue(technique.xOffset, env);\n        const yOffset = getPropertyValue(technique.yOffset, env);\n\n        const textElement: TextElement = new TextElement(\n            ContextualArabicConverter.instance.convert(text),\n            positions,\n            tile.textStyleCache.getRenderStyle(technique),\n            tile.textStyleCache.getLayoutStyle(technique),\n            getPropertyValue(priority, env),\n            xOffset !== undefined ? xOffset : 0.0,\n            yOffset !== undefined ? yOffset : 0.0,\n            featureId,\n            technique.style,\n            fadeNear,\n            fadeFar,\n            tile.offset\n        );\n\n        textElement.mayOverlap = technique.textMayOverlap === true;\n        textElement.reserveSpace = technique.textReserveSpace !== false;\n        textElement.alwaysOnTop = technique.alwaysOnTop === true;\n        textElement.userData = userData;\n\n        // imageTextureName may be undefined if a poiTable is used.\n        if (imageTextureName === undefined && poiTableName !== undefined) {\n            imageTextureName = \"\";\n        } else if (imageTextureName !== undefined && poiTableName !== undefined) {\n            logger.warn(\n                \"Possible duplicate POI icon definition via imageTextureName and poiTable!\"\n            );\n        }\n\n        if (imageTextureName !== undefined) {\n            const textIsOptional = technique.textIsOptional === true;\n            const iconIsOptional = technique.iconIsOptional !== false;\n            const renderTextDuringMovements = !(technique.renderTextDuringMovements === false);\n            const iconMayOverlap =\n                technique.iconMayOverlap === undefined\n                    ? textElement.textMayOverlap\n                    : technique.iconMayOverlap === true;\n            const iconReserveSpace =\n                technique.iconReserveSpace === undefined\n                    ? textElement.textReservesSpace\n                    : technique.iconReserveSpace !== false;\n\n            textElement.poiInfo = {\n                technique,\n                imageTextureName,\n                poiTableName,\n                poiName,\n                shieldGroupIndex,\n                textElement,\n                textIsOptional,\n                iconIsOptional,\n                renderTextDuringMovements,\n                mayOverlap: iconMayOverlap,\n                reserveSpace: iconReserveSpace,\n                featureId,\n                iconMinZoomLevel: technique.iconMinZoomLevel,\n                iconMaxZoomLevel: technique.iconMaxZoomLevel,\n                textMinZoomLevel: technique.textMinZoomLevel,\n                textMaxZoomLevel: technique.textMaxZoomLevel\n            };\n            textElement.updateMinMaxZoomLevelsFromPoiInfo();\n        } else {\n            // Select the smaller/larger one of the two min/max values, because the TextElement\n            // is a container for both.\n            if (textElement.minZoomLevel === undefined) {\n                textElement.minZoomLevel = technique.textMinZoomLevel;\n            }\n\n            if (textElement.maxZoomLevel === undefined) {\n                textElement.maxZoomLevel = technique.textMaxZoomLevel;\n            }\n        }\n\n        textElement.distanceScale =\n            technique.distanceScale !== undefined\n                ? technique.distanceScale\n                : DEFAULT_TEXT_DISTANCE_SCALE;\n\n        // tslint:disable-next-line: deprecation\n        textElement.kind = technique.kind;\n        return textElement;\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\nimport {\n    PoiStackMode,\n    PoiTableDef,\n    PoiTableEntryDef,\n    PoiTableRef,\n    Theme\n} from \"@here/harp-datasource-protocol\";\nimport { LoggerManager } from \"@here/harp-utils\";\n\nimport { MapView } from \"../MapView\";\n\nconst logger = LoggerManager.instance.create(\"PoiTable\");\n\n/**\n * Class to store and maintain individual POI information for the [[PoiTable]].\n */\nclass PoiTableEntry implements PoiTableEntryDef {\n    /**\n     * Verify that the JSON description of the POI table entry is valid.\n     *\n     * @param jsonEntry JSON description of the POI table entry.\n     *\n     * @returns `true` if the `jsonEntry` is valid.\n     */\n    static verifyJSON(jsonEntry: PoiTableEntryDef): boolean {\n        let isOK =\n            typeof jsonEntry.name === \"string\" &&\n            jsonEntry.name.length > 0 &&\n            (jsonEntry.altNames === undefined || Array.isArray(jsonEntry.altNames)) &&\n            (jsonEntry.stackMode === undefined ||\n                jsonEntry.stackMode === \"yes\" ||\n                jsonEntry.stackMode === \"no\" ||\n                jsonEntry.stackMode === \"parent\") &&\n            (jsonEntry.visible === undefined || typeof jsonEntry.visible === \"boolean\") &&\n            (jsonEntry.priority === undefined || typeof jsonEntry.priority === \"number\") &&\n            (jsonEntry.iconMinLevel === undefined || typeof jsonEntry.iconMinLevel === \"number\") &&\n            (jsonEntry.iconMaxLevel === undefined || typeof jsonEntry.iconMaxLevel === \"number\") &&\n            (jsonEntry.textMinLevel === undefined || typeof jsonEntry.textMinLevel === \"number\") &&\n            (jsonEntry.textMaxLevel === undefined || typeof jsonEntry.textMaxLevel === \"number\");\n\n        if (isOK && jsonEntry.altNames !== undefined) {\n            const altNames = jsonEntry.altNames as string[];\n            for (const str in altNames) {\n                if (typeof str !== \"string\") {\n                    isOK = false;\n                    break;\n                }\n            }\n        }\n\n        return isOK;\n    }\n\n    /** Default name of the POI as the key for looking it up. */\n    name?: string;\n    /** Alternative names of the POI. */\n    altNames?: string[];\n    /** Visibility of the POI. If `false`, the POI will not be rendered. */\n    visible?: boolean;\n    /** Name of the icon, defined in the the texture atlases. */\n    iconName?: string;\n    /** Stacking mode of the POI. For future use. */\n    stackMode?: PoiStackMode;\n    /**\n     * Priority of the POI to select the visible set in case there are more POIs than can be\n     * handled.\n     */\n    priority?: number;\n    /** Minimum zoom level to render the icon on. */\n    iconMinLevel?: number;\n    /** Maximum zoom level to render the icon on. */\n    iconMaxLevel?: number;\n    /** Minimum zoom level to render the text label on. */\n    textMinLevel?: number;\n    /** Maximum zoom level to render the text label on. */\n    textMaxLevel?: number;\n\n    /**\n     * Setup the [[PoiTableEntry]] from the JSON description. It is assumed that the jsonEntry has\n     * been verified with [[PoiTableEntry#verifyJSON]].\n     *\n     * @param jsonEntry JSON description of the POI table entry. Expected to have been verified with\n     *          [[PoiTableEntry#verifyJSON]].\n     */\n    setup(jsonEntry: PoiTableEntryDef) {\n        this.name = jsonEntry.name;\n        this.altNames = jsonEntry.altNames;\n        this.iconName = jsonEntry.iconName;\n        this.visible = jsonEntry.visible;\n        this.priority = jsonEntry.priority;\n        this.iconMinLevel = jsonEntry.iconMinLevel;\n        this.iconMaxLevel = jsonEntry.iconMaxLevel;\n        this.textMinLevel = jsonEntry.textMinLevel;\n        this.textMaxLevel = jsonEntry.textMaxLevel;\n\n        switch (jsonEntry.stackMode) {\n            case \"yes\":\n                this.stackMode = PoiStackMode.Show;\n                break;\n            case \"no\":\n                this.stackMode = PoiStackMode.Hide;\n                break;\n            case \"parent\":\n                this.stackMode = PoiStackMode.ShowParent;\n                break;\n            default:\n        }\n    }\n}\n\n/**\n * The `PoiTable` stores individual information for each POI type. If a [[TextElement]] has a\n * reference to a PoiTable (if TextElement.poiInfo.poiTableName is set), information for the\n * TextElement and its icon are read from the PoiTable.\n *\n * The key to look up the POI is taken from the data, in case of OSM data with TileZen data, the\n * `poiNameField` is set to `kind`, which makes the content of the field `kind` in the data the key\n * to look up the POIs in the [[PoiTable]].\n *\n * On the side of the [[PoiTable]], the key to look up the PoiTableEntry is either the property\n * \"name\" of the [[PoiTableEntry]] (which should be unique), or the alternative list of names\n * `altNames`, where each value should also be unique. If the property `useAltNamesForKey` is set to\n * `true`, the `altNames` will be used.\n */\nexport class PoiTable {\n    /**\n     * Stores the list of [[PoiTableEntry]]s.\n     */\n    private readonly poiList: PoiTableEntry[] = new Array();\n    /**\n     * Dictionary to look up for [[PoiTableEntry]] quickly. The dictionary is either created for\n     * the `name` property of the [[PoiTableEntry]], which will identify POI, or for all of\n     * alternative the names defined in `altNames` of [[PoiTableEntry]] JSON object.\n     * Value assigned to key it is the index to [[poiList]] array which contain actual\n     * [[PoiTabelEntry]] objects.\n     */\n    private readonly poiDict: Map<string, number> = new Map();\n    private m_isLoading = false;\n    private m_loadedOk: boolean | undefined = undefined;\n\n    /**\n     * Creates an instance of PoiTable.\n     *\n     * @param {string} name Name of the `PoiTable`. Must be unique.\n     * @param {boolean} useAltNamesForKey Pass `true` to use the contents of the property `altNames`\n     *          to find a [[PoiTableEntry]] in the table.\n     */\n    constructor(readonly name: string, readonly useAltNamesForKey: boolean) {}\n\n    /**\n     * Returns `true` if the table is currently being loaded, `false` otherwise.\n     *\n     * @readonly\n     */\n    get isLoading(): boolean {\n        return this.m_isLoading;\n    }\n\n    /**\n     * Returns `true` if the table has been loaded correctly, `false` otherwise.\n     *\n     * @readonly\n     */\n    get loadedOk(): boolean {\n        return this.m_loadedOk === true;\n    }\n\n    /**\n     * Gets [[PoiTableEntry]] for poi name specified.\n     *\n     * @param poiName poi name or one of its alternative names if [[useAltNamesForKey]] is\n     * set to `true`.\n     * @returns [[PoiTableEntry]] object or undefined if name was not found in dictionary.\n     */\n    getEntry(poiName: string): PoiTableEntry | undefined {\n        const entryIdx: number | undefined = this.poiDict.get(poiName);\n        if (entryIdx !== undefined) {\n            if (entryIdx < this.poiList.length) {\n                return this.poiList[entryIdx];\n            } else {\n                throw new Error(\"Poi table entry index out of stored list!\");\n            }\n        }\n        return undefined;\n    }\n\n    /**\n     * Start to load the PoiTable from the specified URL. Can only be called once per table.\n     *\n     * @param {string} poiTableUrl URL that points to the JSON file.\n     *\n     * @returns {Promise<boolean>} Promise is being resolved once the JSON file has been fetched and\n     *          the `PoiTable` has been set up.\n     */\n    async load(poiTableUrl: string): Promise<boolean> {\n        if (this.m_loadedOk !== undefined) {\n            // Only load once.\n            return true;\n        }\n\n        this.m_loadedOk = false;\n\n        const response = await fetch(poiTableUrl);\n\n        if (!response.ok) {\n            throw new Error(\n                `load: Cannot load POI table at ${poiTableUrl}:` + ` ${response.statusText}`\n            );\n        }\n\n        const jsonPoiTable = (await response.json()) as PoiTableDef;\n        if (jsonPoiTable === undefined) {\n            logger.info(`load: TextureAtlas empty: ${poiTableUrl}`);\n            return true;\n        }\n\n        this.startLoading();\n\n        try {\n            logger.debug(`load: Loading POI table '${poiTableUrl}' for table '${this.name}'`);\n\n            if (jsonPoiTable.poiList !== undefined && Array.isArray(jsonPoiTable.poiList)) {\n                for (const tableEntry of jsonPoiTable.poiList) {\n                    if (PoiTableEntry.verifyJSON(tableEntry)) {\n                        const newPoiEntry = new PoiTableEntry();\n                        newPoiEntry.setup(tableEntry);\n                        const entryIdx = this.poiList.push(newPoiEntry) - 1;\n\n                        if (!this.useAltNamesForKey) {\n                            // Use actual name of entry as the key\n                            if (newPoiEntry.name === undefined) {\n                                logger.warn(\n                                    `load: Invalid entry in POI table '${poiTableUrl}' : ` +\n                                        `. No name set in entry: ${tableEntry}.`\n                                );\n                            } else {\n                                this.poiDict.set(newPoiEntry.name, entryIdx);\n                            }\n                        } else {\n                            if (\n                                newPoiEntry.altNames !== undefined &&\n                                newPoiEntry.altNames.length > 0\n                            ) {\n                                // Use the list of alternative names as keys.\n                                for (const altName of newPoiEntry.altNames) {\n                                    this.poiDict.set(altName, entryIdx);\n                                }\n                            } else {\n                                logger.debug(\n                                    `load: Invalid entry in POI table '${poiTableUrl}' : ` +\n                                        `No alternative names set in entry: ${JSON.stringify(\n                                            tableEntry\n                                        )}.`\n                                );\n                            }\n                        }\n                    } else {\n                        logger.warn(\n                            `load: Invalid entry in POI table '${poiTableUrl}' : ${JSON.stringify(\n                                tableEntry\n                            )}`\n                        );\n                    }\n                }\n            }\n            this.m_loadedOk = true;\n            this.finishedLoading();\n        } catch (ex) {\n            logger.error(`load: Failed to load POI table ` + `'${poiTableUrl}' : ${ex}`);\n            this.m_loadedOk = false;\n            this.finishedLoading();\n            return false;\n        }\n        return true;\n    }\n\n    private startLoading() {\n        this.m_isLoading = true;\n    }\n\n    private finishedLoading() {\n        this.m_isLoading = false;\n    }\n}\n\n/**\n * The `PoiTableManager` manages the list of [[PoiTables]] that can be defined in the [[Theme]]\n * file.\n */\nexport class PoiTableManager {\n    private m_isLoading = false;\n    private m_poiTables: Map<string, PoiTable> = new Map();\n\n    /**\n     * Creates an instance of PoiTableManager.\n     * @param {MapView} mapView Owning [[MapView]].\n     */\n    constructor(readonly mapView: MapView) {}\n\n    /**\n     * Load the [[PoiTable]]s that are stored in the [[MapView]]s [[Theme]]. Note that duplicate\n     * names of [[PoiTable]]s in the [[Theme]] will lead to inaccessible [[PoiTable]]s.\n     *\n     * @param {Theme} theme [[Theme]] containing all [[PoiTable]]s to load.\n     *\n     * @returns {Promise<void>} Resolved once all the [[PoiTable]]s in the [[Theme]] have been\n     *          loaded.\n     */\n    async loadPoiTables(theme: Theme): Promise<void> {\n        const finished = new Promise<void>(resolve => {\n            this.clear();\n\n            // Add the POI tables defined in the theme.\n            if (theme.poiTables !== undefined) {\n                this.startLoading();\n\n                // Gather promises to signal the success of having loaded them all\n                const loadPromises: Array<Promise<boolean>> = new Array();\n\n                theme.poiTables.forEach((poiTableRef: PoiTableRef) => {\n                    if (\n                        poiTableRef !== undefined &&\n                        poiTableRef.name !== undefined &&\n                        typeof poiTableRef.name === \"string\"\n                    ) {\n                        const poiTable = new PoiTable(\n                            poiTableRef.name,\n                            poiTableRef.useAltNamesForKey !== false\n                        );\n                        if (poiTableRef.url !== undefined && typeof poiTableRef.url === \"string\") {\n                            this.addTable(poiTable);\n                            loadPromises.push(poiTable.load(poiTableRef.url));\n                        } else {\n                            logger.error(`POI table definition has no valid url: ${poiTableRef}`);\n                        }\n                    } else {\n                        logger.error(`POI table definition has no valid name: ${poiTableRef}`);\n                    }\n                });\n\n                if (loadPromises.length > 0) {\n                    Promise.all(loadPromises).finally(() => {\n                        this.finishLoading();\n                        resolve();\n                    });\n                } else {\n                    this.finishLoading();\n                    resolve();\n                }\n            } else {\n                this.finishLoading();\n                resolve();\n            }\n        });\n\n        return finished;\n    }\n\n    /**\n     * Clear the list of [[PoiTable]]s.\n     */\n    clear() {\n        this.m_poiTables = new Map();\n    }\n\n    /**\n     * Return the map of [[PoiTable]]s.\n     */\n    get poiTables(): Map<string, PoiTable> {\n        return this.m_poiTables;\n    }\n\n    /**\n     * Manually add a [[PoiTable]]. Normally, the [[PoiTables]]s are specified in the [[Theme]].\n     * Ensure that the name is unique.\n     */\n    addTable(poiTable: PoiTable) {\n        this.m_poiTables.set(poiTable.name, poiTable);\n    }\n\n    /**\n     * Retrieve a [[PoiTable]] by name.\n     *\n     * @param {(string | undefined)} poiTableName Name of the [[PoiTable]].\n     *\n     * @returns {(PoiTable | undefined)} The found [[poiTable]] if it could be found, `undefined`\n     *          otherwise.\n     */\n    getPoiTable(poiTableName: string | undefined): PoiTable | undefined {\n        return poiTableName === undefined ? undefined : this.m_poiTables.get(poiTableName);\n    }\n\n    /**\n     * Return `true` if the [[PoiTable]]s have finished loading.\n     *\n     * @readonly\n     */\n    get finishedLoading(): boolean {\n        return !this.m_isLoading;\n    }\n\n    private startLoading() {\n        this.m_isLoading = true;\n    }\n\n    private finishLoading() {\n        this.m_isLoading = false;\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport * as THREE from \"three\";\n\nimport { Definitions, StyleSet, Theme } from \"@here/harp-datasource-protocol\";\nimport { MapEnv, StyleSetEvaluator } from \"@here/harp-datasource-protocol/index-decoder\";\nimport {\n    GeoCoordinates,\n    MercatorConstants,\n    polarTilingScheme,\n    TileKey,\n    TilingScheme,\n    TransverseMercatorUtils\n} from \"@here/harp-geoutils\";\n\nimport { DataSource, DataSourceOptions } from \"./DataSource\";\nimport { createMaterial } from \"./DecodedTileHelpers\";\nimport { Tile } from \"./Tile\";\n\nexport interface PolarTileDataSourceOptions extends DataSourceOptions {\n    /**\n     * Optional level offset of regular tiles from reference datasource to align tiles to.\n     * Default is -1.\n     */\n    geometryLevelOffset?: number;\n\n    /**\n     * Enable debug display for generated tiles.\n     * Default is false.\n     */\n    debugTiles?: boolean;\n}\n\n/**\n * [[DataSource]] providing geometry for poles\n */\nexport class PolarTileDataSource extends DataSource {\n    private m_tilingScheme: TilingScheme = polarTilingScheme;\n    private m_maxLatitude = THREE.MathUtils.radToDeg(MercatorConstants.MAXIMUM_LATITUDE);\n    private m_geometryLevelOffset: number;\n    private m_debugTiles: boolean;\n\n    private m_styleSetEvaluator?: StyleSetEvaluator;\n    private m_northPoleMaterial?: THREE.Material;\n    private m_southPoleMaterial?: THREE.Material;\n\n    constructor({\n        name = \"polar\",\n        styleSetName,\n        minDataLevel,\n        maxDataLevel,\n        minDisplayLevel,\n        maxDisplayLevel,\n        storageLevelOffset = -2,\n        geometryLevelOffset = 1,\n        debugTiles = false\n    }: PolarTileDataSourceOptions) {\n        super({\n            name,\n            styleSetName,\n            minDataLevel,\n            maxDataLevel,\n            minDisplayLevel,\n            maxDisplayLevel,\n            storageLevelOffset\n        });\n\n        this.m_geometryLevelOffset = geometryLevelOffset;\n        this.m_debugTiles = debugTiles;\n        this.cacheable = false;\n    }\n\n    /** @override */\n    dispose() {\n        if (this.m_northPoleMaterial) {\n            this.m_northPoleMaterial.dispose();\n            delete this.m_northPoleMaterial;\n        }\n        if (this.m_southPoleMaterial) {\n            this.m_southPoleMaterial.dispose();\n            delete this.m_southPoleMaterial;\n        }\n        if (this.m_styleSetEvaluator) {\n            delete this.m_styleSetEvaluator;\n        }\n    }\n\n    createMaterial(kind: string, styleSetEvaluator: StyleSetEvaluator): THREE.Material | undefined {\n        const env = new MapEnv({\n            $geometryType: \"polygon\",\n            $layer: \"earth\",\n            kind\n        });\n\n        const techniques = styleSetEvaluator.getMatchingTechniques(env);\n\n        return techniques.length !== 0\n            ? createMaterial({ technique: techniques[0], env: this.mapView.env })\n            : undefined;\n    }\n\n    /** @override */\n    setStyleSet(styleSet?: StyleSet, definitions?: Definitions, languages?: string[]): void {\n        this.dispose();\n\n        if (styleSet !== undefined) {\n            this.m_styleSetEvaluator = new StyleSetEvaluator(styleSet, definitions);\n\n            this.m_northPoleMaterial = this.createMaterial(\"north_pole\", this.m_styleSetEvaluator);\n            this.m_southPoleMaterial = this.createMaterial(\"south_pole\", this.m_styleSetEvaluator);\n        }\n\n        this.mapView.markTilesDirty(this);\n    }\n\n    /** @override */\n    setTheme(theme: Theme, languages?: string[]): void {\n        const styleSet =\n            (this.styleSetName !== undefined && theme.styles && theme.styles[this.styleSetName]) ||\n            [];\n\n        this.setStyleSet(styleSet, theme.definitions, languages);\n    }\n\n    /** @override */\n    canGetTile(zoomLevel: number, tileKey: TileKey): boolean {\n        if (zoomLevel !== tileKey.level || tileKey.level < 1) {\n            return false;\n        }\n\n        const { north, south } = this.m_tilingScheme.getGeoBox(tileKey);\n\n        return north > this.m_maxLatitude || south < -this.m_maxLatitude;\n    }\n\n    /** @override */\n    shouldSubdivide(zoomLevel: number, tileKey: TileKey): boolean {\n        if (zoomLevel <= tileKey.level) {\n            return false;\n        }\n\n        const { north, south } = this.m_tilingScheme.getGeoBox(tileKey);\n\n        return north > this.m_maxLatitude || south < -this.m_maxLatitude;\n    }\n\n    /** @override */\n    getTilingScheme(): TilingScheme {\n        return this.m_tilingScheme;\n    }\n\n    /** @override */\n    getTile(tileKey: TileKey): Tile {\n        const tile = new Tile(this, tileKey);\n\n        this.createTileGeometry(tile);\n\n        return tile;\n    }\n\n    get geometryLevelOffset(): number {\n        return this.m_geometryLevelOffset;\n    }\n\n    set geometryLevelOffset(geometryLevelOffset: number) {\n        this.m_geometryLevelOffset = geometryLevelOffset;\n    }\n\n    private intersectEdge(latitude: number, a: GeoCoordinates, b: GeoCoordinates): GeoCoordinates {\n        const latA = a.latitude;\n        const latB = b.latitude;\n\n        let lonA = a.longitude;\n        let lonB = b.longitude;\n\n        if (Math.abs(latA) === 90) {\n            lonA = lonB;\n        }\n        if (Math.abs(latB) === 90) {\n            lonB = lonA;\n        }\n        const deltaLat = latB - latA;\n        const deltaLon = lonB - lonA;\n        const scale = (latitude - latA) / deltaLat;\n\n        return new GeoCoordinates(latitude, lonA + deltaLon * scale, 0);\n    }\n\n    private createTileGeometry(tile: Tile): void {\n        const { north, south } = tile.geoBox;\n\n        const isNorthPole = north > 0 && south >= 0;\n        const material = isNorthPole ? this.m_northPoleMaterial : this.m_southPoleMaterial;\n        if (material === undefined) {\n            tile.forceHasGeometry(true);\n            return;\n        }\n\n        const srcProjection = this.m_tilingScheme.projection;\n        const dstProjection = this.projection;\n\n        const maxLat = this.m_maxLatitude;\n        const poleLat = isNorthPole ? maxLat : -maxLat;\n\n        const box = this.m_tilingScheme.boundingBoxGenerator.getWorldBox(tile.tileKey);\n\n        const pBL = srcProjection.unprojectPoint(new THREE.Vector3(box.min.x, box.min.y, 0));\n        const pBR = srcProjection.unprojectPoint(new THREE.Vector3(box.max.x, box.min.y, 0));\n        const pTR = srcProjection.unprojectPoint(new THREE.Vector3(box.max.x, box.max.y, 0));\n        const pTL = srcProjection.unprojectPoint(new THREE.Vector3(box.min.x, box.max.y, 0));\n\n        let points: GeoCoordinates[];\n        let needsGeometryCut = false;\n\n        // special case where tile contains half of the hemisphere\n        if (tile.tileKey.level === 1) {\n            const isLeftHalf = box.min.x === 0;\n\n            const poleX = isLeftHalf ? box.max.x : box.min.x;\n            const poleY = (box.max.y + box.min.y) / 2;\n            const pPole = srcProjection.unprojectPoint(new THREE.Vector3(poleX, poleY, 0));\n\n            // coordinates are not used, needed for right position\n            const pXX = isLeftHalf ? pBL : pBR;\n\n            points = isNorthPole\n                ? isLeftHalf\n                    ? [pPole, pTR, pXX, pBR]\n                    : [pPole, pBL, pXX, pTL]\n                : isLeftHalf\n                ? [pPole, pBR, pXX, pTR]\n                : [pPole, pTL, pXX, pBL];\n\n            needsGeometryCut = true;\n        } else {\n            // ccw for north, cw for south\n            points = isNorthPole ? [pBL, pBR, pTR, pTL] : [pBL, pTL, pTR, pBR];\n\n            const lats = points.map(p => p.latitude);\n            const lmax = Math.max(...lats);\n            const lmin = Math.min(...lats);\n\n            const isAllPointsOut = isNorthPole ? lmax < poleLat : lmin > poleLat;\n            if (isAllPointsOut) {\n                return;\n            }\n\n            const isSomePointsOut = isNorthPole ? lmin < poleLat : lmax > poleLat;\n            needsGeometryCut = isSomePointsOut;\n\n            if (needsGeometryCut) {\n                const nearest = lats.indexOf(isNorthPole ? lmax : lmin);\n                if (nearest !== 0) {\n                    for (let i = 0; i < nearest; i++) {\n                        points.push(points.shift() as GeoCoordinates);\n                    }\n                }\n            }\n        }\n\n        if (needsGeometryCut) {\n            const centerX = (box.min.x + box.max.x) / 2;\n            const centerY = (box.min.y + box.max.y) / 2;\n            const center = srcProjection.unprojectPoint(new THREE.Vector3(centerX, centerY, 0));\n\n            TransverseMercatorUtils.alignLongitude(points, center);\n\n            // points aligned as follows:\n            // a - nearest to the pole, always in\n            // b - next to nearest\n            // c - farthes from the pole, always out\n            // d - prev from nearest\n            const a = points[0];\n            const b = points[1];\n            const c = points[2];\n            const d = points[3];\n\n            const inPointB = Math.abs(b.latitude) >= maxLat;\n            const inPointD = Math.abs(d.latitude) >= maxLat;\n\n            const cutStart = inPointB\n                ? this.intersectEdge(poleLat, b, c)\n                : this.intersectEdge(poleLat, a, b);\n\n            const cutEnd = inPointD\n                ? this.intersectEdge(poleLat, d, c)\n                : this.intersectEdge(poleLat, a, d);\n\n            points.splice(inPointB ? 2 : 1, 4, cutStart);\n\n            const level = tile.tileKey.level - this.storageLevelOffset + this.m_geometryLevelOffset;\n            // tslint:disable-next-line:no-bitwise\n            const subdivisions = 1 << Math.max(0, level);\n            const step = 360 / subdivisions;\n\n            const cutIndexStart = Math.floor((cutStart.longitude + 180) / step);\n            const cutIndexEnd = Math.ceil((cutEnd.longitude + 180) / step);\n\n            for (let i = cutIndexStart + 1; i < cutIndexEnd; i++) {\n                points.push(new GeoCoordinates(poleLat, i * step - 180, 0));\n            }\n\n            points.push(cutEnd);\n            if (inPointD) {\n                points.push(d);\n            }\n        }\n\n        const g = new THREE.Geometry();\n\n        for (const point of points) {\n            const projected = dstProjection.projectPoint(point, new THREE.Vector3());\n            g.vertices.push(projected.sub(tile.center));\n        }\n\n        for (let i = 1; i < points.length - 1; i++) {\n            g.faces.push(isNorthPole ? new THREE.Face3(0, i, i + 1) : new THREE.Face3(0, i + 1, i));\n        }\n\n        const geometry = new THREE.BufferGeometry();\n        geometry.fromGeometry(g);\n        g.dispose();\n\n        const mesh = new THREE.Mesh(geometry, material);\n        mesh.userData = {\n            dataSource: this.name,\n            tileKey: tile.tileKey\n        };\n\n        if (this.m_debugTiles) {\n            const color = Math.round(Math.abs(Math.sin(11 * tile.tileKey.mortonCode())) * 0xffffff);\n            mesh.material = new THREE.MeshBasicMaterial({ color, transparent: true, opacity: 0.5 });\n\n            tile.objects.push(\n                new THREE.Mesh(geometry, new THREE.MeshBasicMaterial({ color, wireframe: true }))\n            );\n        }\n\n        tile.objects.push(mesh);\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { CubemapSky } from \"@here/harp-datasource-protocol\";\nimport { LoggerManager } from \"@here/harp-utils\";\nimport { CubeTexture, CubeTextureLoader, Texture } from \"three\";\n\nconst logger = LoggerManager.instance.create(\"SkyCubemapTexture\");\n\n/**\n * Number of faces that form a [[SkyCubemapTexture]].\n */\nexport const SKY_CUBEMAP_FACE_COUNT = 6;\n\n/**\n * Maps the faceId to the expected position in the threejs faces array.\n */\nexport enum SkyCubemapFaceId {\n    \"positiveX\",\n    \"negativeX\",\n    \"positiveY\",\n    \"negativeY\",\n    \"positiveZ\",\n    \"negativeZ\"\n}\n\n/**\n * Class that handles loading all 6 faces of a [[CubeTexture]], to be used with [[SkyBackground]].\n */\nexport class SkyCubemapTexture {\n    private m_skybox: CubeTexture;\n\n    /**\n     * Constructs a new `SkyCubemapTexture`.\n     *\n     * @param sky Initial [[CubemapSky]] configuration.\n     */\n    constructor(sky: CubemapSky) {\n        const faces = this.createCubemapFaceArray(sky);\n        this.m_skybox =\n            faces !== undefined ? new CubeTextureLoader().load(faces) : new CubeTexture();\n    }\n\n    /**\n     * Disposes allocated resources.\n     */\n    dispose() {\n        this.m_skybox.dispose();\n    }\n\n    /**\n     * `SkyCubemapTexture`'s texture resource.\n     */\n    get texture(): Texture {\n        return this.m_skybox;\n    }\n\n    /**\n     * Updates the `SkyCubemapTexture` with new parameters.\n     *\n     * @param params New [[CubemapSky]] configuration.\n     */\n    updateTexture(sky: CubemapSky) {\n        const faces = this.createCubemapFaceArray(sky);\n        if (faces === undefined) {\n            return;\n        }\n        this.m_skybox = new CubeTextureLoader().load(faces);\n    }\n\n    private createCubemapFaceArray(sky: CubemapSky): string[] | undefined {\n        const faces: Array<string | undefined> = [\n            undefined,\n            undefined,\n            undefined,\n            undefined,\n            undefined,\n            undefined\n        ];\n        for (let i = 0; i < SKY_CUBEMAP_FACE_COUNT; ++i) {\n            const face: string | undefined = (sky as any)[SkyCubemapFaceId[i]];\n            if (face === undefined) {\n                logger.error(`Face \"${SkyCubemapFaceId[i]}\" was not defined.`);\n                return;\n            }\n            faces[i] = face;\n        }\n\n        return faces as string[];\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { isJsonExpr } from \"@here/harp-datasource-protocol\";\nimport {\n    Definitions,\n    FlatTheme,\n    isActualSelectorDefinition,\n    isBoxedDefinition,\n    isJsonExprReference,\n    isLiteralDefinition,\n    ResolvedStyleDeclaration,\n    ResolvedStyleSet,\n    StyleDeclaration,\n    Styles,\n    StyleSet,\n    Theme\n} from \"@here/harp-datasource-protocol/lib/Theme\";\nimport {\n    cloneDeep,\n    composeUriResolvers,\n    ContextLogger,\n    getAppBaseUrl,\n    getOptionValue,\n    IContextLogger,\n    ISimpleChannel,\n    RelativeUriResolver,\n    resolveReferenceUri,\n    UriResolver\n} from \"@here/harp-utils\";\nimport { SKY_CUBEMAP_FACE_COUNT, SkyCubemapFaceId } from \"./SkyCubemapTexture\";\n\nimport \"@here/harp-fetch\";\n\nexport const DEFAULT_MAX_THEME_INTHERITANCE_DEPTH = 4;\n\n/**\n * Options to customize [[Theme]] loading process.\n *\n * @see [[ThemeLoader.load]]\n */\nexport interface ThemeLoadOptions {\n    /**\n     * Whether to resolve `ref` expressions in `definition` and `styles` elements.\n     *\n     * @default `false`, as datasources resolve definitions in [[StyleSetEvaluator]].\n     */\n    resolveDefinitions?: boolean;\n\n    /**\n     * Resolve the URIs to resources like fonts, icons, ...\n     * If true, [[uriResolver]] will be used to resolve the URI\n     * @default true\n     */\n    resolveResourceUris?: boolean;\n\n    /**\n     * Resolve the URIs of inherited themes (using `extends` feature).\n     * If true, [[uriResolver]] will be used to resolve the URI\n     * @default true\n     */\n    resolveIncludeUris?: boolean;\n\n    /**\n     * An `AbortSignal` object instance; allows you to communicate with a loading process\n     * (including fetch requests) request and abort it if desired via an `AbortController`.\n     *\n     * Modeled after Web APIs `fetch`s `init.signal`.\n     *\n     * @see https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/fetch\n     * @see https://developer.mozilla.org/en-US/docs/Web/API/AbortController\n     */\n    signal?: AbortSignal;\n\n    /**\n     * Maximum recursion depth when resolving base themes through [[[Theme]]s `extends` property.\n     *\n     * @default [[DEFAULT_MAX_THEME_INTHERITANCE_DEPTH]]\n     */\n    maxInheritanceDepth?: number;\n\n    /**\n     * Custom logging channel on which diagnostics and warnings will be reported.\n     *\n     * If not specified, [[ThemeLoader.load]] will log to `console`.\n     */\n    logger?: ISimpleChannel;\n\n    /**\n     * Resolve asset `URI`s referenced in `Theme` assets using this resolver.\n     */\n    uriResolver?: UriResolver;\n}\n\n/**\n * Loads and validates a theme from URL objects.\n */\nexport class ThemeLoader {\n    /**\n     * Loads a [[Theme]] from a remote resource, provided as a URL that points to a\n     * JSON-encoded theme.\n     *\n     * By default, resolves following features of theme:\n     *\n     *  -  `extends` - loads and merges all inherited themes (see [[resolveBaseTheme]])\n     *  -  `ref` - resolves all `ref` instances to their values defined in `definitions` section\n     *     of theme (see [[resolveThemeReferences]])\n     *\n     * Relative URIs of reference resources are resolved to full URL using the document's base URL\n     * (see [[resolveUrls]]).\n     *\n     * Custom URIs (of theme itself and of resources referenced by theme) may be resolved with by\n     * providing [[UriResolver]] using [[ThemeLoadOptions.uriResolver]] option.\n     *\n     * @param theme [[Theme]] instance or theme URL to the theme.\n     * @param options Optional, a [[ThemeLoadOptions]] objects containing any custom settings for\n     *    this load request.\n     */\n    static async load(\n        theme: string | Theme | FlatTheme,\n        options?: ThemeLoadOptions\n    ): Promise<Theme> {\n        options = options || {};\n        if (typeof theme === \"string\") {\n            const uriResolver = options.uriResolver;\n            const themeUrl = uriResolver !== undefined ? uriResolver.resolveUri(theme) : theme;\n            const response = await fetch(themeUrl, { signal: options.signal });\n            if (!response.ok) {\n                throw new Error(`ThemeLoader#load: cannot load theme: ${response.statusText}`);\n            }\n            theme = (await response.json()) as Theme;\n            theme.url = resolveReferenceUri(getAppBaseUrl(), themeUrl);\n            theme = this.resolveUrls(theme, options);\n        } else if (theme.url === undefined) {\n            // assume that theme url is same as baseUrl\n            theme.url = getAppBaseUrl();\n            theme = this.resolveUrls(theme, options);\n        }\n\n        if (theme === null || theme === undefined) {\n            throw new Error(\"ThemeLoader#load: loaded resource is not valid JSON\");\n        }\n        theme = theme as Theme;\n\n        ThemeLoader.checkTechniqueSupport(theme);\n\n        const resolveDefinitions = getOptionValue<boolean>(options.resolveDefinitions, false);\n        theme = await ThemeLoader.resolveBaseThemes(theme, options);\n        if (resolveDefinitions) {\n            const contextLoader = new ContextLogger(\n                options.logger || console,\n                `when processing Theme ${theme.url}:`\n            );\n            ThemeLoader.resolveThemeReferences(theme, contextLoader);\n        }\n        return theme;\n    }\n\n    /**\n     * Checks if `theme` instance is completely loaded, meaning that `extends` property is resolved.\n     *\n     * @param theme\n     */\n    static isThemeLoaded(theme: Theme | FlatTheme): boolean {\n        return theme.extends === undefined;\n    }\n\n    /**\n     * @deprecated Please use `ThemeLoader.load`\n     *\n     * Loads a [[Theme]] from a remote resource, provided as a URL that points to a JSON-encoded\n     * theme.\n     *\n     * @param themeUrl The URL to the theme.\n     *\n     */\n    static async loadAsync(themeUrl: string): Promise<Theme> {\n        return ThemeLoader.load(themeUrl);\n    }\n\n    /**\n     * Resolves all [[Theme]]'s relatives URLs to full URL using the [[Theme]]'s URL\n     * (see: https://www.w3.org/TR/WD-html40-970917/htmlweb.html#h-5.1.2).\n     *\n     * This method mutates original `theme` instance.\n     *\n     * @param theme The [[Theme]] to resolve.\n     */\n    private static resolveUrls(theme: Theme | FlatTheme, options?: ThemeLoadOptions): Theme {\n        // Ensure that all resources referenced in theme by relative URIs are in fact relative to\n        // theme.\n        if (theme.url === undefined) {\n            return theme;\n        }\n\n        const childUrlResolver = composeUriResolvers(\n            options?.uriResolver,\n            new RelativeUriResolver(theme.url)\n        );\n\n        const resolveIncludes = options === undefined || !(options.resolveIncludeUris === false);\n        if (theme.extends && resolveIncludes) {\n            theme.extends = (Array.isArray(theme.extends) ? theme.extends : [theme.extends]).map(\n                baseTheme => {\n                    if (typeof baseTheme === \"string\") {\n                        return childUrlResolver.resolveUri(baseTheme);\n                    } else {\n                        if (baseTheme.url !== undefined) {\n                            return baseTheme;\n                        } else {\n                            baseTheme.url = theme.url;\n                            return this.resolveUrls(baseTheme, options);\n                        }\n                    }\n                }\n            );\n        }\n\n        if (!ThemeLoader.convertFlatTheme(theme)) {\n            return theme;\n        }\n\n        const resolveResources = options === undefined || !(options.resolveResourceUris === false);\n        if (resolveResources) {\n            ThemeLoader.resolveResources(theme, childUrlResolver);\n        }\n\n        return theme;\n    }\n    private static checkTechniqueSupport(theme: Theme) {\n        if (theme.styles !== undefined) {\n            for (const styleSetName in theme.styles) {\n                if (!theme.styles.hasOwnProperty(styleSetName)) {\n                    continue;\n                }\n                for (const style of theme.styles[styleSetName]) {\n                    switch ((style as any).technique) {\n                        // TODO: Re-enable this once \"dashed-line\" is deprecated.\n                        /* case \"dashed-line\":\n                            console.warn(\n                                `Using deprecated \"dashed-line\" technique.\n                                Use \"solid-line\" technique instead`\n                            ); */\n                        default:\n                            break;\n                    }\n                }\n            }\n        }\n    }\n\n    /**\n     * Expand all `ref` expressions in [[Theme]] basing on `definitions`.\n     *\n     * This method mutates original `theme` instance.\n     */\n    private static resolveThemeReferences(theme: Theme, contextLogger: IContextLogger): Theme {\n        if (theme.definitions !== undefined) {\n            contextLogger.pushAttr(\"definitions\");\n            /**\n             * First, try to resolve all internal references in definitions, so if we may save few\n             * CPU cycles if some definition is used many times in actual style sets.\n             */\n            for (const definitionName in theme.definitions) {\n                if (!theme.definitions.hasOwnProperty(definitionName)) {\n                    continue;\n                }\n\n                const def = theme.definitions[definitionName];\n                if (isActualSelectorDefinition(def)) {\n                    contextLogger.pushAttr(definitionName);\n                    const resolvedDef = ThemeLoader.resolveStyle(\n                        def,\n                        theme.definitions,\n                        contextLogger\n                    );\n                    contextLogger.pop();\n                    if (resolvedDef === undefined) {\n                        contextLogger.pushAttr(definitionName);\n                        contextLogger.warn(\"skipping invalid style in definition\");\n                        contextLogger.pop();\n                        delete theme.definitions[definitionName];\n                    } else {\n                        theme.definitions[definitionName] = resolvedDef;\n                    }\n                }\n            }\n            contextLogger.pop();\n        }\n        if (theme.styles !== undefined) {\n            for (const styleSetName in theme.styles) {\n                if (!theme.styles.hasOwnProperty(styleSetName)) {\n                    continue;\n                }\n                contextLogger.pushAttr(\"styles\");\n                contextLogger.pushAttr(styleSetName);\n\n                theme.styles[styleSetName] = ThemeLoader.resolveStyleSet(\n                    theme.styles[styleSetName],\n                    theme.definitions,\n                    contextLogger\n                );\n                contextLogger.pop();\n                contextLogger.pop();\n            }\n        }\n        return theme;\n    }\n\n    /**\n     * Expand all `ref` in [[StyleSet]] basing on `definitions`.\n     */\n    private static resolveStyleSet(\n        styleSet: StyleSet,\n        definitions: Definitions | undefined,\n        contextLogger: IContextLogger\n    ): ResolvedStyleSet {\n        const result: ResolvedStyleSet = [];\n\n        for (let index = 0; index < styleSet.length; ++index) {\n            const currentStyle = styleSet[index];\n            contextLogger.pushIndex(index);\n            const resolvedStyle = ThemeLoader.resolveStyle(\n                currentStyle,\n                definitions,\n                contextLogger\n            );\n            if (resolvedStyle !== undefined) {\n                result.push(resolvedStyle);\n            } else {\n                contextLogger.warn(\"invalid style, ignored\");\n            }\n            contextLogger.pop();\n        }\n        return result;\n    }\n\n    /**\n     * Expand all `ref` in [[Style]] instance basing on `definitions`.\n     */\n    private static resolveStyle(\n        style: StyleDeclaration,\n        definitions: Definitions | undefined,\n        contextLogger: IContextLogger\n    ): ResolvedStyleDeclaration | undefined {\n        if (isJsonExprReference(style)) {\n            // expand and instantiate references to style definitions.\n\n            const def = definitions && definitions[style[1]];\n\n            if (!def) {\n                contextLogger.warn(`invalid reference '${style[1]}' - not found`);\n                return undefined;\n            }\n            if (!isActualSelectorDefinition(def)) {\n                contextLogger.warn(`invalid reference '${style[1]}' - expected style definition`);\n                return undefined;\n            }\n\n            // instantiate the style\n            style = cloneDeep(def);\n        }\n        style = style as ResolvedStyleDeclaration;\n\n        if (Array.isArray(style.when)) {\n            contextLogger.pushAttr(\"when\");\n            const resolvedWhen = this.resolveExpressionReferences(\n                style.when,\n                definitions,\n                contextLogger\n            );\n            contextLogger.pop();\n            if (resolvedWhen === undefined) {\n                return undefined;\n            }\n            style.when = resolvedWhen;\n        }\n\n        if (style.attr !== undefined) {\n            const attr = style.attr as any;\n\n            contextLogger.pushAttr(\"attr\");\n            for (const prop in attr) {\n                if (!attr.hasOwnProperty(prop)) {\n                    continue;\n                }\n\n                const value = attr[prop];\n\n                if (!Array.isArray(value)) {\n                    continue; // nothing to do\n                }\n\n                contextLogger.pushAttr(prop);\n                const resolvedValue = this.resolveExpressionReferences(\n                    value,\n                    definitions,\n                    contextLogger\n                );\n                contextLogger.pop();\n\n                if (resolvedValue !== undefined) {\n                    attr[prop] = resolvedValue;\n                } else {\n                    delete attr[prop];\n                }\n            }\n            contextLogger.pop();\n        }\n        return style;\n    }\n\n    /**\n     * Resolve `[ref, ...]` in expressions.\n     *\n     * Returns `undefined` some reference was invalid (missing or wrong type).\n     */\n    private static resolveExpressionReferences<T>(\n        value: T,\n        definitions: Definitions | undefined,\n        contextLogger: IContextLogger\n    ): T | undefined {\n        let failed = false;\n        function resolveInternal(node: any) {\n            if (isJsonExprReference(node)) {\n                const defName = node[1];\n                const def = definitions && definitions[defName];\n                if (def === undefined) {\n                    contextLogger.warn(`invalid reference '${defName}' - not found`);\n                    failed = true;\n                    return undefined;\n                }\n                if (isLiteralDefinition(def) || isJsonExpr(def)) {\n                    return def;\n                }\n                if (isBoxedDefinition(def)) {\n                    return def.value;\n                }\n                contextLogger.warn(`invalid reference '${defName}' - expected value definition`);\n                failed = true;\n                return undefined;\n            } else if (Array.isArray(node)) {\n                const result = [...node];\n                for (let i = 1; i < result.length; ++i) {\n                    result[i] = resolveInternal(result[i]);\n                }\n                return result;\n            } else {\n                return node;\n            }\n        }\n        const r = resolveInternal(value);\n        if (failed) {\n            return undefined;\n        }\n        return r;\n    }\n\n    /**\n     * Realize `extends` clause by merging `theme` with its base [[Theme]].\n     *\n     * @param theme [Theme] object\n     * @param options Optional, a [[ThemeLoadOptions]] objects containing any custom settings for\n     *    this load request.\n     */\n    private static async resolveBaseThemes(\n        theme: Theme,\n        options?: ThemeLoadOptions\n    ): Promise<Theme> {\n        options = options || {};\n        if (theme.extends === undefined) {\n            return theme;\n        }\n\n        const maxInheritanceDepth = getOptionValue(\n            options.maxInheritanceDepth,\n            DEFAULT_MAX_THEME_INTHERITANCE_DEPTH\n        );\n        if (maxInheritanceDepth <= 0) {\n            throw new Error(`maxInheritanceDepth reached when attempting to load base theme`);\n        }\n\n        const baseThemes = !Array.isArray(theme.extends) ? [theme.extends] : theme.extends;\n        delete theme.extends;\n        let baseThemesMerged: Theme = {};\n        for (const baseTheme of baseThemes) {\n            const actualBaseTheme = await ThemeLoader.load(baseTheme, {\n                ...options,\n                resolveDefinitions: false,\n                maxInheritanceDepth: maxInheritanceDepth - 1\n            });\n\n            baseThemesMerged = ThemeLoader.mergeThemes(actualBaseTheme, baseThemesMerged);\n        }\n        return ThemeLoader.mergeThemes(theme, baseThemesMerged);\n    }\n\n    private static mergeThemes(theme: Theme, baseTheme: Theme): Theme {\n        const definitions = { ...baseTheme.definitions, ...theme.definitions };\n\n        let styles!: Styles;\n\n        if (baseTheme.styles && theme.styles) {\n            const currentStyleSets = Object.keys(baseTheme.styles);\n            const incomingStyleSets = Object.keys(theme.styles);\n\n            styles = {};\n\n            currentStyleSets.forEach(styleSetName => {\n                const index = incomingStyleSets.indexOf(styleSetName);\n\n                if (index !== -1) {\n                    // merge the current and incoming styleset\n                    // and add the result to `styles`.\n                    styles[styleSetName] = [\n                        ...baseTheme.styles![styleSetName],\n                        ...theme.styles![styleSetName]\n                    ];\n                    // remove the styleset from the incoming list\n                    incomingStyleSets.splice(index, 1);\n                } else {\n                    // copy the existing style set to `styles`.\n                    styles[styleSetName] = baseTheme.styles![styleSetName];\n                }\n            });\n\n            // add the remaining stylesets to styles.\n            incomingStyleSets.forEach(p => {\n                styles[p] = theme.styles![p];\n            });\n        } else if (baseTheme.styles) {\n            styles = { ...baseTheme.styles };\n        } else if (theme.styles) {\n            styles = { ...theme.styles };\n        }\n        return { ...baseTheme, ...theme, definitions, styles };\n    }\n\n    private static convertFlatTheme(theme: Theme | FlatTheme): theme is Theme {\n        if (Array.isArray(theme.styles)) {\n            // Convert the flat theme to a standard theme.\n            const styles: Styles = {};\n            theme.styles.forEach(style => {\n                if (isJsonExpr(style)) {\n                    throw new Error(\"invalid usage of theme reference\");\n                }\n                const styleSetName = style.styleSet;\n                if (styleSetName === undefined) {\n                    throw new Error(\"missing reference to style set\");\n                }\n                if (!styles[styleSetName]) {\n                    styles[styleSetName] = [];\n                }\n                styles[styleSetName].push(style);\n            });\n            theme.styles = styles;\n        }\n        return true;\n    }\n\n    private static resolveResources(theme: Theme, childUrlResolver: UriResolver) {\n        if (theme.sky && theme.sky.type === \"cubemap\") {\n            for (let i = 0; i < SKY_CUBEMAP_FACE_COUNT; ++i) {\n                const faceUrl: string | undefined = (theme.sky as any)[SkyCubemapFaceId[i]];\n                if (faceUrl !== undefined) {\n                    (theme.sky as any)[SkyCubemapFaceId[i]] = childUrlResolver.resolveUri(faceUrl);\n                }\n            }\n        }\n        if (theme.images) {\n            for (const name of Object.keys(theme.images)) {\n                const image = theme.images[name];\n                image.url = childUrlResolver.resolveUri(image.url);\n                if (image.atlas !== undefined) {\n                    image.atlas = childUrlResolver.resolveUri(image.atlas);\n                }\n            }\n        }\n        if (theme.fontCatalogs) {\n            for (const font of theme.fontCatalogs) {\n                font.url = childUrlResolver.resolveUri(font.url);\n            }\n        }\n        if (theme.poiTables) {\n            for (const poiTable of theme.poiTables) {\n                poiTable.url = childUrlResolver.resolveUri(poiTable.url);\n            }\n        }\n\n        if (theme.styles) {\n            for (const styleSetName in theme.styles) {\n                if (!theme.styles.hasOwnProperty(styleSetName)) {\n                    continue;\n                }\n                const styleSet = theme.styles[styleSetName] as ResolvedStyleDeclaration[];\n                for (const style of styleSet) {\n                    if (!style.attr) {\n                        continue;\n                    }\n                    [\"map\", \"normalMap\", \"displacementMap\", \"roughnessMap\"].forEach(\n                        texturePropertyName => {\n                            const textureProperty = (style.attr! as any)[texturePropertyName];\n                            if (textureProperty && typeof textureProperty === \"string\") {\n                                (style.attr! as any)[\n                                    texturePropertyName\n                                ] = childUrlResolver.resolveUri(textureProperty);\n                            }\n                        }\n                    );\n                }\n            }\n        }\n    }\n}\n","/*\n * Copyright (C) 2017-2020 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\nimport { ViewRanges } from \"@here/harp-datasource-protocol/lib/ViewRanges\";\nimport {\n    GeoCoordinates,\n    Projection,\n    ProjectionType,\n    TileKey,\n    TileKeyUtils,\n    TilingScheme\n} from \"@here/harp-geoutils\";\nimport { LRUCache } from \"@here/harp-lrucache\";\nimport { assert, MathUtils } from \"@here/harp-utils\";\nimport * as THREE from \"three\";\nimport { BackgroundDataSource } from \"./BackgroundDataSource\";\nimport { ClipPlanesEvaluator } from \"./ClipPlanesEvaluator\";\nimport { DataSource } from \"./DataSource\";\nimport { ElevationRangeSource } from \"./ElevationRangeSource\";\nimport { FrustumIntersection, TileKeyEntry } from \"./FrustumIntersection\";\nimport { TileGeometryManager } from \"./geometry/TileGeometryManager\";\nimport { Tile } from \"./Tile\";\nimport { TileOffsetUtils } from \"./Utils\";\n\n/**\n * Way the memory consumption of a tile is computed. Either in number of tiles, or in MegaBytes. If\n * it is in MB, an estimation is used.\n */\nexport enum ResourceComputationType {\n    EstimationInMb = 0,\n    NumberOfTiles\n}\n\n/**\n * Limited set of [[MapViewOptions]] used for [[VisibleTileSet]].\n */\nexport interface VisibleTileSetOptions {\n    /**\n     * The projection of the view.\n     */\n    projection: Projection;\n\n    /**\n     * User-defined camera clipping planes evaluator.\n     */\n    clipPlanesEvaluator: ClipPlanesEvaluator;\n\n    /**\n     * Limit of tiles that can be visible per datasource.\n     */\n    maxVisibleDataSourceTiles: number;\n\n    /**\n     * In addition to the simple frustum culling also do additional checks with [[MapTileCuller]].\n     */\n    extendedFrustumCulling: boolean;\n\n    /**\n     * Missing Typedoc\n     */\n    tileCacheSize: number;\n\n    /**\n     * Missing Typedoc\n     */\n    resourceComputationType: ResourceComputationType;\n\n    /**\n     * Number of levels to go up when searching for fallback tiles.\n     */\n    quadTreeSearchDistanceUp: number;\n\n    /**\n     * Number of levels to go down when searching for fallback tiles.\n     */\n    quadTreeSearchDistanceDown: number;\n}\n\nconst MB_FACTOR = 1.0 / (1024.0 * 1024.0);\n\ntype TileCacheId = string;\n\n/**\n * Wrapper for LRU cache that encapsulates tiles caching for any [[DataSource]] used.\n *\n * Provides LRU based caching mechanism where each tile is identified by its tile key\n * (morton code) and data source name.\n * Tiles are kept in the cache based on last recently used policy, cached tile may be evicted\n * only when cache reaches full saturation and tile is no longer visible.\n * @note Currently cached entries (tiles) are identified by unique tile code (morton code) and\n * data source name, thus it is required that each [[DataSource]] used should have unique\n * name, but implementation could be improved to omit this limitation.\n */\nclass DataSourceCache {\n    /**\n     * Creates unique tile key for caching based on morton code, tile offset and its data source.\n     *\n     * @param mortonCode The tile morton code.\n     * @param offset The tile offset.\n     * @param dataSource The [[DataSource]] from which tile was loaded.\n     */\n    static getKey(mortonCode: number, offset: number, dataSource: DataSource): TileCacheId {\n        return `${dataSource.name}_${mortonCode}_${offset}`;\n    }\n\n    /**\n     * Create unique tile identifier for caching, based on tile object passed in.\n     *\n     * @param tile The tile for which key is generated.\n     */\n    static getKeyForTile(tile: Tile): TileCacheId {\n        return DataSourceCache.getKey(tile.tileKey.mortonCode(), tile.offset, tile.dataSource);\n    }\n\n    private readonly m_tileCache: LRUCache<TileCacheId, Tile>;\n    private readonly m_disposedTiles: Tile[] = [];\n    private m_resourceComputationType: ResourceComputationType;\n\n    constructor(\n        cacheSize: number,\n        rct: ResourceComputationType = ResourceComputationType.EstimationInMb\n    ) {\n        this.m_resourceComputationType = rct;\n        this.m_tileCache = new LRUCache<string, Tile>(cacheSize, (tile: Tile) => {\n            if (this.m_resourceComputationType === ResourceComputationType.EstimationInMb) {\n                // Default is size in MB.\n                return tile.memoryUsage * MB_FACTOR;\n            } else {\n                return 1;\n            }\n        });\n        this.m_tileCache.evictionCallback = (_, tile) => {\n            if (tile.tileLoader !== undefined) {\n                // Cancel downloads as early as possible.\n                tile.tileLoader.cancel();\n            }\n            this.m_disposedTiles.push(tile);\n        };\n        this.m_tileCache.canEvict = (_, tile) => {\n            // Tiles can be evicted that weren't requested in the last frame.\n            return !tile.isVisible;\n        };\n    }\n\n    /**\n     * Get information how cached tiles affects cache space available.\n     *\n     * The way how cache evaluates the __resources size__ have a big influence on entire\n     * caching mechanism, if [[resourceComputationType]] is set to:\n     * [[ResourceComputationType.EstimationInMb]] then each tiles contributes to cache size\n     * differently depending on the memory consumed, on other side\n     * [[ResourceComputationType.NumberOfTiles]] says each tile occupies single slot in cache,\n     * so its real memory consumed does not matter affect caching behavior. Of course in\n     * the second scenario cache may grow significantly in terms of memory usage and thus it\n     * is out of control.\n     *\n     * @return [[ResourceComputationType]] enum that describes if resources are counted by\n     * space occupied in memory or just by number of them.\n     */\n    get resourceComputationType(): ResourceComputationType {\n        return this.m_resourceComputationType;\n    }\n\n    /**\n     * Get the cache capacity measured as number if megabytes or number of entries.\n     *\n     * The total cached tiles size determines cache saturation, if it reaches the capacity value\n     * then the resources becomes evicted (released) starting from the oldest (the latest used).\n     *\n     * @see size.\n     * @see resourceComputationType.\n     */\n    get capacity(): number {\n        return this.m_tileCache.capacity;\n    }\n\n    /**\n     * Get total cache size described as number of megabytes consumed or number of tiles stored.\n     *\n     * @see capacity.\n     * @see resourceComputationType.\n     */\n    get size(): number {\n        return this.m_tileCache.size;\n    }\n\n    /**\n     * Set cache capacity and the algorithm used for cache size calculation.\n     *\n     * @see capacity.\n     * @see resourceComputationType.\n     * @param size The new capacity declared in megabytes or number of entires.\n     * @param rct The enum value that determines how size and capacity are evaluated.\n     */\n    setCapacity(size: number, rct: ResourceComputationType) {\n        this.m_resourceComputationType = rct;\n        this.m_tileCache.setCapacityAndMeasure(size, (tile: Tile) => {\n            if (this.m_resourceComputationType === ResourceComputationType.EstimationInMb) {\n                // Default is size in MB.\n                return tile.memoryUsage * MB_FACTOR;\n            } else {\n                return 1;\n            }\n        });\n    }\n\n    /**\n     * Get tile cached or __undefined__ if tile is not yet in cache.\n     *\n     * @param mortonCode An unique tile morton code.\n     * @param offset Tile offset.\n     * @param dataSource A [[DataSource]] the tile comes from.\n     */\n    get(mortonCode: number, offset: number, dataSource: DataSource): Tile | undefined {\n        return this.m_tileCache.get(DataSourceCache.getKey(mortonCode, offset, dataSource));\n    }\n\n    /**\n     * Add new tile to the cache.\n     *\n     * @param mortonCode En unique tile code (morton code).\n     * @param offset The tile offset.\n     * @param dataSource A [[DataSource]] the tile comes from.\n     * @param tile The tile reference.\n     */\n    set(mortonCode: number, offset: number, dataSource: DataSource, tile: Tile) {\n        this.m_tileCache.set(DataSourceCache.getKey(mortonCode, offset, dataSource), tile);\n    }\n\n    /**\n     * Delete tile from cache.\n     *\n     * @note This method will not call eviction callback.\n     * @param tile The tile reference to be removed from cache.\n     */\n    delete(tile: Tile) {\n        const tileKey = DataSourceCache.getKeyForTile(tile);\n        this.deleteByKey(tileKey);\n    }\n\n    /**\n     * Delete tile using its unique identifier.\n     *\n     * @note Tile identifier its constructed using information about tile code (morton code) and its\n     * [[DataSource]].\n     * @note This is explicit removal thus eviction callback will not be processed.\n     * @see DataSourceCache.getKey.\n     * @param tileKey The unique tile identifier.\n     */\n    deleteByKey(tileKey: TileCacheId) {\n        this.m_tileCache.delete(tileKey);\n    }\n\n    /**\n     * Dispose all tiles releasing their internal data.\n     */\n    disposeTiles() {\n        this.m_disposedTiles.forEach(tile => {\n            tile.dispose();\n        });\n\n        this.m_disposedTiles.length = 0;\n    }\n\n    /**\n     * Shrink cache to its allowed capacity.\n     *\n     * This method should be called each time after operations are performed on the cache entries,\n     * in order to keep cache size consistent. It informs caching mechanism to invalidate memory\n     * consumed by its entries and check if cache is overgrown, is such case some tiles will be\n     * evicted.\n     */\n    shrinkToCapacity() {\n        this.m_tileCache.shrinkToCapacity();\n    }\n\n    /**\n     * Evict all cached tiles implicitly even without checking if still in use.\n     */\n    evictAll() {\n        this.m_tileCache.evictAll();\n    }\n\n    /**\n     * Evict selected tiles implicitly.\n     *\n     * @param selector The callback used to determine if tile should be evicted.\n     */\n    evictSelected(selector: (tile: Tile, key: TileCacheId) => boolean) {\n        this.m_tileCache.evictSelected(selector);\n    }\n\n    /**\n     * Call functor (callback) on each tile store in cache.\n     *\n     * Optionally you may specify from which [[DataSource]] tiles should be processed.\n     * This limits the tiles visited to a sub-set originating from single [[DataSource]].\n     * @param callback The function to be called for each visited tile.\n     * @param inDataSource The optional [[DataSource]] to which tiles should belong.\n     */\n    forEach(callback: (tile: Tile, key: TileCacheId) => void, inDataSource?: DataSource): void {\n        this.m_tileCache.forEach((entry: Tile, key: TileCacheId) => {\n            if (inDataSource === undefined || entry.dataSource === inDataSource) {\n                callback(entry, key);\n            }\n        });\n    }\n}\n\n/**\n * List of visible tiles for a [[DataSource]].\n */\nexport interface DataSourceTileList {\n    /**\n     * The datasource that was producing the tiles.\n     */\n    dataSource: DataSource;\n\n    /**\n     * The current [[MapView]] zoom level.\n     */\n    zoomLevel: number;\n\n    /**\n     * The storage level of the visibleTiles.\n     * Note: renderedTiles might contain tiles from different levels.\n     */\n    storageLevel: number;\n\n    /**\n     * True if all [[visibleTiles]] are loaded.\n     */\n    allVisibleTileLoaded: boolean;\n\n    /**\n     * The number of tiles which are still loading.\n     */\n    numTilesLoading: number;\n\n    /**\n     * List of tiles we want to render (i.e. the tiles computed from the zoom level and view\n     * frustum). However some might not be renderable yet (e.g. loading). See [[renderedTiles]] for\n     * the actual list of tiles that the user will see.\n     */\n    visibleTiles: Tile[];\n\n    /**\n     * Map of tiles that will be rendered, key is the the combination of tile key and offset, see\n     * [[getKeyForTileKeyAndOffset]]. This includes tiles that are not in the [[visibleTiles]]\n     * list but that are used as fallbacks b/c they are still in the cache.\n     */\n    renderedTiles: Map<number, Tile>;\n}\n\n/**\n * Manages visible [[Tile]]s for [[MapView]].\n *\n * Responsible for election of rendered tiles:\n *  - quad-tree traversal\n *  - frustum culling\n *  - sorting tiles by relevance (visible area) to prioritize load\n *  - limiting number of visible tiles\n *  - caching tiles\n *  - searching cache to replace visible but yet empty tiles with already loaded siblings in nearby\n *    zoom levels\n */\nexport class VisibleTileSet {\n    dataSourceTileList: DataSourceTileList[] = [];\n    allVisibleTilesLoaded: boolean = false;\n    options: VisibleTileSetOptions;\n\n    private readonly m_cameraOverride = new THREE.PerspectiveCamera();\n    private m_dataSourceCache: DataSourceCache;\n    private m_viewRange: ViewRanges = { near: 0.1, far: Infinity, minimum: 0.1, maximum: Infinity };\n    // Maps morton codes to a given Tile, used to find overlapping Tiles. We only need to have this\n    // for a single TilingScheme, i.e. that of the BackgroundDataSource.\n    private m_coveringMap = new Map<number, Tile>();\n\n    private m_resourceComputationType: ResourceComputationType =\n        ResourceComputationType.EstimationInMb;\n\n    constructor(\n        private readonly m_frustumIntersection: FrustumIntersection,\n        private readonly m_tileGeometryManager: TileGeometryManager,\n        options: VisibleTileSetOptions\n    ) {\n        this.options = options;\n        this.m_resourceComputationType =\n            options.resourceComputationType === undefined\n                ? ResourceComputationType.EstimationInMb\n                : options.resourceComputationType;\n        this.m_dataSourceCache = new DataSourceCache(\n            this.options.tileCacheSize,\n            this.m_resourceComputationType\n        );\n    }\n\n    /**\n     * Returns cache size.\n     */\n    getDataSourceCacheSize(): number {\n        return this.options.tileCacheSize;\n    }\n\n    /**\n     * Sets cache size.\n     *\n     * @param size cache size\n     * @param computationType Optional value specifying the way a [[Tile]]s cache usage is computed,\n     *      either based on size in MB (mega bytes) or in number of tiles. Defaults to\n     *      `ResourceComputationType.EstimationInMb`.\n     */\n    setDataSourceCacheSize(\n        size: number,\n        computationType: ResourceComputationType = ResourceComputationType.EstimationInMb\n    ): void {\n        this.options.tileCacheSize = size;\n        // This effectively invalidates DataSourceCache\n        this.resourceComputationType = computationType;\n    }\n\n    /**\n     * Retrieves maximum number of visible tiles.\n     */\n    getNumberOfVisibleTiles() {\n        return this.options.maxVisibleDataSourceTiles;\n    }\n\n    /**\n     * Sets maximum number of visible tiles.\n     *\n     * @param size size of visible tiles array\n     */\n    setNumberOfVisibleTiles(size: number) {\n        this.options.maxVisibleDataSourceTiles = size;\n    }\n\n    /**\n     * The way the cache usage is computed, either based on size in MB (mega bytes) or in number of\n     * tiles.\n     */\n    get resourceComputationType(): ResourceComputationType {\n        return this.m_resourceComputationType;\n    }\n\n    /**\n     * Sets the way tile cache is managing its elements.\n     *\n     * Cache may be either keeping number of elements stored or the memory consumed by them.\n     *\n     * @param computationType Type of algorith used in cache for checking full saturation,\n     * may be counting number of elements or memory consumed by them.\n     */\n    set resourceComputationType(computationType: ResourceComputationType) {\n        this.m_resourceComputationType = computationType;\n        this.m_dataSourceCache.setCapacity(this.options.tileCacheSize, computationType);\n    }\n\n    /**\n     * Evaluate frustum near/far clip planes and visibility ranges.\n     */\n    updateClipPlanes(maxElevation?: number, minElevation?: number): ViewRanges {\n        if (maxElevation !== undefined) {\n            this.options.clipPlanesEvaluator.maxElevation = maxElevation;\n        }\n        if (minElevation !== undefined) {\n            this.options.clipPlanesEvaluator.minElevation = minElevation;\n        }\n        const { camera, projection, elevationProvider } = this.m_frustumIntersection.mapView;\n        this.m_viewRange = this.options.clipPlanesEvaluator.evaluateClipPlanes(\n            camera,\n            projection,\n            elevationProvider\n        );\n        return this.m_viewRange;\n    }\n\n    /**\n     * Calculates a new set of visible tiles.\n     * @param storageLevel The camera storage level, see [[MapView.storageLevel]].\n     * @param zoomLevel The camera zoom level.\n     * @param dataSources The data sources for which the visible tiles will be calculated.\n     * @param elevationRangeSource Source of elevation range data if any.\n     * @returns view ranges and their status since last update (changed or not).\n     */\n    updateRenderList(\n        storageLevel: number,\n        zoomLevel: number,\n        dataSources: DataSource[],\n        elevationRangeSource?: ElevationRangeSource\n    ): { viewRanges: ViewRanges; viewRangesChanged: boolean } {\n        let allVisibleTilesLoaded: boolean = true;\n\n        const visibleTileKeysResult = this.getVisibleTileKeysForDataSources(\n            zoomLevel,\n            dataSources,\n            elevationRangeSource\n        );\n        this.dataSourceTileList = [];\n        this.m_coveringMap.clear();\n        for (const { dataSource, visibleTileKeys } of visibleTileKeysResult.tileKeys) {\n            // Sort by distance to camera, now the tiles that are further away are at the end\n            // of the list.\n            //\n            // Sort is unstable if distance is equal, which happens a lot when looking top-down.\n            // Unstable sorting makes label placement unstable at tile borders, leading to\n            // flickering.\n            visibleTileKeys.sort((a: TileKeyEntry, b: TileKeyEntry) => {\n                const distanceDiff = a.distance - b.distance;\n\n                // Take care or numerical precision issues\n                const minDiff = (a.distance + b.distance) * 0.000001;\n\n                return Math.abs(distanceDiff) < minDiff\n                    ? a.tileKey.mortonCode() - b.tileKey.mortonCode()\n                    : distanceDiff;\n            });\n\n            const actuallyVisibleTiles: Tile[] = [];\n            let allDataSourceTilesLoaded = true;\n            let numTilesLoading = 0;\n            // Create actual tiles only for the allowed number of visible tiles\n            const dataZoomLevel = dataSource.getDataZoomLevel(zoomLevel);\n            for (\n                let i = 0;\n                i < visibleTileKeys.length &&\n                actuallyVisibleTiles.length < this.options.maxVisibleDataSourceTiles;\n                i++\n            ) {\n                const tileEntry = visibleTileKeys[i];\n\n                const tile = this.getTile(dataSource, tileEntry.tileKey, tileEntry.offset);\n                if (tile === undefined) {\n                    continue;\n                }\n\n                allDataSourceTilesLoaded = allDataSourceTilesLoaded && tile.allGeometryLoaded;\n                if (!tile.allGeometryLoaded) {\n                    numTilesLoading++;\n                } else {\n                    tile.numFramesVisible++;\n                    // If this tile's data source is \"covering\" then other tiles beneath it have\n                    // their rendering skipped, see [[Tile.willRender]].\n                    this.skipOverlappedTiles(dataSource, tile);\n\n                    if (tile.frameNumVisible < 0) {\n                        // Store the fist frame the tile became visible.\n                        tile.frameNumVisible = dataSource.mapView.frameNumber;\n                    }\n                }\n                // Update the visible area of the tile. This is used for those tiles that are\n                // currently loaded and are waiting to be decoded to sort the jobs by area.\n                tile.visibleArea = tileEntry.area;\n                tile.elevationRange = tileEntry;\n\n                actuallyVisibleTiles.push(tile);\n            }\n\n            this.m_tileGeometryManager.updateTiles(actuallyVisibleTiles);\n\n            this.dataSourceTileList.push({\n                dataSource,\n                storageLevel,\n                zoomLevel: dataZoomLevel,\n                allVisibleTileLoaded: allDataSourceTilesLoaded,\n                numTilesLoading,\n                visibleTiles: actuallyVisibleTiles,\n                renderedTiles: new Map<number, Tile>()\n            });\n            allVisibleTilesLoaded = allVisibleTilesLoaded && allDataSourceTilesLoaded;\n        }\n\n        this.allVisibleTilesLoaded =\n            allVisibleTilesLoaded && visibleTileKeysResult.allBoundingBoxesFinal;\n\n        this.fillMissingTilesFromCache();\n\n        this.forEachCachedTile(tile => {\n            // Remove all tiles that are still being loaded, but are no longer visible. They have to\n            // be reloaded when they become visible again. Hopefully, they are still in the browser\n            // cache by then.\n            if (!tile.isVisible && tile.tileLoader !== undefined && !tile.tileLoader.isFinished) {\n                // The internal TileLoader is cancelled automatically when the Tile is disposed.\n                this.disposeTile(tile);\n            }\n        });\n\n        this.m_dataSourceCache.shrinkToCapacity();\n\n        let minElevation: number | undefined;\n        let maxElevation: number | undefined;\n        this.dataSourceTileList.forEach(renderListEntry => {\n            // Calculate min/max elevation from every data source tiles,\n            // data sources without elevationRangeSource will contribute to\n            // values with zero levels for both elevations.\n            const tiles = renderListEntry.renderedTiles;\n            tiles.forEach(tile => {\n                tile.update(renderListEntry.zoomLevel);\n                minElevation = MathUtils.min2(minElevation, tile.geoBox.minAltitude);\n                maxElevation = MathUtils.max2(maxElevation, tile.geoBox.maxAltitude);\n            });\n        });\n\n        if (minElevation === undefined) {\n            minElevation = 0;\n        }\n        if (maxElevation === undefined) {\n            maxElevation = 0;\n        }\n        // If clip planes evaluator depends on the tiles elevation re-calculate\n        // frustum planes and update the camera near/far plane distances.\n        let viewRangesChanged: boolean = false;\n        const oldViewRanges = this.m_viewRange;\n        const newViewRanges = this.updateClipPlanes(maxElevation, minElevation);\n        viewRangesChanged = viewRangesEqual(newViewRanges, oldViewRanges) === false;\n\n        return {\n            viewRanges: newViewRanges,\n            viewRangesChanged\n        };\n    }\n\n    /**\n     * Gets the tile corresponding to the given data source, key and offset, creating it if\n     * necessary.\n     *\n     * @param dataSource The data source the tile belongs to.\n     * @param tileKey The key identifying the tile.\n     * @param offset Tile offset.\n     * @return The tile if it was found or created, undefined otherwise.\n     */\n    getTile(dataSource: DataSource, tileKey: TileKey, offset: number = 0): Tile | undefined {\n        const cacheOnly = false;\n        return this.getTileImpl(dataSource, tileKey, offset, cacheOnly);\n    }\n\n    /**\n     * Gets the tile corresponding to the given data source, key and offset from the cache.\n     *\n     * @param dataSource The data source the tile belongs to.\n     * @param tileKey The key identifying the tile.\n     * @param offset Tile offset.\n     * @return The tile if found in cache, undefined otherwise.\n     */\n    getCachedTile(dataSource: DataSource, tileKey: TileKey, offset: number = 0): Tile | undefined {\n        assert(dataSource.cacheable);\n        const cacheOnly = true;\n        return this.getTileImpl(dataSource, tileKey, offset, cacheOnly);\n    }\n\n    /**\n     * Gets the tile corresponding to the given data source, key and offset from the rendered tiles.\n     *\n     * @param dataSource The data source the tile belongs to.\n     * @param tileKey The key identifying the tile.\n     * @param offset Tile offset.\n     * @return The tile if found among the rendered tiles, undefined otherwise.\n     */\n    getRenderedTile(\n        dataSource: DataSource,\n        tileKey: TileKey,\n        offset: number = 0\n    ): Tile | undefined {\n        const dataSourceVisibleTileList = this.dataSourceTileList.find(list => {\n            return list.dataSource === dataSource;\n        });\n\n        if (dataSourceVisibleTileList === undefined) {\n            return undefined;\n        }\n\n        return dataSourceVisibleTileList.renderedTiles.get(\n            TileOffsetUtils.getKeyForTileKeyAndOffset(tileKey, offset)\n        );\n    }\n\n    /**\n     * Gets the tile corresponding to the given data source and location from the rendered tiles.\n     *\n     * @param dataSource The data source the tile belongs to.\n     * @param geoPoint The geolocation included within the tile.\n     * @return The tile if found among the rendered tiles, undefined otherwise.\n     */\n    getRenderedTileAtLocation(\n        dataSource: DataSource,\n        geoPoint: GeoCoordinates,\n        offset: number = 0\n    ): Tile | undefined {\n        const dataSourceVisibleTileList = this.dataSourceTileList.find(list => {\n            return list.dataSource === dataSource;\n        });\n\n        if (dataSourceVisibleTileList === undefined) {\n            return undefined;\n        }\n\n        const tilingScheme = dataSource.getTilingScheme();\n        const visibleLevel = dataSourceVisibleTileList.zoomLevel;\n        const visibleTileKey = tilingScheme.getTileKey(geoPoint, visibleLevel);\n\n        if (!visibleTileKey) {\n            return undefined;\n        }\n\n        let tile = dataSourceVisibleTileList.renderedTiles.get(\n            TileOffsetUtils.getKeyForTileKeyAndOffset(visibleTileKey, offset)\n        );\n\n        if (tile !== undefined) {\n            return tile;\n        }\n\n        const { searchLevelsUp, searchLevelsDown } = this.getCacheSearchLevels(\n            dataSource,\n            visibleLevel\n        );\n\n        let parentTileKey = visibleTileKey;\n        for (let levelOffset = 1; levelOffset <= searchLevelsUp; ++levelOffset) {\n            parentTileKey = parentTileKey.parent();\n\n            tile = dataSourceVisibleTileList.renderedTiles.get(\n                TileOffsetUtils.getKeyForTileKeyAndOffset(parentTileKey, offset)\n            );\n            if (tile !== undefined) {\n                return tile;\n            }\n        }\n\n        const worldPoint = tilingScheme.projection.projectPoint(geoPoint);\n\n        for (let levelOffset = 1; levelOffset <= searchLevelsDown; ++levelOffset) {\n            const childLevel = visibleLevel + levelOffset;\n            const childTileKey = TileKeyUtils.worldCoordinatesToTileKey(\n                tilingScheme,\n                worldPoint,\n                childLevel\n            );\n            if (childTileKey) {\n                tile = dataSourceVisibleTileList.renderedTiles.get(\n                    TileOffsetUtils.getKeyForTileKeyAndOffset(childTileKey, offset)\n                );\n\n                if (tile !== undefined) {\n                    return tile;\n                }\n            }\n        }\n        return undefined;\n    }\n\n    /**\n     * Removes all internal bookkeeping entries and cache related to specified datasource.\n     *\n     * Called by [[MapView]] when [[DataSource]] has been removed from [[MapView]].\n     */\n    removeDataSource(dataSource: DataSource) {\n        this.clearTileCache(dataSource);\n        this.dataSourceTileList = this.dataSourceTileList.filter(\n            tileList => tileList.dataSource !== dataSource\n        );\n    }\n\n    /**\n     * Clear the tile cache.\n     *\n     * Remove the [[Tile]] objects created by cacheable [[DataSource]]. If a [[DataSource]] name is\n     * provided, this method restricts the eviction the [[DataSource]] with the given name.\n     *\n     * @param dataSourceName The name of the [[DataSource]].\n     */\n    clearTileCache(dataSource?: DataSource) {\n        if (dataSource !== undefined) {\n            this.m_dataSourceCache.evictSelected((tile: Tile, _) => {\n                return tile.dataSource === dataSource;\n            });\n        } else {\n            this.m_dataSourceCache.evictAll();\n        }\n    }\n\n    /**\n     * Visit each tile in visible, rendered, and cached sets.\n     *\n     *  * Visible and temporarily rendered tiles will be marked for update and retained.\n     *  * Cached but not rendered/visible will be evicted.\n     *\n     * @param dataSource If passed, only the tiles from this [[DataSource]] instance are processed.\n     *     If `undefined`, tiles from all [[DataSource]]s are processed.\n     */\n    markTilesDirty(dataSource?: DataSource) {\n        if (dataSource === undefined) {\n            this.dataSourceTileList.forEach(renderListEntry => {\n                this.markDataSourceTilesDirty(renderListEntry);\n            });\n        } else {\n            const renderListEntry = this.dataSourceTileList.find(e => e.dataSource === dataSource);\n            if (renderListEntry === undefined) {\n                return;\n            }\n            this.markDataSourceTilesDirty(renderListEntry);\n        }\n    }\n\n    /**\n     * Dispose tiles that are marked for removal by [[LRUCache]] algorithm.\n     */\n    disposePendingTiles() {\n        this.m_dataSourceCache.disposeTiles();\n    }\n\n    /**\n     * Process callback function [[fun]] with each visible tile in set.\n     *\n     * @param fun The callback function to be called.\n     */\n    forEachVisibleTile(fun: (tile: Tile) => void): void {\n        for (const listEntry of this.dataSourceTileList) {\n            listEntry.renderedTiles.forEach(fun);\n        }\n    }\n\n    /**\n     * Process callback function [[fun]] with each tile in the cache.\n     *\n     * Optional [[dataSource]] parameter limits processing to the tiles that belongs to\n     * DataSource passed in.\n     *\n     * @param fun The callback function to be called.\n     * @param dataSource The optional DataSource reference for tiles selection.\n     */\n    forEachCachedTile(fun: (tile: Tile) => void, dataSource?: DataSource): void {\n        this.m_dataSourceCache.forEach((tile, _) => fun(tile), dataSource);\n    }\n\n    /**\n     * Dispose a `Tile` from cache, 'dispose()' is also called on the tile to free its resources.\n     */\n    disposeTile(tile: Tile): void {\n        // TODO: Consider using evict here!\n        this.m_dataSourceCache.delete(tile);\n        tile.dispose();\n    }\n\n    /**\n     * Skips rendering of tiles that are overlapped. The overlapping [[Tile]] comes from a\n     * [[DataSource]] which is fully covering, i.e. there it is fully opaque.\n     **/\n    private skipOverlappedTiles(dataSource: DataSource, tile: Tile) {\n        if (this.options.projection.type === ProjectionType.Spherical) {\n            // HARP-7899, currently the globe has no background planes in the tiles (it relies on\n            // the BackgroundDataSource), because the LOD mismatches, hence disabling for globe.\n            return;\n        }\n        if (dataSource.isFullyCovering()) {\n            const key = TileOffsetUtils.getKeyForTileKeyAndOffset(tile.tileKey, tile.offset);\n            const entry = this.m_coveringMap.get(key);\n            if (entry === undefined) {\n                // We need to reset the flag so that if the covering datasource is disabled, that\n                // the tiles beneath then start to render.\n                tile.skipRendering = false;\n                this.m_coveringMap.set(key, tile);\n            } else {\n                // Skip the [[Tile]] if either the stored entry or the tile to consider is from the\n                // [[BackgroundDataSource]]\n                if (entry.dataSource instanceof BackgroundDataSource) {\n                    entry.skipRendering = true;\n                } else if (dataSource instanceof BackgroundDataSource) {\n                    tile.skipRendering = true;\n                }\n            }\n        }\n    }\n\n    private getCacheSearchLevels(\n        dataSource: DataSource,\n        visibleLevel: number\n    ): { searchLevelsUp: number; searchLevelsDown: number } {\n        const searchLevelsUp = Math.min(\n            this.options.quadTreeSearchDistanceUp,\n            Math.max(0, visibleLevel - dataSource.minDataLevel)\n        );\n        const searchLevelsDown = Math.min(\n            this.options.quadTreeSearchDistanceDown,\n            Math.max(0, dataSource.maxDataLevel - visibleLevel)\n        );\n\n        return { searchLevelsUp, searchLevelsDown };\n    }\n\n    /**\n     * Search cache to replace visible but yet empty tiles with already loaded siblings in nearby\n     * zoom levels.\n     *\n     * Useful, when zooming in/out and when \"newly elected\" tiles are not yet loaded. Prevents\n     * flickering by rendering already loaded tiles from upper/higher zoom levels.\n     */\n    private fillMissingTilesFromCache() {\n        this.dataSourceTileList.forEach(renderListEntry => {\n            const dataSource = renderListEntry.dataSource;\n            const dataZoomLevel = renderListEntry.zoomLevel;\n            const renderedTiles = renderListEntry.renderedTiles;\n\n            // Direction in quad tree to search: up -> shallower levels, down -> deeper levels.\n            enum SearchDirection {\n                NONE,\n                UP,\n                DOWN,\n                BOTH\n            }\n            let defaultSearchDirection = SearchDirection.NONE;\n\n            const { searchLevelsUp, searchLevelsDown } = this.getCacheSearchLevels(\n                dataSource,\n                dataZoomLevel\n            );\n\n            defaultSearchDirection =\n                searchLevelsDown > 0 && searchLevelsUp > 0\n                    ? SearchDirection.BOTH\n                    : searchLevelsDown > 0\n                    ? SearchDirection.DOWN\n                    : searchLevelsUp > 0\n                    ? SearchDirection.UP\n                    : SearchDirection.NONE;\n\n            const incompleteTiles: Map<number, SearchDirection> = new Map();\n\n            renderListEntry.visibleTiles.forEach(tile => {\n                const tileCode = TileOffsetUtils.getKeyForTileKeyAndOffset(\n                    tile.tileKey,\n                    tile.offset\n                );\n                tile.levelOffset = 0;\n                if (tile.hasGeometry) {\n                    renderedTiles.set(tileCode, tile);\n                } else {\n                    // if dataSource supports cache and it was existing before this render\n                    // then enable searching for loaded tiles in cache\n                    incompleteTiles.set(tileCode, defaultSearchDirection);\n                }\n            });\n\n            if (incompleteTiles.size === 0) {\n                // short circuit, nothing to be done\n                return;\n            }\n\n            // Minor optimization for the fallback search, only check parent tiles once, otherwise\n            // the recursive algorithm checks all parent tiles multiple times, the key is the code\n            // of the tile that is checked and the value is whether a parent was found or not.\n            const checkedTiles = new Map<number, boolean>();\n            // Iterate over incomplete (not loaded tiles) and find their parents or children that\n            // are in cache that can be rendered temporarily until tile is loaded. Note, we favour\n            // falling back to parent tiles rather than children.\n            for (const [tileKeyCode, searchDirection] of incompleteTiles) {\n                if (\n                    searchDirection === SearchDirection.BOTH ||\n                    searchDirection === SearchDirection.UP\n                ) {\n                    if (\n                        this.findUp(\n                            tileKeyCode,\n                            dataZoomLevel,\n                            renderedTiles,\n                            checkedTiles,\n                            dataSource\n                        )\n                    ) {\n                        // Continue to next entry so we don't search down.\n                        continue;\n                    }\n                }\n\n                if (\n                    searchDirection === SearchDirection.BOTH ||\n                    searchDirection === SearchDirection.DOWN\n                ) {\n                    this.findDown(tileKeyCode, dataZoomLevel, renderedTiles, dataSource);\n                }\n            }\n        });\n    }\n\n    private findDown(\n        tileKeyCode: number,\n        dataZoomLevel: number,\n        renderedTiles: Map<number, Tile>,\n        dataSource: DataSource\n    ) {\n        const { offset, mortonCode } = TileOffsetUtils.extractOffsetAndMortonKeyFromKey(\n            tileKeyCode\n        );\n        const tileKey = TileKey.fromMortonCode(mortonCode);\n\n        const tilingScheme = dataSource.getTilingScheme();\n        for (const childTileKey of tilingScheme.getSubTileKeys(tileKey)) {\n            const childTileCode = TileOffsetUtils.getKeyForTileKeyAndOffset(childTileKey, offset);\n            const childTile = this.m_dataSourceCache.get(\n                childTileKey.mortonCode(),\n                offset,\n                dataSource\n            );\n\n            const nextLevelDiff = Math.abs(childTileKey.level - dataZoomLevel);\n            if (childTile !== undefined && childTile.hasGeometry) {\n                // childTile has geometry, so can be reused as fallback\n                renderedTiles.set(childTileCode, childTile);\n                childTile.levelOffset = nextLevelDiff;\n                continue;\n            }\n\n            // Recurse down until the max distance is reached.\n            if (nextLevelDiff < this.options.quadTreeSearchDistanceDown) {\n                this.findDown(childTileCode, dataZoomLevel, renderedTiles, dataSource);\n            }\n        }\n    }\n\n    /**\n     * Returns true if a tile was found in the cache which is a parent\n     * @param tileKeyCode Morton code of the current tile that should be searched for.\n     * @param dataZoomLevel The current data zoom level of tiles that are to be displayed.\n     * @param renderedTiles The list of tiles that are shown to the user.\n     * @param checkedTiles Used to map a given code to a boolean which tells us if an ancestor is\n     * displayed or not.\n     * @param dataSource The provider of tiles.\n     * @returns Whether a parent tile exists.\n     */\n    private findUp(\n        tileKeyCode: number,\n        dataZoomLevel: number,\n        renderedTiles: Map<number, Tile>,\n        checkedTiles: Map<number, boolean>,\n        dataSource: DataSource\n    ): boolean {\n        const parentCode = TileOffsetUtils.getParentKeyFromKey(tileKeyCode);\n        // Check if another sibling has already added the parent.\n        if (renderedTiles.get(parentCode) !== undefined) {\n            return true;\n        }\n        const exists = checkedTiles.get(parentCode)!;\n        if (exists !== undefined) {\n            return exists;\n        }\n\n        const { offset, mortonCode } = TileOffsetUtils.extractOffsetAndMortonKeyFromKey(parentCode);\n        const parentTile = this.m_dataSourceCache.get(mortonCode, offset, dataSource);\n        const parentTileKey = parentTile ? parentTile.tileKey : TileKey.fromMortonCode(mortonCode);\n        const nextLevelDiff = Math.abs(dataZoomLevel - parentTileKey.level);\n        if (parentTile !== undefined && parentTile.hasGeometry) {\n            checkedTiles.set(parentCode, true);\n            // parentTile has geometry, so can be reused as fallback\n            renderedTiles.set(parentCode, parentTile);\n\n            // We want to have parent tiles as -ve, hence the minus.\n            parentTile.levelOffset = -nextLevelDiff;\n\n            return true;\n        } else {\n            checkedTiles.set(parentCode, false);\n        }\n\n        // Recurse up until the max distance is reached or we go to the parent of all parents.\n        if (nextLevelDiff < this.options.quadTreeSearchDistanceUp && parentTileKey.level !== 0) {\n            const foundUp = this.findUp(\n                parentCode,\n                dataZoomLevel,\n                renderedTiles,\n                checkedTiles,\n                dataSource\n            );\n            // If there was a tile upstream found, then add it to the list, so we can\n            // early skip checkedTiles.\n            checkedTiles.set(parentCode, foundUp);\n            if (foundUp) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    private getTileImpl(\n        dataSource: DataSource,\n        tileKey: TileKey,\n        offset: number,\n        cacheOnly: boolean\n    ): Tile | undefined {\n        function updateTile(tileToUpdate?: Tile) {\n            if (tileToUpdate === undefined) {\n                return;\n            }\n            // Keep the tile from being removed from the cache.\n            tileToUpdate.frameNumLastRequested = dataSource.mapView.frameNumber;\n        }\n\n        if (!dataSource.cacheable && !cacheOnly) {\n            const resultTile = dataSource.getTile(tileKey);\n            updateTile(resultTile);\n            return resultTile;\n        }\n\n        const tileCache = this.m_dataSourceCache;\n        let tile = tileCache.get(tileKey.mortonCode(), offset, dataSource);\n\n        if (tile !== undefined && tile.offset === offset) {\n            updateTile(tile);\n            return tile;\n        }\n\n        if (cacheOnly) {\n            return undefined;\n        }\n\n        tile = dataSource.getTile(tileKey);\n        // TODO: Update all tile information including area, min/max elevation from TileKeyEntry\n        if (tile !== undefined) {\n            tile.offset = offset;\n            updateTile(tile);\n            tileCache.set(tileKey.mortonCode(), offset, dataSource, tile);\n            this.m_tileGeometryManager.initTile(tile);\n        }\n        return tile;\n    }\n\n    private markDataSourceTilesDirty(renderListEntry: DataSourceTileList) {\n        const dataSourceCache = this.m_dataSourceCache;\n        const retainedTiles: Set<TileCacheId> = new Set();\n\n        function markTileDirty(tile: Tile, tileGeometryManager: TileGeometryManager) {\n            const tileKey = DataSourceCache.getKeyForTile(tile);\n            if (!retainedTiles.has(tileKey)) {\n                retainedTiles.add(tileKey);\n                if (tile.tileGeometryLoader !== undefined) {\n                    tile.tileGeometryLoader.reset();\n                }\n\n                // Prevent label rendering issues when the style set is changing. Prevent Text\n                // element rendering that depends on cleaned font catalog data.\n                tile.clearTextElements();\n\n                tile.load();\n            }\n        }\n\n        renderListEntry.visibleTiles.forEach(tile => {\n            markTileDirty(tile, this.m_tileGeometryManager);\n        });\n        renderListEntry.renderedTiles.forEach(tile => {\n            markTileDirty(tile, this.m_tileGeometryManager);\n        });\n\n        dataSourceCache.forEach((tile, key) => {\n            if (!retainedTiles.has(key)) {\n                dataSourceCache.deleteByKey(key);\n                tile.dispose();\n            }\n        }, renderListEntry.dataSource);\n    }\n\n    // Computes the visible tile keys for each supplied data source.\n    private getVisibleTileKeysForDataSources(\n        zoomLevel: number,\n        dataSources: DataSource[],\n        elevationRangeSource: ElevationRangeSource | undefined\n    ): {\n        tileKeys: Array<{ dataSource: DataSource; visibleTileKeys: TileKeyEntry[] }>;\n        allBoundingBoxesFinal: boolean;\n    } {\n        const tileKeys = Array<{ dataSource: DataSource; visibleTileKeys: TileKeyEntry[] }>();\n        let allBoundingBoxesFinal: boolean = true;\n\n        if (dataSources.length === 0) {\n            return { tileKeys, allBoundingBoxesFinal };\n        }\n\n        const dataSourceBuckets = new Map<TilingScheme, DataSource[]>();\n        dataSources.forEach(dataSource => {\n            const tilingScheme = dataSource.getTilingScheme();\n            const bucket = dataSourceBuckets.get(tilingScheme);\n            if (bucket === undefined) {\n                dataSourceBuckets.set(tilingScheme, [dataSource]);\n            } else {\n                bucket.push(dataSource);\n            }\n        });\n\n        // If elevation is to be taken into account extend view frustum:\n        // (near ~0, far: maxVisibilityRange) that allows to consider tiles that\n        // are far below ground plane and high enough to intersect the frustum.\n        if (elevationRangeSource !== undefined) {\n            this.m_cameraOverride.copy(this.m_frustumIntersection.camera);\n            this.m_cameraOverride.near = Math.min(\n                this.m_cameraOverride.near,\n                this.m_viewRange.minimum\n            );\n            this.m_cameraOverride.far = Math.max(\n                this.m_cameraOverride.far,\n                this.m_viewRange.maximum\n            );\n            this.m_cameraOverride.updateProjectionMatrix();\n            this.m_frustumIntersection.updateFrustum(this.m_cameraOverride.projectionMatrix);\n        } else {\n            this.m_frustumIntersection.updateFrustum();\n        }\n\n        // For each bucket of data sources with same tiling scheme, calculate frustum intersection\n        // once using the maximum display level.\n        for (const [tilingScheme, bucket] of dataSourceBuckets) {\n            const zoomLevels = bucket.map(dataSource => dataSource.getDataZoomLevel(zoomLevel));\n            const result = this.m_frustumIntersection.compute(\n                tilingScheme,\n                elevationRangeSource,\n                zoomLevels,\n                bucket\n            );\n\n            allBoundingBoxesFinal = allBoundingBoxesFinal && result.calculationFinal;\n\n            for (const dataSource of bucket) {\n                // For each data source check what tiles from the intersection should be rendered\n                // at this zoom level.\n                const visibleTileKeys: TileKeyEntry[] = [];\n                const dataZoomLevel = dataSource.getDataZoomLevel(zoomLevel);\n                for (const tileKeyEntry of result.tileKeyEntries.get(dataZoomLevel)!.values()) {\n                    if (dataSource.canGetTile(dataZoomLevel, tileKeyEntry.tileKey)) {\n                        visibleTileKeys.push(tileKeyEntry);\n                    }\n                }\n                tileKeys.push({ dataSource, visibleTileKeys });\n            }\n        }\n\n        return { tileKeys, allBoundingBoxesFinal };\n    }\n}\n\nfunction viewRangesEqual(a: ViewRanges, b: ViewRanges) {\n    return (\n        a.far === b.far && a.maximum === b.maximum && a.minimum === b.minimum && a.near === b.near\n    );\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { ITiler } from \"@here/harp-datasource-protocol\";\nimport { ConcurrentWorkerSet } from \"./ConcurrentWorkerSet\";\nimport { WorkerBasedTiler } from \"./WorkerBasedTiler\";\n\n/**\n * Default concurrent tiler helper.\n *\n * A convenient singleton that maintains a separate [[ConcurrentWorkerSet]] for each bundle\n * requested. Provides easy access to [[WorkerBasedTiler]]s for data sources.\n */\nexport class ConcurrentTilerFacade {\n    /**\n     * The URL containing a script to fall back (default) to when looking for worker sets\n     * and tilers.\n     */\n    static defaultScriptUrl: string = \"./decoder.bundle.js\";\n\n    /**\n     * The default number of workers.\n     */\n    static defaultWorkerCount: number = 1;\n\n    /**\n     * Returns a [[WorkerBasedTiler]] instance.\n     *\n     * @param tilerServiceType The name of the tiler service type.\n     * @param scriptUrl The optional URL with the workers' script.\n     * @param workerCount The number of web workers to use.\n     */\n    static getTiler(tilerServiceType: string, scriptUrl?: string, workerCount?: number): ITiler {\n        const workerSet = this.getWorkerSet(scriptUrl, workerCount);\n\n        return new WorkerBasedTiler(workerSet, tilerServiceType);\n    }\n\n    /**\n     * Returns a [[ConcurrentWorkerSet]] instance based on the script URL specified.\n     *\n     * @param scriptUrl The optional URL with the workers' script. If not specified,\n     * the function uses [[defaultScriptUrl]] instead.\n     * @param workerCount The number of web workers to use.\n     */\n    static getWorkerSet(scriptUrl?: string, workerCount?: number): ConcurrentWorkerSet {\n        if (scriptUrl === undefined) {\n            scriptUrl = this.defaultScriptUrl;\n        }\n\n        let workerSet = this.workerSets[scriptUrl];\n        if (workerSet === undefined) {\n            workerSet = new ConcurrentWorkerSet({\n                scriptUrl,\n                workerCount: workerCount === undefined ? this.defaultWorkerCount : workerCount\n            });\n            this.workerSets[scriptUrl] = workerSet;\n        }\n        return workerSet;\n    }\n\n    /**\n     * Destroys a [[ConcurrentWorkerSet]] instance.\n     *\n     * @param scriptUrl The worker script URL that was used to create the [[ConcurrentWorkerSet]].\n     */\n    static destroyWorkerSet(scriptUrl: string) {\n        const workerSet = this.workerSets[scriptUrl];\n        if (workerSet !== undefined) {\n            workerSet.destroy();\n            delete this.workerSets[scriptUrl];\n        }\n    }\n\n    /**\n     * Destroys all managed [[ConcurrentWorkerSet]]s.\n     */\n    static destroy() {\n        Object.keys(this.workerSets).forEach(name => {\n            this.workerSets[name].destroy();\n        });\n        this.workerSets = {};\n    }\n\n    /**\n     * The [[ConcurrentWorkerSet]] instances which are stored by the script URL.\n     */\n    private static workerSets: {\n        [bundleUrl: string]: ConcurrentWorkerSet;\n    } = {};\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport {\n    GeoJson,\n    ITiler,\n    WorkerServiceProtocol,\n    WorkerTilerProtocol\n} from \"@here/harp-datasource-protocol\";\nimport { TileKey } from \"@here/harp-geoutils\";\nimport { ConcurrentWorkerSet } from \"./ConcurrentWorkerSet\";\n\n/**\n * Identifier of next tiler worker-service. Used to ensure uniqueness of service ids of tilers\n * dedicated to different datasources.\n */\nlet nextUniqueServiceId = 0;\n\n/**\n * Tiler based on [[ConcurrentWorkerSet]].\n *\n * Tiles payloads using workers running in separate contexts (also known as `WebWorkers`):\n * - connection establishment,\n * - sends tile requests,\n * - configuration.\n */\nexport class WorkerBasedTiler implements ITiler {\n    private serviceId: string;\n    private m_serviceCreated: boolean = false;\n\n    /**\n     * Creates a new `WorkerBasedTiler`.\n     *\n     * @param workerSet [[ConcurrentWorkerSet]] this tiler will live in.\n     * @param tilerServiceType Service type identifier.\n     */\n    constructor(\n        private readonly workerSet: ConcurrentWorkerSet,\n        private readonly tilerServiceType: string\n    ) {\n        this.workerSet.addReference();\n        this.serviceId = `${this.tilerServiceType}-${nextUniqueServiceId++}`;\n    }\n\n    /**\n     * Dispose of dedicated tiler services in workers and remove reference to underlying\n     * [[ConcurrentWorkerSet]].\n     */\n    dispose() {\n        if (this.m_serviceCreated) {\n            this.workerSet\n                .broadcastRequest(WorkerServiceProtocol.WORKER_SERVICE_MANAGER_SERVICE_ID, {\n                    type: WorkerServiceProtocol.Requests.DestroyService,\n                    targetServiceId: this.serviceId\n                })\n                .catch(() => {\n                    /* Ignoring these errors as underlying workers possibly do not exist anymore. */\n                });\n        }\n\n        this.workerSet.removeReference();\n    }\n\n    /**\n     * Connects to [[WorkerServiceManager]]s in underlying [[ConcurrentWorkerSet]] and creates\n     * dedicated [[TilerService]]s in all workers to serve tiling requests.\n     */\n    async connect(): Promise<void> {\n        await this.workerSet.connect(WorkerServiceProtocol.WORKER_SERVICE_MANAGER_SERVICE_ID);\n        if (!this.m_serviceCreated) {\n            await this.workerSet.broadcastRequest(\n                WorkerServiceProtocol.WORKER_SERVICE_MANAGER_SERVICE_ID,\n                {\n                    type: WorkerServiceProtocol.Requests.CreateService,\n                    targetServiceType: this.tilerServiceType,\n                    targetServiceId: this.serviceId\n                }\n            );\n\n            this.m_serviceCreated = true;\n        }\n    }\n\n    /**\n     * Register index in the tiler. Indexes registered in the tiler can be later used to retrieved\n     * tiled payloads using `getTile`.\n     *\n     * @param indexId Index identifier.\n     * @param input Url to the index payload, or direct GeoJSON.\n     */\n    registerIndex(indexId: string, input: URL | GeoJson): Promise<void> {\n        const message: WorkerTilerProtocol.RegisterIndexRequest = {\n            type: WorkerTilerProtocol.Requests.RegisterIndex,\n            id: indexId,\n            input: input instanceof URL ? input.href : (input as GeoJson)\n        };\n        return this.workerSet.invokeRequest(this.serviceId, message);\n    }\n\n    /**\n     * Update index in the tiler. Indexes registered in the tiler can be later used to retrieved\n     * tiled payloads using `getTile`.\n     *\n     * @param indexId Index identifier.\n     * @param input Url to the index payload, or direct GeoJSON.\n     */\n    updateIndex(indexId: string, input: URL | GeoJson): Promise<void> {\n        const message: WorkerTilerProtocol.UpdateIndexRequest = {\n            type: WorkerTilerProtocol.Requests.UpdateIndex,\n            id: indexId,\n            input: input instanceof URL ? input.href : (input as GeoJson)\n        };\n        return this.workerSet.invokeRequest(this.serviceId, message);\n    }\n\n    /**\n     * Retrieves a tile for a previously registered index.\n     *\n     * @param indexId Index identifier.\n     * @param tileKey The [[TileKey]] that identifies the tile.\n     */\n    getTile(indexId: string, tileKey: TileKey): Promise<{}> {\n        const tileKeyCode = tileKey.mortonCode();\n        const message: WorkerTilerProtocol.TileRequest = {\n            type: WorkerTilerProtocol.Requests.TileRequest,\n            index: indexId,\n            tileKey: tileKeyCode\n        };\n        return this.workerSet.invokeRequest(this.serviceId, message);\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { GeoBox } from \"@here/harp-geoutils\";\nimport { getOptionValue, LoggerManager } from \"@here/harp-utils\";\nimport { CopyrightInfo } from \"./CopyrightInfo\";\nimport { CopyrightProvider } from \"./CopyrightProvider\";\n\ndeclare const require: any;\n\n// tslint:disable-next-line:no-var-requires\nconst RBush = require(\"rbush\");\n\n/**\n * Schema of [Map Tile API copyright\n * endpoint](https://developer.here.com/documentation/map-tile/topics/resource-copyright.html) JSON\n * response.\n */\nexport interface AreaCopyrightInfo {\n    /**\n     * Minimum zoom level for the specified copyright label.\n     */\n    minLevel?: number;\n\n    /**\n     * Maximum zoom level for the specified copyright label.\n     */\n    maxLevel?: number;\n\n    /**\n     * Copyright text to display after the copyright symbol on the map.\n     */\n    label: string;\n\n    /**\n     * Verbose copyright text of the label to display by mouse over label or info menu entry.\n     */\n    alt?: string;\n\n    /**\n     * The bounding boxes define areas where specific copyrights are valid. A bounding box is\n     * defined by bottom (latitude), left (longitude) and top (latitude), right (longitude).\n     *\n     * The default copyright has no boxes element and covers all other areas.\n     */\n    boxes?: Array<[number, number, number, number]>;\n}\n\n/**\n * Schema of [Map Tile API copyright\n * endpoint](https://developer.here.com/documentation/map-tile/topics/resource-copyright.html) JSON\n * response.\n */\nexport interface CopyrightCoverageResponse {\n    [scheme: string]: AreaCopyrightInfo[];\n}\n\n/**\n * Base class to provide copyrights based on copyright coverage information, defined by geographical\n * bounding boxes and relevant zoom level ranges.\n */\nexport abstract class CopyrightCoverageProvider implements CopyrightProvider {\n    /** Logger instance. */\n    protected readonly logger = LoggerManager.instance.create(\"CopyrightCoverageProvider\");\n\n    private m_cachedTreePromise: Promise<any> | undefined;\n\n    /** Asynchronously retrieves copyright coverage data. */\n    abstract async getCopyrightCoverageData(): Promise<AreaCopyrightInfo[]>;\n\n    /** @inheritdoc */\n    getTree(): Promise<any> {\n        if (this.m_cachedTreePromise !== undefined) {\n            return this.m_cachedTreePromise;\n        }\n\n        this.m_cachedTreePromise = this.getCopyrightCoverageData()\n            .then(coverageInfo => this.initRBush(coverageInfo))\n            .catch(error => {\n                this.logger.error(error);\n                return new RBush();\n            });\n\n        return this.m_cachedTreePromise;\n    }\n\n    /** @inheritdoc */\n    async getCopyrights(geoBox: GeoBox, level: number): Promise<CopyrightInfo[]> {\n        const tree = await this.getTree();\n\n        const result: CopyrightInfo[] = [];\n\n        const matchingEntries: AreaCopyrightInfo[] = tree.search({\n            minX: geoBox.west,\n            minY: geoBox.south,\n            maxX: geoBox.east,\n            maxY: geoBox.north\n        });\n\n        for (const entry of matchingEntries) {\n            const minLevel = getOptionValue(entry.minLevel, 0);\n            const maxLevel = getOptionValue(entry.maxLevel, Infinity);\n\n            if (level >= minLevel && level <= maxLevel) {\n                if (result.find(item => item.id === entry.label) === undefined) {\n                    result.push({ id: entry.label });\n                }\n            }\n        }\n\n        return result;\n    }\n\n    /**\n     * Initializes RBush.\n     *\n     * @param entries Entries for tree.\n     * @returns RBush instance.\n     */\n    initRBush(entries: AreaCopyrightInfo[]): any {\n        const tree = new RBush();\n\n        if (!entries) {\n            this.logger.warn(\"No copyright coverage data provided\");\n            return tree;\n        }\n\n        for (const entry of entries) {\n            const { minLevel, maxLevel, label, alt } = entry;\n\n            if (!entry.boxes) {\n                tree.insert({\n                    minX: -180,\n                    minY: -90,\n                    maxX: 180,\n                    maxY: 180,\n                    minLevel,\n                    maxLevel,\n                    label,\n                    alt\n                });\n            } else {\n                for (const box of entry.boxes) {\n                    const [minY, minX, maxY, maxX] = box;\n                    tree.insert({\n                        minX,\n                        minY,\n                        maxX,\n                        maxY,\n                        minLevel,\n                        maxLevel,\n                        label,\n                        alt\n                    });\n                }\n            }\n        }\n\n        return tree;\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nexport * from \"./src/TransferManager\";\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport * as THREE from \"three\";\n\nimport { GeometryType } from \"@here/harp-datasource-protocol\";\nimport { reconstructLineWidth } from \"@here/harp-lines\";\nimport { assert, LoggerManager } from \"@here/harp-utils\";\n\nconst logger = LoggerManager.instance.create(\"TileGeometry\");\n\n/**\n * Interface to access lines. Allows read access for some important attributes.\n */\nexport interface ILineAccessor {\n    /**\n     * Hint for the original type of geometry.\n     */\n    geometryType: GeometryType;\n\n    /**\n     * Get the color from materials.\n     */\n    color: THREE.Color | undefined | Array<THREE.Color | undefined>;\n\n    /**\n     * Get the width. May have to be reconstructed from triangulated line mesh.\n     */\n    width: number | undefined;\n\n    /**\n     * Render order.\n     */\n    renderOrder: number;\n\n    /**\n     * Helper for function `isLineAccessor`.\n     *\n     * @returns `true` if it is a line accessor.\n     */\n    isLineAccessor(): boolean;\n\n    /**\n     * Clear the object from the mesh.\n     */\n    clear(): void;\n\n    /**\n     * Get vertices from the object.\n     */\n    getVertices(): Float32Array | undefined;\n}\n\n/**\n * Helper function to check if an accessor is of type `ILineAccessor`.\n *\n * @param arg `true` if `arg` is `ILineAccessor`.\n */\nexport function isLineAccessor(arg: any): arg is ILineAccessor {\n    /**\n     * Get vertices from the object.\n     *\n     * @param mode Specifies which part of the vertices should be returned.\n     */\n\n    return typeof arg.isLineAccessor === \"function\" && arg.isLineAccessor() === true;\n}\n\n/**\n * Accessor for unspecified 3D objects, like landmarks.\n */\nexport interface IObject3dAccessor {\n    /**\n     * Hint for the original type of geometry.\n     */\n    geometryType: GeometryType;\n\n    /**\n     * Get the color from materials.\n     */\n    color: THREE.Color | undefined | Array<THREE.Color | undefined>;\n\n    /**\n     * Render order.\n     */\n    renderOrder: number;\n\n    /**\n     * Helper for function `isObject3dAccessor`.\n     *\n     * @returns `true` if it is a line accessor.\n     */\n    isObject3dAccessor(): boolean;\n\n    /**\n     * Clear the object from the mesh.\n     */\n    clear(): void;\n\n    getVertices(): Float32Array | undefined;\n}\n\n/**\n * Helper function to check if an accessor is of type `IObject3dAccessor`.\n *\n * @param arg `true` if `arg` is `IObject3dAccessor`.\n */\nexport function isObject3dAccessor(arg: any): arg is IObject3dAccessor {\n    return typeof arg.isObject3dAccessor === \"function\" && arg.isObject3dAccessor() === true;\n}\n\n/**\n * Basic interface for geometry accessors.\n */\nexport interface IGeometryAccessor {\n    /**\n     * Get the number of primitives (vertices of triangles).\n     *\n     * @returns Number of primitives.\n     */\n    getCount(): number;\n\n    /**\n     * Set range of primitives in this object related to one or more buffers.\n     *\n     * @param start Start index in buffers.\n     * @param end End index in buffers (+1).\n     */\n    setRange(start: number, end: number): void;\n}\n\n/**\n * Geometry accessor for both indexed and nonindexed `BufferedGeometry`.\n */\nexport abstract class BufferedGeometryAccessorBase implements IGeometryAccessor {\n    protected start: number = -1;\n    protected end: number = -1;\n    protected startCapSize: number = 0;\n    protected endCapSize: number = 0;\n    protected position: THREE.BufferAttribute;\n    protected itemSize: number;\n\n    constructor(\n        readonly object: THREE.Mesh,\n        readonly geometryType: GeometryType,\n        protected readonly bufferGeometry: THREE.BufferGeometry\n    ) {\n        assert(!!object);\n\n        if (bufferGeometry.type !== \"BufferGeometry\") {\n            logger.error(\n                \"IndexedBufferedGeometryAccessor#constructor: BufferGeometry has wrong \" + \"type\"\n            );\n        }\n        assert(\n            bufferGeometry.type === \"BufferGeometry\",\n            \"IndexedBufferedGeometryAccessor#constructor: BufferGeometry has wrong type\"\n        );\n\n        // we know its a BufferAttribute because it is a BufferGeometry\n        this.position = this.bufferGeometry.getAttribute(\"position\") as THREE.BufferAttribute;\n        this.itemSize = this.position.itemSize;\n\n        if (!this.position) {\n            logger.warn(\n                \"BufferedGeometryAccessor#constructor: BufferGeometry has no position \" +\n                    \"attribute\"\n            );\n        }\n\n        if (this.position.array.constructor !== Float32Array) {\n            logger.warn(\n                \"BufferedGeometryAccessor#constructor: BufferGeometry.position: \" +\n                    \"unsupported ArrayBuffer\"\n            );\n        }\n    }\n\n    /**\n     * Get the number of accessible geometries in this buffer.\n     *\n     * @returns Number of primitives in this geometry.\n     */\n    getCount(): number {\n        return this.position.count;\n    }\n\n    /**\n     * Get `renderOrder` of object.\n     *\n     * @returns `renderOrder` of the object.\n     */\n    get renderOrder(): number {\n        return this.object.renderOrder;\n    }\n\n    setRange(start: number, end: number, startCapSize: number = 0, endCapSize: number = 0) {\n        assert(start >= 0);\n        assert(end >= 0);\n        assert(start <= end);\n        this.start = start;\n        this.end = end;\n        this.startCapSize = startCapSize;\n        this.endCapSize = endCapSize;\n    }\n\n    /**\n     * Get one or more colors from materials.\n     */\n    get color(): THREE.Color | undefined | Array<THREE.Color | undefined> {\n        /**\n         * TODO: Get color(s) from vertex colors\n         */\n        const getColor = (material: THREE.Material) => {\n            const meshMaterial = material as THREE.MeshBasicMaterial;\n            if (\n                meshMaterial.type === \"MeshBasicMaterial\" ||\n                meshMaterial.type === \"MeshStandardMaterial\"\n            ) {\n                return meshMaterial.color;\n            } else if (meshMaterial.type === \"RawShaderMaterial\") {\n                const rawShaderMaterial = material as THREE.RawShaderMaterial;\n\n                if (rawShaderMaterial.name === \"SolidLineMaterial\") {\n                    return rawShaderMaterial.uniforms.diffuse.value as THREE.Color;\n                }\n\n                logger.warn(\n                    \"BufferedGeometryAccessor#color: unknown shader material name\",\n                    rawShaderMaterial.name\n                );\n            } else {\n                logger.warn(\n                    \"BufferedGeometryAccessor#color: unknown material type\",\n                    meshMaterial.type\n                );\n            }\n\n            return undefined;\n        };\n\n        if (Array.isArray(this.object.material)) {\n            const results = new Array<THREE.Color | undefined>();\n            const materials = this.object.material as THREE.Material[];\n\n            for (const material of materials) {\n                results.push(getColor(material));\n            }\n\n            return results;\n        } else {\n            return getColor(this.object.material);\n        }\n    }\n}\n\n/**\n * Abstract base class of an accessor for nonindexed geometry.\n */\nexport abstract class BufferedGeometryAccessor extends BufferedGeometryAccessorBase {\n    /**\n     * Create an object of type `BufferedGeometryAccessor`\n     *\n     * @param object - mesh object\n     * @param geometryType - type of geometry to be used\n     * @param bufferGeometry - which buffer geometry to use\n     * @param stride - geometry stride length\n     */\n    constructor(\n        readonly object: THREE.Mesh,\n        readonly geometryType: GeometryType,\n        protected readonly bufferGeometry: THREE.BufferGeometry,\n        protected stride: number\n    ) {\n        super(object, geometryType, bufferGeometry);\n    }\n\n    clear(): void {\n        assert(this.checkSetUp(), \"BufferedGeometryAccessor not setup\");\n\n        const positionsArray = this.position.array as number[];\n\n        const start = this.start * this.itemSize;\n        const end = this.end * this.itemSize;\n\n        for (let i = start; i < end; i++) {\n            positionsArray[i] = 0;\n        }\n\n        this.position.needsUpdate = true;\n    }\n\n    getVertices(): Float32Array | undefined {\n        assert(this.checkSetUp(), \"BufferedGeometryAccessor not setup\");\n\n        const start = this.start;\n        const end = this.end;\n\n        return (this.position.array as Float32Array).subarray(\n            start * this.itemSize,\n            end * this.itemSize\n        );\n    }\n\n    protected checkSetUp(): boolean {\n        return (\n            this.position !== undefined &&\n            this.start !== undefined &&\n            this.end !== undefined &&\n            this.start >= 0 &&\n            this.end <= this.position.count &&\n            this.start <= this.end\n        );\n    }\n}\n\n/**\n * Accessor for nonindexed line geometry.\n */\nexport class BufferedGeometryLineAccessor extends BufferedGeometryAccessor\n    implements ILineAccessor {\n    constructor(\n        readonly object: THREE.Mesh,\n        readonly geometryType: GeometryType,\n        readonly bufferGeometry: THREE.BufferGeometry\n    ) {\n        super(object, geometryType, bufferGeometry, 3);\n    }\n\n    isLineAccessor(): boolean {\n        return true;\n    }\n\n    get width(): number | undefined {\n        //TODO: There is no implementation of such a line, yet...\n        assert(this.checkSetUp(), \"RoBufferedGeometryLineAccessor not setup\");\n        return undefined;\n    }\n}\n\n/**\n * Accessor for nonindexed unspecified (`Object3D`) geometry.\n */\nexport class BufferedGeometryObject3dAccessor extends BufferedGeometryAccessor\n    implements IObject3dAccessor {\n    constructor(\n        readonly object: THREE.Mesh,\n        readonly geometryType: GeometryType,\n        readonly bufferGeometry: THREE.BufferGeometry\n    ) {\n        super(object, geometryType, bufferGeometry, 1);\n    }\n\n    isObject3dAccessor(): boolean {\n        return true;\n    }\n\n    /** @override */\n    getVertices(): Float32Array | undefined {\n        return super.getVertices();\n    }\n}\n\n/**\n * Abstract base class of indexed geometry.\n */\nexport abstract class IndexedBufferedGeometryAccessor extends BufferedGeometryAccessorBase {\n    indices: number[];\n\n    /**\n     * Creates an abstract class `IndexedBufferedGeometryAccessor`.\n     *\n     * @param object - mesh to be used\n     * @param geometryType - type of geometry\n     * @param bufferGeometry - geometry used\n     * @param start\n     * @param end\n     */\n    constructor(\n        readonly object: THREE.Mesh,\n        readonly geometryType: GeometryType,\n        protected readonly bufferGeometry: THREE.BufferGeometry,\n        // tslint:disable-next-line:no-unused-variable\n        start?: number,\n        // tslint:disable-next-line:no-unused-variable\n        end?: number\n    ) {\n        super(object, geometryType, bufferGeometry);\n\n        this.indices =\n            this.bufferGeometry.index !== null\n                ? (this.bufferGeometry.index.array as number[])\n                : ((undefined as any) as number[]);\n\n        if (!this.indices) {\n            logger.warn(\n                \"IndexedBufferedGeometryAccessor#constructor: BufferGeometry has no \" + \"index\"\n            );\n            assert(!!this.indices);\n        } else {\n            if (!(this.indices instanceof Uint32Array)) {\n                logger.warn(\n                    \"IndexedBufferedGeometryAccessor#constructor: BufferGeometry index \" +\n                        \"has wrong type\"\n                );\n                assert(this.indices instanceof Uint32Array);\n            }\n        }\n    }\n\n    /**\n     * Returns number of primitives, which is not known in this base class, so we return the number\n     * of indices.\n     *\n     * @returns The number of indices in the geometry.\n     * @override\n     */\n    getCount(): number {\n        return this.indices.length;\n    }\n\n    protected checkSetUp(): boolean {\n        return (\n            !!this.indices &&\n            this.start !== undefined &&\n            this.end !== undefined &&\n            this.start >= 0 &&\n            this.end <= this.indices.length &&\n            this.start <= this.end\n        );\n    }\n}\n\n/**\n * Accessor for lines in an indexed geometry.\n */\nexport class IndexedBufferedGeometryLineAccessor extends IndexedBufferedGeometryAccessor\n    implements ILineAccessor {\n    constructor(\n        readonly object: THREE.Mesh,\n        readonly geometryType: GeometryType,\n        readonly bufferGeometry: THREE.BufferGeometry\n    ) {\n        super(object, geometryType, bufferGeometry, 3);\n    }\n\n    isLineAccessor(): boolean {\n        return true;\n    }\n\n    /**\n     * Reconstructs line width from triangulated geometry.\n     *\n     * @returns Line width.\n     */\n    get width(): number | undefined {\n        assert(this.checkSetUp(), \"RoIndexedBufferedGeometryLineAccessor not setup\");\n\n        if (this.geometryType === GeometryType.ExtrudedLine) {\n            const start = this.start + this.startCapSize;\n            const positionArray = this.position.array as Float32Array;\n            return reconstructLineWidth(positionArray, start);\n        }\n\n        return undefined;\n    }\n\n    clear(): void {\n        assert(this.checkSetUp(), \"RoIndexedBufferedGeometryLineAccessor not setup\");\n\n        const start = this.start;\n        const end = this.end;\n\n        for (let i = start; i < end; i++) {\n            this.indices[i] = 0;\n        }\n\n        if (this.bufferGeometry.index !== null) {\n            this.bufferGeometry.index.needsUpdate = true;\n        }\n    }\n\n    getVertices(): Float32Array | undefined {\n        assert(this.checkSetUp(), \"RoIndexedBufferedGeometryLineAccessor not setup\");\n\n        const itemSize = this.itemSize;\n\n        const start = this.start;\n        const end = this.end;\n\n        const result = new Float32Array((end - start) * itemSize);\n        const positionArray = this.position.array;\n\n        if (itemSize === 2) {\n            for (let i = start, j = 0; i < end; i++, j += itemSize) {\n                const index = this.indices[i];\n                result[j + 0] = positionArray[index * itemSize + 0];\n                result[j + 1] = positionArray[index * itemSize + 1];\n            }\n        }\n        if (itemSize === 3) {\n            for (let i = start, j = 0; i < end; i++, j += itemSize) {\n                const index = this.indices[i];\n                result[j + 0] = positionArray[index * itemSize + 0];\n                result[j + 1] = positionArray[index * itemSize + 1];\n                result[j + 2] = positionArray[index * itemSize + 2];\n            }\n        } else {\n            for (let i = start, j = 0; i < end; i++, j++) {\n                const index = this.indices[i];\n                for (let k = 0; k < itemSize; k++) {\n                    result[j * itemSize + k] = positionArray[index * itemSize + k];\n                }\n            }\n        }\n\n        return result;\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport * as THREE from \"three\";\n\nconst UNIT_Z = new THREE.Vector3(0, 0, 1);\nconst POINTS = [0, 1, 2, 1, 3, 2];\nconst BEVEL_POINTS = [0, 1, 3, 3, 1, 2, 0, 3, 4, 5, 4, 3];\n\nconst SECTORS_IN_CIRCLE = 8;\nconst STEP = Math.PI / SECTORS_IN_CIRCLE;\n\n/**\n * Adds a half-circle geometry to original line\n *\n * @param x The line end X (used as circle center X)\n * @param y The line end Y (used as circle center Y)\n * @param lineAngle The cap incline angle\n * @param radius The cap (circle) radius\n * @param vertices The input vertex buffer (cap vertices are added there)\n * @param indices The input index buffer (cap indices are is added there)\n */\nfunction addCircle(\n    x: number,\n    y: number,\n    lineAngle: number,\n    radius: number,\n    vertices: number[],\n    indices: number[]\n) {\n    const baseVertex = vertices.length / 3;\n\n    // Add cap center to vertices directly (it doesn't need rotation)\n    vertices.push(x, y, 0);\n\n    for (let i = 0; i < SECTORS_IN_CIRCLE + 1; ++i) {\n        const angle = STEP * i + Math.PI / 2 + lineAngle; // Start angle is -90deg\n        vertices.push(x + radius * Math.cos(angle), y + radius * Math.sin(angle), 0);\n\n        indices.push(\n            baseVertex,\n            baseVertex + i + 1,\n            baseVertex + ((i + 1) % (SECTORS_IN_CIRCLE + 1)) + 1\n        );\n    }\n}\n\n/**\n * Returns the number of points in circle used for caps.\n *\n * @param lineWidth Width of line.\n */\n// tslint:disable-next-line:no-unused-variable\nexport function numCirclePoints(lineWidth: number): number {\n    return SECTORS_IN_CIRCLE + 1;\n}\n\n/**\n * Create a triangle mesh from the given polyline.\n *\n * @param points Sequence of (x,y,z) coordinates.\n * @param width The width of the extruded line.\n * @param vertices The output vertex buffer.\n * @param indices The output index buffer.\n * @param startWithCircle `true` if the line should start will a circle.\n * @param endWithCircle `true` if the line should end with a circle.\n */\nexport function triangulateLine(\n    points: ArrayLike<number>,\n    width: number,\n    vertices: number[],\n    indices: number[],\n    startWithCircle = true,\n    endWithCircle = startWithCircle\n) {\n    if (points.length < 3) {\n        return;\n    }\n\n    // This vector is used for computing cap angle\n    const angleVec = new THREE.Vector2();\n\n    if (startWithCircle) {\n        // Define lineAngle as (direction - origin) vector angle to X axis\n        const lineAngle =\n            points.length !== 3\n                ? angleVec.set(points[3] - points[0], points[4] - points[1]).angle()\n                : 0;\n\n        addCircle(points[0], points[1], lineAngle, width, vertices, indices);\n    }\n\n    const baseVertex = vertices.length / 3;\n\n    // bt = Bitangent (i.e. extrusion vector)\n    const prevBt = new THREE.Vector3();\n    const p = new THREE.Vector3(); // current point\n    const n = new THREE.Vector3(); // next point\n    const bt = new THREE.Vector3();\n    const averageBt = new THREE.Vector3();\n    const p0 = new THREE.Vector3();\n    const p1 = new THREE.Vector3();\n    const p2 = new THREE.Vector3();\n    const p3 = new THREE.Vector3();\n\n    const N = points.length / 3;\n\n    let vertexOffset = 0;\n    for (let i = 0; i < N; ++i) {\n        let useBevel = false;\n        p.set(points[i * 3], points[i * 3 + 1], points[i * 3 + 2]);\n\n        if (i + 1 < N) {\n            n.set(points[(i + 1) * 3], points[(i + 1) * 3 + 1], points[(i + 1) * 3 + 2]);\n\n            bt.copy(n)\n                .sub(p)\n                .normalize()\n                .cross(UNIT_Z);\n\n            averageBt.copy(bt);\n\n            if (i > 0) {\n                averageBt.add(prevBt).multiplyScalar(1.0 - 0.5 * bt.dot(prevBt));\n\n                useBevel = prevBt.angleTo(bt) > Math.PI / 2;\n\n                if (useBevel) {\n                    const inclineWidth = width / Math.cos(bt.angleTo(prevBt) / 2);\n\n                    p0.copy(bt)\n                        .add(prevBt)\n                        .normalize()\n                        .multiplyScalar(-inclineWidth)\n                        .add(p);\n\n                    p1.copy(prevBt)\n                        .multiplyScalar(width)\n                        .add(p);\n\n                    // p2 is used for \"miter\" connections\n                    p2.copy(bt)\n                        .add(prevBt)\n                        .normalize()\n                        .multiplyScalar(inclineWidth)\n                        .add(p);\n\n                    p3.copy(bt)\n                        .multiplyScalar(width)\n                        .add(p);\n                }\n            }\n\n            if (useBevel) {\n                vertices.push(\n                    p0.x,\n                    p0.y,\n                    p0.z,\n                    p1.x,\n                    p1.y,\n                    p1.z,\n                    p2.x,\n                    p2.y,\n                    p2.z,\n                    p3.x,\n                    p3.y,\n                    p3.z\n                );\n            } else {\n                p0.copy(averageBt)\n                    .multiplyScalar(-width)\n                    .add(p);\n\n                p1.copy(averageBt)\n                    .multiplyScalar(width)\n                    .add(p);\n\n                vertices.push(p0.x, p0.y, p0.z, p1.x, p1.y, p1.z);\n            }\n\n            prevBt.copy(bt);\n        } else {\n            p0.copy(prevBt)\n                .multiplyScalar(-width)\n                .add(p);\n\n            p1.copy(prevBt)\n                .multiplyScalar(width)\n                .add(p);\n\n            vertices.push(p0.x, p0.y, p0.z, p1.x, p1.y, p1.z);\n        }\n\n        if (i !== N - 1) {\n            (useBevel ? BEVEL_POINTS : POINTS).forEach(o =>\n                indices.push(baseVertex + vertexOffset + o)\n            );\n            vertexOffset += useBevel ? 4 : 2;\n        }\n    }\n\n    if (endWithCircle) {\n        const lineAngle =\n            points.length !== 2\n                ? angleVec\n                      .set(\n                          points[(N - 3) * 3] - points[(N - 2) * 3],\n                          points[(N - 3) * 3 + 1] - points[(N - 2) * 3 + 1]\n                      )\n                      .angle()\n                : Math.PI;\n\n        addCircle(\n            points[(N - 2) * 3],\n            points[(N - 2) * 3 + 1],\n            lineAngle,\n            width,\n            vertices,\n            indices\n        );\n    }\n}\n\n/**\n * Reconstruct the original points of a line from the vertices of the triangulated line.\n *\n * @param inBuffer Buffer with vertices.\n * @param startOffset Start index, will differ from `0` if the line has caps.\n * @returns Buffer containing the original points of the triangulated line.\n */\nexport function reconstructLine(inBuffer: Float32Array, startOffset: number): Float32Array {\n    const outBuffer = new Float32Array(inBuffer.length / 2);\n\n    for (let i = startOffset * 3, i2 = i * 2; i < outBuffer.length; i += 3, i2 += 6) {\n        outBuffer[i] = inBuffer[i2] + (inBuffer[i2 + 3] - inBuffer[i2]) * 0.5;\n        outBuffer[i + 1] = inBuffer[i2 + 1] + (inBuffer[i2 + 3 + 1] - inBuffer[i2 + 1]) * 0.5;\n        outBuffer[i + 2] = inBuffer[i2 + 2] + (inBuffer[i2 + 3 + 2] - inBuffer[i2 + 2]) * 0.5;\n    }\n    return outBuffer;\n}\n\n/**\n * Extract the line width from a triangulated line.\n *\n * @param inBuffer Array of vertex elements of a triangulated line.\n * @param startIndex Start index, will differ from `0` if the line has caps.\n */\nexport function reconstructLineWidth(inBuffer: Float32Array, startIndex: number): number {\n    const xd = inBuffer[startIndex * 2 + 3] - inBuffer[startIndex * 2];\n    const yd = inBuffer[startIndex * 2 + 3 + 1] - inBuffer[startIndex * 2 + 1];\n    const zd = inBuffer[startIndex * 2 + 3 + 2] - inBuffer[startIndex * 2 + 2];\n\n    return Math.sqrt(xd * xd + yd * yd + zd * zd) * 0.5;\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { HighPrecisionLineMaterial } from \"@here/harp-materials\";\n\nimport * as THREE from \"three\";\nimport { HighPrecisionUtils } from \"./HighPrecisionUtils\";\n\n/**\n * Declare interface for `HighPrecisionObject` which describes additional functionality to render\n * high-precision vertices.\n */\nexport interface HighPrecisionObject extends THREE.Object3D {\n    /**\n     * Allow direct access to [[BufferGeometry]] without cast.\n     */\n    bufferGeometry: THREE.BufferGeometry;\n\n    /**\n     * Allow direct access to [[ShaderMaterial]] without cast.\n     */\n    shaderMaterial: THREE.ShaderMaterial;\n\n    /**\n     * Inversed World Matrix.\n     */\n    matrixWorldInverse: THREE.Matrix4;\n\n    /**\n     * Sets up attributes for position (one attribute for major 32 bits position \"halve\", and one\n     * attribute for lower 32 bits).\n     */\n    setPositions(positions: number[] | THREE.Vector3[]): void;\n\n    /**\n     * Prepare the objects \"`onBeforeRender()`\" callback to generate proper high-precision camera\n     * position.\n     */\n    setupForRendering(): void;\n}\n\n/**\n * Class used to render high-precision wireframe lines.\n */\nexport class HighPrecisionWireFrameLine extends THREE.Line implements HighPrecisionObject {\n    matrixWorldInverse: THREE.Matrix4;\n\n    /**\n     * Creates a `HighPrecisionWireFrameLine` object.\n     *\n     * @param geometry [[BufferGeometry]] used to render this object.\n     * @param material [[HighPrecisionLineMaterial]] used to render this object.\n     *     instances.\n     * @param positions Array of 2D/3D positions.\n     * @param color Color of the rendered line.\n     * @param opacity Opacity of the rendered line.\n     */\n    constructor(\n        geometry?: THREE.BufferGeometry,\n        material?: HighPrecisionLineMaterial,\n        positions?: number[] | THREE.Vector3[],\n        color?: THREE.Color,\n        opacity?: number\n    ) {\n        super(geometry === undefined ? new THREE.BufferGeometry() : geometry, material);\n\n        if (material === undefined) {\n            material = new HighPrecisionLineMaterial({\n                color: color ? color : HighPrecisionLineMaterial.DEFAULT_COLOR,\n                opacity: opacity !== undefined ? opacity : HighPrecisionLineMaterial.DEFAULT_OPACITY\n            });\n        }\n\n        this.matrixWorldInverse = new THREE.Matrix4();\n\n        if (positions) {\n            this.setPositions(positions);\n        }\n    }\n\n    get bufferGeometry(): THREE.BufferGeometry {\n        return this.geometry as THREE.BufferGeometry;\n    }\n\n    get shaderMaterial(): THREE.ShaderMaterial {\n        return this.material as THREE.ShaderMaterial;\n    }\n\n    setPositions(positions: number[] | THREE.Vector3[]): void {\n        HighPrecisionUtils.setPositions(this, positions);\n    }\n\n    setupForRendering(): void {\n        this.onBeforeRender = (\n            _renderer: THREE.WebGLRenderer,\n            _scene: THREE.Scene,\n            camera: THREE.Camera,\n            _geometry: THREE.Geometry | THREE.BufferGeometry,\n            _material: THREE.Material,\n            _group: THREE.Group\n        ) => {\n            HighPrecisionUtils.updateHpUniforms(this, camera, this.shaderMaterial);\n        };\n    }\n\n    updateMatrixWorld(force: boolean) {\n        const doUpdateMatrixWorldInverse = this.matrixWorldNeedsUpdate || force;\n\n        super.updateMatrixWorld(force);\n\n        if (doUpdateMatrixWorldInverse) {\n            this.matrixWorldInverse.getInverse(this.matrixWorld);\n        }\n    }\n}\n\n/**\n * Class used to render high-precision lines.\n */\nexport class HighPrecisionLine extends THREE.Mesh implements HighPrecisionObject {\n    matrixWorldInverse: THREE.Matrix4;\n\n    /**\n     * Creates a `HighPrecisionLine` object.\n     *\n     * @param geometry [[BufferGeometry]] used to render this object.\n     * @param material [[HighPrecisionLineMaterial]] used to render this object.\n     *     instances.\n     * @param positions Array of 2D/3D positions.\n     * @param color Color of the rendered line.\n     * @param opacity Opacity of the rendered line.\n     */\n    constructor(\n        geometry?: THREE.BufferGeometry,\n        material?: HighPrecisionLineMaterial,\n        positions?: number[] | THREE.Vector3[],\n        color?: THREE.Color,\n        opacity?: number\n    ) {\n        super(geometry === undefined ? new THREE.BufferGeometry() : geometry, material);\n\n        if (material === undefined) {\n            material = new HighPrecisionLineMaterial({\n                color: color ? color : HighPrecisionLineMaterial.DEFAULT_COLOR,\n                opacity: opacity !== undefined ? opacity : HighPrecisionLineMaterial.DEFAULT_OPACITY\n            });\n        }\n\n        this.matrixWorldInverse = new THREE.Matrix4();\n\n        if (positions) {\n            this.setPositions(positions);\n        }\n    }\n\n    get bufferGeometry(): THREE.BufferGeometry {\n        return this.geometry as THREE.BufferGeometry;\n    }\n\n    get shaderMaterial(): THREE.ShaderMaterial {\n        return this.material as THREE.ShaderMaterial;\n    }\n\n    setPositions(positions: number[] | THREE.Vector3[]): void {\n        HighPrecisionUtils.setPositions(this, positions);\n    }\n\n    setupForRendering(): void {\n        this.onBeforeRender = (\n            _renderer: THREE.WebGLRenderer,\n            _scene: THREE.Scene,\n            camera: THREE.Camera,\n            _geometry: THREE.Geometry | THREE.BufferGeometry,\n            _material: THREE.Material,\n            _group: THREE.Group\n        ) => {\n            HighPrecisionUtils.updateHpUniforms(this, camera, this.shaderMaterial);\n        };\n    }\n\n    updateMatrixWorld(force: boolean) {\n        const doUpdateMatrixWorldInverse = this.matrixWorldNeedsUpdate || force;\n\n        super.updateMatrixWorld(force);\n\n        if (doUpdateMatrixWorldInverse) {\n            this.matrixWorldInverse.getInverse(this.matrixWorld);\n        }\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\nimport \"@here/harp-fetch\";\n\nimport {\n    DecodedTile,\n    ITileDecoder,\n    RequestController,\n    TileInfo\n} from \"@here/harp-datasource-protocol\";\nimport { TileKey } from \"@here/harp-geoutils\";\nimport { DataSource, TileLoaderState } from \"@here/harp-mapview\";\nimport { LoggerManager } from \"@here/harp-utils\";\n\nimport { DataProvider } from \"./DataProvider\";\n\n/**\n * Logger to write to console etc.\n */\nconst logger = LoggerManager.instance.create(\"TileLoader\");\n\n/**\n * The [[TileLoader]] manages the different states of loading and decoding for a [[Tile]]. Used by\n * the [[TileDataSource]].\n */\nexport class TileLoader {\n    /**\n     * Current state of `TileLoader`.\n     */\n    state: TileLoaderState = TileLoaderState.Initialized;\n\n    /**\n     * Error object if loading or decoding failed.\n     */\n    error?: Error;\n\n    /**\n     * The binary data in form of [[ArrayBufferLike]], or any object.\n     */\n    payload?: ArrayBufferLike | {};\n\n    /**\n     * The result of decoding the `payload`: The [[DecodedTile]].\n     */\n    decodedTile?: DecodedTile;\n\n    /**\n     * The abort controller notifying the [[DataProvider]] to cancel loading.\n     */\n    protected loadAbortController = new AbortController();\n\n    /**\n     * The  notifying the [[ITileDecoder]] to cancel decoding.\n     */\n    protected requestController?: RequestController;\n\n    /**\n     * The promise which is resolved when loading and decoding have finished.\n     */\n    protected donePromise?: Promise<TileLoaderState>;\n\n    /**\n     * The internal function that is called when loading and decoding have finished successfully.\n     */\n    protected resolveDonePromise?: (state: TileLoaderState) => void;\n\n    /**\n     * The internal function that is called when loading and decoding failed.\n     */\n    protected rejectedDonePromise?: (state: TileLoaderState) => void;\n\n    /**\n     * Set up loading of a single [[Tile]].\n     *\n     * @param dataSource The [[DataSource]] the tile belongs to.\n     * @param tileKey The quadtree address of a [[Tile]].\n     * @param dataProvider The [[DataProvider]] that retrieves the binary tile data.\n     * @param tileDecoder The [[ITileDecoder]] that decodes the binary tile to a [[DecodeTile]].\n     * @param priority The priority given to the loading job. Highest number will be served first.\n     */\n    constructor(\n        protected dataSource: DataSource,\n        protected tileKey: TileKey,\n        protected dataProvider: DataProvider,\n        protected tileDecoder: ITileDecoder,\n        public priority: number\n    ) {}\n\n    /**\n     * Start loading and/or proceed through the various states of loading of this tile.\n     *\n     * @returns A promise which resolves the [[TileLoaderState]].\n     */\n    loadAndDecode(): Promise<TileLoaderState> {\n        switch (this.state) {\n            case TileLoaderState.Loading:\n            case TileLoaderState.Loaded:\n            case TileLoaderState.Decoding:\n                // tile is already loading\n                return this.donePromise!;\n\n            case TileLoaderState.Ready:\n            case TileLoaderState.Failed:\n            case TileLoaderState.Initialized:\n            case TileLoaderState.Canceled:\n                // restart loading\n                this.startLoading();\n                return this.donePromise!;\n        }\n    }\n\n    /**\n     * Return the current state in form of a promise. Caller can then wait for the promise to be\n     * resolved.\n     *\n     * @returns A promise which resolves the current [[TileLoaderState]].\n     */\n    waitSettled(): Promise<TileLoaderState> {\n        if (!this.donePromise) {\n            return Promise.resolve(this.state);\n        }\n        return this.donePromise;\n    }\n\n    /**\n     * Cancel loading of the [[Tile]].\n     * Cancellation token is notified, an internal state is cleaned up.\n     */\n    cancel() {\n        switch (this.state) {\n            case TileLoaderState.Loading:\n                this.loadAbortController.abort();\n                this.loadAbortController = new AbortController();\n                break;\n\n            case TileLoaderState.Decoding:\n                if (this.requestController) {\n                    this.requestController.abort();\n                    this.requestController = undefined;\n                }\n                break;\n        }\n\n        this.onDone(TileLoaderState.Canceled);\n    }\n\n    /**\n     * Return `true` if [[Tile]] is still loading, `false` otherwise.\n     */\n    get isFinished(): boolean {\n        return (\n            this.state === TileLoaderState.Ready ||\n            this.state === TileLoaderState.Canceled ||\n            this.state === TileLoaderState.Failed\n        );\n    }\n\n    /**\n     * Update the priority of this [[Tile]]'s priority. Is effective to sort the decoding requests\n     * in the request queue (used during heavy load).\n     */\n    updatePriority(priority: number): void {\n        this.priority = priority;\n        if (this.requestController !== undefined) {\n            this.requestController.priority = priority;\n        }\n    }\n\n    /**\n     * Start loading. Only call if loading did not start yet.\n     */\n    protected startLoading() {\n        const myLoadCancellationToken = this.loadAbortController.signal;\n        this.dataProvider\n            .getTile(this.tileKey, myLoadCancellationToken)\n            .then(payload => {\n                if (myLoadCancellationToken.aborted) {\n                    // safety belt if getTile doesn't really support cancellation tokens\n                    const err = new Error(\"Aborted\");\n                    err.name = \"AbortError\";\n                    throw err;\n                }\n                this.onLoaded(payload);\n            })\n            .catch(error => {\n                // Handle abort messages from fetch and also our own.\n                if (error.name === \"AbortError\" || error.message === \"AbortError: Aborted\") {\n                    return;\n                }\n                this.onError(error);\n            });\n\n        if (this.donePromise === undefined) {\n            this.donePromise = new Promise<TileLoaderState>((resolve, reject) => {\n                this.resolveDonePromise = resolve;\n                this.rejectedDonePromise = reject;\n            });\n        }\n        this.state = TileLoaderState.Loading;\n    }\n\n    /**\n     * Called when binary data has been loaded. The loading state is now progressing to decoding.\n     *\n     * @param payload Binary data in form of [[ArrayBufferLike]], or any object.\n     */\n    protected onLoaded(payload: ArrayBufferLike | {}) {\n        this.state = TileLoaderState.Loaded;\n        this.payload = payload;\n\n        if ((payload as ArrayBufferLike).byteLength !== undefined) {\n            if ((payload as ArrayBufferLike).byteLength === 0) {\n                this.onDone(TileLoaderState.Ready);\n                return;\n            }\n        }\n        // Object is empty\n        if ((payload as {}) === {}) {\n            this.onDone(TileLoaderState.Ready);\n            return;\n        }\n\n        // TBD: we might suspend decode if tile is not visible ... ?\n        this.startDecodeTile();\n    }\n\n    /**\n     * Start decoding the payload.\n     */\n    protected startDecodeTile() {\n        const payload = this.payload;\n        if (payload === undefined) {\n            logger.error(\"TileLoader#startDecodeTile: Cannot decode without payload\");\n            return;\n        }\n\n        this.state = TileLoaderState.Decoding;\n        this.payload = undefined;\n\n        // Save our cancellation point, so we can be reliably cancelled by any subsequent decode\n        // attempts\n        const requestController = new RequestController(this.priority);\n        this.requestController = requestController;\n\n        const dataSource = this.dataSource;\n        this.tileDecoder\n            .decodeTile(payload, this.tileKey, dataSource.projection, requestController)\n            .then(decodedTile => {\n                if (requestController.signal.aborted) {\n                    // our flow is cancelled, silently return\n                    return;\n                }\n\n                this.onDecoded(decodedTile);\n            })\n            .catch(error => {\n                // Handle abort messages from fetch and also our own.\n                if (error.name === \"AbortError\" || error.message === \"AbortError: Aborted\") {\n                    // our flow is cancelled, silently return\n                    return;\n                }\n                this.onError(error);\n            });\n    }\n\n    /**\n     * Called when the decoding is finished, and the [[DecodedTile]] has been created.\n     *\n     * @param decodedTile The [[DecodedTile]].\n     */\n    protected onDecoded(decodedTile: DecodedTile) {\n        this.decodedTile = decodedTile;\n        this.onDone(TileLoaderState.Ready);\n    }\n\n    /**\n     * Cancel the decoding process.\n     */\n    protected cancelDecoding() {\n        if (this.requestController !== undefined) {\n            // we should cancel any decodes already in progress!\n            this.requestController.abort();\n            this.requestController = undefined;\n        }\n    }\n\n    /**\n     * Called when loading and decoding has finished successfully. Resolves loading promise if the\n     * state is Ready, otherwise it rejects the promise with the supplied state.\n     *\n     * @param doneState The latest state of loading.\n     */\n    protected onDone(doneState: TileLoaderState) {\n        if (this.resolveDonePromise && doneState === TileLoaderState.Ready) {\n            this.resolveDonePromise(doneState);\n        } else if (this.rejectedDonePromise) {\n            this.rejectedDonePromise(doneState);\n        }\n        this.resolveDonePromise = undefined;\n        this.rejectedDonePromise = undefined;\n        this.donePromise = undefined;\n        this.state = doneState;\n    }\n\n    /**\n     * Called when loading or decoding has finished with an error.\n     *\n     * @param error Error object describing the failing.\n     */\n    protected onError(error: Error) {\n        if (this.state === TileLoaderState.Canceled) {\n            // If we're canceled, we should simply ignore any state transitions and errors from\n            // underlying load/decode ops.\n            return;\n        }\n        const dataSource = this.dataSource;\n        logger.error(\n            `[${dataSource.name}]: failed to load tile ${this.tileKey.mortonCode()}`,\n            error\n        );\n\n        this.error = error;\n\n        this.onDone(TileLoaderState.Failed);\n    }\n}\n\n/**\n * Subclass of [[TileLoader]] which is used by [[TileDataSource]] to load the [[TileInfo]] meta\n * data, not the tile data itself.\n */\nexport class TileInfoLoader extends TileLoader {\n    tileInfo?: TileInfo;\n\n    /** @override */\n    protected startDecodeTile() {\n        const payload = this.payload;\n        if (payload === undefined) {\n            logger.error(\"TileInfoLoader#startDecodeTile: Cannot decode without payload\");\n            return;\n        }\n\n        this.state = TileLoaderState.Decoding;\n        this.payload = undefined;\n\n        // Save our cancellation point, so we can be reliably cancelled by any subsequent decode\n        // attempts\n        const requestController = new RequestController(this.priority);\n        this.requestController = requestController;\n\n        const dataSource = this.dataSource;\n        this.tileDecoder\n            .getTileInfo(payload, this.tileKey, dataSource.projection, requestController)\n            .then(tileInfo => {\n                if (requestController.signal.aborted) {\n                    // our flow is cancelled, silently return\n                    return;\n                }\n                this.tileInfo = tileInfo;\n\n                this.onDone(TileLoaderState.Ready);\n            })\n            .catch(error => {\n                // Handle abort messages from fetch and also our own.\n                if (error.name === \"AbortError\" || error.message === \"AbortError: Aborted\") {\n                    // our flow is cancelled, silently return\n                    return;\n                }\n                this.onError(error);\n            });\n    }\n}\n","/*\n * Copyright (C) 2017-2020 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport \"@here/harp-fetch\";\nimport { TileKey, TilingScheme } from \"@here/harp-geoutils\";\nimport { DataProvider } from \"@here/harp-mapview-decoder\";\nimport { TransferManager } from \"@here/harp-transfer-manager\";\nimport { LoggerManager } from \"@here/harp-utils\";\n\nconst logger = LoggerManager.instance.create(\"OmvRestClient\");\n\n// tslint:disable:max-line-length\nexport enum APIFormat {\n    /**\n     * Use the REST API format of HERE Vector Tiles Server component version 1.\n     *\n     * Documentation:\n     *  https://developer.here.com/documentation/vector-tiles-api/dev_guide/index.html\n     *\n     * Usage:\n     *\n     *     <OmvRestClientParams.baseUrl>/<zoom>/<X>/<Y>/omv\n     *\n     * If [[OmvRestClientParams.authenticationToken]] is provided, it will be added as HTTP header:\n     *\n     *     Authorization: Bearer $authenticationToken\n     *\n     * Format definition:\n     * `//http|s://<base-url>/{API version}/{layers}/{projection}/{z}/{x}/{y}/{format}`\n     *\n     * Default authentication method used: [[AuthenticationTypeBearer]].\n     */\n    HereV1,\n\n    /**\n     * Use the REST API format of Mapbox Vector Tile API v4.\n     *\n     * Usage:\n     * `<OmvRestClientParams.baseUrl>/<zoom>/<X>/<Y>.mvt?access_token=<OmvRestClientParams.authenticationCode>`\n     *\n     * Format definition:\n     * `http|s://<base-url>/v4/{map_id}/{z}/{x}/{y}{@2x}.{format}?[style]&access_token={access_token}`\n     *\n     * Sample URL:\n     * `http://a.tiles.mapbox.com/v4/mapbox.mapbox-streets-v7/14/4823/6160.mvt?access_token=your-mapbox-access-token`\n     *\n     * Default authentication method used: [[AuthenticationTypeAccessToken]].\n     */\n    MapboxV4,\n\n    /**\n     * Use the REST API format of XYZ Vector Tile API in MVT format.\n     *\n     * Usage:\n     * `<OmvRestClientParams.baseUrl>/tiles/omsbase/256/<zoom>/<X>/<Y>.mvt?access_token=<OmvRestClientParams.authenticationCode>`\n     *\n     * Format definition:\n     * `http|s://<base-url>/tiles/{layers}/{z}/{x}/{y}/{format}?access_token={access_token}`\n     *\n     * Sample URL:\n     * `https://xyz.api.here.com/tiles/osmbase/256/all/16/19293/24641.mvt?access_token=your-xyz-access-token`\n     *\n     * Default authentication method used: [[AuthenticationTypeAccessToken]].\n     */\n    XYZMVT,\n\n    /**\n     * Use the REST API format of XYZ Vector Tile API in JSON format.\n     *\n     * Usage:\n     * `<OmvRestClientParams.baseUrl>/tiles/omsbase/256/<zoom>/<X>/<Y>.mvt?access_token=<OmvRestClientParams.authenticationCode>`\n     *\n     * Format definition:\n     * `http|s://<base-url>/tiles/{layers}/{z}/{x}/{y}/{format}?access_token={access_token}`\n     *\n     * Sample URL:\n     * `https://xyz.api.here.com/tiles/osmbase/256/all/16/19293/24641.json?access_token=your-xyz-api-key`\n     *\n     * Default authentication method used: [[AuthenticationTypeAccessToken]].\n     */\n    XYZJson,\n\n    /**\n     * Use the REST API format of XYZ Vector Tile API in OMV format.\n     *\n     * Usage:\n     * `<OmvRestClientParams.baseUrl>/tiles/herebase.02/<zoom>/<X>/<Y>/omv?access_token=<OmvRestClientParams.authenticationCode>`\n     *\n     * Format definition:\n     * `http|s://<base-url>/tiles/herebase.02/{z}/{x}/{y}/{format}?access_token={access_token}`\n     *\n     * Sample URL:\n     * `https://xyz.api.here.com/tiles/herebase.02/14/2649/6338/omv?access_token=your-xyz-access-token`\n     *\n     * Default authentication method used: [[AuthenticationTypeAccessToken]].\n     */\n    XYZOMV,\n\n    /**\n     * Use the REST API format of Tomtoms Vector Tile API v1.\n     *\n     * Usage:\n     * `<OmvRestClientParams.baseUrl>/<zoom>/<X>/<Y>.pbf?key=<OmvRestClientParams.authenticationCode>`\n     *\n     * Format definition:\n     * `<http|https>://<baseURL>/map/<versionNumber>/tile/<layer>/<style>/<zoom>/<X>/<Y>.<format>?key=<apiKey>[&view=<view>][&language=<language>]`\n     *\n     * Sample URL:\n     * `http://api.tomtom.com/map/1/tile/basic/main/0/0/0.pbf?key=<apiKey>`\n     *\n     * Default authentication method used: [[AuthenticationTypeTomTomV1]].\n     */\n    TomtomV1,\n\n    /**\n     * Use the REST API format of XYZ Space Vector Tile API in OMV format.\n     *\n     * Usage:\n     * `<OmvRestClientParams.baseUrl>/hub/spaces/<space-id>/tile/web/<zoom>_<X>_<Y>.mvt?access_token=<OmvRestClientParams.authenticationCode>`\n     *\n     * Format definition:\n     * `http|s://<base-url>/hub/spaces/{spaceId}/tile/web/{z}_{x}_{y}.mvt?access_token={access_token}`\n     *\n     * Sample URL:\n     * `https://xyz.api.here.com/hub/spaces/your-space-id/tile/web/{z}_{x}_{y}.mvt?access_token=your-access-token`\n     *\n     * Default authentication method used: [[AuthenticationTypeAccessToken]].\n     */\n    XYZSpace\n}\n// tslint:enable:max-line-length\n\n/**\n * Authentication token/code provider used by [[OmvRestClient]] before each call to currently valid\n * authentication code/token.\n */\nexport type AuthenticationCodeProvider = () => Promise<string>;\n\nexport enum AuthenticationMethod {\n    QueryString,\n    AuthorizationHeader\n}\n\nexport interface AuthenticationMethodInfo {\n    method: AuthenticationMethod;\n    name?: string;\n}\n\n/**\n * Authentication method, where token will be provided as HTTP Header:\n *\n *    Authorization: Bearer $authenticationToken\n */\nexport const AuthenticationTypeBearer: AuthenticationMethodInfo = {\n    method: AuthenticationMethod.AuthorizationHeader,\n    name: \"Bearer\"\n};\n\n/**\n * TomTomV1 API compatible authorization method, where token will be provided as HTTP Header:\n *\n *    Authorization: Bearer $authenticationToken\n */\nexport const AuthenticationTypeTomTomV1: AuthenticationMethodInfo = {\n    method: AuthenticationMethod.QueryString,\n    name: \"key\"\n};\n\nexport const AuthenticationTypeAccessToken: AuthenticationMethodInfo = {\n    method: AuthenticationMethod.QueryString,\n    name: \"access_token\"\n};\n\nexport interface OmvRestClientParameters {\n    /**\n     * `URL` pattern used to fetch tile files.\n     *\n     * `URL` with special keywords replaced to retrieve specific tile:\n     *  - `{z}` - zoom level of tile, @see [[TileKey.level]]\n     *  - `{x}` - horizontal coordinate of tile (column number), @see [[TileKey.column]]\n     *  - `{y}` - vertical coordinate of Tile (row number), @see [[TileKey.row]]\n     *\n     * Examples of `url` patterns:\n     * ```\n     *   https://my-base-url.com/vector-tiles/{z}/{x}/{y}.mvt\n     *   https://xyz.api.here.com/tiles/herebase.02/{z}/{x}/{y}/omv\n     *   https://xyz.api.here.com/tiles/osmbase/512/all/{z}/{x}/{y}.mvt\n     * ```\n     *\n     * Note: To add authentication headers and/or query params, use [[authMethod]], [[urlParams]]\n     * properties or embed token directly in `url`.\n     *\n     * Complete examples:\n     * ```\n     * // XYZ OSM with authentication using query param\n     * {\n     *     url: \"https://xyz.api.here.com/tiles/osmbase/512/all/{z}/{x}/{y}.mvt\",\n     *     urlParams: {\n     *           access_token: accessToken\n     *     },\n     * }\n     * // HERE Vector Tile with authentication using bearer token retrieved by callback\n     * {\n     *     url: \"https://vector.hereapi.com/v2/vectortiles/base/mc/{z}/{x}/{y}/omv\",\n     *     authenticationMethod: AuthenticationTypeBearer,\n     *     authenticationCode: () => getBearerToken()\n     * }\n     * ```\n     */\n    url?: string;\n\n    /**\n     * The base URL of the REST Tile Service.\n     * @see [[APIFormat]] for the definition of `baseUrl`.\n     */\n    baseUrl?: string;\n\n    /**\n     * Authentication code used for the different APIs.\n     *\n     * When [[AuthenticationCodeProvider]] is is used as value, the provider is called before each\n     * to get currently valid authentication code/token.\n     *\n     * @see [[APIFormat]] for the query parameter this is used with.\n     */\n    authenticationCode?: string | AuthenticationCodeProvider;\n\n    /**\n     * Specifies [[AuthMethod]] to be used when requesting tiles.\n     *\n     * Defaults for each [[APIFormat]] are documented with each format type.\n     */\n    authenticationMethod?: AuthenticationMethodInfo;\n\n    /**\n     * The REST API format to use for the tile path generation, will default to the HERE Vector Tile\n     * API.\n     */\n    apiFormat?: APIFormat;\n\n    /**\n     * Tiling scheme is used in some of the APIs, not implemented yet.\n     */\n    tilingScheme?: TilingScheme;\n\n    /**\n     * Transfer Manager to use; creates an own instance if none passed.\n     */\n    downloadManager?: TransferManager;\n\n    /**\n     * Function to retrieve the Bearer Token\n     *\n     * @deprecated Please use [[authenticationCode]].\n     */\n    getBearerToken?: () => Promise<string>;\n\n    /**\n     * Array of query parameters to be appended at the end of the url.\n     * It is empty by default.\n     */\n    urlParams?: { [key: string]: string };\n}\n\n/**\n * REST client supporting getting protobuf OMV Tile from REST-based servers.\n */\nexport class OmvRestClient implements DataProvider {\n    private readonly downloadManager: TransferManager;\n    private readonly urlParams: { [key: string]: string };\n\n    constructor(readonly params: OmvRestClientParameters) {\n        this.downloadManager =\n            params.downloadManager === undefined\n                ? TransferManager.instance()\n                : params.downloadManager;\n        this.urlParams = params.urlParams === undefined ? {} : params.urlParams;\n    }\n\n    /** Overriding abstract method, in this case doing nothing. */\n    async connect(): Promise<void> {\n        // not needed\n    }\n\n    /** Overriding abstract method, in this case always returning `true`. */\n    ready(): boolean {\n        return true;\n    }\n\n    /**\n     * Asynchronously fetches a tile from this restful server.\n     *\n     * **Note:** If the tile doesn't exist, a successful response with a `404` status code is\n     * returned.\n     *\n     * @example\n     * ```typescript\n     * const response = layer.getTile(tileKey);\n     * if (!response.ok) {\n     *     // a network error happened\n     *     console.error(\"Unable to download tile\", response.statusText);\n     *     return;\n     * }\n     * if (response.status === 404) {\n     *     // 404 -, no data exists at the given tile. Do nothing.\n     *     return;\n     * }\n     *\n     * // the response is ok and contains data, access it e.g. as arrayBuffer:\n     * const payload = await response.arrayBuffer();\n     * ```\n     *\n     * @param tileKey The tile key of the tile.\n     * @param tileRequestInit Optional request options to be passed to fetch when downloading a\n     * tile.\n     * @returns A `Promise` of the HTTP response that contains the payload of the requested tile.\n     */\n    async getTile(\n        tileKey: TileKey,\n        abortSignal?: AbortSignal | undefined\n    ): Promise<ArrayBufferLike | {}> {\n        const init: RequestInit = { signal: abortSignal };\n\n        let tileUrl = this.dataUrl(tileKey);\n\n        const authenticationCode = await this.getActualAuthenticationCode();\n\n        tileUrl = this.applyAuthCode(tileUrl, init, authenticationCode);\n        tileUrl = this.addQueryParams(tileUrl, this.urlParams);\n\n        if (this.params.apiFormat === APIFormat.XYZJson) {\n            return this.downloadManager.downloadJson(tileUrl, init);\n        }\n\n        return this.downloadManager.downloadArrayBuffer(tileUrl, init);\n    }\n\n    /**\n     * Get actual authentication code/token for this request according to configuration.\n     */\n    private async getActualAuthenticationCode() {\n        if (typeof this.params.authenticationCode === \"string\") {\n            return this.params.authenticationCode;\n        } else if (this.params.authenticationCode !== undefined) {\n            return this.params.authenticationCode();\n            // tslint:disable-next-line: deprecation\n        } else if (this.params.getBearerToken !== undefined) {\n            // tslint:disable-next-line: deprecation\n            return this.params.getBearerToken();\n        } else {\n            return undefined;\n        }\n    }\n\n    /**\n     * Get default authnentication method basing on apiFormat and other params.\n     */\n    private getDefaultAuthMethod() {\n        // tslint:disable-next-line: deprecation\n        if (this.params.getBearerToken !== undefined) {\n            return AuthenticationTypeBearer;\n        }\n\n        switch (this.params.apiFormat) {\n            case APIFormat.HereV1:\n                return AuthenticationTypeBearer;\n            case APIFormat.MapboxV4:\n            case APIFormat.XYZOMV:\n            case APIFormat.XYZMVT:\n            case APIFormat.XYZSpace:\n            case APIFormat.XYZJson:\n                return AuthenticationTypeAccessToken;\n            case APIFormat.TomtomV1:\n                return AuthenticationTypeTomTomV1;\n            default:\n                logger.warn(\n                    `#getDefaultAuthMethod: Not supported API format: ${this.params.apiFormat}`\n                );\n                return undefined;\n        }\n    }\n\n    /**\n     * Apply athentication code/token using configured (or default) authentication method.\n     *\n     * @param url\n     * @param init request extra data\n     * @param authenticationCode authentication/token to be applied\n     * @return new url to be used\n     */\n    private applyAuthCode(url: string, init: RequestInit, authenticationCode: string | undefined) {\n        if (authenticationCode === undefined) {\n            return url;\n        }\n        const authMethod = this.params.authenticationMethod || this.getDefaultAuthMethod();\n        if (authMethod === undefined) {\n            return url;\n        }\n\n        if (authMethod.method === AuthenticationMethod.AuthorizationHeader) {\n            if (init.headers === undefined) {\n                init.headers = new Headers();\n            }\n            const authType = authMethod.name || \"Bearer\";\n            (init.headers as Headers).append(\"Authorization\", `${authType} ${authenticationCode}`);\n        } else if (authMethod.method === AuthenticationMethod.QueryString) {\n            const attrName: string = authMethod.name || \"access_token\";\n            const authParams: { [key: string]: string } = {};\n            authParams[attrName] = authenticationCode;\n            url = this.addQueryParams(url, authParams);\n        }\n        return url;\n    }\n\n    /**\n     * Get actual tile URL depending on configured API format.\n     */\n    private dataUrl(tileKey: TileKey): string {\n        if (this.params.url !== undefined) {\n            return this.params.url\n                .replace(\"{x}\", String(tileKey.column))\n                .replace(\"{y}\", String(tileKey.row))\n                .replace(\"{z}\", String(tileKey.level));\n        }\n        let path = [`/${tileKey.level}`, tileKey.column, tileKey.row].join(\n            this.params.apiFormat === APIFormat.XYZSpace ||\n                this.params.apiFormat === APIFormat.XYZJson\n                ? \"_\"\n                : \"/\"\n        );\n        switch (this.params.apiFormat) {\n            case APIFormat.HereV1:\n            case APIFormat.XYZOMV:\n                path += \"/omv\";\n                break;\n            case APIFormat.MapboxV4:\n                path += \".mvt\";\n                break;\n            case APIFormat.XYZMVT:\n                path += \".mvt\";\n                break;\n            case APIFormat.XYZJson:\n                break;\n            case APIFormat.XYZSpace:\n                path += \".mvt\";\n                break;\n            case APIFormat.TomtomV1:\n                path += \".pbf\";\n                break;\n            default:\n                logger.warn(`Not supported API format: ${this.params.apiFormat}`);\n                break;\n        }\n\n        return this.params.baseUrl + path;\n    }\n\n    private addQueryParams(url: string, queryParams: { [key: string]: string }): string {\n        let queryString = \"\";\n        let concatinator = url.indexOf(\"?\") !== -1 ? \"&\" : \"?\";\n        Object.getOwnPropertyNames(queryParams).forEach(property => {\n            const prop = property as keyof typeof queryParams;\n            queryString += concatinator + prop + \"=\" + queryParams[prop];\n            if (concatinator === \"?\") {\n                concatinator = \"&\";\n            }\n        });\n        return url + queryString;\n    }\n}\n","/*\n * Copyright (C) 2017-2020 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\n// tslint:disable-next-line:no-implicit-dependencies\nimport { Theme } from \"@here/harp-datasource-protocol\";\nimport { GeoCoordinates } from \"@here/harp-geoutils\";\nimport { MapView, MapViewEventNames, MapViewUtils } from \"@here/harp-mapview\";\nimport { APIFormat, AuthenticationMethod, OmvDataSource } from \"@here/harp-omv-datasource\";\nimport { apikey, copyrightInfo } from \"../../@here/harp-examples/config\";\n\n// tslint:disable-next-line:no-var-requires\nconst theme = require(\"../resources/theme.json\");\n\nimport \"../css/index.css\";\n\nconst s3Base = \"https://www.harp.gl/docs/\";\n\n//Update initial links to s3 base\ndocument.querySelector<HTMLAnchorElement>(\".examples-link\")!.href = s3Base + \"master/examples/\";\ndocument.querySelector<HTMLAnchorElement>(\".docs-link\")!.href = s3Base + \"master/doc/\";\ndocument.querySelector<HTMLAnchorElement>(\"#docs-nav\")!.href = s3Base + \"master/doc/\";\ndocument.querySelector<HTMLAnchorElement>(\"#examples-nav\")!.href = s3Base + \"master/examples/\";\ndocument.querySelector<HTMLAnchorElement>(\"#docs-nav-mobile\")!.href = s3Base + \"master/doc/\";\n\n//Update year\n(document.getElementById(\"year\") as HTMLDivElement).innerText = `${new Date().getFullYear()}`;\n\nconst releases = [\n    {\n        date: \"latest\",\n        hash: \"master\",\n        version: \"latest-dev\"\n    }\n];\nconst dropdown = document.querySelector(\"select[name=versions]\") as HTMLSelectElement;\n\nfetch(\"./releases.json\")\n    .then(res => res.json())\n    .then(res => {\n        releases.push(...res);\n        releases.forEach(release => {\n            const option = document.createElement(\"option\");\n            option.innerText = release.version;\n            dropdown.appendChild(option);\n        });\n\n        dropdown.onchange = () => {\n            const selected = dropdown.querySelector<HTMLOptionElement>(\"option:checked\")!;\n            const release = releases.find(x => x.version === selected.innerText);\n            if (!release) {\n                return;\n            }\n            const hash = release.hash;\n            const version = release.version;\n\n            //Update examples button and link\n            document.querySelector<HTMLAnchorElement>(\".examples-link\")!.href =\n                s3Base + hash + \"/examples/\";\n            document.querySelector<HTMLAnchorElement>(\".examples-link\")!.innerText =\n                \"Examples\" + (hash !== \"master\" ? ` (${version})` : \"\");\n\n            //Update docs button and link\n            document.querySelector<HTMLAnchorElement>(\".docs-link\")!.href = s3Base + hash + \"/doc/\";\n            document.querySelector<HTMLAnchorElement>(\".docs-link\")!.innerText =\n                \"Documentation\" + (hash !== \"master\" ? ` (${version})` : \"\");\n        };\n    })\n    .catch(() => {\n        //In case network request to build information fails, add master link\n        const option = document.createElement(\"option\");\n        option.innerText = \"master\";\n        dropdown.appendChild(option);\n    });\n\nfunction main() {\n    const canvas = document.getElementById(\"map\") as HTMLCanvasElement;\n    const map = new MapView({\n        canvas,\n        decoderUrl: \"decoder.bundle.js\",\n        theme: (theme as unknown) as Theme,\n        maxVisibleDataSourceTiles: 40,\n        enableMixedLod: false,\n        tileCacheSize: 100\n    });\n    map.animatedExtrusionHandler.enabled = false;\n\n    const omvDataSource = new OmvDataSource({\n        baseUrl: \"https://vector.hereapi.com/v2/vectortiles/base/mc\",\n        apiFormat: APIFormat.XYZOMV,\n        styleSetName: \"tilezen\",\n        authenticationCode: apikey,\n        authenticationMethod: {\n            method: AuthenticationMethod.QueryString,\n            name: \"apikey\"\n        },\n        copyrightInfo\n    });\n    map.addDataSource(omvDataSource);\n\n    map.resize(window.innerWidth, 500);\n    window.addEventListener(\"resize\", () => map.resize(window.innerWidth, 500));\n\n    const zoomLevel = MapViewUtils.calculateZoomLevelFromDistance(map, 1400);\n    const Boston = new GeoCoordinates(42.361145, -71.057083);\n    const options = { target: Boston, zoomLevel, tilt: 34.3, heading: 135 };\n    map.lookAt(options);\n\n    map.addEventListener(MapViewEventNames.FrameComplete, () => {\n        canvas.style.opacity = \"1\";\n\n        map.addEventListener(MapViewEventNames.Render, () =>\n            map.lookAt({ heading: map.heading + 0.1 })\n        );\n        setTimeout(() => {\n            map.beginAnimation();\n        }, 0.5);\n    });\n}\n\nmain();\n","/*\n * Copyright (C) 2020 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * Represents an object that carry [[GeoBox]] extents like interface.\n */\nexport interface GeoBoxExtentLike {\n    /**\n     * Latitude span in degrees.\n     */\n    readonly latitudeSpan: number;\n\n    /**\n     * Longitude span in degrees\n     */\n    readonly longitudeSpan: number;\n}\n\n/**\n * Type guard to assert that `object` conforms to [[GeoBoxExtentLike]] interface.\n */\nexport function isGeoBoxExtentLike(obj: any): obj is GeoBoxExtentLike {\n    return (\n        obj &&\n        typeof obj === \"object\" &&\n        typeof obj.latitudeSpan === \"number\" &&\n        typeof obj.longitudeSpan === \"number\"\n    );\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { GeoBox } from \"../coordinates/GeoBox\";\nimport { GeoCoordinates } from \"../coordinates/GeoCoordinates\";\nimport { GeoCoordinatesLike } from \"../coordinates/GeoCoordinatesLike\";\nimport { Box3Like, isBox3Like } from \"../math/Box3Like\";\nimport { MathUtils } from \"../math/MathUtils\";\nimport { isOrientedBox3Like, OrientedBox3Like } from \"../math/OrientedBox3Like\";\nimport { Vector3Like } from \"../math/Vector3Like\";\nimport { Projection, ProjectionType } from \"./Projection\";\n\nimport * as THREE from \"three\";\n\nclass IdentityProjection extends Projection {\n    /** @override */\n    readonly type: ProjectionType = ProjectionType.Planar;\n\n    /** @override */\n    getScaleFactor(_worldPoint: Vector3Like): number {\n        return 1;\n    }\n\n    /** @override */\n    worldExtent<WorldBoundingBox extends Box3Like>(\n        minAltitude: number,\n        maxAltitude: number,\n        result?: WorldBoundingBox\n    ): WorldBoundingBox {\n        if (!result) {\n            result = (new THREE.Box3() as Box3Like) as WorldBoundingBox;\n        }\n        result.min.x = -Math.PI;\n        result.min.y = -Math.PI * 0.5;\n        result.min.z = minAltitude;\n        result.max.x = Math.PI;\n        result.max.y = Math.PI * 0.5;\n        result.max.z = maxAltitude;\n        return result;\n    }\n\n    /** @override */\n    projectPoint<WorldCoordinates extends Vector3Like>(\n        geoPoint: GeoCoordinatesLike,\n        result?: WorldCoordinates\n    ): WorldCoordinates {\n        if (!result) {\n            // tslint:disable-next-line:no-object-literal-type-assertion\n            result = { x: 0, y: 0, z: 0 } as WorldCoordinates;\n        }\n        result.x = THREE.MathUtils.degToRad(geoPoint.longitude);\n        result.y = THREE.MathUtils.degToRad(geoPoint.latitude);\n        result.z = geoPoint.altitude || 0;\n        return result;\n    }\n\n    /** @override */\n    unprojectPoint(worldPoint: Vector3Like): GeoCoordinates {\n        const geoPoint = GeoCoordinates.fromRadians(worldPoint.y, worldPoint.x, worldPoint.z);\n        return geoPoint;\n    }\n\n    /** @override */\n    unprojectAltitude(worldPoint: Vector3Like): number {\n        return worldPoint.z;\n    }\n\n    /** @override */\n    projectBox<WorldBoundingBox extends Box3Like | OrientedBox3Like>(\n        geoBox: GeoBox,\n        result?: WorldBoundingBox\n    ): WorldBoundingBox {\n        if (!result) {\n            result = (new THREE.Box3() as Box3Like) as WorldBoundingBox;\n        }\n        const min = this.projectPoint(\n            new GeoCoordinates(geoBox.south, geoBox.west, geoBox.minAltitude)\n        );\n        const max = this.projectPoint(\n            new GeoCoordinates(geoBox.north, geoBox.east, geoBox.maxAltitude)\n        );\n        if (isBox3Like(result)) {\n            result.min.x = min.x;\n            result.min.y = min.y;\n            result.min.z = min.z;\n            result.max.x = max.x;\n            result.max.y = max.y;\n            result.max.z = max.z;\n        } else if (isOrientedBox3Like(result)) {\n            MathUtils.newVector3(1, 0, 0, result.xAxis);\n            MathUtils.newVector3(0, 1, 0, result.yAxis);\n            MathUtils.newVector3(0, 0, 1, result.zAxis);\n            result.position.x = (min.x + max.x) * 0.5;\n            result.position.y = (min.y + max.y) * 0.5;\n            result.position.z = (min.z + max.z) * 0.5;\n            result.extents.x = (max.x - min.x) * 0.5;\n            result.extents.y = (max.y - min.y) * 0.5;\n            result.extents.z = Math.max(Number.EPSILON, (max.z - min.z) * 0.5);\n        }\n        return result;\n    }\n\n    /** @override */\n    unprojectBox(worldBox: Box3Like): GeoBox {\n        const minGeo = this.unprojectPoint(worldBox.min);\n        const maxGeo = this.unprojectPoint(worldBox.max);\n        return GeoBox.fromCoordinates(minGeo, maxGeo);\n    }\n\n    /** @override */\n    groundDistance(worldPoint: Vector3Like): number {\n        return worldPoint.z;\n    }\n\n    /** @override */\n    scalePointToSurface(worldPoint: Vector3Like): Vector3Like {\n        worldPoint.z = 0;\n        return worldPoint;\n    }\n\n    /** @override */\n    surfaceNormal(_worldPoint: Vector3Like, normal?: Vector3Like) {\n        if (normal === undefined) {\n            normal = { x: 0, y: 0, z: 1 };\n        } else {\n            normal.x = 0;\n            normal.y = 0;\n            normal.z = 1;\n        }\n        return normal;\n    }\n}\n\n/**\n * Identity [[Projection]] used to convert geo coordinates to unit coordinates and vice versa.\n */\nexport const identityProjection: Projection = new IdentityProjection(1);\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { GeoBox } from \"../coordinates/GeoBox\";\nimport { GeoCoordinates } from \"../coordinates/GeoCoordinates\";\nimport { GeoCoordinatesLike } from \"../coordinates/GeoCoordinatesLike\";\nimport { Box3Like, isBox3Like } from \"../math/Box3Like\";\nimport { MathUtils } from \"../math/MathUtils\";\nimport { isOrientedBox3Like, OrientedBox3Like } from \"../math/OrientedBox3Like\";\nimport { TransformLike } from \"../math/TransformLike\";\nimport { Vector3Like } from \"../math/Vector3Like\";\nimport { EarthConstants } from \"./EarthConstants\";\nimport { mercatorProjection, webMercatorProjection } from \"./MercatorProjection\";\nimport { Projection, ProjectionType } from \"./Projection\";\n\nimport * as THREE from \"three\";\n\n/**\n * Transforms the given vector using the provided basis.\n */\nfunction apply(\n    xAxis: Vector3Like,\n    yAxis: Vector3Like,\n    zAxis: Vector3Like,\n    v: Vector3Like\n): Vector3Like {\n    const x = xAxis.x * v.x + yAxis.x * v.y + zAxis.x * v.z;\n    const y = xAxis.y * v.x + yAxis.y * v.y + zAxis.y * v.z;\n    const z = xAxis.z * v.x + yAxis.z * v.y + zAxis.z * v.z;\n    v.x = x;\n    v.y = y;\n    v.z = z;\n    return v;\n}\n\n/**\n * Returns the quadrants for the given longitude. The quadrant is defined as:\n *  - quadrant(+Math.PI * -1.0) = 0\n *  - quadrant(+Math.PI * -0.5) = 1\n *  - quadrant(+Math.PI *  0.0) = 2\n *  - quadrant(+Math.PI *  0.5) = 3\n *  - quadrant(+Math.PI *  1.0) = 4\n *\n * @param longitude The longitude in radians.\n */\nfunction getLongitudeQuadrant(longitude: number) {\n    const oneOverPI = 1 / Math.PI;\n    const quadrantIndex = Math.floor(2 * (longitude * oneOverPI + 1));\n    return THREE.MathUtils.clamp(quadrantIndex, 0, 4);\n}\n\nfunction lengthOfVector3(worldPoint: Vector3Like): number {\n    const d = Math.sqrt(\n        worldPoint.x * worldPoint.x + worldPoint.y * worldPoint.y + worldPoint.z * worldPoint.z\n    );\n    return d;\n}\n\n/**\n * Creates a Box3 enclosing the geobox.\n *\n * @param geoBox Ghe given geobox\n * @param worldBox The resulting axis aligned bounding box.\n */\nfunction makeBox3<Bounds extends Box3Like>(\n    geoBox: GeoBox,\n    worldBox: Bounds,\n    unitScale: number\n): Bounds {\n    const halfEquatorialRadius = (unitScale + (geoBox.maxAltitude || 0)) * 0.5;\n\n    const minLongitude = THREE.MathUtils.degToRad(geoBox.west);\n    const maxLongitude = THREE.MathUtils.degToRad(geoBox.east);\n\n    const minLongitudeQuadrant = getLongitudeQuadrant(minLongitude);\n    const maxLongitudeQuadrant = getLongitudeQuadrant(maxLongitude);\n\n    let xMin = Math.cos(minLongitude);\n    let xMax = xMin;\n    let yMin = Math.sin(minLongitude);\n    let yMax = yMin;\n\n    for (\n        let quadrantIndex = minLongitudeQuadrant + 1;\n        quadrantIndex <= maxLongitudeQuadrant;\n        quadrantIndex++\n    ) {\n        // tslint:disable-next-line: no-bitwise\n        const x = ((quadrantIndex + 1) & 1) * ((quadrantIndex & 2) - 1);\n        xMin = Math.min(x, xMin);\n        xMax = Math.max(x, xMax);\n\n        // tslint:disable-next-line: no-bitwise\n        const y = (quadrantIndex & 1) * ((quadrantIndex & 2) - 1);\n        yMin = Math.min(y, yMin);\n        yMax = Math.max(y, yMax);\n    }\n\n    const cosMaxLongitude = Math.cos(maxLongitude);\n    xMin = Math.min(cosMaxLongitude, xMin);\n    xMax = Math.max(cosMaxLongitude, xMax);\n\n    const sinMaxLongitude = Math.sin(maxLongitude);\n    yMin = Math.min(sinMaxLongitude, yMin);\n    yMax = Math.max(sinMaxLongitude, yMax);\n\n    const xCenter = (xMax + xMin) * halfEquatorialRadius;\n    const xExtent = (xMax - xMin) * halfEquatorialRadius;\n\n    const yCenter = (yMax + yMin) * halfEquatorialRadius;\n    const yExtent = (yMax - yMin) * halfEquatorialRadius;\n\n    // Calculate Z boundaries.\n    const minLatitude = THREE.MathUtils.degToRad(geoBox.south);\n    const maxLatutide = THREE.MathUtils.degToRad(geoBox.north);\n\n    const zMax = Math.sin(maxLatutide);\n    const zMin = Math.sin(minLatitude);\n\n    const zCenter = (zMax + zMin) * halfEquatorialRadius;\n    const zExtent = (zMax - zMin) * halfEquatorialRadius;\n\n    worldBox.min.x = xCenter - xExtent;\n    worldBox.min.y = yCenter - yExtent;\n    worldBox.min.z = zCenter - zExtent;\n    worldBox.max.x = xCenter + xExtent;\n    worldBox.max.y = yCenter + yExtent;\n    worldBox.max.z = zCenter + zExtent;\n\n    return worldBox;\n}\n\n/**\n * Computes the spherical projection of the given geo coordinates.\n *\n * @param geoPoint The geo coordinates.\n * @param worldpoint The resulting world coordinates.\n */\nfunction project<WorldCoordinates extends Vector3Like>(\n    geoPoint: GeoCoordinatesLike,\n    worldpoint: WorldCoordinates,\n    unitScale: number\n): typeof worldpoint {\n    const radius = unitScale + (geoPoint.altitude || 0);\n    const latitude = THREE.MathUtils.degToRad(geoPoint.latitude);\n    const longitude = THREE.MathUtils.degToRad(geoPoint.longitude);\n    const cosLatitude = Math.cos(latitude);\n    worldpoint.x = radius * cosLatitude * Math.cos(longitude);\n    worldpoint.y = radius * cosLatitude * Math.sin(longitude);\n    worldpoint.z = radius * Math.sin(latitude);\n    return worldpoint;\n}\n\nclass SphereProjection extends Projection {\n    /** @override */\n    readonly type: ProjectionType = ProjectionType.Spherical;\n\n    /** @override */\n    worldExtent<Bounds extends Box3Like>(\n        _minElevation: number,\n        maxElevation: number,\n        result: Bounds = (new THREE.Box3() as Box3Like) as Bounds\n    ): Bounds {\n        const radius = this.unitScale + maxElevation;\n        result.min.x = -radius;\n        result.min.y = -radius;\n        result.min.z = -radius;\n        result.max.x = radius;\n        result.max.y = radius;\n        result.max.z = radius;\n        return result;\n    }\n\n    /** @override */\n    projectPoint<WorldCoordinates extends Vector3Like>(\n        geoPoint: GeoCoordinatesLike,\n        result: WorldCoordinates = MathUtils.newVector3(0, 0, 0) as WorldCoordinates\n    ): WorldCoordinates {\n        return project(geoPoint, result, this.unitScale);\n    }\n\n    /** @override */\n    unprojectPoint(point: Vector3Like): GeoCoordinates {\n        const parallelRadiusSq = point.x * point.x + point.y * point.y;\n        const parallelRadius = Math.sqrt(parallelRadiusSq);\n        const v = point.z / parallelRadius;\n\n        if (isNaN(v)) {\n            return GeoCoordinates.fromRadians(0, 0, -this.unitScale);\n        }\n\n        const radius = Math.sqrt(parallelRadiusSq + point.z * point.z);\n\n        return GeoCoordinates.fromRadians(\n            Math.atan(v),\n            Math.atan2(point.y, point.x),\n            radius - this.unitScale\n        );\n    }\n\n    /** @override */\n    unprojectAltitude(point: Vector3Like): number {\n        const parallelRadiusSq = point.x * point.x + point.y * point.y + point.z * point.z;\n        return Math.sqrt(parallelRadiusSq) - EarthConstants.EQUATORIAL_RADIUS;\n    }\n\n    /** @override */\n    projectBox<Bounds extends Box3Like | OrientedBox3Like>(\n        geoBox: GeoBox,\n        result: Bounds = (new THREE.Box3() as Box3Like) as Bounds\n    ): Bounds {\n        if (isBox3Like(result)) {\n            return makeBox3(geoBox, result, this.unitScale);\n        } else if (isOrientedBox3Like(result)) {\n            if (geoBox.longitudeSpan >= 90) {\n                const bounds = makeBox3(geoBox, new THREE.Box3() as Box3Like, this.unitScale);\n                MathUtils.newVector3(1, 0, 0, result.xAxis);\n                MathUtils.newVector3(0, 1, 0, result.yAxis);\n                MathUtils.newVector3(0, 0, 1, result.zAxis);\n                result.position.x = (bounds.max.x + bounds.min.x) * 0.5;\n                result.position.y = (bounds.max.y + bounds.min.y) * 0.5;\n                result.position.z = (bounds.max.z + bounds.min.z) * 0.5;\n                result.extents.x = (bounds.max.x - bounds.min.x) * 0.5;\n                result.extents.y = (bounds.max.y - bounds.min.y) * 0.5;\n                result.extents.z = (bounds.max.z - bounds.min.z) * 0.5;\n                return result;\n            }\n\n            const { south, west, north, east, center: mid } = geoBox;\n            const midX = mid.longitude;\n            const midY = mid.latitude;\n            const cosSouth = Math.cos(THREE.MathUtils.degToRad(south));\n            const sinSouth = Math.sin(THREE.MathUtils.degToRad(south));\n            const cosWest = Math.cos(THREE.MathUtils.degToRad(west));\n            const sinWest = Math.sin(THREE.MathUtils.degToRad(west));\n            const cosNorth = Math.cos(THREE.MathUtils.degToRad(north));\n            const sinNorth = Math.sin(THREE.MathUtils.degToRad(north));\n            const cosEast = Math.cos(THREE.MathUtils.degToRad(east));\n            const sinEast = Math.sin(THREE.MathUtils.degToRad(east));\n            const cosMidX = Math.cos(THREE.MathUtils.degToRad(midX));\n            const sinMidX = Math.sin(THREE.MathUtils.degToRad(midX));\n            const cosMidY = Math.cos(THREE.MathUtils.degToRad(midY));\n            const sinMidY = Math.sin(THREE.MathUtils.degToRad(midY));\n\n            // Build the orientation of the OBB using the normal vector and its partial derivates.\n\n            // the sperical coordinates of the mid point of the geobox.\n            MathUtils.newVector3(cosMidX * cosMidY, sinMidX * cosMidY, sinMidY, result.zAxis);\n\n            // the partial derivates of the normal vector.\n            MathUtils.newVector3(-sinMidX, cosMidX, 0, result.xAxis);\n            MathUtils.newVector3(-cosMidX * sinMidY, -sinMidX * sinMidY, cosMidY, result.yAxis);\n\n            let width: number;\n            let minY: number;\n            let maxY: number;\n\n            if (south >= 0) {\n                // abs(dot(southWest - southEast, xAxis))\n                width = Math.abs(\n                    cosSouth * (cosMidX * (sinWest - sinEast) + sinMidX * (cosEast - cosWest))\n                );\n\n                // dot(south, yAxis)\n                minY = cosMidY * sinSouth - sinMidY * cosSouth;\n\n                // dot(northEast, zAxis)\n                maxY =\n                    cosMidY * sinNorth -\n                    sinMidY * cosNorth * (cosMidX * cosEast + sinMidX * sinEast);\n            } else {\n                if (north <= 0) {\n                    // abs(dot(northWest - northEast, xAxis))\n                    width = Math.abs(\n                        cosNorth * (cosMidX * (sinWest - sinEast) + sinMidX * (cosEast - cosWest))\n                    );\n\n                    // dot(north, yAxis)\n                    maxY = cosMidY * sinNorth - sinMidY * cosNorth;\n                } else {\n                    // abs(dot(west - east, xAxis))\n                    width = Math.abs(cosMidX * (sinWest - sinEast) + sinMidX * (cosEast - cosWest));\n\n                    // dot(northEast, yAxis)\n                    maxY =\n                        cosMidY * sinNorth -\n                        sinMidY * cosNorth * (sinMidX * sinEast + cosMidX * cosEast);\n                }\n\n                // dot(southEast, yAxis)\n                minY =\n                    cosMidY * sinSouth -\n                    sinMidY * cosSouth * (cosMidX * cosEast + sinMidX * sinEast);\n            }\n\n            const rMax = (this.unitScale + (geoBox.maxAltitude || 0)) * 0.5;\n            const rMin = (this.unitScale + (geoBox.minAltitude || 0)) * 0.5;\n\n            // min(dot(southEast, zAxis), dot(northEast, zAxis))\n\n            const d = cosMidY * (cosMidX * cosEast + sinMidX * sinEast);\n\n            const minZ = Math.min(\n                cosNorth * d + sinNorth * sinMidY,\n                cosSouth * d + sinSouth * sinMidY\n            );\n\n            MathUtils.newVector3(\n                width * rMax,\n                (maxY - minY) * rMax,\n                rMax - minZ * rMin,\n                result.extents\n            );\n\n            MathUtils.newVector3(0, (minY + maxY) * rMax, rMax + rMax, result.position);\n\n            apply(result.xAxis, result.yAxis, result.zAxis, result.position);\n\n            result.position.x = result.position.x - result.zAxis.x * result.extents.z;\n            result.position.y = result.position.y - result.zAxis.y * result.extents.z;\n            result.position.z = result.position.z - result.zAxis.z * result.extents.z;\n\n            return result;\n        }\n\n        throw new Error(\"Invalid bounding box\");\n    }\n\n    /** @override */\n    unprojectBox(_worldBox: Box3Like): GeoBox {\n        throw new Error(\"Method not implemented.\");\n    }\n\n    /** @override */\n    getScaleFactor(_worldPoint: Vector3Like): number {\n        return 1;\n    }\n\n    /** @override */\n    groundDistance(worldPoint: Vector3Like): number {\n        return lengthOfVector3(worldPoint) - this.unitScale;\n    }\n\n    /** @override */\n    scalePointToSurface(worldPoint: Vector3Like): Vector3Like {\n        const scale = this.unitScale / (lengthOfVector3(worldPoint) || 1);\n        worldPoint.x *= scale;\n        worldPoint.y *= scale;\n        worldPoint.z *= scale;\n        return worldPoint;\n    }\n\n    /** @override */\n    surfaceNormal(worldPoint: Vector3Like, normal?: Vector3Like) {\n        if (normal === undefined) {\n            normal = { x: 0, y: 0, z: 0 };\n        }\n        const scale = 1 / (lengthOfVector3(worldPoint) || 1);\n        normal.x = worldPoint.x * scale;\n        normal.y = worldPoint.y * scale;\n        normal.z = worldPoint.z * scale;\n        return normal;\n    }\n\n    /** @override */\n    reprojectPoint(\n        sourceProjection: Projection,\n        worldPos: Vector3Like,\n        result?: Vector3Like\n    ): Vector3Like {\n        if (sourceProjection === mercatorProjection || sourceProjection === webMercatorProjection) {\n            const { x, y, z } = worldPos;\n            const r = this.unitScale;\n            const mx = x / r - Math.PI;\n            const my = y / r - Math.PI;\n            const w = Math.exp(my);\n            const d = w * w;\n            const gx = (2 * w) / (d + 1);\n            const gy = (d - 1) / (d + 1);\n            const scale = r + z;\n\n            if (result === undefined) {\n                // tslint:disable-next-line: no-object-literal-type-assertion\n                result = {} as Vector3Like;\n            }\n\n            result.x = Math.cos(mx) * gx * scale;\n            result.y = Math.sin(mx) * gx * scale;\n            result.z = gy * scale;\n\n            if (sourceProjection === webMercatorProjection) {\n                result.z = -result.z;\n            }\n\n            return result;\n        }\n\n        return super.reprojectPoint(sourceProjection, worldPos, result!);\n    }\n\n    /** @override */\n    localTangentSpace(geoPoint: GeoCoordinatesLike, result: TransformLike): TransformLike {\n        const latitude = THREE.MathUtils.degToRad(geoPoint.latitude);\n        const longitude = THREE.MathUtils.degToRad(geoPoint.longitude);\n\n        const cosLongitude = Math.cos(longitude);\n        const sinLongitude = Math.sin(longitude);\n        const cosLatitude = Math.cos(latitude);\n        const sinLatitude = Math.sin(latitude);\n\n        MathUtils.newVector3(\n            cosLongitude * cosLatitude,\n            sinLongitude * cosLatitude,\n            sinLatitude,\n            result.zAxis\n        );\n\n        MathUtils.newVector3(-sinLongitude, cosLongitude, 0, result.xAxis);\n\n        MathUtils.newVector3(\n            -cosLongitude * sinLatitude,\n            -sinLongitude * sinLatitude,\n            cosLatitude,\n            result.yAxis\n        );\n\n        this.projectPoint(geoPoint, result.position);\n\n        return result;\n    }\n}\n\nexport const sphereProjection: Projection = new SphereProjection(EarthConstants.EQUATORIAL_RADIUS);\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { GeoBox } from \"../coordinates/GeoBox\";\nimport { TileKey } from \"./TileKey\";\nimport { TilingScheme } from \"./TilingScheme\";\n\n/**\n * A class used to represent a quadtree.\n */\nexport class QuadTree {\n    /**\n     * Constructs a new `QuadTree` for the given [[TilingScheme]].\n     *\n     * Example:\n     * ```typescript\n     * const quadTree = new QuadTree(hereTilingScheme);\n     * const geoBox = quadTree.getGeoBox(tileKey);\n     * console.log(geoBox.center);\n     * ```\n     *\n     * @param tilingScheme The TilingScheme used by this `QuadTree`.\n     */\n    constructor(readonly tilingScheme: TilingScheme) {}\n\n    /**\n     * Visits this `QuadTree` and invoke the given accept method with the current [[TileKey]] and\n     * its bounding box in geo coordinates.\n     *\n     * Example:\n     * ```typescript\n     * const geoPos = new GeoCoordinates(latitude, longitude);\n     * const quadTree = new QuadTree(hereTilingScheme);\n     * quadTree.visit((tileKey, geoBox) => {\n     *     if (geoBox.contains(geoPos)) {\n     *         console.log(\"tile\", tileKey, \"contains\", geoPos);\n     *         return tileKey.level < 14; // stop visiting the quadtree if the level is >= 14.\n     *     }\n     *     return false; // stop visiting the quadtree,\n     *                   // the tile's geoBox doesn't contain the given coordinates.\n     * });\n     * ```\n     *\n     * @param accept A function that takes a [[TileKey]] and its bounding box in geo coordinates and\n     * returns `true` if the visit of the `QuadTree` should continue; otherwise `false`.\n     */\n    visit(accept: (tileKey: TileKey, geoBox: GeoBox) => boolean) {\n        this.visitTileKey(TileKey.fromRowColumnLevel(0, 0, 0), accept);\n    }\n\n    /**\n     * Visits the subtree starting from the given tile.\n     *\n     * @param tileKey The root of the subtree that should be visited.\n     * @param accept A function that takes a [[TileKey]] and its bounding box in geo coordinates and\n     * returns `true` if the visit of the `QuadTree` should continue; otherwise `false`.\n     */\n    visitTileKey(tileKey: TileKey, accept: (tileKey: TileKey, geoBox: GeoBox) => boolean) {\n        const geoBox = this.tilingScheme.getGeoBox(tileKey);\n\n        if (!accept(tileKey, geoBox)) {\n            return;\n        }\n\n        for (const subTileKey of this.tilingScheme.getSubTileKeys(tileKey)) {\n            this.visitTileKey(subTileKey, accept);\n        }\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { normalizedEquirectangularProjection } from \"../projection/EquirectangularProjection\";\nimport { halfQuadTreeSubdivisionScheme } from \"./HalfQuadTreeSubdivisionScheme\";\nimport { TilingScheme } from \"./TilingScheme\";\n\n/**\n * [[TilingScheme]] used by most of the data published by HERE.\n *\n * The `hereTilingScheme` features a half quadtree subdivision scheme and an equirectangular\n * projection.\n */\nexport const hereTilingScheme = new TilingScheme(\n    halfQuadTreeSubdivisionScheme,\n    normalizedEquirectangularProjection\n);\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { webMercatorProjection } from \"../projection/MercatorProjection\";\nimport { quadTreeSubdivisionScheme } from \"./QuadTreeSubdivisionScheme\";\nimport { TilingScheme } from \"./TilingScheme\";\n\n/**\n * A [[TilingScheme]] featuring quadtree subdivision scheme and web Mercator projection.\n */\nexport const webMercatorTilingScheme = new TilingScheme(\n    quadTreeSubdivisionScheme,\n    webMercatorProjection\n);\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { mercatorProjection } from \"../projection/MercatorProjection\";\nimport { quadTreeSubdivisionScheme } from \"./QuadTreeSubdivisionScheme\";\nimport { TilingScheme } from \"./TilingScheme\";\n\n/**\n * The [[TilingScheme]] used by the HERE web tiles.\n *\n * The `mercatorTilingScheme` features a quadtree subdivision scheme and a Mercator projection.\n */\nexport const mercatorTilingScheme = new TilingScheme(quadTreeSubdivisionScheme, mercatorProjection);\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { transverseMercatorProjection } from \"../projection/TransverseMercatorProjection\";\nimport { quadTreeSubdivisionScheme } from \"./QuadTreeSubdivisionScheme\";\nimport { TilingScheme } from \"./TilingScheme\";\n\n/**\n * A [[TilingScheme]] featuring quadtree subdivision scheme and\n * transverse Mercator projection.\n */\nexport const polarTilingScheme = new TilingScheme(\n    quadTreeSubdivisionScheme,\n    transverseMercatorProjection\n);\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * Interface representing a Vector3.\n */\nexport interface Vector3Like {\n    /**\n     * The X position.\n     */\n    x: number;\n\n    /**\n     * The Y position.\n     */\n    y: number;\n\n    /**\n     * The Z position.\n     */\n    z: number;\n}\n\nexport function isVector3Like(v: any): v is Vector3Like {\n    return v && typeof v.x === \"number\" && typeof v.y === \"number\" && typeof v.z === \"number\";\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { Vector3Like } from \"./Vector3Like\";\n\n/**\n * The interface [[TransformLike]] is used to represent transforms with\n * only translation and rotation.\n */\nexport interface TransformLike {\n    /**\n     * The position of this transform.\n     */\n    readonly position: Vector3Like;\n\n    /**\n     * The x-axis of this transform.\n     */\n    readonly xAxis: Vector3Like;\n\n    /**\n     * The y-axis of this transform.\n     */\n    readonly yAxis: Vector3Like;\n\n    /**\n     * The z-axis of this transform.\n     */\n    readonly zAxis: Vector3Like;\n}\n\n/**\n * Returns true if the given object implements the interface [[TransformLike]].\n *\n * @param object The object.\n */\nexport function isTransformLike(object: {}): object is TransformLike {\n    const transform = object as Partial<TransformLike>;\n    return (\n        transform.position !== undefined &&\n        transform.xAxis !== undefined &&\n        transform.yAxis !== undefined &&\n        transform.zAxis !== undefined\n    );\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { Frustum, Matrix4, Plane, Ray, Vector3 } from \"three\";\nimport { OrientedBox3Like } from \"./OrientedBox3Like\";\n\nfunction intersectsSlab(\n    rayDir: Vector3,\n    p: Vector3,\n    axis: Vector3,\n    extent: number,\n    t: { min: number; max: number }\n): boolean {\n    const epsilon = 1e-20;\n    const e = axis.dot(p);\n    const f = axis.dot(rayDir);\n    if (Math.abs(f) < epsilon) {\n        // ray parallel to near/far slab lines.\n        return Math.abs(e) <= extent;\n    }\n\n    // ray intersects near/far slab lines.\n    const finv = 1 / f;\n    const t1 = (e + extent) * finv;\n    const t2 = (e - extent) * finv;\n    if (t1 > t2) {\n        // t1 is far intersect, t2 is near.\n        if (t2 > t.min) {\n            t.min = t2;\n        }\n        if (t1 < t.max) {\n            t.max = t1;\n        }\n    } else {\n        // t1 is near intersect, t2 is far.\n        if (t1 > t.min) {\n            t.min = t1;\n        }\n        if (t2 < t.max) {\n            t.max = t2;\n        }\n    }\n    return t.min <= t.max && t.max >= 0;\n}\n\nconst tmpVec = new Vector3();\nconst tmpT = { min: -Infinity, max: Infinity };\n\nexport class OrientedBox3 implements OrientedBox3Like {\n    /**\n     * The position of the center of this `OrientedBox3`.\n     */\n    readonly position = new Vector3();\n\n    /**\n     * The x-axis of this `OrientedBox3`.\n     */\n    readonly xAxis = new Vector3(1, 0, 0);\n\n    /**\n     * The y-axis of this `OrientedBox3`.\n     */\n    readonly yAxis = new Vector3(0, 1, 0);\n\n    /**\n     * The z-axis of this `OrientedBox3`.\n     */\n    readonly zAxis = new Vector3(0, 0, 1);\n\n    /**\n     * The extents of this `OrientedBox3`.\n     */\n    readonly extents = new Vector3();\n\n    /**\n     * Creates a new `OrientedBox3`.\n     */\n    constructor();\n\n    /**\n     * Creates a new `OrientedBox3` with the given position, orientation and extents.\n     *\n     * @param position The position of the center of the `OrientedBox3`.\n     * @param rotationMatrix The rotation of the `OrientedBox3`.\n     * @param extents The extents of the `OrientedBox3`.\n     */\n    constructor(position: Vector3, rotationMatrix: Matrix4, extents: Vector3);\n\n    /**\n     * Creates a new `OrientedBox3`.\n     *\n     * @hideconstructor\n     */\n    constructor(position?: Vector3, rotationMatrix?: Matrix4, extents?: Vector3) {\n        if (position !== undefined) {\n            this.position.copy(position);\n        }\n\n        if (rotationMatrix !== undefined) {\n            rotationMatrix.extractBasis(this.xAxis, this.yAxis, this.zAxis);\n        }\n\n        if (extents !== undefined) {\n            this.extents.copy(extents);\n        }\n    }\n\n    /**\n     * Create a copy of this [[OrientedBoundingBox]].\n     */\n    clone(): OrientedBox3 {\n        const newBox = new OrientedBox3();\n        newBox.copy(this);\n        return newBox;\n    }\n\n    /**\n     * Copies the values of `other` to this [[OrientedBox3]].\n     * @param other The other [[OrientedBox3]] to copy.\n     */\n    copy(other: OrientedBox3) {\n        this.position.copy(other.position);\n        this.xAxis.copy(other.xAxis);\n        this.yAxis.copy(other.yAxis);\n        this.zAxis.copy(other.zAxis);\n        this.extents.copy(other.extents);\n    }\n\n    /**\n     * Gets the center position of this [[OrientedBox3]].\n     *\n     * @param center The returned center position.\n     */\n    getCenter(center = new Vector3()): Vector3 {\n        return center.copy(this.position);\n    }\n\n    /**\n     * Gets the size of this [[OrientedBox3]].\n     *\n     * @param size The returned size.\n     */\n    getSize(size = new Vector3()): Vector3 {\n        return size.copy(this.extents).multiplyScalar(2);\n    }\n\n    /**\n     * Gets the orientation matrix of this `OrientedBox3`.\n     * @param matrix The output orientation matrix.\n     */\n    getRotationMatrix(matrix: Matrix4 = new Matrix4()): Matrix4 {\n        return matrix.makeBasis(this.xAxis, this.yAxis, this.zAxis);\n    }\n\n    /**\n     * Checks intersection with the given `THREE.Frustum` or array of `THREE.Plane`s.\n     *\n     * @param frustumOrPlanes Frustum or array of planes.\n     */\n    intersects(frustumOrPlanes: Plane[] | Frustum): boolean {\n        const planes: Plane[] = Array.isArray(frustumOrPlanes)\n            ? frustumOrPlanes\n            : frustumOrPlanes.planes;\n\n        for (const plane of planes) {\n            const r =\n                Math.abs(plane.normal.dot(this.xAxis) * this.extents.x) +\n                Math.abs(plane.normal.dot(this.yAxis) * this.extents.y) +\n                Math.abs(plane.normal.dot(this.zAxis) * this.extents.z);\n\n            const d = plane.distanceToPoint(this.position);\n\n            if (d + r < 0) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n\n    /**\n     * Checks intersection with the given ray.\n     *\n     * @param ray The ray to test.\n     * @returns distance from ray origin to intersection point if it exist, undefined otherwise.\n     */\n    intersectsRay(ray: Ray): number | undefined {\n        // Slabs intersection algorithm.\n        tmpT.min = -Infinity;\n        tmpT.max = Infinity;\n        tmpVec.copy(this.position).sub(ray.origin);\n        if (!intersectsSlab(ray.direction, tmpVec, this.xAxis, this.extents.x, tmpT)) {\n            return undefined;\n        }\n        if (!intersectsSlab(ray.direction, tmpVec, this.yAxis, this.extents.y, tmpT)) {\n            return undefined;\n        }\n        if (!intersectsSlab(ray.direction, tmpVec, this.zAxis, this.extents.z, tmpT)) {\n            return undefined;\n        }\n\n        return tmpT.min > 0 ? tmpT.min : tmpT.max;\n    }\n\n    /**\n     * Returns true if this [[OrientedBox3]] contains the given point.\n     *\n     * @param point A valid point.\n     */\n    contains(point: Vector3): boolean {\n        const dx = point.x - this.position.x;\n        const dy = point.y - this.position.y;\n        const dz = point.z - this.position.z;\n        const x = Math.abs(dx * this.xAxis.x + dy * this.xAxis.y + dz * this.xAxis.z);\n        const y = Math.abs(dx * this.yAxis.x + dy * this.yAxis.y + dz * this.yAxis.z);\n        const z = Math.abs(dx * this.zAxis.x + dy * this.zAxis.y + dz * this.zAxis.z);\n        if (x > this.extents.x || y > this.extents.y || z > this.extents.z) {\n            return false;\n        }\n        return true;\n    }\n\n    /**\n     * Returns the distance from this [[OrientedBox3]] and the given `point`.\n     *\n     * @param point A point.\n     */\n    distanceToPoint(point: Vector3): number {\n        return Math.sqrt(this.distanceToPointSquared(point));\n    }\n\n    /**\n     * Returns the squared distance from this [[OrientedBox3]] and the given `point`.\n     *\n     * @param point A point.\n     */\n    distanceToPointSquared(point: Vector3): number {\n        const d = new Vector3();\n        d.subVectors(point, this.position);\n\n        const lengths = [d.dot(this.xAxis), d.dot(this.yAxis), d.dot(this.zAxis)];\n\n        let result = 0;\n\n        for (let i = 0; i < 3; ++i) {\n            const length = lengths[i];\n            const extent = this.extents.getComponent(i);\n            if (length < -extent) {\n                const dd = extent + length;\n                result += dd * dd;\n            } else if (length > extent) {\n                const dd = length - extent;\n                result += dd * dd;\n            }\n        }\n\n        return result;\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport * as THREE from \"three\";\nimport { enforceBlending } from \"./Utils\";\n\nconst vertexShader: string = `\nuniform float size;\n\nvoid main() {\n    vec3 transformed = vec3(position);\n    vec4 mvPosition = modelViewMatrix * vec4(transformed, 1.0);\n\n    gl_Position = projectionMatrix * mvPosition;\n    gl_PointSize = size;\n}\n`;\n\nconst fragmentShader: string = `\nuniform vec3 diffuse;\nuniform float opacity;\n\nvoid main() {\n    float alpha = opacity;\n\n    float radius = 0.5;\n    vec2 coords = gl_PointCoord.xy - vec2(0.5);\n    float len = length(coords);\n    float falloff = fwidth(len);\n    float threshold = 1.0 - smoothstep(radius - falloff, radius, len);\n    alpha *= threshold;\n\n    gl_FragColor = vec4(diffuse, alpha);\n}`;\n\n/**\n * Parameters used when constructing a new [[HighPrecisionPointMaterial]].\n */\nexport interface CirclePointsMaterialParameters extends THREE.ShaderMaterialParameters {\n    /**\n     * Point size.\n     */\n    size?: number;\n\n    /**\n     * Point color.\n     */\n    color?: THREE.Color;\n}\n\n/**\n * Material designed to render circle points. Note that it is always transparent since the circle\n * shape is created with an alpha channel to benefit an antialising that a mere `discard` could\n * not bring.\n */\nexport class CirclePointsMaterial extends THREE.ShaderMaterial {\n    static readonly DEFAULT_CIRCLE_SIZE = 1;\n\n    private m_color: THREE.Color;\n    private m_opacity: number;\n\n    /**\n     * Constructs a new `CirclePointsMaterial`.\n     *\n     * @param parameters The constructor's parameters.\n     */\n    constructor(parameters: CirclePointsMaterialParameters = {}) {\n        const { size, color, opacity, ...shaderParams } = parameters;\n        shaderParams.name = \"CirclePointsMaterial\";\n        shaderParams.vertexShader = vertexShader;\n        shaderParams.fragmentShader = fragmentShader;\n        shaderParams.uniforms = {\n            size: new THREE.Uniform(CirclePointsMaterial.DEFAULT_CIRCLE_SIZE),\n            diffuse: new THREE.Uniform(new THREE.Color()),\n            opacity: new THREE.Uniform(1.0)\n        };\n        shaderParams.depthTest = false;\n        shaderParams.extensions = {\n            ...shaderParams.extensions,\n            derivatives: true\n        };\n\n        super(shaderParams);\n        // Blending needs to always be enabled to support smooth edges\n        enforceBlending(this);\n\n        this.type = \"CirclePointsMaterial\";\n        this.m_color = this.uniforms.diffuse.value;\n        this.m_opacity = this.uniforms.opacity.value;\n\n        if (size !== undefined) {\n            this.size = size;\n        }\n        if (color !== undefined) {\n            this.color = color;\n        }\n        if (opacity !== undefined) {\n            this.opacity = opacity;\n        }\n    }\n\n    /**\n     * Gets the circle screen size.\n     */\n    get size(): number {\n        return this.uniforms.size.value;\n    }\n\n    /**\n     * Sets the circle screen size.\n     */\n    set size(size: number) {\n        this.uniforms.size.value = size;\n    }\n\n    /**\n     * Get circle opacity.\n     */\n    get opacity(): number {\n        return this.m_opacity;\n    }\n\n    /**\n     * Set circle opacity.\n     */\n    set opacity(opacity: number) {\n        this.m_opacity = opacity;\n\n        // Base constructor may set opacity before uniform being created.\n        if (this.uniforms && this.uniforms.opacity) {\n            this.uniforms.opacity.value = opacity;\n        }\n    }\n\n    /**\n     * Gets the diffuse.\n     */\n    get color(): THREE.Color {\n        return this.m_color;\n    }\n\n    /**\n     * Sets the diffuse.\n     */\n    set color(color: THREE.Color) {\n        this.m_color.set(color);\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nexport * from \"./lib/GroupedPriorityList\";\nexport * from \"./lib/Logger\";\nexport * from \"./lib/Math2D\";\nexport * from \"./lib/MathUtils\";\nexport * from \"./lib/Mixins\";\nexport * from \"./lib/assert\";\nexport * from \"./lib/CachedResource\";\nexport * from \"./lib/ContextLogger\";\nexport * from \"./lib/PerformanceTimer\";\nexport * from \"./lib/ObjectUtils\";\nexport * from \"./lib/OptionsUtils\";\nexport * from \"./lib/UriResolver\";\nexport * from \"./lib/UrlUtils\";\nexport * from \"./lib/Functions\";\nexport * from \"./lib/SampleBilinear\";\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * A `PriorityListElement` has a priority to assist in sorting. The idea is that the items in a\n * grouped priority list will not modify their priority during processing to such an amount, that\n * they will change into another group. Smaller lists are smaller to sort, and in case of resource\n * limitation (maximum number of rendered objects reached), not all items have to be sorted at all.\n */\nexport interface PriorityListElement {\n    /**\n     * The integer value of this priority is used to group objects of \"same\" priority.\n     */\n    priority: number;\n}\n\n/**\n * The `PriorityListGroup` contains a list of [[PriorityListElement]]s that all have the same\n * (integer) priority.\n */\nexport class PriorityListGroup<T extends PriorityListElement> {\n    constructor(readonly priority: number, public elements: T[] = new Array()) {}\n\n    /**\n     * Create and return a deep copy of the `PriorityListGroup<T>`.\n     *\n     * @returns A clone of the `PriorityListGroup<T>`.\n     */\n    clone(): PriorityListGroup<T> {\n        return new PriorityListGroup<T>(this.priority, this.elements.slice());\n    }\n\n    /**\n     * Removes an element from the group.\n     * @param element The element to remove.\n     * @returns true if the element was removed, false if it was not found in the group.\n     */\n    remove(element: T): boolean {\n        const foundIndex = this.elements.indexOf(element);\n        if (foundIndex === -1) {\n            return false;\n        }\n        this.elements.splice(foundIndex, 1);\n        return true;\n    }\n}\n\n/**\n * The `PriorityListGroupMap` is a map to map the (integer) priority to a [[PriorityListGroup]].\n */\nexport type PriorityListGroupMap<T extends PriorityListElement> = Map<number, PriorityListGroup<T>>;\n\n/**\n * The `GroupedPriorityList` contains a [[PriorityListGroupMap]] to manage a larger number of items\n * in priority groups.\n */\nexport class GroupedPriorityList<T extends PriorityListElement> {\n    readonly groups: PriorityListGroupMap<T> = new Map();\n    /**\n     * Add an element to the `GroupedPriorityList`. Selects group based on the elements priority.\n     *\n     * @param element Element to be added.\n     */\n    add(element: T): void {\n        this.getGroup(element.priority).elements.push(element);\n    }\n\n    /**\n     * Remove an element from the `GroupedPriorityList`.\n     *\n     * Note: It is required that the priority is the same as it was when the element has been added.\n     * Otherwise, the removal will fail.\n     *\n     * @param element Element to be removed.\n     * @returns `True` if the element was removed, `false` otherwise.\n     */\n    remove(element: T): boolean {\n        const group = this.findGroup(element.priority);\n        if (group !== undefined && group.remove(element)) {\n            if (group.elements.length === 0) {\n                this.groups.delete(group.priority);\n            }\n\n            return true;\n        }\n        return false;\n    }\n\n    /**\n     * Remove all internal [[PriorityListGroup]]s.\n     */\n    clear(): void {\n        this.groups.clear();\n    }\n\n    /**\n     * Merge another [[GroupedPriorityList]] into this one.\n     *\n     * @param other Other group to merge.\n     */\n    merge(other: GroupedPriorityList<T>): GroupedPriorityList<T> {\n        for (const otherGroup of other.groups) {\n            const group = this.findGroup(otherGroup[1].priority);\n            if (group === undefined) {\n                this.groups.set(Math.floor(otherGroup[1].priority), otherGroup[1].clone());\n                continue;\n            }\n            group.elements = group.elements.concat(otherGroup[1].elements);\n        }\n        return this;\n    }\n\n    clone(): GroupedPriorityList<T> {\n        const clone = new GroupedPriorityList<T>();\n        for (const [priority, group] of this.groups) {\n            clone.groups.set(priority, group.clone());\n        }\n        return clone;\n    }\n\n    /**\n     * Apply function to all elements in this `GroupedPriorityList`.\n     *\n     * @param {(element: T) => void} fun Function to apply.\n     */\n    forEach(fun: (element: T) => void): void {\n        for (const group of this.groups) {\n            group[1].elements.forEach(fun);\n        }\n    }\n\n    /**\n     * Count the number of elements in this `GroupedPriorityList`.\n     */\n    count(): number {\n        let n = 0;\n        for (const group of this.groups) {\n            n += group[1].elements.length;\n        }\n        return n;\n    }\n\n    /**\n     * Get group of elements that have the same (integer) priority.\n     *\n     * @param priority The priority to retrieve all elements from.\n     */\n    private findGroup(priority: number): PriorityListGroup<T> | undefined {\n        const normalizedPriority = Math.floor(priority);\n        const group = this.groups.get(normalizedPriority);\n        return group;\n    }\n\n    /**\n     * Get group of elements that have the same (integer) priority.\n     *\n     * @param priority The priority to retrieve all elements from.\n     */\n    private getGroup(priority: number): PriorityListGroup<T> {\n        let group = this.findGroup(priority);\n\n        if (group === undefined) {\n            const normalizedPriority = Math.floor(priority);\n            group = new PriorityListGroup<T>(normalizedPriority);\n            this.groups.set(group.priority, group);\n        }\n\n        return group;\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nexport * from \"./ConsoleChannel\";\nexport * from \"./IChannel\";\nexport * from \"./ILogger\";\nexport * from \"./Logger\";\nexport * from \"./LoggerManager\";\nexport * from \"./MultiChannel\";\nexport * from \"./WorkerChannel\";\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { ILoggerManager } from \"./ILoggerManager\";\nimport { LoggerManagerImpl } from \"./LoggerManagerImpl\";\n\n/**\n * The LoggerManager class implements a singleton object that handles logging.\n *\n * Example:\n *\n * ```typescript\n *\n * const logger = LoggerManager.instance.create(\"MyFontLoaderClass\");\n * if (missingFonts.length > 0) {\n *     logger.error(\"These fonts can not be loaded: \", missingFonts);\n * } else {\n *     logger.log(\"All fonts have been loaded.\");\n * }\n * ```\n */\nexport class LoggerManager {\n    private static m_instance: ILoggerManager;\n\n    static get instance(): ILoggerManager {\n        return this.m_instance || (this.m_instance = new LoggerManagerImpl());\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { ConsoleChannel } from \"./ConsoleChannel\";\nimport { IChannel } from \"./IChannel\";\nimport { ILogger, LoggerOptions, LogLevel } from \"./ILogger\";\nimport { ILoggerManager } from \"./ILoggerManager\";\nimport { Logger } from \"./Logger\";\nimport { WorkerChannel } from \"./WorkerChannel\";\n\n/**\n * LoggerManagerImpl is the class for the singleton instance of the logger manager.\n * It handles channels and loggers.\n */\n\nexport class LoggerManagerImpl implements ILoggerManager {\n    channel: IChannel;\n    private readonly m_loggers: ILogger[] = [];\n    private m_levelSetForAll?: LogLevel;\n\n    constructor() {\n        this.channel =\n            typeof self === \"undefined\" || typeof self.document !== \"undefined\"\n                ? new ConsoleChannel()\n                : new WorkerChannel();\n    }\n\n    getLoggerNames(): string[] {\n        return this.m_loggers.map(logger => logger.name);\n    }\n\n    getLogger(name: string): ILogger | undefined {\n        return this.m_loggers.find(logger => logger.name === name);\n    }\n\n    create(loggerName: string, options: LoggerOptions = {}): ILogger {\n        if (\n            this.m_levelSetForAll !== undefined &&\n            (options.level === undefined || options.level < this.m_levelSetForAll)\n        ) {\n            options.level = this.m_levelSetForAll;\n        }\n        const logger = new Logger(loggerName, this.channel, options);\n        this.m_loggers.push(logger);\n        return logger;\n    }\n\n    dispose(logger: ILogger) {\n        const found = this.m_loggers.indexOf(logger);\n        if (found < 0) {\n            throw new Error(`Cannot unregister \"${logger}\" : no such logger registered.`);\n        }\n        this.m_loggers.splice(found, 1);\n    }\n\n    updateAll(options: LoggerOptions) {\n        for (const logger of this.m_loggers) {\n            logger.update(options);\n        }\n    }\n\n    update(loggerName: string, config: LoggerOptions) {\n        for (const logger of this.m_loggers) {\n            if (logger.name === loggerName) {\n                logger.update(config);\n            }\n        }\n    }\n\n    enableAll(enabled: boolean) {\n        for (const logger of this.m_loggers) {\n            logger.enabled = enabled;\n        }\n    }\n\n    enable(loggerName: string, value: boolean) {\n        this.update(loggerName, { enabled: value });\n    }\n\n    setLogLevelForAll(level: LogLevel) {\n        this.m_levelSetForAll = level;\n        for (const logger of this.m_loggers) {\n            logger.level = level;\n        }\n    }\n\n    setLogLevel(loggerName: string, level: LogLevel) {\n        this.update(loggerName, { level });\n    }\n\n    setChannel(channel: IChannel) {\n        this.channel = channel;\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { IChannel } from \"./IChannel\";\n\n/**\n * Class allowing mixing several channels.\n */\nexport class MultiChannel implements IChannel {\n    private readonly channels: IChannel[] = [];\n    constructor(...channels: IChannel[]) {\n        this.channels = channels;\n    }\n\n    error(message?: any, ...optionalParams: any[]) {\n        for (const channel of this.channels) {\n            channel.error(message, ...optionalParams);\n        }\n    }\n\n    debug(message?: any, ...optionalParams: any[]) {\n        for (const channel of this.channels) {\n            channel.debug(message, ...optionalParams);\n        }\n    }\n\n    info(message?: any, ...optionalParams: any[]) {\n        for (const channel of this.channels) {\n            channel.info(message, ...optionalParams);\n        }\n    }\n\n    log(message?: any, ...optionalParams: any[]) {\n        for (const channel of this.channels) {\n            channel.log(message, ...optionalParams);\n        }\n    }\n\n    trace(message?: any, ...optionalParams: any[]) {\n        for (const channel of this.channels) {\n            channel.trace(message, ...optionalParams);\n        }\n    }\n\n    warn(message?: any, ...optionalParams: any[]) {\n        for (const channel of this.channels) {\n            channel.warn(message, ...optionalParams);\n        }\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nexport namespace Math2D {\n    /**\n     * Alternative 2D box object with less memory impact (four numbers instead of two min/max\n     * objects with two numbers each). Should be faster.\n     */\n    export class Box {\n        /**\n         * Alternative 2D box object with less memory impact (four numbers instead of two min/max\n         * objects with two numbers each). Should be faster.\n         *\n         * @param x New X value.\n         * @param y New y value.\n         * @param w New w value.\n         * @param h New h value.\n         */\n        constructor(public x = 0, public y = 0, public w = 0, public h = 0) {}\n\n        /**\n         * Set new values to all properties of the box.\n         *\n         * @param x New X value.\n         * @param y New y value.\n         * @param w New w value.\n         * @param h New h value.\n         */\n        set(x: number, y: number, w: number, h: number) {\n            this.x = x;\n            this.y = y;\n            this.w = w;\n            this.h = h;\n        }\n\n        /**\n         * Test box for inclusion of point.\n         *\n         * @param x X coordinate of point.\n         * @param y Y coordinate of point.\n         */\n        contains(x: number, y: number): boolean {\n            return this.x <= x && this.x + this.w >= x && this.y <= y && this.y + this.h >= y;\n        }\n\n        /**\n         * Test box for inclusion of another box.\n         *\n         * @param other Box 2 to test for inclusion.\n         */\n        containsBox(other: Box): boolean {\n            const xmax = other.x + other.w;\n            const ymax = other.y + other.h;\n            return (\n                this.contains(other.x, other.y) &&\n                this.contains(xmax, other.y) &&\n                this.contains(other.x, ymax) &&\n                this.contains(xmax, ymax)\n            );\n        }\n\n        /**\n         * Test two boxes for intersection.\n         *\n         * @param other Box 2 to test for intersection.\n         */\n        intersects(other: Box): boolean {\n            return (\n                this.x <= other.x + other.w &&\n                this.x + this.w >= other.x &&\n                this.y <= other.y + other.h &&\n                this.y + this.h >= other.y\n            );\n        }\n    }\n\n    /**\n     * Box to store UV coordinates.\n     */\n    export interface UvBox {\n        s0: number;\n        t0: number;\n        s1: number;\n        t1: number;\n    }\n\n    /**\n     * Compute squared distance between two 2D points `a` and `b`.\n     *\n     * @param ax Point a.x\n     * @param ay Point a.y\n     * @param bx Point b.x\n     * @param by Point b.y\n     * @returns Squared distance between the two points\n     */\n    export function distSquared(ax: number, ay: number, bx: number, by: number): number {\n        return (ax - bx) * (ax - bx) + (ay - by) * (ay - by);\n    }\n\n    /**\n     * Computes the squared length of a line.\n     *\n     * @param line An array of that forms a line via [x,y,z,x,y,z,...] tuples.\n     */\n    export function computeSquaredLineLength(line: number[]): number {\n        let squaredLineLength: number = 0;\n\n        const length = line.length - 4;\n        for (let i = 0; i < length; i += 3) {\n            const xDiff = line[i + 3] - line[i];\n            const yDiff = line[i + 4] - line[i + 1];\n            squaredLineLength += xDiff * xDiff + yDiff * yDiff;\n        }\n        return squaredLineLength;\n    }\n\n    /**\n     * Compute squared distance between a 2D point and a 2D line segment.\n     *\n     * @param px Test point X\n     * @param py Test point y\n     * @param l0x Line segment start X\n     * @param l0y Line segment start Y\n     * @param l1x Line segment end X\n     * @param l1y Line segment end Y\n     * @returns Squared distance between point and line segment\n     */\n    export function distToSegmentSquared(\n        px: number,\n        py: number,\n        l0x: number,\n        l0y: number,\n        l1x: number,\n        l1y: number\n    ): number {\n        const lineLengthSuared = distSquared(l0x, l0y, l1x, l1y);\n        if (lineLengthSuared === 0) {\n            return distSquared(px, py, l0x, l0y);\n        }\n        let t = ((px - l0x) * (l1x - l0x) + (py - l0y) * (l1y - l0y)) / lineLengthSuared;\n        t = Math.max(0, Math.min(1, t));\n        return distSquared(px, py, l0x + t * (l1x - l0x), l0y + t * (l1y - l0y));\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nexport namespace MathUtils {\n    /**\n     * Ensures that input value fits in a given range.\n     *\n     * @param value The value to be clamped.\n     * @param min Minimum value.\n     * @param max Maximum value.\n     *\n     * @returns Clamped value.\n     */\n    export function clamp(value: number, min: number, max: number): number {\n        return value < min ? min : value > max ? max : value;\n    }\n\n    /**\n     * Returns a linear interpolation between the values of edge0 and edge1 based on the factor.\n     *\n     * Given two known points the linear interpolant between these points may be presented as\n     * straight line. This means that for given factor change the resulting change of return\n     * value is always const.\n     * @see https://en.wikipedia.org/wiki/Linear_interpolation\n     *\n     * @param edge0\n     * @param edge1\n     * @param factor Interpolation factor that ranges between: 0 <= x <= 1.\n     */\n    export function lerp(edge0: number, edge1: number, factor: number): number {\n        return edge0 * (1 - factor) + edge1 * factor;\n    }\n\n    /**\n     * Returns a smooth interpolation between the values edge0 and edge1 based on the interpolation\n     * factor x. `0 <= x <= 1`.\n     * @see https://en.wikipedia.org/wiki/Smoothstep\n     *\n     * @param edge0\n     * @param edge1\n     * @param x\n     */\n    export function smoothStep(edge0: number, edge1: number, x: number) {\n        // Scale, bias and saturate x to 0..1 range\n        x = clamp((x - edge0) / (edge1 - edge0), 0.0, 1.0);\n        // Evaluate polynomial\n        return x * x * (3 - 2 * x);\n    }\n\n    /**\n     * Returns a smooth interpolation between the values edge0 and edge1 based on the interpolation\n     * factor x. `0 <= x <= 1`.\n     *\n     * Improved version by Ken Perlin, which has zero 1st- and 2nd-order derivatives at `x = 0` and\n     * `x = 1`:\n     *\n     * @see https://en.wikipedia.org/wiki/Smoothstep\n     *\n     * @param edge0\n     * @param edge1\n     * @param x\n     */\n    export function smootherStep(edge0: number, edge1: number, x: number) {\n        // Scale, and clamp x to 0..1 range\n        x = clamp((x - edge0) / (edge1 - edge0), 0.0, 1.0);\n        // Evaluate polynomial\n        return x * x * x * (x * (x * 6 - 15) + 10);\n    }\n\n    /**\n     * Maps a number from one range to another.\n     *\n     * @param val The incoming value to be converted.\n     * @param inMin Lower bound of the value's current range.\n     * @param inMax Upper bound of the value's current range.\n     * @param outMin Lower bound of the value's target range.\n     * @param outMax Upper bound of the value's target range.\n     */\n    export function map(val: number, inMin: number, inMax: number, outMin: number, outMax: number) {\n        return ((val - inMin) * (outMax - outMin)) / (inMax - inMin) + outMin;\n    }\n\n    /**\n     * Returns the smaller of the two given numbers. Both numbers may be undefined, in which case\n     * the result is undefined. If only one of the numbers is undefined, the other number is\n     * returned.\n     *\n     * @param a First number.\n     * @param b Second number.\n     */\n    export function min2(a: number | undefined, b: number | undefined): number | undefined {\n        let result: number | undefined;\n\n        if (a !== undefined) {\n            result = a;\n        }\n        if (b !== undefined) {\n            result = result === undefined ? b : Math.min(result, b);\n        }\n\n        return result;\n    }\n\n    /**\n     * Returns the larger of the two given numbers. Both numbers may be undefined, in which case\n     * the result is undefined. If only one of the numbers is undefined, the other number is\n     * returned.\n     *\n     * @param a First number.\n     * @param b Second number.\n     */\n    export function max2(a: number | undefined, b: number | undefined): number | undefined {\n        let result: number | undefined;\n\n        if (a !== undefined) {\n            result = a;\n        }\n        if (b !== undefined) {\n            result = result === undefined ? b : Math.max(result, b);\n        }\n\n        return result;\n    }\n\n    /**\n     * Checks if the value of a given number is inside an upper or lower bound. The bounds may be\n     * undefined, in which case their value is ignored.\n     *\n     * @param value Value to check.\n     * @param lowerBound The lower bound to check the value against.\n     * @param upperBound The upper bound to check the value against.\n     *\n     * @returns `true` if value is inside the bounds or if the bounds are `undefined`, `false`\n     *          otherwise.\n     */\n    export function isClamped(\n        value: number,\n        lowerBound: number | undefined,\n        upperBound: number | undefined\n    ): boolean {\n        if (lowerBound !== undefined && value < lowerBound) {\n            return false;\n        }\n        if (upperBound !== undefined && value > upperBound) {\n            return false;\n        }\n        return true;\n    }\n\n    /**\n     * Smoothly interpolates between two values using cubic formula\n     *\n     * @param startValue\n     * @param endValue\n     * @param time\n     * @returns Result of the interpolation within the range of `[startValue, endValue]`\n     */\n    export function easeInOutCubic(startValue: number, endValue: number, time: number): number {\n        const timeValue =\n            time < 0.5 ? 4 * time * time * time : (time - 1) * (2 * time - 2) * (2 * time - 2) + 1;\n        return startValue + (endValue - startValue) * timeValue;\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * Copy methods and properties from one prototype into another.\n *\n * @see https://www.typescriptlang.org/docs/handbook/mixins.html\n *\n * @param derivedCtor Class to mix methods and properties into.\n * @param baseCtors Class to take all methods and properties from.\n */\nexport function applyMixins(derivedCtor: any, baseCtors: any[]) {\n    baseCtors.forEach(baseCtor => {\n        Object.getOwnPropertyNames(baseCtor.prototype).forEach(name => {\n            derivedCtor.prototype[name] = baseCtor.prototype[name];\n        });\n    });\n}\n\n/**\n * Copy methods from one prototype into another.\n *\n * @see https://www.typescriptlang.org/docs/handbook/mixins.html\n *\n * @param derivedCtor Class to mix methods into.\n * @param baseCtors Class to take all methods from.\n */\nexport function applyMixinsWithoutProperties(derivedCtor: any, baseCtors: any[]) {\n    baseCtors.forEach(baseCtor => {\n        Object.getOwnPropertyNames(baseCtor.prototype).forEach(name => {\n            const descriptor = Object.getOwnPropertyDescriptor(baseCtor.prototype, name);\n            if (\n                descriptor !== undefined &&\n                descriptor.get === undefined &&\n                name !== \"constructor\"\n            ) {\n                derivedCtor.prototype[name] = baseCtor.prototype[name];\n            }\n        });\n    });\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\ndeclare const process: any;\n\n// cache value, because access to process.env.NODE_ENV is SLOW!\nconst isProduction = process.env.NODE_ENV === \"production\";\n\n//TODO: Make assertHandler configurable\n\n/**\n * Implementation of assert as a development help\n *\n * Note - this is deliberately a global function so that minimizers remove the\n * entire call when building for production.\n *\n * @hidden\n * @param condition Condition to match, if false, throws an Error(message)\n * @param message Optional message, defaults to \"ASSERTION failed\"\n */\nexport function assert(condition: boolean, message?: string): void {\n    if (!isProduction) {\n        if (!condition) {\n            throw new Error(message !== undefined ? message : \"ASSERTION failed\");\n        }\n    }\n}\n\nexport function assertExists<T>(element: T | undefined, message?: string): T {\n    if (!isProduction) {\n        if (element === undefined || element === null) {\n            throw new Error(\n                message !== undefined ? message : \"ASSERTION failed: Element is undefined or null\"\n            );\n        }\n    }\n    return element!;\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * Refinement of `console` interface only for important information i.e `info`, `warn` and `errors`.\n */\nexport interface ISimpleChannel {\n    info(message?: any, ...optionalParams: any[]): void;\n    warn(message?: any, ...optionalParams: any[]): void;\n    error(message?: any, ...optionalParams: any[]): void;\n}\n\n/**\n * Extension of [[ISimpleChannel]] to support contextual logging by adding stack of prefixes.\n */\nexport interface IContextLogger extends ISimpleChannel {\n    /**\n     * Push \"attribute-like\" context.\n     */\n    pushAttr(name: string): void;\n\n    /**\n     * Push \"index-like\" context.\n     *\n     * Following log messages will be prefixed with `[index]`.\n     */\n    pushIndex(index: string | number): void;\n\n    /**\n     * Remove current context from top of stack.\n     */\n    pop(): void;\n}\n\n/**\n * Context-aware logger that decorates log message with stack-based prefix, emits `headerMessage`\n * before first actual log message.\n */\nexport class ContextLogger implements IContextLogger {\n    private readonly context: string[] = [];\n    private m_headerLogged = false;\n\n    /**\n     * Construct a context-aware logger that logs to `m_logger`.\n     */\n    constructor(readonly m_logger: ISimpleChannel, readonly headerMessage: string) {}\n\n    /**\n     * Push \"attribute-like\" context.\n     *\n     * Following log messages will be prefixed with `name` or `.name` depending on current context.\n     */\n    pushAttr(name: string) {\n        this.context.push(`${this.context.length > 0 ? \".\" : \"\"}${name}`);\n    }\n\n    /**\n     * Push \"index-like\" context.\n     *\n     * Following log messages will be prefixed with `[index]`.\n     */\n    pushIndex(index: string | number) {\n        this.context.push(`[${index}]`);\n    }\n\n    pop() {\n        this.context.pop();\n    }\n\n    // They, are public member functions it's just tslint who doesn't understand this.\n\n    // tslint:disable:member-ordering\n    warn = this.createLogMethod(\"warn\");\n    info = this.createLogMethod(\"info\");\n    error = this.createLogMethod(\"error\");\n    // tslint:enable:member-ordering\n\n    private createLogMethod(severity: \"warn\" | \"info\" | \"error\") {\n        return (message: string, ...rest: any[]) => {\n            if (!this.m_headerLogged) {\n                this.m_logger.info(this.headerMessage);\n                this.m_headerLogged = true;\n            }\n            this.m_logger[severity](`${this.context.join(\"\")}: ${message}`, ...rest);\n        };\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/* tslint:disable:max-line-length */\n/**\n * See:\n * https://developers.google.com/web/updates/2012/08/When-milliseconds-are-not-enough-performance-now\n */\n/* tslint:ensable:max-line-length */\n\nexport class PerformanceTimer {\n    /**\n     * Returns timestamp in milliseconds since page load.\n     *\n     * If the [[DOMHighResTimeStamp]] is supported, the resolution is up to 5 microseconds,\n     * otherwise it is in milliseconds. Timespans are computed by taking the difference between two\n     * samples.\n     *\n     * Example:\n     * ```typescript\n     * const now = PerformanceTimer.now();\n     * // call some expensive function for which you want to check the duration.\n     * const end = PerformanceTimer.now();\n     * const elapsedTime = end - now;\n     * ```\n     */\n    static now(): number {\n        return PerformanceTimer.nowFunc();\n    }\n\n    // tslint:disable-next-line:no-unused-variable\n    private static readonly instance = new PerformanceTimer();\n\n    private static readonly nowFunc: () => number = PerformanceTimer.getNowFunc();\n\n    private static getNowFunc() {\n        if (typeof performance !== \"undefined\" && typeof performance.now !== \"undefined\") {\n            return () => performance.now();\n        }\n\n        // fall back to Date.getTime()\n        return () => {\n            return new Date().getTime();\n        };\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * Deep clone of object.\n *\n * Like `JSON.parse(JSON.stringify(obj))`, but supports basic javascript types (string, number,\n * object), `Date` and `RegExp`s and cycles.\n *\n * Throws error if enounters object with `prototype` assuming that in general class instances\n * cannot be reliably cloned by generic algorithm.\n */\nexport function cloneDeep<T>(obj: T): T {\n    const cache: Map<object, object> = new Map();\n    function cloneInternal(src: any): any {\n        if (src === null) {\n            return null;\n        } else if (typeof src === \"object\") {\n            const cached = cache.get(src);\n            if (cached !== undefined) {\n                return cached;\n            }\n\n            if (Array.isArray(src)) {\n                const result: any[] = [];\n                cache.set(src, result);\n                result.length = src.length;\n                for (let i = 0; i < result.length; ++i) {\n                    result[i] = cloneInternal(src[i]);\n                }\n                return result;\n            } else if (src instanceof Date) {\n                const result = new Date(src.getTime());\n                cache.set(src, result);\n                return result;\n            } else if (src instanceof RegExp) {\n                const result = new RegExp(src.source, src.flags);\n                cache.set(src, result);\n                return result;\n            } else if (src.constructor !== Object) {\n                throw new Error(\"cloneDeep doesn't support objects with custom prototypes\");\n            } else {\n                const result: typeof src = {};\n                cache.set(src, result);\n                for (const key in src) {\n                    if (src.hasOwnProperty(key)) {\n                        result[key] = cloneInternal(src[key]);\n                    }\n                }\n                return result;\n            }\n        } else {\n            // string, number, boolean, undefined and functions are returned as is\n            return src;\n        }\n    }\n\n    const r = cloneInternal(obj);\n    cache.clear();\n    return r;\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * Get first defined value.\n *\n * Specialized \"replacement\" for `a || b || c` used frequently to get value from various sources\n * (defaults, configs  constants).\n * In contrast to `||`, this function provides proper typing for usual use cases (constant as last\n * argument) and correct treatment of `null` and `undefined`.\n *\n * If last parameter is \"defined\" then return type is `T`, otherwise return type is `T | undefined`.\n *\n * Usage example:\n *\n *     interface Config {\n *         x?: number;\n *     }\n *     const someConfig: Config = {};\n *     const val: number | undefined = undefined;\n *     const DEFAULT = 5;\n *     const x = getOptionValue(val, someConfig.x, DEFAULT);\n *         // typeof x === 'number' because DEFAULT is defined\n *     const y = getOptionValue(val, someConfig.x);\n *         // typeof y === 'number | undefined' because someConfig.x is possibly undefined\n */\n// specialized overloads with last param defined params overload\nexport function getOptionValue<T>(a: T): T;\nexport function getOptionValue<T>(a: T | undefined, b: T): T;\nexport function getOptionValue<T>(a: T | undefined, b: T | undefined, c: T): T;\nexport function getOptionValue<T>(a: T | undefined, b: T | undefined, c: T | undefined, d: T): T;\nexport function getOptionValue<T>(...values: Array<T | undefined>): T | undefined;\n\nexport function getOptionValue<T>(...values: Array<T | undefined>): T | undefined {\n    for (const candidate of values) {\n        if (candidate !== undefined && candidate !== null) {\n            return candidate;\n        }\n    }\n    return undefined;\n}\n\n/**\n * Merge options into existing parameters object.\n *\n * Convenience helper with _similar_ semantics as:\n *\n *     const finalParams1 = { ...defaults, ... options };\n *     const finalParams2 = Object.assign({}, defaults, options);\n *\n * This function doesn't copy _extra_ properties of `options` that doesn't exist in `defaults`.\n * `defaults` is used as _parameters_ template.\n *\n * This doc uses following notion of `option` and `parameter` terms:\n * * `parameter` is a variable, or 'almost constant' of procedure/function/algorith/object\n *    * `parameter` usually have sensible and usually used default\n *    * `parameter` is always defined (no `undefined`, `null` or `?` in type)\n *    * `parameter` can be overriden by specyfying `option` with same name\n * * `option` means value that may be passed optionally, overrides `parameter` value with same name\n *\n * Usage:\n *\n *     interface FooParams {\n *         useTextures: boolean;\n *         opacity: number;\n *     }\n *\n *     const FOO_DEFAULTS: FooParams = {\n *         useTextures: true,\n *         opacity: 0.8\n *     };\n *\n *     type FooOptions = Partial<FooParams>;\n *\n *     function doSomething(options: FooOptions) {\n *         const params = mergeWithOptions(FOO_DEFAULTS, options);\n *             // typeof params === FooParams\n *             // params.opacity = 0.5\n *             // params.useTextures = true\n *             // params.someOtherOptionFromOtherApi is not defined\n *     }\n *     const opt = {opacity: 0.5, someOtherOptionFromOtherApi: 'aaa'};\n *     doSomething(opt);\n *\n * Rationale:\n *   * both `Object.assign` and spread operator copy extra options\n *   * `Object.assign` & `spread operator` may copy `undefined` and `null`s if they really exist\n *     in options object\n *\n * @param parameters parmeters template object holding all expected parameters\n * @param options options object\n * @returns new object with `parameters` overriden by values from `options`\n */\nexport function mergeWithOptions<T extends object>(parameters: T, options?: Partial<T>): T {\n    // NOTE: `as object` needed due to TypeScript bug:\n    //       https://github.com/Microsoft/TypeScript/issues/14409\n    // tslint:disable-next-line:no-object-literal-type-assertion\n    const result = { ...(parameters as object) } as T;\n    if (options === undefined || options === null) {\n        return result;\n    }\n    for (const prop in parameters) {\n        if (parameters.hasOwnProperty(prop)) {\n            const optionValue = options[prop];\n            if (optionValue !== undefined && optionValue !== null) {\n                result[prop] = optionValue as any;\n            }\n        }\n    }\n    return result;\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { resolveReferenceUri } from \"./UrlUtils\";\n\n/**\n * Custom, app-specific URI resolver interface.\n */\nexport interface UriResolver {\n    /**\n     * Attempt to resolve `URI` to `URL`.\n     *\n     * If given resolver doesn't know about this specific kind of `URI`, it should return string as\n     * received.\n     *\n     * @param input `URI`\n     * @returns actual `URL` if this handler knows how locate given `uri` or original `uri`\n     */\n    resolveUri(uri: string): string;\n}\n\nexport interface PrefixUriResolverDefinition {\n    [prefix: string]: string;\n}\n\n/**\n * Basic, import-map like [[UriResolver]].\n *\n * Resolves `uris` basing on exact or prefix match of `key` from `definitions`.\n *\n * In definitions, `key` is matched against input uri with following strategy:\n *  - `key` without trailing `/` -> `key` and input `uri` must be identical\n *  - `key` with trailing `/`, -> `key` is treated as \"package prefix\", so `uri` must start with\n *    `key`\n *\n * Example:\n * ```\n * {\n *     \"local://poiMasterList\": \"/assets/poiMasterList.json\"\n *        // will match only 'local://poiMasterList' and resolve `/assets/poiMasterList.json`\n *     \"local://icons/\": \"/assets/icons/\"\n *        // will match only 'local://icons/ANYPATH' (and similar) and resolve to\n *        // `/assets/icons/ANYPATH\n * }\n * ```\n * Inspired by [`WICG` import maps proposal](https://github.com/WICG/import-maps#the-import-map).\n */\nexport class PrefixMapUriResolver implements UriResolver {\n    constructor(readonly definitions: PrefixUriResolverDefinition) {}\n\n    resolveUri(uri: string) {\n        return Object.keys(this.definitions).reduce((r, key) => {\n            if (key.endsWith(\"/\") && r.startsWith(key)) {\n                const newPrefix = this.definitions[key];\n                return newPrefix + r.substr(key.length);\n            } else if (r === key) {\n                return this.definitions[key];\n            }\n            return r;\n        }, uri);\n    }\n}\n\n/**\n * [UriResolver] that resolve relative `uri`s against to parent resource `uri`.\n */\nexport class RelativeUriResolver implements UriResolver {\n    constructor(readonly parentUri: string) {}\n\n    resolveUri(uri: string) {\n        return resolveReferenceUri(this.parentUri, uri);\n    }\n}\n\n/**\n * Compose URI resolvers.\n *\n * Creates new [[UriResolver]] that applies resolvers in orders or arguments.\n *\n * Example:\n *\n *     const themeUrl = ...; // url of parent object\n *     const childUrlResolver = composeUrlResolvers(\n *           new RelativeUriResolver(themeUrl),\n *           defaultUrlResolver\n *     );\n */\nexport function composeUriResolvers(...resolvers: Array<UriResolver | undefined>): UriResolver {\n    return {\n        resolveUri(originalUrl: string) {\n            return resolvers.reduce((url, resolver) => {\n                if (resolver !== undefined) {\n                    return resolver.resolveUri(url);\n                } else {\n                    return url;\n                }\n            }, originalUrl);\n        }\n    };\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * Chains two functions for further assigning as one wrapped callback function\n */\nexport function chainCallbacks<T extends (this: unknown, ...args: any[]) => any>(\n    f1: T | null | undefined,\n    f2: T\n): T {\n    return function(this: any, ...args: any[]): ReturnType<T> {\n        if (f1) {\n            f1.apply(this, args);\n        }\n        return f2.apply(this, args);\n    } as T;\n}\n","/*\n * Copyright (C) 2020 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\ntype TypedArray =\n    | Int8Array\n    | Uint8Array\n    | Int16Array\n    | Uint16Array\n    | Int32Array\n    | Uint32Array\n    | Uint8ClampedArray\n    | Float32Array\n    | Float64Array;\n\n/**\n * Returns a bilinear-interpolated texture sample for a given texture.\n * @param texture Two-dimensional texture to sample.\n * @param width Texture width.\n * @param height Texture height.\n * @param u Number between 0 and 1 representing the location to sample in the width dimension.\n * @param v Number between 0 and 1 representing the location to sample in the height dimension.\n */\nexport function sampleBilinear(\n    texture: TypedArray,\n    width: number,\n    height: number,\n    u: number,\n    v: number\n): number {\n    const maxXIndex = width - 1;\n    const maxYIndex = height - 1;\n    // Compute the x and y coordinates relative to the mesh size.\n    const xIndex = u * maxXIndex;\n    const xIndexFloor = Math.floor(xIndex);\n    const yIndex = v * maxYIndex;\n    const yIndexFloor = Math.floor(yIndex);\n    const swIndex = yIndexFloor * width + xIndexFloor;\n    const seIndex = xIndexFloor < maxXIndex ? swIndex + 1 : swIndex;\n    const nwIndex = yIndexFloor < maxYIndex ? swIndex + width : swIndex;\n    const neIndex = xIndexFloor < maxXIndex ? nwIndex + 1 : nwIndex;\n    const swElevation = texture[swIndex];\n    const seElevation = texture[seIndex];\n    const nwElevation = texture[nwIndex];\n    const neElevation = texture[neIndex];\n    // Get the fractional components to do bilinear interpolation.\n    const xFrac = Number.isInteger(xIndex) ? 0 : xIndex - xIndexFloor;\n    const xFracInverse = 1 - xFrac;\n    const yFrac = Number.isInteger(yIndex) ? 0 : yIndex - yIndexFloor;\n    const yFracInverse = 1 - yFrac;\n    // The interpolation is the sum of the four closest neighbours each\n    // multiplied by the diagonal areas.\n    const result =\n        swElevation * xFracInverse * yFracInverse +\n        seElevation * xFrac * yFracInverse +\n        nwElevation * xFracInverse * yFrac +\n        neElevation * xFrac * yFrac;\n    return result;\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { baseUrl } from \"./UrlUtils\";\n\n/**\n * Get base URL for from where relative URLs will be loaded.\n *\n * * In browser, it resolves to `baseUrl(location.href)` i.e document's base URL\n * (see: https://www.w3.org/TR/WD-html40-970917/htmlweb.html#h-5.1.2).\n *\n * * In node, it resolves to `file://${process.cwd()}`.\n */\nexport function getAppBaseUrl() {\n    return baseUrl(window.location.href);\n}\n","/*\n * Copyright (C) 2017-2020 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { HiddenThreeJSMaterialProperties } from \"./MapMeshMaterials\";\n\n/**\n * Parameters used when constructing a new implementor of [[DisplacementFeature]].\n */\nexport interface DisplacementFeatureParameters {\n    /**\n     * Texture used for vertex displacement along their normals.\n     */\n    displacementMap?: THREE.Texture;\n}\n\n/**\n * Interface to be implemented by materials that use displacement maps to overlay geometry\n * on elevation data.\n */\nexport interface DisplacementFeature extends HiddenThreeJSMaterialProperties {\n    displacementMap: THREE.Texture | null;\n}\n\n/**\n * Determines whether a given material supports displacement maps for elevation overlay.\n * @param material The material to check.\n * @returns Whether the given material supports displacement maps for elevation overlay.\n */\nexport function hasDisplacementFeature(material: any): material is DisplacementFeature {\n    return \"displacementMap\" in material;\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport * as THREE from \"three\";\n\nimport { DisplacementFeature, DisplacementFeatureParameters } from \"./DisplacementFeature\";\nimport {\n    ExtrusionFeature,\n    ExtrusionFeatureParameters,\n    FadingFeature,\n    FadingFeatureParameters\n} from \"./MapMeshMaterials\";\nimport { ExtrusionFeatureDefs } from \"./MapMeshMaterialsDefs\";\nimport { enforceBlending, setShaderDefine, setShaderMaterialDefine } from \"./Utils\";\n\nconst vertexSource: string = `\n#define EDGE_DEPTH_OFFSET 0.0001\n\nattribute vec3 position;\nattribute vec4 color;\n\nuniform mat4 modelViewMatrix;\nuniform mat4 projectionMatrix;\nuniform mat3 normalMatrix;\nuniform vec3 edgeColor;\nuniform float edgeColorMix;\n\n#ifdef USE_DISPLACEMENTMAP\nattribute vec3 normal;\nattribute vec2 uv;\nuniform sampler2D displacementMap;\n#endif\n\nvarying vec3 vColor;\n\n#ifdef USE_EXTRUSION\n#include <extrusion_pars_vertex>\n#endif\n\n#ifdef USE_FADING\n#include <fading_pars_vertex>\n#endif\n\nvoid main() {\n\n    #ifdef USE_COLOR\n    vColor = mix(edgeColor.rgb, color.rgb, edgeColorMix);\n    #else\n    vColor = edgeColor.rgb;\n    #endif\n\n    vec3 transformed = vec3( position );\n\n    #ifdef USE_EXTRUSION\n    #include <extrusion_vertex>\n    #endif\n\n    #ifdef USE_DISPLACEMENTMAP\n    transformed += normalize( normal ) * texture2D( displacementMap, uv ).x;\n    #endif\n\n    vec4 mvPosition = modelViewMatrix * vec4( transformed, 1.0 );\n\n    gl_Position = projectionMatrix * mvPosition;\n    // After projection gl_Position contains clip space coordinates of each vertex\n    // before perspective division (1 / w), thus only vertexes with -w < z < w should\n    // be displayed and offset. We offset only those edges which z coordinate in NDC\n    // space is between: -inf < z < 1\n    float depthOffset = step(-1.0, -gl_Position.z / gl_Position.w) * EDGE_DEPTH_OFFSET;\n    gl_Position.z -= depthOffset;\n\n    #ifdef USE_FADING\n    #include <fading_vertex>\n    #endif\n}`;\n\nconst fragmentSource: string = `\nprecision highp float;\nprecision highp int;\n\nvarying vec3 vColor;\n\n#ifdef USE_EXTRUSION\n#include <extrusion_pars_fragment>\n#endif\n\n#ifdef USE_FADING\n#include <fading_pars_fragment>\n#endif\n\nvoid main() {\n    float alphaValue = 1.0;\n    gl_FragColor = vec4(vColor, alphaValue);\n\n    #ifdef USE_EXTRUSION\n    #include <extrusion_fragment>\n    #endif\n\n    #ifdef USE_FADING\n    #include <fading_fragment>\n    #endif\n}`;\n\n/**\n * Parameters used when constructing a new [[EdgeMaterial]].\n */\nexport interface EdgeMaterialParameters\n    extends FadingFeatureParameters,\n        DisplacementFeatureParameters,\n        ExtrusionFeatureParameters {\n    /**\n     * Edge color.\n     */\n    color?: number | string;\n    /**\n     * Color mix value. Mixes between vertexColors and edgeColor.\n     */\n    colorMix?: number;\n}\n\n/**\n * Material designed to render the edges of extruded buildings using GL_LINES. It supports solid\n * colors, vertex colors, color mixing and distance fading.\n */\nexport class EdgeMaterial extends THREE.RawShaderMaterial\n    implements FadingFeature, ExtrusionFeature, DisplacementFeature {\n    static DEFAULT_COLOR: number = 0x000000;\n    static DEFAULT_COLOR_MIX: number = 0.0;\n\n    /**\n     * Constructs a new `EdgeMaterial`.\n     *\n     * @param params `EdgeMaterial` parameters.\n     */\n    constructor(params?: EdgeMaterialParameters) {\n        const defines: { [key: string]: any } = {};\n        const hasDisplacementMap = params !== undefined && params.displacementMap !== undefined;\n        const hasExtrusion =\n            params !== undefined &&\n            params.extrusionRatio !== undefined &&\n            params.extrusionRatio >= ExtrusionFeatureDefs.DEFAULT_RATIO_MIN &&\n            params.extrusionRatio < ExtrusionFeatureDefs.DEFAULT_RATIO_MAX;\n        if (hasDisplacementMap) {\n            setShaderDefine(defines, \"USE_DISPLACEMENTMAP\", true);\n        }\n        if (hasExtrusion) {\n            setShaderDefine(defines, \"USE_EXTRUSION\", true);\n        }\n\n        const shaderParams = {\n            name: \"EdgeMaterial\",\n            vertexShader: vertexSource,\n            fragmentShader: fragmentSource,\n            uniforms: {\n                edgeColor: new THREE.Uniform(new THREE.Color(EdgeMaterial.DEFAULT_COLOR)),\n                edgeColorMix: new THREE.Uniform(EdgeMaterial.DEFAULT_COLOR_MIX),\n                fadeNear: new THREE.Uniform(FadingFeature.DEFAULT_FADE_NEAR),\n                fadeFar: new THREE.Uniform(FadingFeature.DEFAULT_FADE_FAR),\n                extrusionRatio: new THREE.Uniform(ExtrusionFeatureDefs.DEFAULT_RATIO_MAX),\n                displacementMap: new THREE.Uniform(\n                    hasDisplacementMap ? params!.displacementMap : new THREE.Texture()\n                )\n            },\n            depthWrite: false,\n            defines\n        };\n        super(shaderParams);\n        enforceBlending(this);\n\n        FadingFeature.patchGlobalShaderChunks();\n        ExtrusionFeature.patchGlobalShaderChunks();\n\n        // Apply initial parameter values.\n        if (params !== undefined) {\n            if (params.color !== undefined) {\n                // Color may be set directly on object (omitting class setter), because we already\n                // know that is does no require any special handling nor material update\n                // (see: set color()).\n                this.color.set(params.color as any);\n            }\n            if (params.colorMix !== undefined) {\n                this.colorMix = params.colorMix;\n            }\n            if (params.fadeNear !== undefined) {\n                this.fadeNear = params.fadeNear;\n            }\n            if (params.fadeFar !== undefined) {\n                this.fadeFar = params.fadeFar;\n            }\n            if (params.displacementMap !== undefined) {\n                this.displacementMap = params.displacementMap;\n            }\n            if (params.extrusionRatio !== undefined) {\n                this.extrusionRatio = params.extrusionRatio;\n            }\n        }\n    }\n\n    /**\n     * Edge color.\n     */\n    get color(): THREE.Color {\n        return this.uniforms.edgeColor.value as THREE.Color;\n    }\n    set color(value: THREE.Color) {\n        this.uniforms.edgeColor.value.copy(value);\n    }\n\n    /**\n     * Color mix value. Mixes between vertexColors and edgeColor.\n     */\n    get colorMix(): number {\n        return this.uniforms.edgeColorMix.value as number;\n    }\n    set colorMix(value: number) {\n        if (this.uniforms.edgeColorMix.value === value) {\n            return;\n        }\n        this.uniforms.edgeColorMix.value = value;\n        setShaderMaterialDefine(this, \"USE_COLOR\", value > 0.0);\n    }\n\n    get fadeNear(): number {\n        return this.uniforms.fadeNear.value as number;\n    }\n    set fadeNear(value: number) {\n        this.uniforms.fadeNear.value = value;\n    }\n\n    get fadeFar(): number {\n        return this.uniforms.fadeFar.value as number;\n    }\n    set fadeFar(value: number) {\n        if (this.uniforms.fadeFar.value === value) {\n            return;\n        }\n        this.uniforms.fadeFar.value = value;\n        setShaderMaterialDefine(this, \"USE_FADING\", value > 0.0);\n    }\n\n    get extrusionRatio(): number {\n        return this.uniforms.extrusionRatio.value as number;\n    }\n    set extrusionRatio(value: number) {\n        if (this.uniforms.extrusionRatio.value === value) {\n            return;\n        }\n        this.uniforms.extrusionRatio.value = value;\n        // NOTE: We could also disable shader extrusion chunks when it hits\n        // ExtrusionFeatureDefs.DEFAULT_RATIO_MAX value, but this would cause shader re-compile.\n        const useExtrusion = value >= ExtrusionFeatureDefs.DEFAULT_RATIO_MIN;\n        setShaderMaterialDefine(this, \"USE_EXTRUSION\", useExtrusion);\n    }\n\n    get displacementMap(): THREE.Texture | null {\n        return this.uniforms.displacementMap.value;\n    }\n\n    set displacementMap(map: THREE.Texture | null) {\n        if (this.uniforms.displacementMap.value === map) {\n            return;\n        }\n        this.uniforms.displacementMap.value = map;\n        const useDisplacementMap = map !== null;\n        if (useDisplacementMap) {\n            this.uniforms.displacementMap.value.needsUpdate = true;\n        }\n        setShaderMaterialDefine(this, \"USE_DISPLACEMENTMAP\", useDisplacementMap);\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { ExtrusionFeatureDefs } from \"../MapMeshMaterialsDefs\";\n\nconst MIN_BUILDING_HEIGHT_SQUARED =\n    ExtrusionFeatureDefs.MIN_BUILDING_HEIGHT * ExtrusionFeatureDefs.MIN_BUILDING_HEIGHT;\n\nexport default {\n    extrusion_pars_vertex: `\n// Extrusion axis (xyz: vector, w: factor).\nattribute vec4 extrusionAxis;\nuniform float extrusionRatio;\n#ifdef FLAT_SHADED\nvarying vec4 vExtrusionAxis;\n#endif\n#ifdef ZFIGHTING_WORKAROUND\nvarying float vExtrusionRatio;\n#endif\n`,\n    extrusion_vertex: `\n#ifdef ZFIGHTING_WORKAROUND\n// Cancel extrusionRatio (meaning, force to 1) if extrusionAxisLen < MIN_BUILDING_HEIGHT.\nconst float MIN_BUILDING_HEIGHT_SQUARED = ${MIN_BUILDING_HEIGHT_SQUARED};\nfloat extrusionAxisLenSquared = dot(extrusionAxis.xyz, extrusionAxis.xyz);\nvExtrusionRatio = (extrusionAxisLenSquared < MIN_BUILDING_HEIGHT_SQUARED) ? 1.0 : extrusionRatio;\n#else\nfloat vExtrusionRatio = extrusionRatio;\n#endif\ntransformed = transformed + extrusionAxis.xyz * (vExtrusionRatio - 1.0);\n#ifdef FLAT_SHADED\nvExtrusionAxis = vec4(normalMatrix * extrusionAxis.xyz, extrusionAxis.w);\n#endif\n`,\n    // Modified version of THREE <normal_fragment_begin> shader chunk which, for flat shaded\n    // geometries, computes the normal either with the extrusion axis or fragment derivatives based\n    // on the extrusion factor (1.0 = ceiling, 0.0 = footprint).\n    extrusion_normal_fragment_begin: `\n#ifdef FLAT_SHADED\n    // Flattened this divergent path to prevent undefined behaviour in the following derivatives\n    // functions. For more info:\n    // http://www.aclockworkberry.com/shader-derivative-functions/#Derivatives_and_branches\n\n    // Workaround for Adreno/Nexus5 not able able to do dFdx( vViewPosition ) ...\n    vec3 fdx = vec3(dFdx(vViewPosition.x), dFdx(vViewPosition.y), dFdx(vViewPosition.z));\n    vec3 fdy = vec3(dFdy(vViewPosition.x), dFdy(vViewPosition.y), dFdy(vViewPosition.z));\n    vec3 normal = cross( fdx, fdy );\n    if (vExtrusionAxis.w > 0.999999) {\n        normal = vExtrusionAxis.xyz;\n    }\n    normal = normalize(normal);\n#else\n\tvec3 normal = normalize( vNormal );\n\t#ifdef DOUBLE_SIDED\n\t\tnormal = normal * (float(gl_FrontFacing) * 2.0 - 1.0);\n\t#endif\n\t#ifdef USE_TANGENT\n\t\tvec3 tangent = normalize( vTangent );\n\t\tvec3 bitangent = normalize( vBitangent );\n\t\t#ifdef DOUBLE_SIDED\n\t\t\ttangent = tangent * (float(gl_FrontFacing) * 2.0 - 1.0);\n\t\t\tbitangent = bitangent * (float(gl_FrontFacing) * 2.0 - 1.0);\n\t\t#endif\n\t#endif\n#endif\n// non perturbed normal for clearcoat among others\nvec3 geometryNormal = normal;\n`,\n    extrusion_pars_fragment: `\n#ifdef ZFIGHTING_WORKAROUND\nvarying float vExtrusionRatio;\n#else\nuniform float extrusionRatio;\n#endif\nvarying vec4 vExtrusionAxis;\n`,\n    extrusion_fragment: `\n#ifndef ZFIGHTING_WORKAROUND\nfloat vExtrusionRatio = extrusionRatio;\n#endif\ngl_FragColor.a *= smoothstep( 0.0, 0.25, vExtrusionRatio );\n`\n};\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * The shader chunks have their lines \"#ifdef USE_FADING\" commented out, because currently the\n * mesh materials use individually created shader strings based on the materials settings.\n * @see [[FadingMeshBasicMaterial]]\n **/\n\nexport default {\n    fading_pars_vertex: `\nvarying float fadingDepth;\n`,\n\n    fading_vertex: `\nfadingDepth = -mvPosition.z;\n`,\n\n    fading_pars_fragment: `\nvarying float fadingDepth;\nuniform float fadeNear;\nuniform float fadeFar;\n`,\n\n    fading_fragment: `\n\n// lerp with \"hard\" edges\n//float fadingFactor = 1.0 - clamp((fadingDepth - fadeNear) / (fadeFar - fadeNear), 0.0, 1.0);\n\n// smooth transitions\nfloat fadingFactor = smoothstep( fadeNear, fadeFar, fadingDepth );\n\ngl_FragColor.a *= 1.0 - fadingFactor;\n\n// debugging color:\n// gl_FragColor = vec4(1., fadingFactor, fadingFactor, 1.0);\n`\n};\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * This shader chunk replaces the default lighting in the standard material, the problem with this\n * is that the final pixel color is the addition of the material color and the light, this means\n * that the final map's rendered color is vastly different from that configured by the designers.\n * This chunk removes the extra highlight by providing just two colors, the material color when not\n * in shadow and a reduced color value when in shadow (currently 50% of the material's color).\n */\nexport const simpleLightingShadowChunk = `\n    struct PhysicalMaterial {\n        vec3\tdiffuseColor;\n        float\tspecularRoughness;\n        vec3\tspecularColor;\n    };\n\n    #define DEFAULT_SPECULAR_COEFFICIENT 0.04\n\n    void RE_Direct_Physical( const in IncidentLight directLight,\n        const in GeometricContext geometry,\n        const in PhysicalMaterial material,\n        inout ReflectedLight reflectedLight ) {\n        // directLight.color is the light color * shadow, internally three.js uses a step function, so\n        // this value is either the light color or black. in order to lighten up the shadows, we\n        // take add 50% of the color to grey (to give us either pure white or grey) and multiply this to\n        // the material's diffuse color.\n        #if defined(USE_SHADOWMAP)\n            reflectedLight.directDiffuse = (0.5 * directLight.color +\n                vec3(0.5,0.5,0.5)) * material.diffuseColor;\n        #else\n            reflectedLight.directDiffuse = material.diffuseColor;\n        #endif\n    }\n\n    void RE_IndirectDiffuse_Physical( const in vec3 irradiance,\n        const in GeometricContext geometry,\n        const in PhysicalMaterial material,\n        inout ReflectedLight reflectedLight ) {\n            // Disable influence of indirect light (it is handled in the RE_Direct_Physical function)\n    }\n\n    void RE_IndirectSpecular_Physical( const in vec3 radiance,\n        const in vec3 irradiance,\n        const in vec3 clearcoatRadiance,\n        const in GeometricContext geometry,\n        const in PhysicalMaterial material,\n        inout ReflectedLight reflectedLight) {\n            // Disable specular reflection of light.\n    }\n\n    #define RE_Direct               RE_Direct_Physical\n    #define RE_IndirectDiffuse      RE_IndirectDiffuse_Physical\n    #define RE_IndirectSpecular     RE_IndirectSpecular_Physical\n`;\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\nimport * as THREE from \"three\";\nimport AtmosphereShaderChunks from \"./ShaderChunks/AtmosphereChunks\";\nimport { setShaderDefine } from \"./Utils\";\n\nconst EQUATORIAL_RADIUS: number = 6378137.0;\n\n/**\n * `GroundAtmosphereShader`.\n *\n * Describes shading of atmosphere as seen from outer space.\n */\nexport const GroundAtmosphereShader: THREE.Shader = {\n    uniforms: {\n        u_eyePositionWorld: new THREE.Uniform(new THREE.Vector3()),\n        u_lightDirectionWorld: new THREE.Uniform(new THREE.Vector3(0, 1, 0)),\n        u_modelViewProjection: new THREE.Uniform(new THREE.Matrix4()),\n        // Environment settings:\n        // atmosphere inner and outer radius, camera height, light mode\n        u_atmosphereEnv: new THREE.Uniform(\n            new THREE.Vector4(\n                // Maximum inner radius\n                EQUATORIAL_RADIUS * 1.001,\n                // Maximum outer radius\n                EQUATORIAL_RADIUS * 1.025,\n                // Camera height\n                0,\n                // Toggles the light modes:\n                // 0 - light always directly overhead,\n                // 1 - lighting uses light direction: uniform u_lightDirectionWorld\n                1\n            )\n        ),\n        u_hsvCorrection: new THREE.Uniform(new THREE.Vector3(0, 0, 0)),\n\n        topColor: new THREE.Uniform(new THREE.Color(0x0077ff)),\n        bottomColor: new THREE.Uniform(new THREE.Color(0xffffff)),\n        offset: new THREE.Uniform(33.0),\n        exponent: new THREE.Uniform(0.6),\n        fogColor: new THREE.Uniform(new THREE.Color(0x0077ff)), // scene.fog.color\n        fogNear: new THREE.Uniform(new THREE.Color(0x0077ff)), // scene.fog.near\n        fogFar: new THREE.Uniform(new THREE.Color(0xffffff)) // scene.fog.far\n    },\n\n    vertexShader: `\n\n    #define IMPROVE_INTERSECT_PRECISION 1\n    #define IMPROVE_DOT_PRECISION 1\n\n    precision highp float;\n    precision highp int;\n\n    attribute vec4 position;\n\n    // Base mandatory uniforms\n    uniform mat4 u_modelViewProjection;\n    uniform vec3 u_eyePositionWorld;\n    uniform vec3 u_lightDirectionWorld;\n\n    uniform vec4 u_atmosphereEnv; // Atmosphere inner and outer radius, camera height, light mode\n    uniform vec3 u_hsvCorrection;\n\n    const float Pi = 3.141592653589793;\n    const float Kr = 0.0025;\n    const float Km = 0.0015;\n    const float Kr4PI = Kr * 4.0 * Pi;\n    const float Km4PI = Km * 4.0 * Pi;\n    const float ESun = 25.0; // should be 15.0\n    const float KmESun = Km * ESun;\n    const float KrESun = Kr * ESun;\n    const vec3 InvWavelength = vec3(\n        1.0 / pow(0.650, 4.0), // Red\n        1.0 / pow(0.570, 4.0), // Green\n        1.0 / pow(0.475, 4.0)); // Blue\n\n    const int nSamples = 2;\n    const float fSamples = 2.0;\n\n    varying vec3 v_rayleighColor;\n    varying vec3 v_mieColor;\n    varying vec3 v_vertToCamera;\n    varying vec3 v_vertToOrigin;\n\n    ${AtmosphereShaderChunks.atmosphere_common_utils}\n    ${AtmosphereShaderChunks.atmosphere_vertex_utils}\n\n    //\n    // Computes rayleight and mia atmosphere factors for ground.\n    //\n    // Code based on GPU Gems article.\n    //\n    // Author: Sean O'Neil\n    //\n    // Copyright (c) 2004 Sean O'Neil\n    //\n    // https://developer.nvidia.com/gpugems/gpugems2/part-ii-shading-lighting-and-shadows/chapter-16-accurate-atmospheric-scattering\n    //\n    // Further modifications by HERE.\n    //\n    AtmosphereColor computeGroundAtmosphere(vec3 v3Pos, vec3 vLightDir, bool dynamicLighting)\n    {\n        // Retrieve environment variables\n        float fInnerRadius = u_atmosphereEnv.x;\n        float fOuterRadius = u_atmosphereEnv.y;\n        float fCameraHeight = u_atmosphereEnv.z;\n\n        // All that may be moved to const or define(s) at further optimizations:\n        float fScale = 1.0 / (fOuterRadius - fInnerRadius);\n        float fScaleOverScaleDepth = fScale / RayleighScaleDepth;\n        float fCameraHeight2 = fCameraHeight * fCameraHeight;\n        float fOuterRadius2 = fOuterRadius * fOuterRadius;\n\n        // Get the ray from the camera to the vertex and its length (which is the far point of the ray passing through the atmosphere)\n        vec3 v3Ray = v3Pos - u_eyePositionWorld;\n        float fFar = length(v3Ray);\n        v3Ray /= fFar;\n\n#if !defined(IMPROVE_DOT_PRECISION)\n        vec3 v3Dir = normalize(v3Pos);\n#endif\n\n#ifdef CAMERA_IN_SPACE\n\n        // Calculate first point of camera ray and sphere intersection.\n        float fNear = getNearSphereIntersect(u_eyePositionWorld, v3Ray, fCameraHeight2, fOuterRadius2);\n        // Make far relative to first atmosphere intersection, setting it to\n        // the length of ray passed through atmosphere\n        fFar -= fNear;\n\n        // Compute the ray's starting position within the atmosphere, then\n        // calculate its scattering offset\n        vec3 v3Start = u_eyePositionWorld + v3Ray * fNear;\n        float fDepth = exp((fInnerRadius - fOuterRadius) / RayleighScaleDepth);\n\n#else // CAMERA_IN_ATMOSPHERE\n\n        // The ray starts already in atmosphere\n        vec3 v3Start = u_eyePositionWorld;\n        // Virtually fNear is just at eye position, so ray passing through atmosphere does not shorten\n        // fFar -= 0.0;\n        float fDepth = exp((fInnerRadius - fCameraHeight) / RayleighScaleDepth);\n#endif\n\n#if defined(IMPROVE_DOT_PRECISION)\n        float fCameraAngle = dot(-v3Ray, v3Pos) / length(v3Pos);\n#else\n        float fCameraAngle = dot(-v3Ray, v3Dir);\n#endif\n        float fCameraScale = scale(fCameraAngle);\n\n        // When we want the atmosphere to be uniform over the globe so it is set to 1.0.\n#if defined(IMPROVE_DOT_PRECISION)\n        // The light angle for given light source may be calculated as:\n        // angle = dot(vLightDir, v3Dir) / length(v3Dir);\n        // where v3Dir holds normalized vertex position, but for precision issues we v3Pos (un-normalized)\n        float fLightAngle = conditionalBranchFree(dynamicLighting, dot(vLightDir, v3Pos) / length(v3Pos), 1.0);\n#else\n        float fLightAngle = conditionalBranchFree(dynamicLighting, dot(vLightDir, v3Dir), 1.0);\n#endif\n        float fLightScale = scale(fLightAngle);\n\n        float fCameraOffset = fDepth * fCameraScale;\n        float fTemp = (fLightScale + fCameraScale);\n\n        // Initialize the scattering loop variables\n        float fSampleLength = fFar / fSamples;\n        float fScaledLength = fSampleLength * fScale;\n        vec3 v3SampleRay = v3Ray * fSampleLength;\n        vec3 v3SamplePoint = v3Start + v3SampleRay * 0.5;\n\n        // Now loop through the sample rays\n        vec3 v3BaseColor = vec3(0.0);\n        vec3 v3Attenuate = vec3(0.0);\n        for(int i = 0; i < nSamples; i++)\n        {\n            float fHeight = length(v3SamplePoint);\n            float fDepth = exp(fScaleOverScaleDepth * (fInnerRadius - fHeight));\n            float fScatter = fDepth * fTemp - fCameraOffset;\n            // Compute color factors\n            v3Attenuate = exp(-fScatter * (InvWavelength * Kr4PI + Km4PI));\n            v3BaseColor += v3Attenuate * (fDepth * fScaledLength);\n            // Move to the next point\n            v3SamplePoint += v3SampleRay;\n        }\n\n        AtmosphereColor color;\n        color.mie = v3BaseColor * (InvWavelength * KrESun + KmESun);\n        // Calculate the attenuation factor for the ground\n        color.rayleigh = v3Attenuate;\n\n        return color;\n    }\n\n    void main(void)\n    {\n        float fLightMode = u_atmosphereEnv.w;\n        bool bDynamicLight = fLightMode != 0.0;\n\n        vec3 vLightDir = conditionalBranchFree(bDynamicLight,\n            u_lightDirectionWorld,\n            u_eyePositionWorld);\n        vLightDir = normalize(vLightDir);\n\n        AtmosphereColor atmColor = computeGroundAtmosphere(position.xyz, vLightDir, bDynamicLight);\n        v_mieColor = atmColor.mie;\n        v_rayleighColor = atmColor.rayleigh;\n        v_vertToCamera = u_eyePositionWorld - position.xyz;\n        v_vertToOrigin = normalize(position.xyz);\n\n        gl_Position = u_modelViewProjection * position;\n    }\n    `,\n\n    fragmentShader: `\n\n    // Exposure correction gives more subtle gradients on the ground.\n    #define CORRECT_EXPOSURE 1\n    #define FADE_DEPTH 1\n    #define NIGHT_LOCAL 1\n\n    precision highp float;\n    precision highp int;\n\n    #ifdef CORRECT_COLOR\n    uniform vec3 u_hsvCorrection; // Hue, saturation, brightness\n    #endif\n\n    uniform vec4 u_atmosphereEnv; // Atmosphere inner and outer radius, camera height, light mode\n    uniform vec3 u_eyePositionWorld;\n    uniform vec3 u_lightDirectionWorld;\n\n    const float g = -0.95;\n    const float g2 = g * g;\n\n    varying vec3 v_rayleighColor;\n    varying vec3 v_mieColor;\n    varying vec3 v_vertToCamera;\n    varying vec3 v_vertToOrigin;\n\n    ${AtmosphereShaderChunks.atmosphere_common_utils}\n    ${AtmosphereShaderChunks.atmosphere_fragment_utils}\n\n    void main(void)\n    {\n        float fInnerRadius = u_atmosphereEnv.x;\n        float fOuterRadius = u_atmosphereEnv.y;\n        float fCameraHeight = u_atmosphereEnv.z;\n        float fLightMode = u_atmosphereEnv.w;\n        bool bDynamicLight = fLightMode != 0.0;\n\n        vec3 vLightDir = conditionalBranchFree(bDynamicLight,\n            u_lightDirectionWorld,\n            u_eyePositionWorld);\n        vLightDir = normalize(vLightDir);\n\n        // GPU gems mix of ground solution, with custom alpha settings\n        vec3 cRgb = v_mieColor + 0.25 * v_rayleighColor;\n\n        // Not needed for HDR frame buffer\n    #if !defined(HDR_FRAME_BUFFER) && defined(CORRECT_EXPOSURE)\n        // Interesting results with exposure factor: 2.0, 3.5, 4.0\n        cRgb = correctExposure(cRgb, 3.0);\n    #endif\n\n    #ifdef CORRECT_COLOR\n        cRgb = correctColor(cRgb, u_hsvCorrection);\n    #endif\n\n        // Base atmosphere opacity\n        float fAtmosphereAlpha = 1.0;\n\n        // Factor based on the distance of camera atmosphere and ground, results are:\n        // 0.0 = camera on the ground surface,\n        // 1.0 = at the outer edge of the atmosphere.\n        float fDepthFactor = clamp((fCameraHeight - fInnerRadius) /\n            (fOuterRadius - fInnerRadius), 0.0, 1.0);\n    #ifdef FADE_DEPTH\n        // Fade alpha based on the distance of camera between atmosphere layers\n        #ifdef FADE_DEPTH_LINEAR\n            fAtmosphereAlpha *= fDepthFactor;\n        #else\n            fAtmosphereAlpha *= pow(fDepthFactor, 1.5);\n        #endif\n    #endif\n\n#if defined(FADE_NIGHT) || defined(DARKEN_NIGHT)\n        // Adjust factor based on time of day, results are:\n        // 0.0 = night,\n        // 1.0 = day.\n    #ifdef NIGHT_GLOBAL\n        // Global night fade based on camera and light orientation\n        float fNightFactor = conditionalBranchFree(bDynamicLight,\n            clamp(dot(normalize(u_eyePositionWorld), vLightDir), 0.0, 1.0),\n             1.0);\n        fNightFactor = pow(fNightFactor, 0.5);\n    #else // NIGHT_LOCAL\n        float fNightFactor = conditionalBranchFree(bDynamicLight,\n            clamp(dot(v_vertToOrigin, vLightDir) / length(v_vertToOrigin), 0.0, 1.0),\n            1.0);\n        fNightFactor = pow(fNightFactor, 0.8);\n    #endif\n#endif\n\n    #ifdef FADE_NIGHT\n        // Adjust alpha for night side of the globe\n        fAtmosphereAlpha *= fNightFactor;\n    #endif\n\n    #ifdef DARKEN_NIGHT\n        // Change the brightness depending on night / day side.\n        // NOTE: Darkening should be rather applied in HSV space, without loss on saturation,\n        // but it is much more GPU consuming.\n        const float minBrightness = 0.5;\n        float fDarkenFactor = clamp(fNightFactor, minBrightness, 1.0);\n        cRgb *= fDarkenFactor;\n    #endif\n\n    #ifdef EXPOSURE_DEPTH\n        // Control exposure depending from ground distance\n        float exposureBoost = 3.0 - fDepthFactor;\n        cRgb = correctExposure(cRgb, exposureBoost);\n    #endif\n\n        // Experimental fading out of focus point - similar to fresnel effect in top view.\n        // This fade is handy to better expose cartographic/map features in screen center.\n        float fFocusFactor = 1.0 - clamp(dot(normalize(v_vertToCamera), v_vertToOrigin), 0.0, 1.0) + 0.1;\n        fFocusFactor = pow(fFocusFactor, 2.5);\n        fAtmosphereAlpha *= fFocusFactor;\n\n        // Integrate all features\n        gl_FragColor = vec4(cRgb, fAtmosphereAlpha);\n    }\n    `\n};\n\nexport class GroundAtmosphereMaterial extends THREE.RawShaderMaterial {\n    constructor(params?: any) {\n        const defines: { [key: string]: any } = {};\n        defines.CAMERA_IN_SPACE = \"\";\n\n        const shaderParams = {\n            name: \"GroundAtmosphereMaterial\",\n            vertexShader: GroundAtmosphereShader.vertexShader,\n            fragmentShader: GroundAtmosphereShader.fragmentShader,\n            uniforms: GroundAtmosphereShader.uniforms,\n            transparent: true,\n            depthTest: false,\n            depthWrite: false,\n            side: THREE.FrontSide,\n            blending: THREE.NormalBlending,\n            fog: false\n        };\n        super(shaderParams);\n    }\n\n    setDynamicLighting(enableLighting: boolean) {\n        this.uniforms.u_atmosphereEnv.value.w = enableLighting ? 1.0 : 0.0;\n    }\n\n    /**\n     * Set maximum outer radius of atmosphere.\n     *\n     * @default [[EarthConstants.EQUATORIAL_RADIUS]] * 1.025\n     */\n    set outerRadius(radius: number) {\n        this.uniforms.u_atmosphereEnv.value.y = radius;\n    }\n\n    get outerRadius(): number {\n        return this.uniforms.u_atmosphereEnv.value.y;\n    }\n\n    /**\n     * Set maximum inner radius of atmosphere.\n     *\n     * @default [[EarthConstants.EQUATORIAL_RADIUS]] * 1.001.\n     */\n    set innerRadius(radius: number) {\n        this.uniforms.u_atmosphereEnv.value.x = radius;\n    }\n\n    get innerRadius(): number {\n        return this.uniforms.u_atmosphereEnv.value.x;\n    }\n\n    /**\n     * Updates the uniform data of a material used to render an atmosphere.\n     *\n     * This includes only uniforms that may change frame by frame, other uniforms are\n     * accessed with convenient material setters and getters.\n     *\n     * @param shaderMaterial Material which uniforms will be updated.\n     * @param matrixWorldInverse Inverse of world matrix used to position the atmosphere dome.\n     * @param lightDirection The light directional vector in world space.\n     * @param camera Camera used in rendering.\n     */\n    updateUniforms(\n        shaderMaterial: THREE.ShaderMaterial,\n        object: THREE.Object3D,\n        camera: THREE.Camera,\n        lightDirection: THREE.Vector3\n    ): void {\n        const cameraInfo = this.getCameraInfo(object, camera);\n\n        if (shaderMaterial !== undefined && shaderMaterial.isMaterial) {\n            if (\n                shaderMaterial.uniforms &&\n                shaderMaterial.uniforms.u_atmosphereEnv &&\n                shaderMaterial.uniforms.u_hsvCorrection &&\n                shaderMaterial.uniforms.u_eyePositionWorld &&\n                shaderMaterial.uniforms.u_modelViewProjection &&\n                shaderMaterial.uniforms.u_lightDirectionWorld\n            ) {\n                const eyePos = cameraInfo.eyePos;\n                const mvp = cameraInfo.modelViewProjection;\n                const cameraHeight = cameraInfo.eyeHeight;\n\n                shaderMaterial.uniforms.u_eyePositionWorld.value.copy(eyePos);\n                shaderMaterial.uniforms.u_modelViewProjection.value.copy(mvp);\n\n                shaderMaterial.uniforms.u_atmosphereEnv.value.z = cameraHeight;\n                shaderMaterial.uniforms.u_lightDirectionWorld.value = lightDirection.clone();\n\n                const cameraInSpace = cameraHeight > this.outerRadius;\n                const needsUpdate0 = setShaderDefine(\n                    shaderMaterial.defines,\n                    \"CAMERA_IN_SPACE\",\n                    cameraInSpace\n                );\n                const needsUpdate1 = setShaderDefine(\n                    shaderMaterial.defines,\n                    \"CAMERA_IN_ATMOSPHERE\",\n                    !cameraInSpace\n                );\n                shaderMaterial.needsUpdate = needsUpdate0 || needsUpdate1;\n            } else {\n                throw Error(\"Atmosphere material has missing uniforms\");\n            }\n        } else {\n            throw Error(\"Wrong object used, only Material objects are supported\");\n        }\n    }\n\n    /*\n     * Calculate camera position used in vertex shader of atmosphere materials.\n     *\n     * @param object\n     * @param camera Camera used to get the eye position.\n     */\n    private getCameraInfo(\n        object: THREE.Object3D,\n        camera: THREE.Camera,\n        reverse: boolean = false\n    ): { modelViewProjection: THREE.Matrix4; eyePos: THREE.Vector3; eyeHeight: number } {\n        if (reverse) {\n            const modelMatrix = new THREE.Matrix4().identity();\n            const viewMatrix = new THREE.Matrix4().getInverse(object.matrixWorld).transpose();\n            const projectionMatrix = camera.projectionMatrix;\n\n            const mvpMatrix = new THREE.Matrix4();\n            // MVP = Projection * View * Model\n            mvpMatrix.multiplyMatrices(viewMatrix, modelMatrix);\n            mvpMatrix.multiplyMatrices(projectionMatrix, mvpMatrix);\n\n            const eyePos = new THREE.Vector3();\n            object.getWorldPosition(eyePos);\n            const objectPos = new THREE.Vector3();\n            camera.getWorldPosition(objectPos);\n            const eyeHeight = objectPos.distanceTo(eyePos);\n\n            return {\n                modelViewProjection: mvpMatrix,\n                eyePos,\n                eyeHeight\n            };\n        } else {\n            const modelMatrix = object.matrixWorld;\n            const viewMatrix = camera.matrixWorldInverse;\n            const projectionMatrix = camera.projectionMatrix;\n\n            const mvpMatrix = new THREE.Matrix4();\n            // MVP = Projection * View * Model\n            mvpMatrix.multiplyMatrices(viewMatrix, modelMatrix);\n            mvpMatrix.multiplyMatrices(projectionMatrix, mvpMatrix);\n\n            const eyePos = new THREE.Vector3();\n            camera.getWorldPosition(eyePos);\n            const objectPos = new THREE.Vector3();\n            object.getWorldPosition(objectPos);\n            const eyeHeight = objectPos.distanceTo(eyePos);\n            // Normally we would return simply camera position, but since camera is not moving in\n            // the globe view only the world, we need to calculate eye relative to object position.\n            eyePos.sub(objectPos);\n            return {\n                modelViewProjection: mvpMatrix,\n                eyePos,\n                eyeHeight\n            };\n        }\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport * as THREE from \"three\";\nimport linesShaderChunk from \"./ShaderChunks/LinesChunks\";\n\nconst vertexSource: string = `\n#ifdef USE_COLOR\nattribute vec4 color;\nvarying vec3 vColor;\n#endif\n\n// uniforms to implement double-precision\nuniform mat4 u_mvp;             // combined modelView and projection matrix\nuniform vec3 u_eyepos;          // eye position major\nuniform vec3 u_eyepos_lowpart;  // eye position minor ((double) eyepos - (float) eyepos)\n\n// vertex attributes\nattribute vec3 position;        // high part\nattribute vec3 positionLow;     // low part\n\n#include <high_precision_vert_func>\n\nvoid main() {\n    #ifdef USE_COLOR\n    vColor = color.rgb;\n    #endif\n\n    vec3 pos = subtractDblEyePos(position);\n    gl_Position = u_mvp * vec4(pos, 1.0);\n}`;\n\nconst fragmentSource: string = `\nprecision highp float;\nprecision highp int;\n\nuniform vec3 diffuse;\nuniform float opacity;\n\n#ifdef USE_COLOR\nvarying vec3 color;\n#endif\n\nvoid main() {\n    #ifdef USE_COLOR\n    gl_FragColor = vec4( diffuse * vColor, opacity );\n    #else\n    gl_FragColor = vec4( diffuse, opacity );\n    #endif\n}`;\n\n/**\n * Parameters used when constructing a new [[SolidLineMaterial]].\n */\nexport interface HighPrecisionLineMaterialParameters {\n    /**\n     * Line color.\n     */\n    color?: number | string | THREE.Color;\n    /**\n     * Line opacity.\n     */\n    opacity?: number;\n}\n\n/**\n * Material designed to render high precision lines (ideal for position-sensible data).\n */\nexport class HighPrecisionLineMaterial extends THREE.RawShaderMaterial {\n    static DEFAULT_COLOR: number = 0x000050;\n    static DEFAULT_OPACITY: number = 1.0;\n\n    isHighPrecisionLineMaterial: boolean;\n\n    /**\n     * Constructs a new `HighPrecisionLineMaterial`.\n     *\n     * @param params `HighPrecisionLineMaterial` parameters.\n     */\n    constructor(params?: HighPrecisionLineMaterialParameters) {\n        Object.assign(THREE.ShaderChunk, linesShaderChunk);\n\n        const shaderParams = {\n            name: \"HighPrecisionLineMaterial\",\n            vertexShader: vertexSource,\n            fragmentShader: fragmentSource,\n            uniforms: {\n                diffuse: new THREE.Uniform(\n                    new THREE.Color(HighPrecisionLineMaterial.DEFAULT_COLOR)\n                ),\n                opacity: new THREE.Uniform(HighPrecisionLineMaterial.DEFAULT_OPACITY),\n                u_mvp: new THREE.Uniform(new THREE.Matrix4()),\n                u_eyepos: new THREE.Uniform(new THREE.Vector3()),\n                u_eyepos_lowpart: new THREE.Uniform(new THREE.Vector3())\n            }\n        };\n        Object.assign(shaderParams, params);\n        super(shaderParams);\n\n        this.type = \"HighPrecisionLineMaterial\";\n        this.isHighPrecisionLineMaterial = true;\n\n        // Apply initial parameter values.\n        if (params !== undefined) {\n            if (params.color !== undefined) {\n                this.color.set(params.color as any);\n            }\n            if (params.opacity !== undefined) {\n                this.opacity = params.opacity;\n            }\n        }\n\n        this.updateTransparencyFeature();\n    }\n\n    /**\n     * Line color.\n     */\n    get color(): THREE.Color {\n        return this.uniforms.diffuse.value as THREE.Color;\n    }\n    set color(value: THREE.Color) {\n        this.uniforms.diffuse.value.copy(value);\n    }\n\n    private updateTransparencyFeature() {\n        this.transparent = this.opacity < 1.0 ? true : false;\n    }\n}\n\nexport function isHighPrecisionLineMaterial(\n    material: object | undefined\n): material is HighPrecisionLineMaterial {\n    return (\n        material !== undefined &&\n        (material as HighPrecisionLineMaterial).isHighPrecisionLineMaterial === true\n    );\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport * as THREE from \"three\";\nimport linesShaderChunk from \"./ShaderChunks/LinesChunks\";\n\nconst vertexSource: string = `\n#ifdef USE_COLOR\nvarying vec3 vColor;\n#endif\n\nuniform float size;\n\n// uniforms to implement double-precision\nuniform mat4 u_mvp;             // combined modelView and projection matrix\nuniform vec3 u_eyepos;          // eye position major\nuniform vec3 u_eyepos_lowpart;  // eye position minor ((double) eyepos - (float) eyepos)\n\n// vertex attributes\nattribute vec3 positionLow;     // low part\n\n#include <high_precision_vert_func>\n\nvoid main() {\n    #ifdef USE_COLOR\n    vColor = color.rgb;\n    #endif\n\n    vec3 pos = subtractDblEyePos(position);\n    gl_Position = u_mvp * vec4(pos, 1.0);\n\n    // ignore sizeAttenuation for now!\n    gl_PointSize = size;\n}`;\n\n/**\n * Parameters used when constructing a new [[HighPrecisionPointMaterial]].\n */\nexport interface HighPrecisionPointMaterialParameters extends THREE.PointsMaterialParameters {\n    /**\n     * Point color.\n     */\n    color?: number | string | THREE.Color;\n    /**\n     * Point opacity.\n     */\n    opacity?: number;\n    /**\n     * Point scale.\n     */\n    scale?: number;\n    /**\n     * UV transformation matrix.\n     */\n    uvTransform?: THREE.Matrix3;\n}\n\n/**\n * Material designed to render high precision points (ideal for position-sensible data).\n */\nexport class HighPrecisionPointMaterial extends THREE.PointsMaterial {\n    static DEFAULT_COLOR: number = 0x000050;\n    static DEFAULT_OPACITY: number = 1.0;\n    static DEFAULT_SIZE: number = 1.0;\n    static DEFAULT_SCALE: number = 1.0;\n\n    isHighPrecisionPointMaterial: boolean;\n    uniforms: { [uniform: string]: THREE.IUniform };\n    vertexShader?: string;\n    fragmentShader?: string;\n\n    /**\n     * Constructs a new `HighPrecisionPointMaterial`.\n     *\n     * @param params `HighPrecisionPointMaterial` parameters.\n     */\n    constructor(params?: HighPrecisionPointMaterialParameters) {\n        Object.assign(THREE.ShaderChunk, linesShaderChunk);\n\n        const shaderParams = params;\n        super(shaderParams);\n\n        this.type = \"HighPrecisionPointMaterial\";\n        this.vertexShader = vertexSource;\n        this.fragmentShader = THREE.ShaderChunk.points_frag;\n        this.fog = false;\n\n        this.uniforms = {\n            diffuse: new THREE.Uniform(new THREE.Color(HighPrecisionPointMaterial.DEFAULT_COLOR)),\n            opacity: new THREE.Uniform(HighPrecisionPointMaterial.DEFAULT_OPACITY),\n            size: new THREE.Uniform(HighPrecisionPointMaterial.DEFAULT_SIZE),\n            scale: new THREE.Uniform(HighPrecisionPointMaterial.DEFAULT_SCALE),\n            map: new THREE.Uniform(new THREE.Texture()),\n            uvTransform: new THREE.Uniform(new THREE.Matrix3()),\n            u_mvp: new THREE.Uniform(new THREE.Matrix4()),\n            u_eyepos: new THREE.Uniform(new THREE.Vector3()),\n            u_eyepos_lowpart: new THREE.Uniform(new THREE.Vector3())\n        };\n\n        this.isHighPrecisionPointMaterial = true;\n\n        // Apply initial parameter values.\n        if (params !== undefined) {\n            if (params.color !== undefined) {\n                this.color.set(params.color as any);\n            }\n            if (params.opacity !== undefined) {\n                this.opacity = params.opacity;\n            }\n            if (params.size !== undefined) {\n                this.size = params.size;\n            }\n            if (params.scale !== undefined) {\n                this.scale = params.scale;\n            }\n            if (params.uvTransform !== undefined) {\n                this.uvTransform = params.uvTransform;\n            }\n            if (params.map !== undefined) {\n                this.map = params.map;\n            }\n        }\n    }\n\n    /**\n     *  Point scale.\n     */\n    get scale(): number {\n        return this.uniforms.scale.value;\n    }\n\n    set scale(value: number) {\n        this.uniforms.scale.value = value;\n    }\n\n    /**\n     * UV transformation matrix.\n     */\n    get uvTransform(): THREE.Matrix3 {\n        return this.uniforms.uvTransform.value;\n    }\n    set uvTransform(value: THREE.Matrix3) {\n        this.uniforms.uvTransform.value = value;\n    }\n}\n\nexport function isHighPrecisionPointMaterial(\n    material: object | undefined\n): material is HighPrecisionPointMaterial {\n    return (\n        material !== undefined &&\n        (material as HighPrecisionPointMaterial).isHighPrecisionPointMaterial === true\n    );\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport * as THREE from \"three\";\n\nconst vertexSource: string = `\nattribute vec4 position;\nattribute vec4 color;\nattribute vec2 uv;\n\nuniform mat4 modelViewMatrix;\nuniform mat4 projectionMatrix;\n\nvarying vec4 vColor;\nvarying vec2 vUv;\n\nvoid main() {\n    vUv = uv;\n    vColor = color;\n    gl_Position = projectionMatrix * modelViewMatrix * vec4(position.xyz, 1.0);\n}`;\n\nconst fragmentSource: string = `\nprecision highp float;\nprecision highp int;\n\nuniform sampler2D map;\n\nvarying vec4 vColor;\nvarying vec2 vUv;\n\nvoid main() {\n\n    vec4 color = texture2D(map, vUv.xy);\n    color *= vColor.a;\n    if (color.a < 0.05) {\n        discard;\n    }\n    gl_FragColor = color;\n}`;\n\n/**\n * Parameters used when constructing a new [[IconMaterial]].\n */\nexport interface IconMaterialParameters {\n    /**\n     * Texture map.\n     */\n    map: THREE.Texture;\n}\n\n/**\n * 2D material for icons, similar to [[TextMaterial]]. Uses component in texture coordinates to\n * apply opacity.\n */\nexport class IconMaterial extends THREE.RawShaderMaterial {\n    /**\n     * Constructs a new `IconMaterial`.\n     *\n     * @param params `IconMaterial` parameters.\n     */\n    constructor(params: IconMaterialParameters) {\n        const shaderParams: THREE.ShaderMaterialParameters = {\n            name: \"IconMaterial\",\n            vertexShader: vertexSource,\n            fragmentShader: fragmentSource,\n            uniforms: {\n                map: new THREE.Uniform(params.map)\n            },\n            depthTest: true,\n            depthWrite: true,\n            transparent: true,\n\n            vertexColors: true,\n            premultipliedAlpha: true,\n            blending: THREE.NormalBlending\n        };\n        super(shaderParams);\n    }\n\n    /**\n     * Icon texture map/atlas.\n     */\n    get map(): THREE.Texture {\n        return this.uniforms.map.value;\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport * as THREE from \"three\";\n\n/**\n * The shader used in the [[UnrealBloomPass]] for the bloom/glow effect.\n */\nexport const LuminosityHighPassShader: THREE.Shader = {\n    uniforms: {\n        tDiffuse: { value: null },\n        luminosityThreshold: { value: 1.0 },\n        smoothWidth: { value: 1.0 },\n        defaultColor: { value: new THREE.Color(0x000000) },\n        defaultOpacity: { value: 0.0 }\n    },\n    vertexShader: `\n    varying vec2 vUv;\n    void main() {\n        vUv = uv;\n        gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n    }`,\n    fragmentShader: `\n    uniform sampler2D tDiffuse;\n    uniform vec3 defaultColor;\n    uniform float defaultOpacity;\n    uniform float luminosityThreshold;\n    uniform float smoothWidth;\n    varying vec2 vUv;\n    void main() {\n        vec4 texel = texture2D( tDiffuse, vUv );\n        vec3 luma = vec3( 0.299, 0.587, 0.114 );\n        float v = dot( texel.xyz, luma );\n        vec4 outputColor = vec4( defaultColor.rgb, defaultOpacity );\n        float alpha = smoothstep( luminosityThreshold, luminosityThreshold + smoothWidth, v );\n        gl_FragColor = mix( outputColor, texel, alpha );\n    }`\n};\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\nimport * as THREE from \"three\";\n\nimport { CopyShader } from \"./CopyMaterial\";\n\n/**\n * The material to use for the quad of the [[MSAARenderPass]] in the composing.\n */\nexport class MSAAMaterial extends THREE.ShaderMaterial {\n    /**\n     * The constructor of `MSAAMaterial`.\n     *\n     * @param uniforms The [[CopyShader]]'s uniforms.\n     */\n    constructor(uniforms: { [uniformName: string]: THREE.IUniform }) {\n        super({\n            uniforms,\n            vertexShader: CopyShader.vertexShader,\n            fragmentShader: CopyShader.fragmentShader,\n            premultipliedAlpha: true,\n            transparent: true,\n            blending: THREE.AdditiveBlending,\n            depthTest: false,\n            depthWrite: false\n        });\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\nimport * as THREE from \"three\";\n\n/**\n * `SepiaShader`.\n */\nexport const SepiaShader: THREE.Shader = {\n    uniforms: {\n        tDiffuse: { value: null },\n        amount: { value: 1.0 }\n    },\n    vertexShader: `\n        varying vec2 vUv;\n        void main() {\n            vUv = uv;\n            gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n        }`,\n    fragmentShader: `\n        uniform float amount;\n        uniform sampler2D tDiffuse;\n        varying vec2 vUv;\n        void main() {\n            vec4 color = texture2D( tDiffuse, vUv );\n            vec3 c = color.rgb;\n            color.r = dot( c, vec3( 1.0 - 0.607 * amount, 0.769 * amount, 0.189 * amount ) );\n            color.g = dot( c, vec3( 0.349 * amount, 1.0 - 0.314 * amount, 0.168 * amount ) );\n            color.b = dot( c, vec3( 0.272 * amount, 0.534 * amount, 1.0 - 0.869 * amount ) );\n            gl_FragColor = vec4( min( vec3( 1.0 ), color.rgb ), color.a );\n        }`\n};\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\nimport * as THREE from \"three\";\nimport AtmosphereShaderChunks from \"./ShaderChunks/AtmosphereChunks\";\nimport { setShaderDefine } from \"./Utils\";\n\nconst EQUATORIAL_RADIUS: number = 6378137.0;\n\n/**\n * `SkyAtmosphereShader`.\n *\n * Describes shading of atmosphere as seen from outer space.\n */\nexport const SkyAtmosphereShader: THREE.Shader = {\n    uniforms: {\n        u_eyePositionWorld: new THREE.Uniform(new THREE.Vector3()),\n        u_lightDirectionWorld: new THREE.Uniform(new THREE.Vector3(0, 1, 0)),\n        u_modelViewProjection: new THREE.Uniform(new THREE.Matrix4()),\n        // Environment settings:\n        // atmosphere inner and outer radius, camera height, light mode\n        u_atmosphereEnv: new THREE.Uniform(\n            new THREE.Vector4(\n                // Maximum inner radius\n                EQUATORIAL_RADIUS,\n                // Maximum outer radius\n                EQUATORIAL_RADIUS * 1.025,\n                // Camera height\n                0,\n                // Toggles the light modes:\n                // 0 - light always directly overhead,\n                // 1 - lighting uses light direction: uniform u_lightDirectionWorld\n                1\n            )\n        ),\n        u_hsvCorrection: new THREE.Uniform(new THREE.Vector3(0, 0, 0)),\n\n        topColor: new THREE.Uniform(new THREE.Color(0x0077ff)),\n        bottomColor: new THREE.Uniform(new THREE.Color(0xffffff)),\n        offset: new THREE.Uniform(33.0),\n        exponent: new THREE.Uniform(0.6),\n        fogColor: new THREE.Uniform(new THREE.Color(0x0077ff)), // scene.fog.color\n        fogNear: new THREE.Uniform(new THREE.Color(0x0077ff)), // scene.fog.near\n        fogFar: new THREE.Uniform(new THREE.Color(0xffffff)) // scene.fog.far\n    },\n\n    vertexShader: `\n    precision highp float;\n    precision highp int;\n\n    attribute vec4 position;\n\n    uniform mat4 u_modelViewProjection;\n    uniform vec3 u_eyePositionWorld;\n    uniform vec3 u_lightDirectionWorld;\n\n    uniform vec4 u_atmosphereEnv; // Atmosphere inner and outer radius, camera height, light mode\n    uniform vec3 u_hsvCorrection;\n\n    const float Pi = 3.141592653589793;\n    const float Kr = 0.0025;\n    const float Kr4PI = Kr * 4.0 * Pi;\n    const float Km = 0.0015;\n    const float Km4PI = Km * 4.0 * Pi;\n    const float ESun = 15.0; // should be 15.0\n    const float KmESun = Km * ESun;\n    const float KrESun = Kr * ESun;\n    const vec3 InvWavelength = vec3(\n        5.60204474633241,  // Red = 1.0 / Math.pow(0.650, 4.0)\n        9.473284437923038, // Green = 1.0 / Math.pow(0.570, 4.0)\n        19.643802610477206); // Blue = 1.0 / Math.pow(0.475, 4.0)\n\n    const int nSamples = 2;\n    const float fSamples = 2.0;\n\n    varying vec3 v_rayleighColor;\n    varying vec3 v_mieColor;\n    varying vec3 v_vertToCamera;\n\n    ${AtmosphereShaderChunks.atmosphere_common_utils}\n    ${AtmosphereShaderChunks.atmosphere_vertex_utils}\n\n    //\n    // Computes rayleight and mia atmosphere factors for sky.\n    //\n    // Code based on GPU Gems article.\n    //\n    // Author: Sean O'Neil\n    //\n    // Copyright (c) 2004 Sean O'Neil\n    //\n    // https://developer.nvidia.com/gpugems/gpugems2/part-ii-shading-lighting-and-shadows/chapter-16-accurate-atmospheric-scattering\n    //\n    // Further modifications by HERE\n    //\n    AtmosphereColor computeSkyAtmosphere(vec3 v3Pos, vec3 vLightDir, bool dynamicLighting)\n    {\n        // Unpack attributes\n        float fInnerRadius = u_atmosphereEnv.x;\n        float fOuterRadius = u_atmosphereEnv.y;\n        float fCameraHeight = u_atmosphereEnv.z;\n\n        // All that may be const or define(s) at further optimization:\n        float fScale = 1.0 / (fOuterRadius - fInnerRadius);\n        float fScaleOverScaleDepth = (fScale / RayleighScaleDepth);\n        float fCameraHeight2 = fCameraHeight * fCameraHeight;\n        float fOuterRadius2 = fOuterRadius * fOuterRadius;\n\n        // Get the ray from the camera to the vertex and its length (which is the far point of the ray passing through the atmosphere)\n        vec3 v3Ray = v3Pos - u_eyePositionWorld;\n        float fFar = length(v3Ray);\n        v3Ray /= fFar;\n\n    #ifdef CAMERA_IN_SPACE\n\n        // Calculate the closest intersection of the ray with the outer\n        // atmosphere, this is the first point of the ray passing through the atmosphere dome.\n        float fNear = getNearSphereIntersect(u_eyePositionWorld, v3Ray, fCameraHeight2, fOuterRadius2);\n        // Make far relative to first atmosphere intersection\n        fFar -= fNear;\n\n        // Compute the ray's starting position within the atmosphere, then\n        // calculate its scattering offset\n        vec3 v3Start = u_eyePositionWorld + v3Ray * fNear;\n\n        float fStartAngle = dot(v3Ray, v3Start) / fOuterRadius;\n        float fStartDepth = exp(-1.0 / RayleighScaleDepth );\n        float fStartOffset = fStartDepth * scale(fStartAngle);\n\n    #else // CAMERA_IN_ATMOSPHERE\n\n        // The ray starts already in atmosphere\n        vec3 v3Start = u_eyePositionWorld;\n        float height = length(v3Start);\n        float depth = exp(fScaleOverScaleDepth * (fInnerRadius - fCameraHeight));\n        float fStartAngle = dot(v3Ray, v3Start) / height;\n        float fStartOffset = depth * scale(fStartAngle);\n\n    #endif\n\n        // Initialize the scattering loop variables\n        float fSampleLength = fFar / fSamples;\n        float fScaledLength = fSampleLength * fScale;\n        vec3 v3SampleRay = v3Ray * fSampleLength;\n        vec3 v3SamplePoint = v3Start + v3SampleRay * 0.5;\n\n        // Now loop through the sample rays\n        vec3 v3BaseColor = vec3(0.0);\n        vec3 v3Attenuate = vec3(0.0);\n        for(int i=0; i < nSamples; i++)\n        {\n            float height = length(v3SamplePoint);\n            float depth = exp(fScaleOverScaleDepth * (fInnerRadius - height));\n            float fLightAngle = dot(vLightDir, v3SamplePoint) / height;\n            float fCameraAngle = dot(v3Ray, v3SamplePoint) / height;\n            float fScatter = (fStartOffset + depth * (scale(fLightAngle) - scale(fCameraAngle)));\n            v3Attenuate = exp(-fScatter * (InvWavelength * Kr4PI + Km4PI));\n            v3BaseColor += v3Attenuate * (depth * fScaledLength);\n            v3SamplePoint += v3SampleRay;\n        }\n\n        // Scale the Mie and Rayleigh colors and set up output of the function\n        AtmosphereColor color;\n        color.mie = v3BaseColor * KmESun;\n        color.rayleigh = v3BaseColor * (InvWavelength * KrESun);\n        return color;\n    }\n\n    void main(void)\n    {\n        float fLightMode = u_atmosphereEnv.w;\n        bool bDynamicLight = fLightMode != 0.0;\n\n        vec3 vLightDir = conditionalBranchFree(bDynamicLight,\n            u_lightDirectionWorld,\n            u_eyePositionWorld);\n        vLightDir = normalize(vLightDir);\n\n        AtmosphereColor atmColor = computeSkyAtmosphere(position.xyz, vLightDir, bDynamicLight);\n        v_mieColor = atmColor.mie;\n        v_rayleighColor = atmColor.rayleigh;\n        v_vertToCamera = u_eyePositionWorld - position.xyz;\n\n        gl_Position = u_modelViewProjection * position;\n    }\n    `,\n\n    fragmentShader: `\n    // Because of harsh light distribution the exposure correction is always enabled for the sky.\n    #define CORRECT_EXPOSURE 1\n\n    precision highp float;\n    precision highp int;\n\n    #ifdef CORRECT_COLOR\n    uniform vec3 u_hsvCorrection; // Hue, saturation, brightness\n    #endif\n\n    uniform vec4 u_atmosphereEnv; // Atmosphere inner and outer radius, camera height, light mode\n    uniform vec3 u_eyePositionWorld;\n    uniform vec3 u_lightDirectionWorld;\n\n    const float g = -0.95;\n    const float g2 = g * g;\n\n    varying vec3 v_rayleighColor;\n    varying vec3 v_mieColor;\n    varying vec3 v_vertToCamera;\n\n    ${AtmosphereShaderChunks.atmosphere_common_utils}\n    ${AtmosphereShaderChunks.atmosphere_fragment_utils}\n\n    void main(void)\n    {\n        float fInnerRadius = u_atmosphereEnv.x;\n        float fOuterRadius = u_atmosphereEnv.y;\n        float fCameraHeight = u_atmosphereEnv.z;\n        float fLightMode = u_atmosphereEnv.w;\n        bool bDynamicLight = fLightMode != 0.0;\n\n        vec3 vLightDir = conditionalBranchFree(bDynamicLight,\n            u_lightDirectionWorld,\n            u_eyePositionWorld);\n        vLightDir = normalize(vLightDir);\n\n        // NOTE:\n        // For better precision normalization may be added on fragment (for mobile devices)\n        // while in vertex shader may be left un-normalized\n        // dot(vLightDir, normalize(v_vertToCamera)) / length(v_vertToCamera);\n        float fCosAngle = dot(vLightDir, v_vertToCamera) / length(v_vertToCamera);\n        float fRayleighPhase = 0.75 * (1.0 + fCosAngle * fCosAngle);\n        float fMiePhase = 1.5 * ((1.0 - g2) / (2.0 + g2)) * (1.0 + fCosAngle * fCosAngle) / pow(1.0 + g2 - 2.0 * g * fCosAngle, 1.5);\n\n        vec3 cRgb = fRayleighPhase * v_rayleighColor + fMiePhase * v_mieColor;\n\n        // Sky produces very harsh lighting effect so exposure correction is always enabled.\n    #if !defined(HDR_FRAME_BUFFER) && defined(CORRECT_EXPOSURE)\n        // Exposure factor may be exposed to uniform variable.\n        cRgb = correctExposure(cRgb, 2.0);\n    #endif\n\n    #ifdef CORRECT_COLOR\n        cRgb = correctColor(cRgb, u_hsvCorrection);\n    #endif\n\n        // Alter alpha based on how close the viewer is to the ground (1.0 = on ground, 0.0 = at edge of atmosphere)\n        float fAtmosphereAlpha = clamp((fOuterRadius - fCameraHeight) /\n            (fOuterRadius - fInnerRadius), 0.0, 1.0);\n\n        // Alter alpha based on time of day (0.0 = night , 1.0 = day)\n        float fNightAlpha = conditionalBranchFree(bDynamicLight,\n            clamp(dot(normalize(u_eyePositionWorld), vLightDir), 0.0, 1.0),\n            1.0);\n        fAtmosphereAlpha *= pow(fNightAlpha, 0.5);\n\n        gl_FragColor = vec4(cRgb, mix(cRgb.b, 1.0, fAtmosphereAlpha));\n    }\n    `\n};\n\nexport class SkyAtmosphereMaterial extends THREE.RawShaderMaterial {\n    constructor(params?: any) {\n        // Import shader chunks\n        const defines: { [key: string]: any } = {};\n        defines.CAMERA_IN_SPACE = \"\";\n\n        const shaderParams = {\n            name: \"SkyAtmosphereMaterial\",\n            vertexShader: SkyAtmosphereShader.vertexShader,\n            fragmentShader: SkyAtmosphereShader.fragmentShader,\n            uniforms: SkyAtmosphereShader.uniforms,\n            transparent: true,\n            depthTest: true,\n            depthWrite: false,\n            side: THREE.BackSide,\n            blending: THREE.NormalBlending,\n            fog: false\n        };\n        super(shaderParams);\n    }\n\n    setDynamicLighting(enableLighting: boolean) {\n        this.uniforms.u_atmosphereEnv.value.w = enableLighting ? 1.0 : 0.0;\n    }\n\n    /**\n     * Set maximum outer radius of atmosphere.\n     *\n     * @default [[EarthConstants.EQUATORIAL_RADIUS]] * 1.025\n     */\n    set outerRadius(radius: number) {\n        this.uniforms.u_atmosphereEnv.value.y = radius;\n    }\n\n    get outerRadius(): number {\n        return this.uniforms.u_atmosphereEnv.value.y;\n    }\n\n    /**\n     * Set maximum inner radius of atmosphere.\n     *\n     * @default [[EarthConstants.EQUATORIAL_RADIUS]].\n     */\n    set innerRadius(radius: number) {\n        this.uniforms.u_atmosphereEnv.value.x = radius;\n    }\n\n    get innerRadius(): number {\n        return this.uniforms.u_atmosphereEnv.value.x;\n    }\n\n    /**\n     * Updates the uniform data of a material used to render an atmosphere.\n     *\n     * This includes only uniforms that may change frame by frame, other uniforms are\n     * accessed with convenient material setters and getters.\n     *\n     * @param shaderMaterial Material which uniforms will be updated.\n     * @param matrixWorldInverse Inverse of world matrix used to position the atmosphere dome.\n     * @param lightDirection The light directional vector in world space.\n     * @param camera Camera used in rendering.\n     */\n    updateUniforms(\n        shaderMaterial: THREE.ShaderMaterial,\n        object: THREE.Object3D,\n        camera: THREE.Camera,\n        lightDirection: THREE.Vector3\n    ): void {\n        const cameraInfo = this.getCameraInfo(object, camera);\n\n        if (shaderMaterial !== undefined && shaderMaterial.isMaterial) {\n            if (\n                shaderMaterial.uniforms &&\n                shaderMaterial.uniforms.u_atmosphereEnv &&\n                shaderMaterial.uniforms.u_hsvCorrection &&\n                shaderMaterial.uniforms.u_eyePositionWorld &&\n                shaderMaterial.uniforms.u_modelViewProjection &&\n                shaderMaterial.uniforms.u_lightDirectionWorld\n            ) {\n                const eyePos = cameraInfo.eyePos;\n                const mvp = cameraInfo.modelViewProjection;\n                const cameraHeight = cameraInfo.eyeHeight;\n\n                shaderMaterial.uniforms.u_eyePositionWorld.value.copy(eyePos);\n                shaderMaterial.uniforms.u_modelViewProjection.value.copy(mvp);\n\n                shaderMaterial.uniforms.u_atmosphereEnv.value.z = cameraHeight;\n                shaderMaterial.uniforms.u_lightDirectionWorld.value = lightDirection.clone();\n\n                const cameraInSpace = cameraHeight > this.outerRadius;\n                const needsUpdate0 = setShaderDefine(\n                    shaderMaterial.defines,\n                    \"CAMERA_IN_SPACE\",\n                    cameraInSpace\n                );\n                const needsUpdate1 = setShaderDefine(\n                    shaderMaterial.defines,\n                    \"CAMERA_IN_ATMOSPHERE\",\n                    !cameraInSpace\n                );\n                shaderMaterial.needsUpdate = needsUpdate0 || needsUpdate1;\n            } else {\n                throw Error(\"Atmosphere material has missing uniforms\");\n            }\n        } else {\n            throw Error(\"Wrong object used, only Material objects are supported\");\n        }\n    }\n\n    /*\n     * Calculate camera position used in vertex shader of atmosphere materials.\n     *\n     * @param object\n     * @param camera Camera used to get the eye position.\n     */\n    private getCameraInfo(\n        object: THREE.Object3D,\n        camera: THREE.Camera,\n        reverse: boolean = false\n    ): { modelViewProjection: THREE.Matrix4; eyePos: THREE.Vector3; eyeHeight: number } {\n        if (reverse) {\n            const modelMatrix = new THREE.Matrix4().identity();\n            const viewMatrix = new THREE.Matrix4().getInverse(object.matrixWorld).transpose();\n            const projectionMatrix = camera.projectionMatrix;\n\n            const mvpMatrix = new THREE.Matrix4();\n            // MVP = Projection * View * Model\n            mvpMatrix.multiplyMatrices(viewMatrix, modelMatrix);\n            mvpMatrix.multiplyMatrices(projectionMatrix, mvpMatrix);\n\n            const eyePos = new THREE.Vector3();\n            object.getWorldPosition(eyePos);\n            const objectPos = new THREE.Vector3();\n            camera.getWorldPosition(objectPos);\n            const eyeHeight = objectPos.distanceTo(eyePos);\n            return {\n                modelViewProjection: mvpMatrix,\n                eyePos,\n                eyeHeight\n            };\n        } else {\n            const modelMatrix = object.matrixWorld;\n            const viewMatrix = camera.matrixWorldInverse;\n            const projectionMatrix = camera.projectionMatrix;\n\n            const mvpMatrix = new THREE.Matrix4();\n            // MVP = Projection * View * Model\n            mvpMatrix.multiplyMatrices(viewMatrix, modelMatrix);\n            mvpMatrix.multiplyMatrices(projectionMatrix, mvpMatrix);\n\n            const eyePos = new THREE.Vector3();\n            camera.getWorldPosition(eyePos);\n            const objectPos = new THREE.Vector3();\n            object.getWorldPosition(objectPos);\n            const eyeHeight = objectPos.distanceTo(eyePos);\n            // Normally we would return simply camera position, but since camera is not moving in\n            // the globe view only the world, we need to calculate eye relative to object position.\n            eyePos.sub(objectPos);\n            return {\n                modelViewProjection: mvpMatrix,\n                eyePos,\n                eyeHeight\n            };\n        }\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { LineCaps, LineDashes } from \"@here/harp-datasource-protocol\";\nimport * as THREE from \"three\";\nimport { DisplacementFeature, DisplacementFeatureParameters } from \"./DisplacementFeature\";\nimport { FadingFeature, FadingFeatureParameters } from \"./MapMeshMaterials\";\nimport linesShaderChunk, { LineCapsModes } from \"./ShaderChunks/LinesChunks\";\nimport {\n    enforceBlending,\n    getShaderMaterialDefine,\n    setShaderDefine,\n    setShaderMaterialDefine\n} from \"./Utils\";\n\nconst LineCapsDefinesMapping: { [key in LineCaps]: number } = {\n    None: LineCapsModes.CAPS_NONE,\n    Square: LineCapsModes.CAPS_SQUARE,\n    Round: LineCapsModes.CAPS_ROUND,\n    TriangleIn: LineCapsModes.CAPS_TRIANGLE_IN,\n    TriangleOut: LineCapsModes.CAPS_TRIANGLE_OUT\n};\n\nconst DefinesLineCapsMapping: { [key: number]: LineCaps } = Object.keys(\n    LineCapsDefinesMapping\n).reduce((r, lineCapsName) => {\n    const defineKey = lineCapsName as keyof typeof LineCapsDefinesMapping;\n    const defineValue: number = LineCapsDefinesMapping[defineKey];\n    r[defineValue] = defineKey;\n    return r;\n}, ({} as any) as { [key: number]: LineCaps });\n\nexport enum LineDashesModes {\n    DASHES_SQUARE = 0,\n    DASHES_ROUND,\n    DASHES_DIAMOND\n}\n\nconst LineDashesDefinesMapping: { [key in LineDashes]: number } = {\n    Square: LineDashesModes.DASHES_SQUARE,\n    Round: LineDashesModes.DASHES_ROUND,\n    Diamond: LineDashesModes.DASHES_DIAMOND\n};\n\nconst DefinesLineDashesMapping: { [key: number]: LineDashes } = Object.keys(\n    LineDashesDefinesMapping\n).reduce((r, lineDashesName) => {\n    const defineKey = lineDashesName as keyof typeof LineDashesDefinesMapping;\n    const defineValue: number = LineDashesDefinesMapping[defineKey];\n    r[defineValue] = defineKey;\n    return r;\n}, ({} as any) as { [key: number]: LineDashes });\n\n/**\n * The vLength contains the actual line length, it's needed for the creation of line caps by\n * detecting line ends. `vLength == vExtrusionCoord.x + lineWidth * 2`\n */\n/**\n * The vExtrusionStrength relies on the edges of the lines. Represents how far the current point was\n * extruded on the edges because of the current angle. Needed for preventing line caps artifacts on\n * sharp line edges. For example, on sharp edges, some vertices can be extruded much further than\n * the full line length.\n */\n\nconst tmpColor = new THREE.Color();\nconst vertexSource: string = `\n#define SEGMENT_OFFSET 0.1\n\nattribute vec3 extrusionCoord;\nattribute vec3 position;\nattribute vec4 bitangent;\nattribute vec3 tangent;\nattribute vec2 uv;\nattribute vec3 normal;\n\nuniform mat4 modelViewMatrix;\nuniform mat4 projectionMatrix;\nuniform float extrusionWidth;\nuniform float outlineWidth;\nuniform float offset;\nuniform vec2 drawRange;\n\n#ifdef USE_DISPLACEMENTMAP\nuniform sampler2D displacementMap;\n#endif\n\n#ifdef USE_TILE_CLIP\nvarying vec3 vPosition;\n#endif\nvarying vec3 vRange;\nvarying vec4 vCoords;\n#ifdef USE_COLOR\nattribute vec3 color;\nvarying vec3 vColor;\n#endif\n\n#ifdef USE_FADING\n#include <fading_pars_vertex>\n#endif\n\n#include <fog_pars_vertex>\n\n#include <extrude_line_vert_func>\n\nvoid main() {\n    // Calculate the segment.\n    vec2 segment = abs(extrusionCoord.xy) - SEGMENT_OFFSET;\n    float segmentPos = sign(extrusionCoord.x) / 2.0 + 0.5;\n\n    // Calculate the vertex position inside the line (segment) and extrusion direction and factor.\n    float linePos = mix(segment.x, segment.y, segmentPos);\n    vec2 extrusionDir = sign(extrusionCoord.xy);\n    // Precompute to avoid computing multiple times\n    float tanHalfAngle = tan(bitangent.w / 2.0);\n    float extrusionFactor = extrusionDir.y * tanHalfAngle;\n\n    // Calculate the extruded vertex position (and scale the extrusion direction).\n    vec3 pos = extrudeLine(\n        position, linePos, extrusionWidth + outlineWidth, bitangent, tangent, tanHalfAngle,\n        extrusionDir);\n\n    // Store the normalized extrusion coordinates in vCoords (with their ranges in vRange).\n    vRange = vec3(extrusionCoord.z, extrusionWidth, extrusionFactor);\n    vCoords = vec4(extrusionDir / vRange.xy, segment / vRange.x);\n\n    // Adjust the segment to fit the drawRange.\n    float capDist = (extrusionWidth + outlineWidth) / extrusionCoord.z;\n    if ((vCoords.w + capDist) < drawRange.x || (vCoords.z - capDist) > drawRange.y) {\n        vCoords.zw += 1.0;\n    }\n    if (vCoords.z < drawRange.x) {\n        vCoords.zw += vec2(drawRange.x - vCoords.z, 0.0);\n    }\n    if (vCoords.w > drawRange.y) {\n        vCoords.zw -= vec2(0.0, vCoords.w - drawRange.y);\n    }\n\n    // Transform position.\n    #ifdef USE_DISPLACEMENTMAP\n    pos += normalize( normal ) * texture2D( displacementMap, uv ).x;\n    #endif\n\n    // Shift the line based on the offset, where the bitangent is the cross product of the average\n    // of the two direction vectors (the previous and next segment directions) and the normal of\n    // the line (facing into the sky). The w component is the angle between the two segments.\n    // Note, we need to take the angle into consideration, so we use trigonometry to calculate how\n    // much we need to extend the offset. Note, orthough this looks complicated we are doing this\n    // in the vertex shader, so it should not cause a performance issue.\n    pos += bitangent.xyz * offset * sqrt(1.0 + pow(abs(tanHalfAngle), 2.0));\n\n    vec4 mvPosition = modelViewMatrix * vec4(pos, 1.0);\n    gl_Position = projectionMatrix * mvPosition;\n\n    // Pass extruded position to fragment shader.\n    #ifdef USE_TILE_CLIP\n    vPosition = pos;\n    #endif\n\n    #ifdef USE_COLOR\n    // Pass vertex color to fragment shader.\n    vColor = color;\n    #endif\n\n    #ifdef USE_FADING\n    #include <fading_vertex>\n    #endif\n\n    #include <fog_vertex>\n}`;\n\nconst fragmentSource: string = `\nprecision highp float;\nprecision highp int;\n\nuniform vec3 diffuse;\nuniform vec3 outlineColor;\nuniform float opacity;\nuniform float extrusionWidth;\nuniform float outlineWidth;\nuniform vec2 tileSize;\nuniform vec2 drawRange;\n\n#ifdef USE_DASHED_LINE\nuniform float dashSize;\nuniform float gapSize;\nuniform vec3 dashColor;\n\n#define DASHES_SQUARE ${LineDashesModes.DASHES_SQUARE}\n#define DASHES_ROUND ${LineDashesModes.DASHES_ROUND}\n#define DASHES_DIAMOND ${LineDashesModes.DASHES_DIAMOND}\n#endif\n\n#ifdef USE_TILE_CLIP\nvarying vec3 vPosition;\n#endif\n\nvarying vec3 vRange;\nvarying vec4 vCoords;\n#ifdef USE_COLOR\nvarying vec3 vColor;\n#endif\n\n#include <round_edges_and_add_caps>\n#include <tile_clip_func>\n\n#ifdef USE_FADING\n#include <fading_pars_fragment>\n#endif\n\n#include <fog_pars_fragment>\n\nvoid main() {\n    float alpha = opacity;\n    vec3 outputDiffuse = diffuse;\n\n    #ifdef USE_TILE_CLIP\n    tileClip(vPosition.xy, tileSize);\n    #endif\n\n    // Calculate distance to center (0.0: lineCenter, 1.0: lineEdge).\n    float distToCenter = roundEdgesAndAddCaps(vCoords, vRange);\n    // Calculate distance to edge (-1.0: lineCenter, 0.0: lineEdge).\n    float distToEdge = distToCenter - (extrusionWidth + outlineWidth) / extrusionWidth;\n\n    // Decrease the line opacity by the distToEdge, making the transition steeper when the slope\n    // of distToChange increases (i.e. the line is further away).\n    float width = fwidth(distToEdge);\n    alpha *= (1.0 - smoothstep(-width, width, distToEdge));\n\n    #ifdef USE_DASHED_LINE\n    // Compute the distance to the dash origin (0.0: dashOrigin, 1.0: dashEnd, (d+g)/d: gapEnd).\n    float d = dashSize / vRange.x;\n    float g = gapSize / vRange.x;\n    float distToDashOrigin = mod(vCoords.x, d + g) / d;\n\n    // Compute distance to dash edge (0.5: dashCenter, 0.0: dashEdge) and compute the\n    // dashBlendFactor similarly on how we did it for the line opacity.\n    float distToDashEdge = 0.5 - distance(distToDashOrigin, (d + g) / d * 0.5);\n    #if DASHES_MODE == DASHES_ROUND\n    distToDashEdge = 0.5 - distance(vec2(distToCenter * 0.5, distToDashEdge), vec2(0.0, 0.5));\n    #elif DASHES_MODE == DASHES_DIAMOND\n    distToDashEdge -= distToCenter * 0.5;\n    #endif\n    float dashWidth = fwidth(distToDashEdge);\n    float dashBlendFactor = 1.0 - smoothstep(-dashWidth, dashWidth, distToDashEdge);\n\n    #ifdef USE_DASH_COLOR\n    outputDiffuse = mix(diffuse, dashColor, dashBlendFactor);\n    #endif\n    #endif\n\n    #ifdef USE_OUTLINE\n    // Calculate distance to outline (0.0: lineEdge, outlineWidth/lineWidth: outlineEdge) and\n    // compute the outlineBlendFactor (used to mix line and outline colors).\n    float distToOutline = distToCenter - 1.0;\n    float outlineWidth = fwidth(distToOutline);\n    float outlineBlendFactor = smoothstep(-outlineWidth, outlineWidth, distToOutline);\n\n    // Mix the colors using the different computed factors.\n    #if defined(USE_DASHED_LINE) && !defined(USE_DASH_COLOR)\n    float colorBlendFactor = smoothstep(-1.0, 1.0, dashBlendFactor - outlineBlendFactor);\n    outputDiffuse = mix(\n      mix(\n        mix(outlineColor, diffuse, colorBlendFactor),\n        outputDiffuse,\n        dashBlendFactor\n      ),\n      outlineColor,\n      outlineBlendFactor\n    );\n    #else\n    outputDiffuse = mix(outputDiffuse, outlineColor, outlineBlendFactor);\n    #endif\n    #endif\n\n    #if defined(USE_DASHED_LINE) && !defined(USE_DASH_COLOR)\n    // Multiply the alpha by the dashBlendFactor.\n    #if defined(USE_OUTLINE)\n    alpha *= clamp(dashBlendFactor + outlineBlendFactor, 0.0, 1.0);\n    #else\n    alpha *= 1.0 - dashBlendFactor;\n    #endif\n    #endif\n\n    #ifdef USE_COLOR\n    gl_FragColor = vec4( outputDiffuse * vColor, alpha );\n    #else\n    gl_FragColor = vec4( outputDiffuse, alpha );\n    #endif\n\n    #include <fog_fragment>\n\n    #ifdef USE_FADING\n    #include <fading_fragment>\n    #endif\n}`;\n\n/**\n * Parameters used when constructing a new [[SolidLineMaterial]].\n */\nexport interface SolidLineMaterialParameters\n    extends FadingFeatureParameters,\n        DisplacementFeatureParameters {\n    /**\n     * Line color.\n     */\n    color?: number | string;\n\n    /**\n     * Line outline color.\n     */\n    outlineColor?: number | string;\n\n    /**\n     * Enables/Disable depth test.\n     */\n    depthTest?: boolean;\n\n    /**\n     * Enables/Disable depth write.\n     */\n    depthWrite?: boolean;\n\n    /**\n     * `SolidLineMaterial` extends the ThreeJS `RawShaderMaterial` that does not update fog at\n     * runtime, so instead of recompiling everything we pass it in the constructor.\n     */\n    fog?: boolean;\n\n    /**\n     * Line width.\n     */\n    lineWidth?: number;\n\n    /**\n     * Outline width.\n     */\n    outlineWidth?: number;\n\n    /**\n     * Line opacity.\n     */\n    opacity?: number;\n\n    /**\n     * Describes line caps type (`\"None\"`, `\"Round\"`, `\"Square\"`, `\"TriangleOut\"`, `\"TriangleIn\"`).\n     * Default is `\"Round\"`.\n     */\n    caps?: LineCaps;\n\n    /**\n     * Describes the starting drawing position for the line (in the range [0...1]).\n     * Default is `0.0`.\n     */\n    drawRangeStart?: number;\n\n    /**\n     * Describes the ending drawing position for the line (in the range [0...1]).\n     * Default is `1.0`.\n     */\n    drawRangeEnd?: number;\n\n    /**\n     * Describes line dash type (`\"Round\"`, `\"Square\"`, `\"Diamond\"`).\n     * Default is `\"Square\"`.\n     */\n    dashes?: LineDashes;\n\n    /**\n     * Line dashes color.\n     */\n    dashColor?: number | string;\n\n    /**\n     * Size of the dashed segments.\n     */\n    dashSize?: number;\n\n    /**\n     * Size of the gaps between dashed segments.\n     */\n    gapSize?: number;\n\n    /**\n     * How much to offset in world units.\n     */\n    offset?: number;\n}\n\n/**\n * Material designed to render solid variable-width lines.\n */\nexport class SolidLineMaterial extends THREE.RawShaderMaterial\n    implements DisplacementFeature, FadingFeature {\n    static DEFAULT_COLOR: number = 0xff0000;\n    static DEFAULT_WIDTH: number = 1.0;\n    static DEFAULT_OUTLINE_WIDTH: number = 0.0;\n    static DEFAULT_OPACITY: number = 1.0;\n    static DEFAULT_DRAW_RANGE_START: number = 0.0;\n    static DEFAULT_DRAW_RANGE_END: number = 1.0;\n    static DEFAULT_DASH_SIZE: number = 1.0;\n    static DEFAULT_GAP_SIZE: number = 1.0;\n    static DEFAULT_OFFSET: number = 0.0;\n\n    /**\n     * @hidden\n     * Material properties overrides.\n     */\n    private m_fog: boolean;\n    private m_opacity: number;\n\n    /**\n     * Constructs a new `SolidLineMaterial`.\n     *\n     * @param params `SolidLineMaterial` parameters.\n     */\n    constructor(params?: SolidLineMaterialParameters) {\n        Object.assign(THREE.ShaderChunk, linesShaderChunk);\n\n        FadingFeature.patchGlobalShaderChunks();\n\n        // Setup default defines.\n        const defines: { [key: string]: any } = {\n            CAPS_MODE: LineCapsModes.CAPS_ROUND,\n            DASHES_MODE: LineDashesModes.DASHES_SQUARE\n        };\n\n        // Prepare defines based on params passed in, before super class c-tor, this ensures\n        // proper set for shader compilation, without need to re-compile.\n        let fogParam = true;\n        let opacityParam = 1.0;\n        let displacementMap;\n        if (params !== undefined) {\n            fogParam = params.fog === true;\n            if (fogParam) {\n                setShaderDefine(defines, \"USE_FOG\", true);\n            }\n            opacityParam = params.opacity !== undefined ? params.opacity : opacityParam;\n            displacementMap = params.displacementMap;\n            if (displacementMap !== undefined) {\n                setShaderDefine(defines, \"USE_DISPLACEMENTMAP\", true);\n            }\n            const hasOutline = params.outlineWidth !== undefined && params.outlineWidth > 0;\n            if (hasOutline) {\n                setShaderDefine(defines, \"USE_OUTLINE\", true);\n            }\n        }\n\n        const shaderParams: THREE.ShaderMaterialParameters = {\n            name: \"SolidLineMaterial\",\n            vertexShader: vertexSource,\n            fragmentShader: fragmentSource,\n            uniforms: THREE.UniformsUtils.merge([\n                {\n                    diffuse: new THREE.Uniform(new THREE.Color(SolidLineMaterial.DEFAULT_COLOR)),\n                    dashColor: new THREE.Uniform(new THREE.Color(SolidLineMaterial.DEFAULT_COLOR)),\n                    outlineColor: new THREE.Uniform(\n                        new THREE.Color(SolidLineMaterial.DEFAULT_COLOR)\n                    ),\n                    extrusionWidth: new THREE.Uniform(SolidLineMaterial.DEFAULT_WIDTH),\n                    outlineWidth: new THREE.Uniform(SolidLineMaterial.DEFAULT_OUTLINE_WIDTH),\n                    offset: new THREE.Uniform(SolidLineMaterial.DEFAULT_OFFSET),\n                    opacity: new THREE.Uniform(SolidLineMaterial.DEFAULT_OPACITY),\n                    tileSize: new THREE.Uniform(new THREE.Vector2()),\n                    fadeNear: new THREE.Uniform(FadingFeature.DEFAULT_FADE_NEAR),\n                    fadeFar: new THREE.Uniform(FadingFeature.DEFAULT_FADE_FAR),\n                    displacementMap: new THREE.Uniform(\n                        displacementMap !== undefined ? displacementMap : new THREE.Texture()\n                    ),\n                    drawRange: new THREE.Uniform(\n                        new THREE.Vector2(\n                            SolidLineMaterial.DEFAULT_DRAW_RANGE_START,\n                            SolidLineMaterial.DEFAULT_DRAW_RANGE_END\n                        )\n                    ),\n                    dashSize: new THREE.Uniform(SolidLineMaterial.DEFAULT_DASH_SIZE),\n                    gapSize: new THREE.Uniform(SolidLineMaterial.DEFAULT_GAP_SIZE)\n                },\n                // We need the fog uniforms available when we use `fog` setter as the internal\n                // recompilation cannot add or remove uniforms.\n                THREE.UniformsLib.fog\n            ]),\n            defines,\n            // No need to pass overridden `fog` and `opacity` params they will be set\n            // after super c-tor call.\n            fog: fogParam,\n            opacity: opacityParam\n        };\n        super(shaderParams);\n        // Required to satisfy compiler error if fields has no initializer or are not definitely\n        // assigned in the constructor, this also mimics ShaderMaterial set of defaults\n        // for overridden props.\n        this.m_fog = fogParam;\n        this.m_opacity = opacityParam;\n\n        enforceBlending(this);\n        this.extensions.derivatives = true;\n\n        // Apply initial parameter values.\n        if (params !== undefined) {\n            if (params.color !== undefined) {\n                tmpColor.set(params.color as any);\n                this.color = tmpColor;\n            }\n            if (params.outlineColor !== undefined) {\n                tmpColor.set(params.outlineColor as any);\n                this.outlineColor = tmpColor;\n            }\n            if (params.lineWidth !== undefined) {\n                this.lineWidth = params.lineWidth;\n            }\n            if (params.outlineWidth !== undefined) {\n                this.outlineWidth = params.outlineWidth;\n            }\n            if (params.opacity !== undefined) {\n                this.opacity = params.opacity;\n            }\n            if (params.depthTest !== undefined) {\n                this.depthTest = params.depthTest;\n            }\n            if (params.depthWrite !== undefined) {\n                this.depthWrite = params.depthWrite;\n            }\n            if (params.fadeNear !== undefined) {\n                this.fadeNear = params.fadeNear;\n            }\n            if (params.fadeFar !== undefined) {\n                this.fadeFar = params.fadeFar;\n            }\n            if (params.displacementMap !== undefined) {\n                this.displacementMap = params.displacementMap;\n            }\n            if (params.caps !== undefined) {\n                this.caps = params.caps;\n            }\n            if (params.drawRangeStart !== undefined) {\n                this.drawRangeStart = params.drawRangeStart;\n            }\n            if (params.drawRangeEnd !== undefined) {\n                this.drawRangeEnd = params.drawRangeEnd;\n            }\n            if (params.dashes !== undefined) {\n                this.dashes = params.dashes;\n            }\n            if (params.dashColor !== undefined) {\n                tmpColor.set(params.dashColor as any);\n                this.dashColor = tmpColor;\n            }\n            if (params.dashSize !== undefined) {\n                this.dashSize = params.dashSize;\n            }\n            if (params.gapSize !== undefined) {\n                this.gapSize = params.gapSize;\n            }\n            if (params.fog !== undefined) {\n                this.fog = params.fog;\n            }\n            this.offset = params.offset ?? 0;\n        }\n        // ShaderMaterial overrides requires invalidation cause super c-tor may set this\n        // properties before related `defines` and `uniforms` were created.\n        this.invalidateFog();\n        this.invalidateOpacity();\n    }\n\n    /**\n     * Overrides THREE.Material.fog flag to add support for custom shader.\n     *\n     * @param enable Whether we want to enable the fog.\n     */\n    set fog(enable: boolean) {\n        this.m_fog = enable;\n        // Function may be called from THREE.js cause we override setter,\n        // in this case defines are not yet initialized and require late invalidation in\n        // SolidLineMaterial c-tor.\n        if (this.defines !== undefined) {\n            setShaderMaterialDefine(this, \"USE_FOG\", enable);\n        }\n    }\n\n    /**\n     * Checks if fog is enabled.\n     */\n    get fog(): boolean {\n        return this.m_fog && getShaderMaterialDefine(this, \"USE_FOG\") === true;\n    }\n\n    /**\n     * Sets the offset used to shift the line in world space perpendicular to the direction.\n     */\n    set offset(offset: number) {\n        this.uniforms.offset.value = offset;\n    }\n\n    /**\n     * @return The offset to shift the line in world space perpendicular to the direction.\n     */\n    get offset(): number {\n        return this.uniforms.offset.value as number;\n    }\n\n    /**\n     * The method to call to recompile a material to enable/disable outline effect\n     *\n     * @param enable Whether we want to use outline.\n     */\n    set outline(enable: boolean) {\n        setShaderMaterialDefine(this, \"USE_OUTLINE\", enable);\n    }\n\n    /**\n     * Checks if outline is enabled.\n     */\n    get outline(): boolean {\n        return getShaderMaterialDefine(this, \"USE_OUTLINE\") === true;\n    }\n\n    /**\n     * Line opacity.\n     */\n    get opacity(): number {\n        return this.m_opacity;\n    }\n    set opacity(value: number) {\n        this.m_opacity = value;\n        // Setting opacity before uniform being created requires late invalidation,\n        // call to invalidateOpacity() is done at the end of c-tor.\n        if (this.uniforms !== undefined) {\n            this.uniforms.opacity.value = value;\n        }\n    }\n\n    /**\n     * Line color.\n     */\n    get color(): THREE.Color {\n        return this.uniforms.diffuse.value as THREE.Color;\n    }\n    set color(value: THREE.Color) {\n        this.uniforms.diffuse.value.copy(value);\n    }\n\n    /**\n     * Outline color.\n     *\n     * @note The width of outline ([[outlineWidth]]) need to be also set to enable outlining.\n     */\n    get outlineColor(): THREE.Color {\n        return this.uniforms.outlineColor.value as THREE.Color;\n    }\n    set outlineColor(value: THREE.Color) {\n        this.uniforms.outlineColor.value.copy(value);\n    }\n\n    /**\n     * Dash color.\n     *\n     * @note The property [[gapSize]] need to be set to enable dashed line.\n     */\n    get dashColor(): THREE.Color {\n        return this.uniforms.dashColor.value as THREE.Color;\n    }\n    set dashColor(value: THREE.Color) {\n        this.uniforms.dashColor.value.copy(value);\n        setShaderMaterialDefine(this, \"USE_DASH_COLOR\", true);\n    }\n\n    /**\n     * Line width.\n     */\n    get lineWidth(): number {\n        return (this.uniforms.extrusionWidth.value as number) * 2;\n    }\n    set lineWidth(value: number) {\n        this.uniforms.extrusionWidth.value = value / 2;\n    }\n\n    /**\n     * Outline width.\n     */\n    get outlineWidth(): number {\n        return this.uniforms.outlineWidth.value as number;\n    }\n    set outlineWidth(value: number) {\n        this.uniforms.outlineWidth.value = value;\n        this.outline = value > 0.0;\n    }\n\n    /**\n     * Size of the dashed segments.\n     *\n     * @note Ths [[gapSize]] need to be also set to enable dashed line.\n     * @see gapSize.\n     */\n    get dashSize(): number {\n        return this.uniforms.dashSize.value as number;\n    }\n    set dashSize(value: number) {\n        this.uniforms.dashSize.value = value;\n    }\n\n    /**\n     * Size of the gaps between dashed segments.\n     *\n     * @note You may also need to set [[dashSize]].\n     * @see dashSize.\n     */\n    get gapSize(): number {\n        return this.uniforms.gapSize.value as number;\n    }\n    set gapSize(value: number) {\n        this.uniforms.gapSize.value = value;\n        setShaderMaterialDefine(this, \"USE_DASHED_LINE\", value > 0.0);\n    }\n\n    /**\n     * Caps mode.\n     */\n    get caps(): LineCaps {\n        let result: LineCaps = \"Round\";\n        const capsMode = getShaderMaterialDefine(this, \"CAPS_MODE\");\n        // Sanity check if material define is numerical and has direct mapping to LineCaps type.\n        if (typeof capsMode === \"number\" && DefinesLineCapsMapping.hasOwnProperty(capsMode)) {\n            result = DefinesLineCapsMapping[capsMode];\n        }\n        return result;\n    }\n    set caps(value: LineCaps) {\n        // Line caps mode may be set directly from theme, thus we need to check value\n        // for correctness and provide string to define mapping in fragment shader.\n        if (LineCapsDefinesMapping.hasOwnProperty(value)) {\n            setShaderMaterialDefine(this, \"CAPS_MODE\", LineCapsDefinesMapping[value]);\n        }\n    }\n\n    /**\n     * Dashes mode.\n     */\n    get dashes(): LineDashes {\n        let result: LineDashes = \"Square\";\n        const dashesMode = getShaderMaterialDefine(this, \"DASHES_MODE\");\n        // Sanity check if material define is numerical and has direct mapping to LineDashes type.\n        if (typeof dashesMode === \"number\" && DefinesLineDashesMapping.hasOwnProperty(dashesMode)) {\n            result = DefinesLineDashesMapping[dashesMode];\n        }\n        return result;\n    }\n    set dashes(value: LineDashes) {\n        // Line dashes mode may be set directly from theme, thus we need to check value\n        // for correctness and provide string to define mapping in fragment shader.\n        if (LineDashesDefinesMapping.hasOwnProperty(value)) {\n            setShaderMaterialDefine(this, \"DASHES_MODE\", LineDashesDefinesMapping[value]);\n        }\n    }\n\n    get fadeNear(): number {\n        return this.uniforms.fadeNear.value as number;\n    }\n    set fadeNear(value: number) {\n        this.uniforms.fadeNear.value = value;\n    }\n\n    get fadeFar(): number {\n        return this.uniforms.fadeFar.value as number;\n    }\n    set fadeFar(value: number) {\n        this.uniforms.fadeFar.value = value;\n        setShaderMaterialDefine(this, \"USE_FADING\", value > 0.0);\n    }\n\n    get displacementMap(): THREE.Texture | null {\n        return this.uniforms.displacementMap.value;\n    }\n    set displacementMap(map: THREE.Texture | null) {\n        if (this.uniforms.displacementMap.value === map) {\n            return;\n        }\n        this.uniforms.displacementMap.value = map;\n        const useDisplacementMap = map !== null;\n        if (useDisplacementMap) {\n            this.uniforms.displacementMap.value.needsUpdate = true;\n        }\n        setShaderMaterialDefine(this, \"USE_DISPLACEMENTMAP\", useDisplacementMap);\n    }\n\n    get drawRangeStart(): number {\n        return this.uniforms.drawRange.value.x as number;\n    }\n    set drawRangeStart(value: number) {\n        this.uniforms.drawRange.value.x = value;\n    }\n\n    get drawRangeEnd(): number {\n        return this.uniforms.drawRange.value.y as number;\n    }\n    set drawRangeEnd(value: number) {\n        this.uniforms.drawRange.value.y = value;\n    }\n\n    set clipTileSize(tileSize: THREE.Vector2) {\n        this.uniforms.tileSize.value.copy(tileSize);\n        const useTileClip = tileSize.x > 0 && tileSize.y > 0;\n        setShaderMaterialDefine(this, \"USE_TILE_CLIP\", useTileClip);\n    }\n    get clipTileSize(): THREE.Vector2 {\n        return this.uniforms.tileSize.value as THREE.Vector2;\n    }\n\n    private invalidateFog() {\n        if (this.m_fog !== getShaderMaterialDefine(this, \"USE_FOG\")) {\n            setShaderMaterialDefine(this, \"USE_FOG\", this.m_fog);\n        }\n    }\n\n    private invalidateOpacity() {\n        if (this.m_opacity !== this.uniforms.opacity.value) {\n            this.uniforms.opacity.value = this.m_opacity;\n        }\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\nimport * as THREE from \"three\";\n\n/**\n * `VignetteShader`.\n */\nexport const VignetteShader: THREE.Shader = {\n    uniforms: {\n        tDiffuse: { value: null },\n        offset: { value: 1.0 },\n        darkness: { value: 1.0 }\n    },\n    vertexShader: `\n        varying vec2 vUv;\n        void main() {\n            vUv = uv;\n            gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n        }`,\n    fragmentShader: `\n        uniform float offset;\n        uniform float darkness;\n        uniform sampler2D tDiffuse;\n        varying vec2 vUv;\n        void main() {\n            vec4 texel = texture2D( tDiffuse, vUv );\n            vec2 uv = ( vUv - vec2( 0.5 ) ) * vec2( offset );\n            gl_FragColor = vec4( mix( texel.rgb, vec3( 1.0 - darkness ), dot( uv, uv ) ), texel.a );\n        }`\n};\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport {\n    BooleanLiteralExpr,\n    CallExpr,\n    CaseExpr,\n    Env,\n    Expr,\n    ExprScope,\n    ExprVisitor,\n    HasAttributeExpr,\n    LiteralExpr,\n    MatchExpr,\n    NullLiteralExpr,\n    NumberLiteralExpr,\n    ObjectLiteralExpr,\n    StringLiteralExpr,\n    Value,\n    VarExpr\n} from \"./Expr\";\n\nimport { ArrayOperators } from \"./operators/ArrayOperators\";\nimport { CastOperators } from \"./operators/CastOperators\";\nimport { ColorOperators } from \"./operators/ColorOperators\";\nimport { ComparisonOperators } from \"./operators/ComparisonOperators\";\nimport { FeatureOperators } from \"./operators/FeatureOperators\";\nimport { FlowOperators } from \"./operators/FlowOperators\";\nimport { InterpolationOperators } from \"./operators/InterpolationOperators\";\nimport { MapOperators } from \"./operators/MapOperators\";\nimport { MathOperators } from \"./operators/MathOperators\";\nimport { MiscOperators } from \"./operators/MiscOperators\";\nimport { ObjectOperators } from \"./operators/ObjectOperators\";\nimport { StringOperators } from \"./operators/StringOperators\";\nimport { TypeOperators } from \"./operators/TypeOperators\";\nimport { VectorOperators } from \"./operators/VectorOperators\";\n\nexport interface OperatorDescriptor {\n    /**\n     * Returns `true` if this operator requires a dynamic execution context (e.g. [\"zoom\"]).\n     */\n    isDynamicOperator?: (call: CallExpr) => boolean;\n\n    /**\n     * Evaluates the given expression.\n     */\n    call: (context: ExprEvaluatorContext, call: CallExpr) => Value;\n}\n\nexport interface OperatorDescriptorMap {\n    [name: string]: OperatorDescriptor;\n}\n\nconst operatorDescriptors = new Map<string, OperatorDescriptor>();\n\n/*\n * @hidden\n */\nexport class ExprEvaluatorContext {\n    private m_partialEvaluation = false;\n\n    constructor(\n        readonly evaluator: ExprEvaluator,\n        readonly env: Env,\n        readonly scope: ExprScope,\n        readonly cache?: Map<Expr, Value>\n    ) {}\n\n    /**\n     * `true` if the this context is used to partially evaluate expressions.\n     */\n    get partialEvaluation() {\n        return this.m_partialEvaluation;\n    }\n\n    /**\n     * Evaluate the given expression.\n     *\n     * @param expr The [[Expr]] to evaluate.\n     */\n    evaluate(expr: Expr | undefined) {\n        if (expr !== undefined) {\n            return expr.accept(this.evaluator, this);\n        }\n        throw new Error(\"Failed to evaluate expression\");\n    }\n\n    /**\n     * Partially evaluate the given expression.\n     *\n     * @param expr The [[Expr]] to evaluate.\n     */\n    partiallyEvaluate(expr: Expr | undefined): Expr {\n        if (expr === undefined) {\n            throw new Error(\"Failed to evaluate expression\");\n        }\n\n        const previousEvaluationMode = this.m_partialEvaluation;\n\n        this.m_partialEvaluation = true;\n\n        try {\n            const value = expr.accept(this.evaluator, this);\n\n            this.m_partialEvaluation = previousEvaluationMode;\n\n            if (value instanceof Expr) {\n                return value;\n            }\n\n            return LiteralExpr.fromValue(value);\n        } catch (error) {\n            // rethrow the exception\n            throw error;\n        } finally {\n            // reset the evaluation mode.\n            this.m_partialEvaluation = previousEvaluationMode;\n        }\n    }\n}\n\n/**\n * [[ExprEvaluator]] is used to evaluate [[Expr]] in a given environment.\n *\n * @hidden\n */\nexport class ExprEvaluator implements ExprVisitor<Value, ExprEvaluatorContext> {\n    static defineOperator(op: string, builtin: OperatorDescriptor) {\n        operatorDescriptors.set(op, builtin);\n    }\n\n    static defineOperators(builtins: OperatorDescriptorMap) {\n        Object.getOwnPropertyNames(builtins).forEach(p => {\n            this.defineOperator(p, builtins[p]);\n        });\n    }\n\n    /**\n     * Returns the [[OperatorDescriptor]] for the given operator name.\n     * @hidden\n     */\n    static getOperator(op: string): OperatorDescriptor | undefined {\n        return operatorDescriptors.get(op);\n    }\n\n    visitVarExpr(expr: VarExpr, context: ExprEvaluatorContext): Value {\n        const value = context.env.lookup(expr.name);\n        return value !== undefined ? value : null;\n    }\n\n    visitNullLiteralExpr(expr: NullLiteralExpr, context: ExprEvaluatorContext): Value {\n        return null;\n    }\n\n    visitBooleanLiteralExpr(expr: BooleanLiteralExpr, context: ExprEvaluatorContext): Value {\n        return expr.value;\n    }\n\n    visitNumberLiteralExpr(expr: NumberLiteralExpr, context: ExprEvaluatorContext): Value {\n        return expr.value;\n    }\n\n    visitStringLiteralExpr(expr: StringLiteralExpr, context: ExprEvaluatorContext): Value {\n        return expr.value;\n    }\n\n    visitObjectLiteralExpr(expr: ObjectLiteralExpr, context: ExprEvaluatorContext): Value {\n        return expr.value;\n    }\n\n    visitHasAttributeExpr(expr: HasAttributeExpr, context: ExprEvaluatorContext): Value {\n        return context.env.lookup(expr.name) !== undefined;\n    }\n\n    visitMatchExpr(match: MatchExpr, context: ExprEvaluatorContext): Value {\n        const r = context.evaluate(match.value);\n        for (const [label, body] of match.branches) {\n            if (Array.isArray(label) && (label as any[]).includes(r)) {\n                return context.evaluate(body);\n            } else if (label === r) {\n                return context.evaluate(body);\n            }\n        }\n        return context.evaluate(match.fallback);\n    }\n\n    visitCaseExpr(match: CaseExpr, context: ExprEvaluatorContext): Value {\n        for (const [condition, body] of match.branches) {\n            if (context.evaluate(condition)) {\n                return context.evaluate(body);\n            }\n        }\n        return context.evaluate(match.fallback);\n    }\n\n    visitCallExpr(expr: CallExpr, context: ExprEvaluatorContext): Value {\n        if (context.cache !== undefined) {\n            const v = context.cache.get(expr);\n            if (v !== undefined) {\n                return v;\n            }\n        }\n\n        const descriptor = expr.descriptor || operatorDescriptors.get(expr.op);\n\n        if (descriptor) {\n            expr.descriptor = descriptor;\n\n            const result = descriptor.call(context, expr);\n\n            if (context.cache) {\n                context.cache.set(expr, result);\n            }\n\n            return result;\n        }\n\n        throw new Error(`undefined operator '${expr.op}'`);\n    }\n}\n\nExprEvaluator.defineOperators(CastOperators);\nExprEvaluator.defineOperators(ComparisonOperators);\nExprEvaluator.defineOperators(MathOperators);\nExprEvaluator.defineOperators(StringOperators);\nExprEvaluator.defineOperators(ColorOperators);\nExprEvaluator.defineOperators(TypeOperators);\nExprEvaluator.defineOperators(MiscOperators);\nExprEvaluator.defineOperators(FlowOperators);\nExprEvaluator.defineOperators(ArrayOperators);\nExprEvaluator.defineOperators(InterpolationOperators);\nExprEvaluator.defineOperators(ObjectOperators);\nExprEvaluator.defineOperators(FeatureOperators);\nExprEvaluator.defineOperators(MapOperators);\nExprEvaluator.defineOperators(VectorOperators);\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { CallExpr, Expr, JsonArray, NumberLiteralExpr, StringLiteralExpr } from \"../Expr\";\nimport { ExprEvaluatorContext, OperatorDescriptorMap } from \"../ExprEvaluator\";\n\nconst VALID_ELEMENT_TYPES = [\"boolean\", \"number\", \"string\"];\n\nfunction checkElementTypes(arg: Expr, array: JsonArray) {\n    if (!(arg instanceof StringLiteralExpr) || !VALID_ELEMENT_TYPES.includes(arg.value)) {\n        throw new Error(\n            `expected \"boolean\", \"number\" or \"string\" instead of '${JSON.stringify(arg)}'`\n        );\n    }\n\n    const ty = arg.value;\n\n    array.forEach((element, index) => {\n        if (typeof element !== ty) {\n            throw new Error(`expected array element at index ${index} to have type '${ty}'`);\n        }\n    });\n}\n\nfunction checkArrayLength(arg: Expr, array: JsonArray) {\n    if (!(arg instanceof NumberLiteralExpr)) {\n        throw new Error(`missing expected number of elements`);\n    }\n\n    const length = arg.value;\n\n    if (array.length !== length) {\n        throw new Error(`the array must have ${length} element(s)`);\n    }\n}\n\nfunction checkArray(context: ExprEvaluatorContext, arg: Expr) {\n    const value = context.evaluate(arg);\n    if (!Array.isArray(value)) {\n        throw new Error(`'${value}' is not an array`);\n    }\n    return value;\n}\n\nconst operators = {\n    array: {\n        call: (context: ExprEvaluatorContext, call: CallExpr) => {\n            switch (call.args.length) {\n                case 0:\n                    throw new Error(\"not enough arguments\");\n                case 1:\n                    return checkArray(context, call.args[0]);\n                case 2: {\n                    const array = checkArray(context, call.args[1]);\n                    checkElementTypes(call.args[0], array);\n                    return array;\n                }\n                case 3: {\n                    const array = checkArray(context, call.args[2]);\n                    checkArrayLength(call.args[1], array);\n                    checkElementTypes(call.args[0], array);\n                    return array;\n                }\n                default:\n                    throw new Error(\"too many arguments\");\n            }\n        }\n    },\n    \"make-array\": {\n        call: (context: ExprEvaluatorContext, call: CallExpr) => {\n            if (call.args.length === 0) {\n                throw new Error(\"not enough arguments\");\n            }\n            return [...call.args.map(arg => context.evaluate(arg))];\n        }\n    },\n    at: {\n        call: (context: ExprEvaluatorContext, call: CallExpr) => {\n            const args = call.args;\n            const index = context.evaluate(args[0]);\n            if (typeof index !== \"number\") {\n                throw new Error(`expected the index of the element to retrieve`);\n            }\n            const value = context.evaluate(args[1]);\n            if (!Array.isArray(value)) {\n                throw new Error(`expected an array`);\n            }\n            return index >= 0 && index < value.length ? value[index] : null;\n        }\n    }\n};\n\nexport const ArrayOperators: OperatorDescriptorMap = operators;\nexport type ArrayOperatorNames = keyof typeof operators;\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { CallExpr } from \"../Expr\";\nimport { ExprEvaluatorContext, OperatorDescriptorMap } from \"../ExprEvaluator\";\n\nconst operators = {\n    \"to-boolean\": {\n        call: (context: ExprEvaluatorContext, call: CallExpr) => {\n            return Boolean(context.evaluate(call.args[0]));\n        }\n    },\n\n    \"to-string\": {\n        call: (context: ExprEvaluatorContext, call: CallExpr) => {\n            return String(context.evaluate(call.args[0]));\n        }\n    },\n\n    \"to-number\": {\n        call: (context: ExprEvaluatorContext, call: CallExpr) => {\n            for (const arg of call.args) {\n                const value = Number(context.evaluate(arg));\n                if (!isNaN(value)) {\n                    return value;\n                }\n            }\n            throw new Error(\"cannot convert the value to a number\");\n        }\n    }\n};\n\nexport const CastOperators: OperatorDescriptorMap = operators;\nexport type CastOperatorNames = keyof typeof operators;\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport * as THREE from \"three\";\n\nimport { ColorUtils } from \"../ColorUtils\";\nimport { CallExpr, Value } from \"../Expr\";\nimport { ExprEvaluatorContext, OperatorDescriptorMap } from \"../ExprEvaluator\";\nimport { parseStringEncodedColor } from \"../StringEncodedNumeral\";\n\nconst operators = {\n    alpha: {\n        call: (context: ExprEvaluatorContext, call: CallExpr) => {\n            let color: Value | undefined = context.evaluate(call.args[0]);\n            if (typeof color === \"string\") {\n                color = parseStringEncodedColor(color);\n            }\n            const alpha = typeof color === \"number\" ? ColorUtils.getAlphaFromHex(color) : 1;\n            return alpha;\n        }\n    },\n    rgba: {\n        call: (context: ExprEvaluatorContext, call: CallExpr) => {\n            const r = context.evaluate(call.args[0]);\n            const g = context.evaluate(call.args[1]);\n            const b = context.evaluate(call.args[2]);\n            const a = context.evaluate(call.args[3]);\n            if (\n                typeof r === \"number\" &&\n                typeof g === \"number\" &&\n                typeof b === \"number\" &&\n                typeof a === \"number\" &&\n                r >= 0 &&\n                g >= 0 &&\n                b >= 0 &&\n                a >= 0 &&\n                a <= 1\n            ) {\n                return rgbaToHex(r, g, b, a);\n            }\n            throw new Error(`unknown color 'rgba(${r},${g},${b},${a})'`);\n        }\n    },\n    rgb: {\n        call: (context: ExprEvaluatorContext, call: CallExpr) => {\n            const r = context.evaluate(call.args[0]);\n            const g = context.evaluate(call.args[1]);\n            const b = context.evaluate(call.args[2]);\n            if (\n                typeof r === \"number\" &&\n                typeof g === \"number\" &&\n                typeof b === \"number\" &&\n                r >= 0 &&\n                g >= 0 &&\n                b >= 0\n            ) {\n                return rgbToHex(r, g, b);\n            }\n            throw new Error(`unknown color 'rgb(${r},${g},${b})'`);\n        }\n    },\n    // Hsl operator contains angle modulated to <0, 360> range, percent of\n    // saturation and lightness in <0, 100> range, i.e. hsl(360, 100, 100)\n    hsl: {\n        call: (context: ExprEvaluatorContext, call: CallExpr) => {\n            const h = context.evaluate(call.args[0]);\n            const s = context.evaluate(call.args[1]);\n            const l = context.evaluate(call.args[2]);\n            if (\n                typeof h === \"number\" &&\n                typeof s === \"number\" &&\n                typeof l === \"number\" &&\n                h >= 0 &&\n                s >= 0 &&\n                l >= 0\n            ) {\n                return hslToHex(h, s, l);\n            }\n            throw new Error(`unknown color 'hsl(${h},${s}%,${l}%)'`);\n        }\n    }\n};\n\nfunction rgbaToHex(r: number, g: number, b: number, a: number): number {\n    // We decode rgba color channels using custom hex format with transparency.\n    return ColorUtils.getHexFromRgba(\n        THREE.MathUtils.clamp(r, 0, 255) / 255,\n        THREE.MathUtils.clamp(g, 0, 255) / 255,\n        THREE.MathUtils.clamp(b, 0, 255) / 255,\n        THREE.MathUtils.clamp(a, 0, 1)\n    );\n}\n\nfunction rgbToHex(r: number, g: number, b: number): number {\n    return ColorUtils.getHexFromRgb(\n        THREE.MathUtils.clamp(r, 0, 255) / 255,\n        THREE.MathUtils.clamp(g, 0, 255) / 255,\n        THREE.MathUtils.clamp(b, 0, 255) / 255\n    );\n}\n\nfunction hslToHex(h: number, s: number, l: number): number {\n    return ColorUtils.getHexFromHsl(\n        THREE.MathUtils.euclideanModulo(h, 360) / 360,\n        THREE.MathUtils.clamp(s, 0, 100) / 100,\n        THREE.MathUtils.clamp(l, 0, 100) / 100\n    );\n}\n\nexport const ColorOperators: OperatorDescriptorMap = operators;\nexport type ColorOperatorNames = keyof typeof operators;\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { CallExpr } from \"../Expr\";\nimport { ExprEvaluatorContext, OperatorDescriptorMap } from \"../ExprEvaluator\";\n\nfunction compare(context: ExprEvaluatorContext, call: CallExpr, strict: boolean = false) {\n    const left = context.evaluate(call.args[0]) as any;\n    const right = context.evaluate(call.args[1]) as any;\n\n    if (\n        !(\n            (typeof left === \"number\" && typeof right === \"number\") ||\n            (typeof left === \"string\" && typeof right === \"string\")\n        )\n    ) {\n        if (strict) {\n            throw new Error(`invalid operands '${left}' and '${right}' for operator '${call.op}'`);\n        }\n    }\n\n    switch (call.op) {\n        case \"<\":\n            return left < right;\n        case \">\":\n            return left > right;\n        case \"<=\":\n            return left <= right;\n        case \">=\":\n            return left >= right;\n        default:\n            throw new Error(`invalid comparison operator '${call.op}'`);\n    }\n}\n\nconst operators = {\n    \"!\": {\n        call: (context: ExprEvaluatorContext, call: CallExpr) => {\n            return !context.evaluate(call.args[0]);\n        }\n    },\n\n    \"==\": {\n        call: (context: ExprEvaluatorContext, call: CallExpr) => {\n            const left = context.evaluate(call.args[0]);\n            const right = context.evaluate(call.args[1]);\n            return left === right;\n        }\n    },\n\n    \"!=\": {\n        call: (context: ExprEvaluatorContext, call: CallExpr) => {\n            const left = context.evaluate(call.args[0]);\n            const right = context.evaluate(call.args[1]);\n            return left !== right;\n        }\n    },\n\n    \"<\": { call: (context: ExprEvaluatorContext, call: CallExpr) => compare(context, call) },\n    \">\": { call: (context: ExprEvaluatorContext, call: CallExpr) => compare(context, call) },\n    \"<=\": { call: (context: ExprEvaluatorContext, call: CallExpr) => compare(context, call) },\n    \">=\": { call: (context: ExprEvaluatorContext, call: CallExpr) => compare(context, call) }\n};\n\nexport const ComparisonOperators: OperatorDescriptorMap = operators;\nexport type ComparisonOperatorNames = keyof typeof operators;\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { Env } from \"../Env\";\nimport { CallExpr, ExprScope } from \"../Expr\";\n\nimport { ExprEvaluatorContext, OperatorDescriptorMap } from \"../ExprEvaluator\";\n\nconst operators = {\n    \"geometry-type\": {\n        call: (context: ExprEvaluatorContext, call: CallExpr) => {\n            const geometryType = context.env.lookup(\"$geometryType\");\n            switch (geometryType) {\n                case \"point\":\n                    return \"Point\";\n                case \"line\":\n                    return \"LineString\";\n                case \"polygon\":\n                    return \"Polygon\";\n                default:\n                    return null;\n            }\n        }\n    },\n    \"feature-state\": {\n        isDynamicOperator: () => true,\n        call: (context: ExprEvaluatorContext, call: CallExpr) => {\n            if (context.scope !== ExprScope.Dynamic) {\n                throw new Error(\"feature-state cannot be used in this context\");\n            }\n            const property = context.evaluate(call.args[0]);\n            if (typeof property !== \"string\") {\n                throw new Error(`expected the name of the property of the feature state`);\n            }\n            const state = context.env.lookup(\"$state\");\n            if (Env.isEnv(state)) {\n                return state.lookup(property) ?? null;\n            } else if (state instanceof Map) {\n                return state.get(property) ?? null;\n            }\n            return null;\n        }\n    },\n    id: {\n        call: (context: ExprEvaluatorContext, call: CallExpr) => {\n            return context.env.lookup(\"$id\") ?? null;\n        }\n    }\n};\n\nexport const FeatureOperators: OperatorDescriptorMap = operators;\nexport type FeatureOperatorNames = keyof typeof operators;\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { CallExpr, Expr } from \"../Expr\";\nimport { ExprEvaluatorContext, OperatorDescriptorMap } from \"../ExprEvaluator\";\n\nfunction conditionalCast(context: ExprEvaluatorContext, type: string, args: Expr[]) {\n    switch (type) {\n        case \"boolean\":\n        case \"number\":\n        case \"string\":\n            for (const childExpr of args) {\n                const value = context.evaluate(childExpr);\n                if (typeof value === type) {\n                    return value;\n                }\n            }\n            throw new Error(`expected a '${type}'`);\n        default:\n            throw new Error(`invalid type '${type}'`);\n    } // switch\n}\n\nconst operators = {\n    all: {\n        call: (context: ExprEvaluatorContext, call: CallExpr) => {\n            for (const childExpr of call.args) {\n                if (!context.evaluate(childExpr)) {\n                    return false;\n                }\n            }\n            return true;\n        }\n    },\n\n    any: {\n        call: (context: ExprEvaluatorContext, call: CallExpr) => {\n            for (const childExpr of call.args) {\n                if (context.evaluate(childExpr)) {\n                    return true;\n                }\n            }\n            return false;\n        }\n    },\n\n    none: {\n        call: (context: ExprEvaluatorContext, call: CallExpr) => {\n            for (const childExpr of call.args) {\n                if (context.evaluate(childExpr)) {\n                    return false;\n                }\n            }\n            return true;\n        }\n    },\n\n    boolean: {\n        call: (context: ExprEvaluatorContext, call: CallExpr) => {\n            return conditionalCast(context, \"boolean\", call.args);\n        }\n    },\n\n    number: {\n        call: (context: ExprEvaluatorContext, call: CallExpr) => {\n            return conditionalCast(context, \"number\", call.args);\n        }\n    },\n\n    string: {\n        call: (context: ExprEvaluatorContext, call: CallExpr) => {\n            return conditionalCast(context, \"string\", call.args);\n        }\n    }\n};\n\nexport const FlowOperators: OperatorDescriptorMap = operators;\nexport type FlowOperatorNames = keyof typeof operators;\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { CallExpr, ExprScope, LiteralExpr, NumberLiteralExpr, Value } from \"../Expr\";\nimport { ExprEvaluatorContext, OperatorDescriptorMap } from \"../ExprEvaluator\";\nimport { InterpolatedProperty } from \"../InterpolatedProperty\";\nimport { InterpolatedPropertyDefinition } from \"../InterpolatedPropertyDefs\";\n\ntype InterpolateCallExpr = CallExpr & {\n    _mode?: InterpolatedPropertyDefinition<any>[\"interpolation\"];\n    _exponent?: number;\n    _stops?: number[];\n    _interpolatedProperty?: InterpolatedProperty;\n};\n\n/**\n * Evaluates the given piecewise function.\n */\nfunction step(context: ExprEvaluatorContext, call: CallExpr) {\n    const { args } = call;\n\n    const value = context.evaluate(args[0]) as number;\n\n    if (value === null) {\n        // returns the default value of step.\n        return context.evaluate(args[1]);\n    }\n\n    if (typeof value !== \"number\") {\n        throw new Error(`the input of a 'step' operator must have type 'number'`);\n    }\n\n    let first = 1;\n    let last = args.length / 2 - 1;\n\n    while (first < last) {\n        // tslint:disable-next-line: no-bitwise\n        const mid = (first + last) >>> 1;\n        const stop = (args[mid * 2] as NumberLiteralExpr).value;\n\n        if (value < stop) {\n            last = mid - 1;\n        } else if (value > stop) {\n            first = mid + 1;\n        } else {\n            last = mid;\n        }\n    }\n\n    const result = args[first * 2];\n\n    if (!(result instanceof NumberLiteralExpr)) {\n        throw new Error(\"expected a numeric literal\");\n    }\n\n    const index = result.value <= value ? first : first - 1;\n\n    return context.evaluate(args[index * 2 + 1]);\n}\n\n/**\n * Prepare and validate the \"interpolate\" call.\n *\n * @param call An [[Expr]] representing an \"interpolate\" call.\n * @hidden\n */\nfunction prepareInterpolateCallExpr(call: InterpolateCallExpr) {\n    if (call._interpolatedProperty || call._mode !== undefined) {\n        return;\n    }\n\n    const interpolatorType = call.args[0];\n\n    if (!(interpolatorType instanceof CallExpr)) {\n        throw new Error(\"expected an interpolation type\");\n    }\n\n    let mode: InterpolatedPropertyDefinition<any>[\"interpolation\"];\n    let exponent: number | undefined;\n\n    if (interpolatorType.op === \"linear\") {\n        mode = \"Linear\";\n    } else if (interpolatorType.op === \"discrete\") {\n        mode = \"Discrete\";\n    } else if (interpolatorType.op === \"cubic\") {\n        mode = \"Cubic\";\n    } else if (interpolatorType.op === \"exponential\") {\n        mode = \"Exponential\";\n        const base = interpolatorType.args[0];\n        if (!(base instanceof NumberLiteralExpr)) {\n            throw new Error(\"expected the base of the exponential interpolation\");\n        }\n        exponent = base.value;\n    } else {\n        throw new Error(\"unrecognized interpolation type\");\n    }\n\n    const input = call.args[1];\n\n    if (!(input instanceof CallExpr)) {\n        throw new Error(\"expected the input of the interpolation\");\n    }\n\n    if (input.op !== \"zoom\") {\n        throw new Error(\"only 'zoom' is supported\");\n    }\n\n    if (call.args.length === 2 || call.args.length % 2) {\n        throw new Error(\"invalid number of samples\");\n    }\n\n    const stops: number[] = [];\n    const values: Value[] = [];\n\n    let isConstantInterpolation = true;\n\n    for (let i = 2; i < call.args.length; i += 2) {\n        const stop = call.args[i];\n\n        if (!(stop instanceof NumberLiteralExpr)) {\n            throw new Error(\"expected a numeric literal\");\n        }\n\n        if (stops.length > 0 && stop.value === stops[stops.length - 1]) {\n            stops[stops.length - 1] = stop.value - 0.0000001;\n        }\n\n        stops.push(stop.value);\n\n        if (isConstantInterpolation) {\n            const value = call.args[i + 1];\n\n            if (value instanceof LiteralExpr) {\n                values.push(value.value);\n            } else {\n                isConstantInterpolation = false;\n            }\n        }\n    }\n\n    if (isConstantInterpolation) {\n        const result = InterpolatedProperty.fromDefinition({\n            interpolation: mode,\n            exponent,\n            zoomLevels: stops,\n            values\n        });\n\n        if (!result) {\n            throw new Error(\"failed to create interpolation\");\n        }\n\n        call._interpolatedProperty = result;\n    } else {\n        call._mode = mode;\n        call._exponent = exponent;\n        call._stops = stops;\n    }\n}\n\ntype StepCallExpr = CallExpr & {\n    /**\n     * `true` if the input of `step` call is `[\"zoom\"], otherwise false.\n     */\n    _inputIsZoom?: boolean;\n\n    /**\n     * The stops when the a constant [[InterpolatedProperty]] cannot be\n     * created for this `[\"step\"]` call.\n     */\n    _stops?: number[];\n\n    /**\n     * The [[InterpolatedProperty]] representing this `step` call,\n     * otherwise `undefined` if an interpolated property cannot\n     * be created at parsing time (e.g. one if the value of the step is not a literal).\n     */\n    _interpolatedProperty?: InterpolatedProperty;\n};\n\n/**\n * Classify the given `step` call.\n *\n * This function checks the input of the `step` and ensures that the stops\n * are literals.\n *\n * @param call A call to `[\"step\", ...]`.\n * @hidden\n */\nfunction classifyStepCallExpr(call: StepCallExpr) {\n    if (call._inputIsZoom !== undefined) {\n        // nothing to do, the `call` was already classified.\n        return;\n    }\n\n    if (call.args[0] === undefined) {\n        throw new Error(\"expected the input of the 'step' operator\");\n    }\n\n    if (call.args.length < 3 || call.args.length % 2) {\n        throw new Error(\"not enough arguments\");\n    }\n\n    const input = call.args[0];\n\n    // tslint:disable-next-line: prefer-conditional-expression\n    if (input instanceof CallExpr && input.op === \"zoom\") {\n        call._inputIsZoom = true;\n    } else {\n        call._inputIsZoom = false;\n    }\n\n    // check that the stops are literals.\n    for (let i = 2; i < call.args.length; i += 2) {\n        const stop = call.args[i];\n        if (!(stop instanceof NumberLiteralExpr)) {\n            throw new Error(\"expected a numeric literal\");\n        }\n    }\n}\n\n/**\n * Prepares the given call for the dynamic exception.\n * This method collects the stops and\n *\n * @param call A call to `[\"step\", ...]`.\n * @hidden\n */\nfunction prepareStepCallExpr(call: StepCallExpr) {\n    if (call._stops || call._interpolatedProperty) {\n        // nothing to do, the `call` was already prepared for execution.\n        return;\n    }\n\n    // collect the stops of the step call.\n    const stops: number[] = [Number.MIN_SAFE_INTEGER];\n\n    for (let i = 2; i < call.args.length; i += 2) {\n        const stop = call.args[i] as NumberLiteralExpr;\n        stops.push(stop.value);\n    }\n\n    // collect the values of the step call.\n    const values: Value[] = [];\n    let hasConstantValues = true;\n\n    for (let i = 1; hasConstantValues && i < call.args.length; i += 2) {\n        const literal = call.args[i];\n        if (literal instanceof LiteralExpr) {\n            values.push(literal.value);\n        } else {\n            hasConstantValues = false;\n        }\n    }\n\n    if (hasConstantValues) {\n        // all the values of this zoom-based `step` are constant,\n        // create an interpolated property and store it together\n        // with the call.\n        const interpolatedProperty = InterpolatedProperty.fromDefinition({\n            interpolation: \"Discrete\",\n            zoomLevels: stops,\n            values\n        });\n\n        if (interpolatedProperty === undefined) {\n            throw new Error(\"failed to create interpolator\");\n        }\n\n        call._interpolatedProperty = interpolatedProperty;\n    } else {\n        // the values the `[\"step\"]` call are not constants,\n        // cache the `zoomLevels` to avoid recreating input `Array`\n        // when instantiating a new [[InterpolatedProperty]].\n        call._stops = stops;\n    }\n}\n\nconst operators = {\n    interpolate: {\n        isDynamicOperator: (call: CallExpr): boolean => {\n            return call.args[1] && call.args[1].isDynamic();\n        },\n        call: (context: ExprEvaluatorContext, call: InterpolateCallExpr): Value => {\n            prepareInterpolateCallExpr(call);\n\n            if (context.scope !== ExprScope.Dynamic) {\n                return call;\n            }\n\n            let interpolatedProperty = call._interpolatedProperty;\n\n            if (!interpolatedProperty) {\n                const values: Value[] = [];\n\n                for (let i = 2; i < call.args.length; i += 2) {\n                    const value = context.evaluate(call.args[i + 1]);\n                    values.push(value);\n                }\n\n                interpolatedProperty = InterpolatedProperty.fromDefinition({\n                    interpolation: call._mode!,\n                    exponent: call._exponent,\n                    zoomLevels: call._stops!,\n                    values\n                });\n\n                if (interpolatedProperty === undefined) {\n                    throw new Error(\"failed to create interpolator\");\n                }\n            }\n\n            return interpolatedProperty.evaluate(context.env);\n        }\n    },\n    step: {\n        isDynamicOperator: (call: CallExpr): boolean => {\n            return call.args[0] && call.args[0].isDynamic();\n        },\n        call: (context: ExprEvaluatorContext, call: StepCallExpr): Value => {\n            classifyStepCallExpr(call);\n\n            if (context.scope === ExprScope.Value) {\n                return call;\n            }\n\n            if (context.scope === ExprScope.Condition || call._inputIsZoom === false) {\n                return step(context, call);\n            }\n\n            prepareStepCallExpr(call);\n\n            let interpolatedProperty = call._interpolatedProperty;\n\n            if (!interpolatedProperty) {\n                // the values of the interpolation are not literals,\n                // evaluate the sub expressions and combine them\n                // with the constant stops computed when preparing this call.\n                const values: Value[] = [];\n                for (let i = 1; i < call.args.length; i += 2) {\n                    const value = context.evaluate(call.args[i]);\n                    values.push(value);\n                }\n\n                interpolatedProperty = InterpolatedProperty.fromDefinition({\n                    interpolation: \"Discrete\",\n                    zoomLevels: call._stops!,\n                    values\n                });\n\n                if (interpolatedProperty === undefined) {\n                    throw new Error(\"failed to create interpolator\");\n                }\n            }\n\n            return interpolatedProperty.evaluate(context.env);\n        }\n    }\n};\n\nexport const InterpolationOperators: OperatorDescriptorMap = operators;\nexport type InterpolationOperatorNames = keyof typeof operators;\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { Interpolant } from \"three\";\n\nexport class ExponentialInterpolant extends Interpolant {\n    /**\n     * Exponent value. Defaults to `2.0`.\n     */\n    exponent: number = 2.0;\n\n    // Note: We need to disable linting here as tslint thinks this function is never used, though it\n    // indeed is called by ``Interpolant.evaluate(level)``.\n    // tslint:disable-next-line\n    private interpolate_(i1: number, t0: number, t: number, t1: number) {\n        const result = this.resultBuffer;\n        // TODO: Remove when Interpolant types are fixed.\n        const values = (this as any).sampleValues;\n        const stride = this.valueSize;\n        const offset1 = i1 * stride;\n        const offset0 = offset1 - stride;\n        const weight1 = Math.pow((t - t0) / (t1 - t0), this.exponent);\n        const weight0 = 1 - weight1;\n\n        for (let i = 0; i !== stride; ++i) {\n            result[i] = values[offset0 + i] * weight0 + values[offset1 + i] * weight1;\n        }\n\n        return result;\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { CallExpr, ExprScope, Value } from \"../Expr\";\nimport { ExprEvaluatorContext, OperatorDescriptorMap } from \"../ExprEvaluator\";\n\nconst operators = {\n    \"ppi-scale\": {\n        call: (context: ExprEvaluatorContext, call: CallExpr) => {\n            const value = context.evaluate(call.args[0]) as number;\n            const scaleFactor = call.args[1] ? (context.evaluate(call.args[1]) as number) : 1;\n            return value * scaleFactor;\n        }\n    },\n    \"world-ppi-scale\": {\n        isDynamicOperator: (): boolean => {\n            return true;\n        },\n        call: (context: ExprEvaluatorContext, call: CallExpr) => {\n            const pixels = context.evaluate(call.args[0]) as number;\n            const scaleFactor = call.args[1] ? (context.evaluate(call.args[1]) as number) : 1;\n            const zoom = context.env.lookup(\"$zoom\") as number;\n            const zoomWidth = Math.pow(2, 17) / Math.pow(2, zoom);\n            const v = pixels * zoomWidth * scaleFactor;\n            return v;\n        }\n    },\n    \"world-discrete-ppi-scale\": {\n        isDynamicOperator: (): boolean => {\n            return true;\n        },\n        call: (context: ExprEvaluatorContext, call: CallExpr) => {\n            const pixels = context.evaluate(call.args[0]) as number;\n            const scaleFactor = call.args[1] ? (context.evaluate(call.args[1]) as number) : 1;\n            const zoom = context.env.lookup(\"$zoom\") as number;\n            const zoomWidthDiscrete = Math.pow(2, 17.8) / Math.pow(2, Math.floor(zoom));\n            const v = pixels * zoomWidthDiscrete * scaleFactor;\n            return v;\n        }\n    },\n    ppi: {\n        call: (context: ExprEvaluatorContext) => {\n            const ppi = context.env.lookup(\"$ppi\");\n            if (typeof ppi === \"number\") {\n                return ppi;\n            }\n            return 72;\n        }\n    },\n    zoom: {\n        isDynamicOperator: (): boolean => {\n            return true;\n        },\n        call: (context: ExprEvaluatorContext): Value => {\n            if (context.scope === ExprScope.Condition) {\n                const zoom = context.env.lookup(\"$zoom\")!;\n                if (zoom !== undefined) {\n                    return zoom;\n                }\n                throw new Error(\"failed to get the zoom level.\");\n            }\n            // direct usages of 'zoom' outside technique filter conditions\n            // and interpolations are not allowed.\n            throw new Error(\"invalid usage of the 'zoom' operator.\");\n        }\n    }\n};\n\nexport const MapOperators: OperatorDescriptorMap = operators;\nexport type MapOperatorNames = keyof typeof operators;\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { CallExpr } from \"../Expr\";\nimport { ExprEvaluatorContext, OperatorDescriptorMap } from \"../ExprEvaluator\";\n\nimport * as THREE from \"three\";\n\nconst operators = {\n    \"^\": {\n        call: (context: ExprEvaluatorContext, call: CallExpr) => {\n            const a = context.evaluate(call.args[0]);\n            const b = context.evaluate(call.args[1]);\n            if (typeof a !== \"number\" || typeof b !== \"number\") {\n                // tslint:disable-next-line: max-line-length\n                throw new Error(\n                    `invalid operands '${typeof a}' and '${typeof b}' for operator '^'`\n                );\n            }\n            return Math.pow(a, b);\n        }\n    },\n\n    \"-\": {\n        call: (context: ExprEvaluatorContext, call: CallExpr) => {\n            if (call.args.length === 1) {\n                const value = context.evaluate(call.args[0]);\n                if (typeof value !== \"number\") {\n                    throw new Error(`ìnvalid operand '${typeof value} for operator '-'`);\n                }\n\n                return -value;\n            }\n\n            const a = context.evaluate(call.args[0]);\n            const b = context.evaluate(call.args[1]);\n            if (typeof a !== \"number\" || typeof b !== \"number\") {\n                throw new Error(\n                    `invalid operands '${typeof a}' and '${typeof b}' for operator '-'`\n                );\n            }\n            return a - b;\n        }\n    },\n\n    \"/\": {\n        call: (context: ExprEvaluatorContext, call: CallExpr) => {\n            const a = context.evaluate(call.args[0]);\n            const b = context.evaluate(call.args[1]);\n            if (typeof a !== \"number\" || typeof b !== \"number\") {\n                // tslint:disable-next-line: max-line-length\n                throw new Error(\n                    `invalid operands '${typeof a}' and '${typeof b}' for operator '/'`\n                );\n            }\n            return a / b;\n        }\n    },\n\n    \"%\": {\n        call: (context: ExprEvaluatorContext, call: CallExpr) => {\n            const a = context.evaluate(call.args[0]);\n            const b = context.evaluate(call.args[1]);\n            if (typeof a !== \"number\" || typeof b !== \"number\") {\n                // tslint:disable-next-line: max-line-length\n                throw new Error(\n                    `invalid operands '${typeof a}' and '${typeof b}' for operator '%'`\n                );\n            }\n            return a % b;\n        }\n    },\n\n    \"+\": {\n        call: (context: ExprEvaluatorContext, call: CallExpr) => {\n            return call.args.reduce((a, b) => Number(a) + Number(context.evaluate(b)), 0);\n        }\n    },\n\n    \"*\": {\n        call: (context: ExprEvaluatorContext, call: CallExpr) => {\n            return call.args.reduce((a, b) => Number(a) * Number(context.evaluate(b)), 1);\n        }\n    },\n\n    abs: {\n        call: (context: ExprEvaluatorContext, call: CallExpr) => {\n            const value = context.evaluate(call.args[0]);\n            if (typeof value !== \"number\") {\n                throw new Error(`invalid operand '${value}' for operator 'abs'`);\n            }\n            return Math.abs(value);\n        }\n    },\n\n    acos: {\n        call: (context: ExprEvaluatorContext, call: CallExpr) => {\n            const value = context.evaluate(call.args[0]);\n            if (typeof value !== \"number\") {\n                throw new Error(`invalid operand '${value}' for operator 'acos'`);\n            }\n            return Math.acos(value);\n        }\n    },\n\n    asin: {\n        call: (context: ExprEvaluatorContext, call: CallExpr) => {\n            const value = context.evaluate(call.args[0]);\n            if (typeof value !== \"number\") {\n                throw new Error(`invalid operand '${value}' for operator 'asin'`);\n            }\n            return Math.asin(value);\n        }\n    },\n\n    atan: {\n        call: (context: ExprEvaluatorContext, call: CallExpr) => {\n            const value = context.evaluate(call.args[0]);\n            if (typeof value !== \"number\") {\n                throw new Error(`invalid operand '${value}' for operator 'atan'`);\n            }\n            return Math.atan(value);\n        }\n    },\n\n    ceil: {\n        call: (context: ExprEvaluatorContext, call: CallExpr) => {\n            const value = context.evaluate(call.args[0]);\n            if (typeof value !== \"number\") {\n                throw new Error(`invalid operand '${value}' for operator 'ceil'`);\n            }\n            return Math.ceil(value);\n        }\n    },\n\n    cos: {\n        call: (context: ExprEvaluatorContext, call: CallExpr) => {\n            const value = context.evaluate(call.args[0]);\n            if (typeof value !== \"number\") {\n                throw new Error(`invalid operand '${value}' for operator 'cos'`);\n            }\n            return Math.cos(value);\n        }\n    },\n\n    e: {\n        call: () => {\n            return Math.E;\n        }\n    },\n\n    floor: {\n        call: (context: ExprEvaluatorContext, call: CallExpr) => {\n            const value = context.evaluate(call.args[0]);\n            if (typeof value !== \"number\") {\n                throw new Error(`invalid operand '${value}' for operator 'floor'`);\n            }\n            return Math.floor(value);\n        }\n    },\n\n    ln: {\n        call: (context: ExprEvaluatorContext, call: CallExpr) => {\n            const value = context.evaluate(call.args[0]);\n            if (typeof value !== \"number\") {\n                throw new Error(`invalid operand '${value}' for operator 'ln'`);\n            }\n            return Math.log(value);\n        }\n    },\n\n    ln2: {\n        call: (context: ExprEvaluatorContext, call: CallExpr) => {\n            const value = context.evaluate(call.args[0]);\n            if (typeof value !== \"number\") {\n                throw new Error(`invalid operand '${value}' for operator 'ln2'`);\n            }\n            return Math.log2(value);\n        }\n    },\n\n    log10: {\n        call: (context: ExprEvaluatorContext, call: CallExpr) => {\n            const value = context.evaluate(call.args[0]);\n            if (typeof value !== \"number\") {\n                throw new Error(`invalid operand '${value}' for operator 'log10'`);\n            }\n            return Math.log10(value);\n        }\n    },\n\n    max: {\n        call: (context: ExprEvaluatorContext, call: CallExpr) => {\n            return Math.max(...call.args.map(v => Number(context.evaluate(v))));\n        }\n    },\n\n    min: {\n        call: (context: ExprEvaluatorContext, call: CallExpr) => {\n            return Math.min(...call.args.map(v => Number(context.evaluate(v))));\n        }\n    },\n\n    /**\n     * Clamp numeric value to given range, inclusive.\n     *\n     * Synopsis:\n     * ```\n     * [\"clamp\", v: number, min: number, max: number]`\n     * ```\n     */\n    clamp: {\n        call: (context: ExprEvaluatorContext, call: CallExpr) => {\n            const v = context.evaluate(call.args[0]);\n            const min = context.evaluate(call.args[1]);\n            const max = context.evaluate(call.args[2]);\n\n            if (typeof v !== \"number\" || typeof min !== \"number\" || typeof max !== \"number\") {\n                throw new Error(`invalid operands '${v}', ${min}, ${max} for operator 'clamp'`);\n            }\n            return THREE.MathUtils.clamp(v, min, max);\n        }\n    },\n\n    pi: {\n        call: () => {\n            return Math.PI;\n        }\n    },\n\n    round: {\n        call: (context: ExprEvaluatorContext, call: CallExpr) => {\n            const value = context.evaluate(call.args[0]);\n            if (typeof value !== \"number\") {\n                throw new Error(`invalid operand '${value}' for operator 'round'`);\n            }\n            return Math.round(value);\n        }\n    },\n\n    sin: {\n        call: (context: ExprEvaluatorContext, call: CallExpr) => {\n            const value = context.evaluate(call.args[0]);\n            if (typeof value !== \"number\") {\n                throw new Error(`invalid operand '${value}' for operator 'sin'`);\n            }\n            return Math.sin(value);\n        }\n    },\n\n    sqrt: {\n        call: (context: ExprEvaluatorContext, call: CallExpr) => {\n            const value = context.evaluate(call.args[0]);\n            if (typeof value !== \"number\") {\n                throw new Error(`invalid operand '${value}' for operator 'sqrt'`);\n            }\n            return Math.sqrt(value);\n        }\n    },\n\n    tan: {\n        call: (context: ExprEvaluatorContext, call: CallExpr) => {\n            const value = context.evaluate(call.args[0]);\n            if (typeof value !== \"number\") {\n                throw new Error(`invalid operand '${value}' for operator 'tan'`);\n            }\n            return Math.tan(value);\n        }\n    }\n};\n\nexport const MathOperators: OperatorDescriptorMap = operators;\nexport type MathOperatorNames = keyof typeof operators;\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { CallExpr } from \"../Expr\";\nimport { ExprEvaluatorContext, OperatorDescriptorMap } from \"../ExprEvaluator\";\n\nconst operators = {\n    length: {\n        call: (context: ExprEvaluatorContext, call: CallExpr) => {\n            const value = context.evaluate(call.args[0]);\n            if (Array.isArray(value) || typeof value === \"string\") {\n                return value.length;\n            }\n            throw new Error(`invalid operand '${value}' for operator 'length'`);\n        }\n    },\n    coalesce: {\n        call: (context: ExprEvaluatorContext, call: CallExpr) => {\n            for (const childExpr of call.args) {\n                const value = context.evaluate(childExpr);\n                if (value !== null) {\n                    return value;\n                }\n            }\n            return null;\n        }\n    }\n};\n\nexport const MiscOperators: OperatorDescriptorMap = operators;\nexport type MiscOperatorNames = keyof typeof operators;\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { CallExpr, Expr, ExprScope } from \"../Expr\";\n\nimport { Env } from \"../Env\";\nimport { ExprEvaluatorContext, OperatorDescriptorMap } from \"../ExprEvaluator\";\n\nconst hasOwnProperty = Object.prototype.hasOwnProperty;\n\nenum LookupMode {\n    get,\n    has\n}\n\nfunction lookupMember(context: ExprEvaluatorContext, args: Expr[], lookupMode: LookupMode) {\n    const memberName = context.evaluate(args[0]);\n\n    if (typeof memberName !== \"string\") {\n        throw new Error(`expected the name of an attribute`);\n    }\n\n    const object = context.evaluate(args[1]) as any;\n\n    if (object && typeof object === \"object\") {\n        if (Env.isEnv(object)) {\n            const value = object.lookup(memberName) ?? null;\n            return lookupMode === LookupMode.get ? value : value !== null;\n        }\n        if (hasOwnProperty.call(object, memberName)) {\n            return lookupMode === LookupMode.get ? object[memberName] : true;\n        }\n    }\n\n    return lookupMode === LookupMode.get ? null : false;\n}\n\nconst operators = {\n    in: {\n        call: (context: ExprEvaluatorContext, call: CallExpr) => {\n            const value = context.evaluate(call.args[0]);\n            const object = context.evaluate(call.args[1]);\n            if (typeof value === \"string\" && typeof object === \"string\") {\n                return object.includes(value);\n            } else if (Array.isArray(object)) {\n                return object.includes(value);\n            }\n            return false;\n        }\n    },\n\n    get: {\n        call: (context: ExprEvaluatorContext, call: CallExpr) =>\n            lookupMember(context, call.args, LookupMode.get)\n    },\n\n    has: {\n        call: (context: ExprEvaluatorContext, call: CallExpr) =>\n            lookupMember(context, call.args, LookupMode.has)\n    },\n\n    \"dynamic-properties\": {\n        isDynamicOperator: () => true,\n        call: (context: ExprEvaluatorContext, call: CallExpr) => {\n            if (context.scope === ExprScope.Dynamic) {\n                return context.env;\n            }\n            return call;\n        }\n    }\n};\n\nexport const ObjectOperators: OperatorDescriptorMap = operators;\nexport type ObjectOperatorNames = keyof typeof operators;\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { CallExpr } from \"../Expr\";\nimport { ExprEvaluatorContext, OperatorDescriptorMap } from \"../ExprEvaluator\";\n\nconst operators = {\n    concat: {\n        call: (context: ExprEvaluatorContext, call: CallExpr) => {\n            return \"\".concat(...call.args.map(a => String(context.evaluate(a))));\n        }\n    },\n\n    downcase: {\n        call: (context: ExprEvaluatorContext, call: CallExpr) => {\n            return String(context.evaluate(call.args[0])).toLocaleLowerCase();\n        }\n    },\n\n    upcase: {\n        call: (context: ExprEvaluatorContext, call: CallExpr) => {\n            return String(context.evaluate(call.args[0])).toLocaleUpperCase();\n        }\n    },\n\n    \"~=\": {\n        call: (context: ExprEvaluatorContext, call: CallExpr) => {\n            const left = context.evaluate(call.args[0]);\n            const right = context.evaluate(call.args[1]);\n            if (typeof left === \"string\" && typeof right === \"string\") {\n                return left.indexOf(right) !== -1;\n            }\n            return false;\n        }\n    },\n\n    \"^=\": {\n        call: (context: ExprEvaluatorContext, call: CallExpr) => {\n            const left = context.evaluate(call.args[0]);\n            const right = context.evaluate(call.args[1]);\n            if (typeof left === \"string\" && typeof right === \"string\") {\n                return left.startsWith(right);\n            }\n            return false;\n        }\n    },\n\n    \"$=\": {\n        call: (context: ExprEvaluatorContext, call: CallExpr) => {\n            const left = context.evaluate(call.args[0]);\n            const right = context.evaluate(call.args[1]);\n            if (typeof left === \"string\" && typeof right === \"string\") {\n                return left.endsWith(right);\n            }\n            return false;\n        }\n    }\n};\n\nexport const StringOperators: OperatorDescriptorMap = operators;\nexport type StringOperatorNames = keyof typeof operators;\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { CallExpr } from \"../Expr\";\nimport { ExprEvaluatorContext, OperatorDescriptorMap } from \"../ExprEvaluator\";\n\nconst operators = {\n    typeof: {\n        call: (context: ExprEvaluatorContext, call: CallExpr) => {\n            return typeof context.evaluate(call.args[0]);\n        }\n    }\n};\n\nexport const TypeOperators: OperatorDescriptorMap = operators;\nexport type TypeOperatorNames = keyof typeof operators;\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { Value } from \"../Env\";\nimport { CallExpr, NumberLiteralExpr } from \"../Expr\";\nimport { ExprEvaluatorContext, OperatorDescriptorMap } from \"../ExprEvaluator\";\n\nimport * as THREE from \"three\";\n\ntype MakeVectorCallExpr = CallExpr & {\n    _value?: THREE.Vector2 | THREE.Vector3 | THREE.Vector4;\n};\n\nfunction isVector(\n    context: ExprEvaluatorContext,\n    call: CallExpr,\n    type: \"vector2\" | \"vector3\" | \"vector4\"\n): Value {\n    let ctor: new () => object;\n    switch (type) {\n        case \"vector2\":\n            ctor = THREE.Vector2;\n            break;\n        case \"vector3\":\n            ctor = THREE.Vector3;\n            break;\n        case \"vector4\":\n            ctor = THREE.Vector4;\n            break;\n    }\n    for (const childExpr of call.args) {\n        const value = context.evaluate(childExpr);\n        if (value instanceof ctor) {\n            return value;\n        }\n    }\n    throw new Error(`expected a \"${type}\"`);\n}\n\nfunction toVector(\n    context: ExprEvaluatorContext,\n    call: CallExpr,\n    type: \"vector2\" | \"vector3\" | \"vector4\"\n): Value {\n    let VectorCtor: any;\n    let components: number;\n\n    switch (type) {\n        case \"vector2\":\n            VectorCtor = THREE.Vector2;\n            components = 2;\n            break;\n        case \"vector3\":\n            VectorCtor = THREE.Vector3;\n            components = 3;\n            break;\n        case \"vector4\":\n            VectorCtor = THREE.Vector4;\n            components = 4;\n            break;\n    }\n\n    for (const childExpr of call.args) {\n        const value = context.evaluate(childExpr);\n        if (value instanceof VectorCtor) {\n            return value;\n        } else if (\n            Array.isArray(value) &&\n            value.length === components &&\n            value.every(v => typeof v === \"number\")\n        ) {\n            return new VectorCtor().fromArray(value);\n        }\n    }\n    throw new Error(`expected a \"${type}\"`);\n}\n\nconst operators = {\n    \"make-vector\": {\n        call: (context: ExprEvaluatorContext, call: MakeVectorCallExpr) => {\n            if (call._value !== undefined) {\n                return call._value;\n            }\n\n            if (call.args.length < 2) {\n                throw new Error(\"not enough arguments\");\n            } else if (call.args.length > 4) {\n                throw new Error(\"too many arguments\");\n            }\n\n            const components = call.args.map(arg => context.evaluate(arg)) as number[];\n\n            components.forEach((element, index) => {\n                if (typeof element !== \"number\") {\n                    throw new Error(\n                        `expected vector component at index ${index} to have type \"number\"`\n                    );\n                }\n            });\n\n            let result: THREE.Vector2 | THREE.Vector3 | THREE.Vector4 | undefined;\n\n            switch (components.length) {\n                case 2:\n                    result = new THREE.Vector2().fromArray(components);\n                    break;\n                case 3:\n                    result = new THREE.Vector3().fromArray(components);\n                    break;\n                case 4:\n                    result = new THREE.Vector4().fromArray(components);\n                    break;\n                default:\n                    throw new Error(\"too many arguments\");\n            }\n\n            if (call.args.every(arg => arg instanceof NumberLiteralExpr)) {\n                call._value = result;\n            }\n\n            return result;\n        }\n    },\n    vector2: {\n        call: (context: ExprEvaluatorContext, call: CallExpr) => isVector(context, call, \"vector2\")\n    },\n    vector3: {\n        call: (context: ExprEvaluatorContext, call: CallExpr) => isVector(context, call, \"vector3\")\n    },\n    vector4: {\n        call: (context: ExprEvaluatorContext, call: CallExpr) => isVector(context, call, \"vector4\")\n    },\n    \"to-vector2\": {\n        call: (context: ExprEvaluatorContext, call: CallExpr) => toVector(context, call, \"vector2\")\n    },\n    \"to-vector3\": {\n        call: (context: ExprEvaluatorContext, call: CallExpr) => toVector(context, call, \"vector3\")\n    },\n    \"to-vector4\": {\n        call: (context: ExprEvaluatorContext, call: CallExpr) => toVector(context, call, \"vector4\")\n    }\n};\n\nexport const VectorOperators: OperatorDescriptorMap = operators;\nexport type VectorOperatorNames = keyof typeof operators;\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport {\n    BooleanLiteralExpr,\n    CallExpr,\n    CaseExpr,\n    Expr,\n    ExprScope,\n    ExprVisitor,\n    HasAttributeExpr,\n    LiteralExpr,\n    MatchExpr,\n    MatchLabel,\n    NullLiteralExpr,\n    NumberLiteralExpr,\n    ObjectLiteralExpr,\n    StringLiteralExpr,\n    VarExpr\n} from \"./Expr\";\n\nimport { Env } from \"./Env\";\n\nexport interface InstantiationContext {\n    /**\n     * The [[Env]] used to lookup for names.\n     */\n    env: Env;\n\n    /**\n     * The names to preserve during the instantiation.\n     */\n    preserve?: Set<string>;\n}\n\nconst emptyEnv = new Env();\n\n/**\n * @hidden\n */\nexport class ExprInstantiator implements ExprVisitor<Expr, InstantiationContext> {\n    visitNullLiteralExpr(expr: NullLiteralExpr, _context: InstantiationContext): Expr {\n        return expr;\n    }\n\n    visitBooleanLiteralExpr(expr: BooleanLiteralExpr, _context: InstantiationContext): Expr {\n        return expr;\n    }\n\n    visitNumberLiteralExpr(expr: NumberLiteralExpr, _context: InstantiationContext): Expr {\n        return expr;\n    }\n\n    visitStringLiteralExpr(expr: StringLiteralExpr, _context: InstantiationContext): Expr {\n        return expr;\n    }\n\n    visitObjectLiteralExpr(expr: ObjectLiteralExpr, _context: InstantiationContext): Expr {\n        return expr;\n    }\n\n    visitVarExpr(expr: VarExpr, context: InstantiationContext): Expr {\n        if (context.preserve && context.preserve.has(expr.name)) {\n            return expr;\n        }\n        const value = context.env.lookup(expr.name);\n        return LiteralExpr.fromValue(value !== undefined ? value : null);\n    }\n\n    visitHasAttributeExpr(expr: HasAttributeExpr, context: InstantiationContext): Expr {\n        if (context.preserve && context.preserve.has(expr.name)) {\n            return expr;\n        }\n        const value = context.env.lookup(expr.name) !== undefined;\n        return LiteralExpr.fromValue(value);\n    }\n\n    visitCallExpr(expr: CallExpr, context: InstantiationContext): Expr {\n        const args = expr.args.map(arg => arg.accept(this, context));\n        if (args.some((a, i) => a !== expr.args[i])) {\n            return new CallExpr(expr.op, args);\n        }\n        return expr;\n    }\n\n    visitMatchExpr(match: MatchExpr, context: InstantiationContext): Expr {\n        const value = match.value.accept(this, context);\n\n        if (value instanceof LiteralExpr) {\n            const r = value.value;\n            for (const [label, body] of match.branches) {\n                if (Array.isArray(label) && (label as any[]).includes(r)) {\n                    return body.accept(this, context);\n                } else if (label === r) {\n                    return body.accept(this, context);\n                }\n            }\n            return match.fallback.accept(this, context);\n        }\n\n        let changed = match.value !== value;\n\n        const branches: Array<[MatchLabel, Expr]> = match.branches.map(([label, branch]) => {\n            const newBranch = branch.accept(this, context);\n            if (newBranch !== branch) {\n                changed = true;\n            }\n            return [label, newBranch];\n        });\n\n        const fallback = match.fallback.accept(this, context);\n\n        if (fallback !== match.fallback) {\n            changed = true;\n        }\n\n        return changed ? new MatchExpr(value, branches, fallback) : match;\n    }\n\n    visitCaseExpr(expr: CaseExpr, context: InstantiationContext): Expr {\n        const branches: Array<[Expr, Expr]> = [];\n\n        let changed = false;\n\n        for (const [condition, branch] of expr.branches) {\n            const newCondition = condition.accept(this, context);\n            const deps = newCondition.dependencies();\n            if (!condition.isDynamic() && deps.properties.size === 0) {\n                if (Boolean(newCondition.evaluate(emptyEnv, ExprScope.Condition))) {\n                    return branch.accept(this, context);\n                }\n            } else {\n                if (newCondition !== condition) {\n                    changed = true;\n                }\n                branches.push([newCondition, branch]);\n            }\n        }\n\n        if (branches.length === 0) {\n            // all the conditions of this CaseExpr evaluated\n            // to false, so the resulting of instantiating this CaseExpr\n            // is the same as instantiating its fallback expression.\n            return expr.fallback.accept(this, context);\n        }\n\n        if (branches.length !== expr.branches.length) {\n            // the number of branches changed, this means that\n            // some of the branches had constant expressions that\n            // evaluate to false. In this case the resulting\n            // `CaseExpr` has less branches.\n            changed = true;\n        }\n\n        // Instantiate the body of all the branches of this CaseExpr\n        // that have dynamic conditions.\n        branches.forEach(branch => {\n            const instantiatedBranch = branch[1].accept(this, context);\n\n            if (instantiatedBranch !== branch[1]) {\n                changed = true;\n            }\n\n            branch[1] = instantiatedBranch;\n        });\n\n        const fallback = expr.fallback.accept(this, context);\n\n        if (fallback !== expr.fallback) {\n            changed = true;\n        }\n\n        if (!changed) {\n            // nothing changed, return the old expression.\n            return expr;\n        }\n\n        return new CaseExpr(branches, fallback);\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport {\n    CallExpr,\n    EqualityOp,\n    Expr,\n    HasAttributeExpr,\n    LiteralExpr,\n    NumberLiteralExpr,\n    RelationalOp,\n    StringLiteralExpr,\n    VarExpr\n} from \"./Expr\";\n\n/**\n * Character value\n */\nenum Character {\n    Tab = 9,\n    Lf = 10,\n    Cr = 13,\n    Space = 32,\n    LParen = 40,\n    RParen = 41,\n    Comma = 44,\n    Dot = 46,\n    LBracket = 91,\n    Backslash = 92,\n    RBracket = 93,\n    _0 = 48,\n    _9 = 57,\n    _ = 95,\n    A = 64,\n    Z = 90,\n    a = 97,\n    z = 122,\n    DoubleQuote = 34,\n    SingleQuote = 39,\n    Exclaim = 33,\n    Equal = 61,\n    Caret = 94,\n    Tilde = 126,\n    Dollar = 36,\n    Less = 60,\n    Greater = 62,\n    Bar = 124,\n    Amp = 38\n}\n\n/**\n * Check if a codepoint is a whitespace character.\n */\nfunction isSpace(codepoint: number): boolean {\n    switch (codepoint) {\n        case Character.Tab:\n        case Character.Lf:\n        case Character.Cr:\n        case Character.Space:\n            return true;\n        default:\n            return false;\n    } // switch\n}\n\n/**\n * Check if codepoint is a digit character.\n */\nfunction isNumber(codepoint: number): boolean {\n    return codepoint >= Character._0 && codepoint <= Character._9;\n}\n\n/**\n * Check if codepoint is a letter character.\n */\nfunction isLetter(codepoint: number): boolean {\n    return (\n        (codepoint >= Character.a && codepoint <= Character.z) ||\n        (codepoint >= Character.A && codepoint <= Character.Z)\n    );\n}\n\n/**\n * Check if codepoint is either a digit or a letter character.\n */\nfunction isLetterOrNumber(codepoint: number): boolean {\n    return isLetter(codepoint) || isNumber(codepoint);\n}\n\n/**\n * Check if codepoint is an identification character: underscore, dollar sign, dot or bracket.\n */\nfunction isIdentChar(codepoint: number): boolean {\n    return (\n        isLetterOrNumber(codepoint) ||\n        codepoint === Character._ ||\n        codepoint === Character.Dollar ||\n        codepoint === Character.Dot ||\n        codepoint === Character.LBracket ||\n        codepoint === Character.RBracket\n    );\n}\n\n/**\n * Tokens used in theme grammar.\n */\nenum Token {\n    Eof = 0,\n    Error,\n    Identifier,\n    Number,\n    String,\n    Comma,\n    LParen,\n    RParen,\n    LBracket,\n    RBracket,\n    Exclaim,\n    TildeEqual,\n    CaretEqual,\n    DollarEqual,\n    EqualEqual,\n    ExclaimEqual,\n    Less,\n    Greater,\n    LessEqual,\n    GreaterEqual,\n    BarBar,\n    AmpAmp\n}\n\n/**\n * Maps a token to its string name.\n */\nfunction tokenSpell(token: Token): string {\n    switch (token) {\n        case Token.Eof:\n            return \"eof\";\n        case Token.Error:\n            return \"error\";\n        case Token.Identifier:\n            return \"identifier\";\n        case Token.Number:\n            return \"number\";\n        case Token.String:\n            return \"string\";\n        case Token.Comma:\n            return \",\";\n        case Token.LParen:\n            return \"(\";\n        case Token.RParen:\n            return \")\";\n        case Token.LBracket:\n            return \"[\";\n        case Token.RBracket:\n            return \"]\";\n        case Token.Exclaim:\n            return \"!\";\n        case Token.TildeEqual:\n            return \"~=\";\n        case Token.CaretEqual:\n            return \"^=\";\n        case Token.DollarEqual:\n            return \"$=\";\n        case Token.EqualEqual:\n            return \"==\";\n        case Token.ExclaimEqual:\n            return \"!=\";\n        case Token.Less:\n            return \"<\";\n        case Token.Greater:\n            return \">\";\n        case Token.LessEqual:\n            return \"<=\";\n        case Token.GreaterEqual:\n            return \">=\";\n        case Token.BarBar:\n            return \"||\";\n        case Token.AmpAmp:\n            return \"&&\";\n        default:\n            throw new Error(`invalid token ${token}`);\n    }\n}\n\n/**\n * Lexer class implementation.\n */\nclass Lexer {\n    private m_token: Token = Token.Error;\n    private m_index = 0;\n    private m_char: number = Character.Lf;\n    private m_text?: string;\n\n    constructor(readonly code: string) {}\n\n    /**\n     * Single lexer token.\n     */\n    token(): Token {\n        return this.m_token;\n    }\n\n    /**\n     * Parsed text.\n     */\n    text(): string {\n        return this.m_text || \"\";\n    }\n\n    /**\n     * Go to the next token.\n     */\n    next(): Token {\n        this.m_token = this.yylex();\n        if (this.m_token === Token.Error) {\n            throw new Error(`unexpected character ${this.m_char}`);\n        }\n        return this.m_token;\n    }\n\n    private yyinp(): void {\n        this.m_char = this.code.codePointAt(this.m_index++) || 0;\n    }\n\n    private yylex(): Token {\n        this.m_text = undefined;\n        while (isSpace(this.m_char)) {\n            this.yyinp();\n        }\n        if (this.m_char === 0) {\n            return Token.Eof;\n        }\n        const ch = this.m_char;\n        this.yyinp();\n        switch (ch) {\n            case Character.LParen:\n                return Token.LParen;\n            case Character.RParen:\n                return Token.RParen;\n            case Character.LBracket:\n                return Token.LBracket;\n            case Character.RBracket:\n                return Token.RBracket;\n            case Character.Comma:\n                return Token.Comma;\n            case Character.SingleQuote:\n            case Character.DoubleQuote: {\n                const start = this.m_index - 1;\n                while (this.m_char && this.m_char !== ch) {\n                    // ### TODO handle escape sequences\n                    this.yyinp();\n                }\n                if (this.m_char !== ch) {\n                    throw new Error(\"Unfinished string literal\");\n                }\n                this.yyinp();\n                this.m_text = this.code.substring(start, this.m_index - 2);\n                return Token.String;\n            }\n            case Character.Exclaim:\n                if (this.m_char === Character.Equal) {\n                    this.yyinp();\n                    return Token.ExclaimEqual;\n                }\n                return Token.Exclaim;\n            case Character.Caret:\n                if (this.m_char === Character.Equal) {\n                    this.yyinp();\n                    return Token.CaretEqual;\n                }\n                return Token.Error;\n            case Character.Tilde:\n                if (this.m_char === Character.Equal) {\n                    this.yyinp();\n                    return Token.TildeEqual;\n                }\n                return Token.Error;\n            case Character.Equal:\n                if (this.m_char === Character.Equal) {\n                    this.yyinp();\n                    return Token.EqualEqual;\n                }\n                return Token.Error;\n            case Character.Less:\n                if (this.m_char === Character.Equal) {\n                    this.yyinp();\n                    return Token.LessEqual;\n                }\n                return Token.Less;\n            case Character.Greater:\n                if (this.m_char === Character.Equal) {\n                    this.yyinp();\n                    return Token.GreaterEqual;\n                }\n                return Token.Greater;\n            case Character.Bar:\n                if (this.m_char === Character.Bar) {\n                    this.yyinp();\n                    return Token.BarBar;\n                }\n                return Token.Error;\n            case Character.Amp:\n                if (this.m_char === Character.Amp) {\n                    this.yyinp();\n                    return Token.AmpAmp;\n                }\n                return Token.Error;\n            default: {\n                const start = this.m_index - 2;\n                if (\n                    isLetter(ch) ||\n                    ch === Character._ ||\n                    (ch === Character.Dollar && isIdentChar(this.m_char))\n                ) {\n                    while (isIdentChar(this.m_char)) {\n                        this.yyinp();\n                    }\n                    this.m_text = this.code.substring(start, this.m_index - 1);\n                    return Token.Identifier;\n                } else if (isNumber(ch)) {\n                    while (isNumber(this.m_char)) {\n                        this.yyinp();\n                    }\n                    if (this.m_char === Character.Dot) {\n                        this.yyinp();\n                        while (isNumber(this.m_char)) {\n                            this.yyinp();\n                        }\n                    }\n                    this.m_text = this.code.substring(start, this.m_index - 1);\n                    return Token.Number;\n                } else if (ch === Character.Dollar) {\n                    if (this.m_char === Character.Equal) {\n                        this.yyinp();\n                        return Token.DollarEqual;\n                    }\n                    return Token.Error;\n                }\n            }\n        }\n        return Token.Error;\n    }\n}\n\nfunction getEqualityOp(token: Token): EqualityOp | undefined {\n    switch (token) {\n        case Token.TildeEqual:\n            return \"~=\";\n        case Token.CaretEqual:\n            return \"^=\";\n        case Token.DollarEqual:\n            return \"$=\";\n        case Token.EqualEqual:\n            return \"==\";\n        case Token.ExclaimEqual:\n            return \"!=\";\n        default:\n            return undefined;\n    } // switch\n}\n\nfunction getRelationalOp(token: Token): RelationalOp | undefined {\n    switch (token) {\n        case Token.Less:\n            return \"<\";\n        case Token.Greater:\n            return \">\";\n        case Token.LessEqual:\n            return \"<=\";\n        case Token.GreaterEqual:\n            return \">=\";\n        default:\n            return undefined;\n    } // switch\n}\n\nexport class ExprParser {\n    private readonly lex: Lexer;\n\n    constructor(code: string) {\n        this.lex = new Lexer(code);\n        this.lex.next();\n    }\n\n    parse(): Expr | never {\n        return this.parseLogicalOr();\n    }\n\n    private yyexpect(token: Token): void | never {\n        if (this.lex.token() !== token) {\n            throw new Error(\n                `Syntax error: Expected token '${tokenSpell(token)}' but ` +\n                    `found '${tokenSpell(this.lex.token())}'`\n            );\n        }\n        this.lex.next();\n    }\n\n    private parsePrimary(): Expr | never {\n        switch (this.lex.token()) {\n            case Token.Identifier: {\n                const text = this.lex.text();\n                switch (text) {\n                    case \"has\":\n                        this.lex.next(); // skip has keyword\n                        this.yyexpect(Token.LParen);\n                        const hasAttribute = this.lex.text();\n                        this.yyexpect(Token.Identifier);\n                        this.yyexpect(Token.RParen);\n                        return new HasAttributeExpr(hasAttribute);\n                    case \"length\":\n                        this.lex.next(); // skip length keyword\n                        this.yyexpect(Token.LParen);\n                        const value = this.parseLogicalOr();\n                        this.yyexpect(Token.RParen);\n                        return new CallExpr(\"length\", [value]);\n                    default:\n                        const expr = new VarExpr(text);\n                        this.lex.next();\n                        return expr;\n                }\n            }\n\n            case Token.LParen: {\n                this.lex.next();\n                const expr = this.parseLogicalOr();\n                this.yyexpect(Token.RParen);\n                return expr;\n            }\n\n            default:\n                return this.parseLiteral();\n        } // switch\n    }\n\n    private parseLiteral(): NumberLiteralExpr | StringLiteralExpr | never {\n        switch (this.lex.token()) {\n            case Token.Number: {\n                const expr = new NumberLiteralExpr(parseFloat(this.lex.text()));\n                this.lex.next();\n                return expr;\n            }\n            case Token.String: {\n                const expr = new StringLiteralExpr(this.lex.text());\n                this.lex.next();\n                return expr;\n            }\n            default:\n                throw new Error(\"Syntax error\");\n        } // switch\n    }\n\n    private parseUnary(): Expr | never {\n        if (this.lex.token() === Token.Exclaim) {\n            this.lex.next();\n            return new CallExpr(\"!\", [this.parseUnary()]);\n        }\n        return this.parsePrimary();\n    }\n\n    private parseRelational(): Expr | never {\n        let expr = this.parseUnary();\n        while (true) {\n            if (this.lex.token() === Token.Identifier && this.lex.text() === \"in\") {\n                this.lex.next();\n                this.yyexpect(Token.LBracket);\n                const elements = [this.parseLiteral()];\n                while (this.lex.token() === Token.Comma) {\n                    this.lex.next();\n                    elements.push(this.parseLiteral());\n                }\n                this.yyexpect(Token.RBracket);\n                expr = new CallExpr(\"in\", [\n                    expr,\n                    LiteralExpr.fromValue(elements.map(({ value }) => value))\n                ]);\n            } else {\n                const op = getRelationalOp(this.lex.token());\n                if (op === undefined) {\n                    break;\n                }\n                this.lex.next();\n                const right = this.parseUnary();\n                expr = new CallExpr(op, [expr, right]);\n            }\n        }\n        return expr;\n    }\n\n    private parseEquality(): Expr | never {\n        let expr = this.parseRelational();\n        while (true) {\n            let op: string | undefined = getEqualityOp(this.lex.token());\n\n            if (op === undefined) {\n                break;\n            }\n\n            if (op === \"~=\") {\n                op = \"in\";\n            }\n\n            this.lex.next();\n            const right = this.parseRelational();\n            expr = new CallExpr(op, [expr, right]);\n        }\n        return expr;\n    }\n\n    private parseLogicalAnd(): Expr | never {\n        const expr = this.parseEquality();\n\n        if (this.lex.token() !== Token.AmpAmp) {\n            return expr;\n        }\n\n        const expressions: Expr[] = [expr];\n\n        do {\n            this.lex.next();\n            expressions.push(this.parseEquality());\n        } while (this.lex.token() === Token.AmpAmp);\n\n        return new CallExpr(\"all\", expressions);\n    }\n\n    private parseLogicalOr(): Expr | never {\n        const expr = this.parseLogicalAnd();\n\n        if (this.lex.token() !== Token.BarBar) {\n            return expr;\n        }\n\n        const expressions: Expr[] = [expr];\n\n        do {\n            this.lex.next();\n            expressions.push(this.parseLogicalAnd());\n        } while (this.lex.token() === Token.BarBar);\n\n        return new CallExpr(\"any\", expressions);\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * Common communication protocol for [[WorkerService]].\n */\nexport namespace WorkerServiceProtocol {\n    /**\n     * Service id of worker manager ([[WorkerServiceManager]]) used to create/destroy service\n     * instances in workers.\n     */\n    export const WORKER_SERVICE_MANAGER_SERVICE_ID = \"worker-service-manager\";\n\n    /**\n     * Define possible names of messages exchanged with services within `WebWorker`.\n     */\n    export enum ServiceMessageName {\n        Initialized = \"initialized\",\n        Request = \"request\",\n        Response = \"response\"\n    }\n\n    /**\n     * Interface for `ServiceMessage` which describes metadata for a service messages.\n     */\n    export interface ServiceMessage {\n        service: string;\n        type: ServiceMessageName;\n    }\n\n    /**\n     * This message is sent by the worker to the main thread. No data is sent. Receiving this\n     * message confirms that the worker has started successfully.\n     */\n    export interface InitializedMessage extends ServiceMessage {\n        type: ServiceMessageName.Initialized;\n    }\n\n    /**\n     * Type guard to check if an object is a signal message from worker.\n     */\n    export function isInitializedMessage(message: any): message is InitializedMessage {\n        return (\n            message &&\n            typeof message.service === \"string\" &&\n            typeof message.type === \"string\" &&\n            message.type === ServiceMessageName.Initialized\n        );\n    }\n\n    /**\n     * Define possible names of requests called on services within `WebWorker`.\n     */\n    export enum Requests {\n        CreateService = \"create-service\",\n        DestroyService = \"destroy-service\"\n    }\n\n    /**\n     * This is an internal general interface used in communication with workers.\n     * Check [[ConcurrentWorkerSet]]'s invokeRequest function for exemplary usage.\n     */\n    export interface ServiceRequest {\n        type: string;\n    }\n\n    /**\n     * This message is sent by the main thread to [[WorkerServiceManager]] to dynamically create a\n     * new service.\n     *\n     * May throw `UnknownServiceError` if service of given type is not registered in\n     * [[WorkerServiceManager]], see [[isUnknownServiceError]].\n     */\n    export interface CreateServiceRequest extends ServiceRequest {\n        type: Requests.CreateService;\n\n        /**\n         * Type of service to be created.\n         *\n         * @see [[WorkerServiceManager.register]]\n         */\n        targetServiceType: string;\n\n        /**\n         * The newly created service instance will be available under this id.\n         */\n        targetServiceId: string;\n    }\n\n    /**\n     * Test if `error` thrown by [[CreateServiceRequest]] was caused by unknown type of service.\n     */\n    export function isUnknownServiceError(error: Error): boolean {\n        return /unknown targetServiceType requested: /.test(error.message);\n    }\n\n    /**\n     * This message is sent by the main thread to [[WorkerServiceManager]] to dynamically destroy a\n     * service.\n     */\n    export interface DestroyServiceRequest extends ServiceRequest {\n        type: Requests.DestroyService;\n\n        /**\n         * Id of service to be destroyed.\n         */\n        targetServiceId: string;\n    }\n\n    /**\n     * Possible service management messages (`CreateService` or `DestroyService`) sent to WebWorker.\n     */\n    export type WorkerServiceManagerRequest = CreateServiceRequest | DestroyServiceRequest;\n\n    /**\n     * This message is a part of the Request-Response scheme implemented to be used in communication\n     * between workers and the decoder.\n     */\n    export interface RequestMessage extends ServiceMessage {\n        type: ServiceMessageName.Request;\n        messageId: number;\n        request: any;\n    }\n\n    /**\n     * Type guard to check if an object is a request message sent to a worker.\n     */\n    export function isRequestMessage(message: any): message is RequestMessage {\n        return (\n            message &&\n            typeof message.service === \"string\" &&\n            typeof message.type === \"string\" &&\n            message.type === ServiceMessageName.Request\n        );\n    }\n\n    /**\n     * This message is a part of the Request-Response scheme implemented to be used in communication\n     * between workers and the decoder.\n     */\n    export interface ResponseMessage extends ServiceMessage {\n        type: ServiceMessageName.Response;\n        messageId: number;\n        errorMessage?: string;\n        errorStack?: string;\n        response?: object;\n    }\n\n    /**\n     * Type guard to check if an object is a request message sent to a worker.\n     */\n    export function isResponseMessage(message: any): message is ResponseMessage {\n        return (\n            message &&\n            typeof message.service === \"string\" &&\n            typeof message.type === \"string\" &&\n            message.type === ServiceMessageName.Response\n        );\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { GeoJson } from \"../lib/GeoJsonDataType\";\nimport { WorkerServiceProtocol } from \"./WorkerServiceProtocol\";\n\n/**\n * Communication protocol with [[ITiler]].\n */\nexport namespace WorkerTilerProtocol {\n    /**\n     * Define possible names of requests called on tiler services within `WebWorker`.\n     */\n    export enum Requests {\n        RegisterIndex = \"register-index\",\n        UpdateIndex = \"update-index\",\n        TileRequest = \"tile-request\"\n    }\n\n    /**\n     * This object is sent to the tiler to register a new tile index in the worker.\n     */\n    export interface RegisterIndexRequest extends WorkerServiceProtocol.ServiceRequest {\n        type: Requests.RegisterIndex;\n        id: string;\n        input: string | GeoJson;\n    }\n\n    /**\n     * Type guard to check if an object is an index registration request sent to a worker.\n     */\n    export function isRegisterIndexRequest(message: any): message is RegisterIndexRequest {\n        return (\n            message && typeof message.type === \"string\" && message.type === Requests.RegisterIndex\n        );\n    }\n\n    /**\n     * This object is sent to the tiler to register a new tile index in the worker.\n     */\n    export interface UpdateIndexRequest extends WorkerServiceProtocol.ServiceRequest {\n        type: Requests.UpdateIndex;\n        id: string;\n        input: string | GeoJson;\n    }\n\n    /**\n     * Type guard to check if an object is an update request for the index registration.\n     */\n    export function isUpdateIndexRequest(message: any): message is UpdateIndexRequest {\n        return message && typeof message.type === \"string\" && message.type === Requests.UpdateIndex;\n    }\n\n    /**\n     * This object is sent to the tiler asking to retrieve a specific tile. The expected response\n     * type is an object containing a tiled payload.\n     */\n    export interface TileRequest extends WorkerServiceProtocol.ServiceRequest {\n        type: Requests.TileRequest;\n        index: string;\n        tileKey: number;\n    }\n\n    /**\n     * Type guard to check if an object is a tile request sent to a worker.\n     */\n    export function isTileRequest(message: any): message is TileRequest {\n        return message && typeof message.type === \"string\" && message.type === Requests.TileRequest;\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { Definitions, StyleSet } from \"./Theme\";\nimport { WorkerServiceProtocol } from \"./WorkerServiceProtocol\";\n\n/**\n * Interface for `OptionsMap` which describes a general structure of key-value pairs.\n */\nexport interface OptionsMap {\n    [name: string]: any;\n}\n\n/**\n * Allows to cancel and prioritize requests inside the requestQueue. Useful to optimize the order of\n * decoding tiles during animations and camera movements.\n *\n * `RequestController` is not extending [[AbortController]], because this is not supported in ES5.\n */\nexport class RequestController implements AbortController {\n    /**\n     * Creates an instance of `RequestController`.\n     *\n     * @param {number} priority\n     * @param {AbortController} abortController Optional [[AbortController]] used internally, since\n     *      [[AbortController]]s should not be subclassed.\n     */\n    constructor(\n        public priority: number = 0,\n        public abortController: AbortController = new AbortController()\n    ) {}\n\n    get signal(): AbortSignal {\n        return this.abortController.signal;\n    }\n\n    /**\n     * Invoking this method will set this object's AbortSignal's aborted flag and\n     * signal to any observers that the associated activity is to be aborted.\n     */\n    abort(): void {\n        this.abortController.abort();\n    }\n}\n\n/**\n * Communication protocol with [[ITileDecoder]].\n */\nexport namespace WorkerDecoderProtocol {\n    /**\n     * Define possible names of messages exchanged with decoder services within `WebWorker`.\n     */\n    export enum DecoderMessageName {\n        Configuration = \"configuration\"\n    }\n\n    /**\n     * Interface for `DecodedTileMessage` which describes metadata for a decoded tile.\n     */\n    export interface DecoderMessage {\n        service: string;\n        type: DecoderMessageName;\n    }\n\n    /**\n     * Interface for a ConfigurationMessage that is sent from the datasource to the decoder. The\n     * message used to configure the [[ITileDecoder]].\n     */\n    export interface ConfigurationMessage extends DecoderMessage {\n        type: DecoderMessageName.Configuration;\n        styleSet?: StyleSet;\n        definitions?: Definitions;\n        options?: OptionsMap;\n        languages?: string[];\n    }\n\n    /**\n     * Type guard to check if an object is an instance of `ConfigurationMessage`.\n     */\n    export function isConfigurationMessage(message: any): message is ConfigurationMessage {\n        return (\n            message &&\n            typeof message.service === \"string\" &&\n            typeof message.type === \"string\" &&\n            message.type === DecoderMessageName.Configuration\n        );\n    }\n\n    /**\n     * Define possible names of requests called on decoder services within `WebWorker`.\n     */\n    export enum Requests {\n        DecodeTileRequest = \"decode-tile-request\",\n        TileInfoRequest = \"tile-info-request\"\n    }\n\n    /**\n     * This object is sent to the decoder asking to decode a specific tile. The expected response\n     * type is a [[DecodedTile]].\n     */\n    export interface DecodeTileRequest extends WorkerServiceProtocol.ServiceRequest {\n        type: Requests.DecodeTileRequest;\n        tileKey: number;\n        data: ArrayBufferLike;\n        projection: string;\n    }\n\n    /**\n     * Type guard to check if an object is a decoded tile object sent to a worker.\n     */\n    export function isDecodeTileRequest(message: any): message is DecodeTileRequest {\n        return (\n            message &&\n            typeof message.type === \"string\" &&\n            message.type === Requests.DecodeTileRequest\n        );\n    }\n\n    /**\n     * This object is sent to the decoder asking for a tile info of a specific tile. The expected\n     * response type is a [[DecodedTile]].\n     */\n    export interface TileInfoRequest extends WorkerServiceProtocol.ServiceRequest {\n        type: Requests.TileInfoRequest;\n        tileKey: number;\n        data: ArrayBufferLike;\n        projection: string;\n    }\n\n    /**\n     * Type guard to check if an object is an info tile object sent to a worker.\n     */\n    export function isTileInfoRequest(message: any): message is TileInfoRequest {\n        return (\n            message && typeof message.type === \"string\" && message.type === Requests.TileInfoRequest\n        );\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { LoggerManager } from \"@here/harp-utils\";\nimport { Env, Expr, ExprScope, MapEnv, Value } from \"./Expr\";\n\nconst logger = LoggerManager.instance.create(\"TechniqueAttr\");\n\nexport interface AttrEvaluationContext {\n    /**\n     * Expression evaluation environment containing variable bindings.\n     */\n    env: MapEnv;\n\n    /**\n     * Storage level of tile containing this feature.\n     *\n     * To be removed, when interpolators will be based on [[Expr]].\n     */\n    storageLevel: number;\n\n    /**\n     * Zoom level of tile containing this feature.\n     *\n     * To be removed, when interpolators will be based on [[Expr]].\n     */\n    zoomLevel: number;\n\n    /**\n     * Optional, cache of expression results.\n     *\n     * @see [[Expr.evaluate]]\n     */\n    cachedExprResults?: Map<Expr, Value>;\n}\n\n/**\n * Evaluate feature attr _without_ default value.\n *\n * @returns actual value or `undefined`\n */\nexport function evaluateTechniqueAttr<T = Value>(\n    context: Env | AttrEvaluationContext,\n    attrValue: T | Expr | undefined\n): T | undefined;\n\n/**\n * Evaluate feature attr _with_ default value.\n *\n * @returns actual value or `defaultValue`\n */\nexport function evaluateTechniqueAttr<T = Value>(\n    context: Env | AttrEvaluationContext,\n    attrValue: T | Expr | undefined,\n    defaultValue: T\n): T;\n\nexport function evaluateTechniqueAttr<T = Value>(\n    context: Env | AttrEvaluationContext,\n    attrValue: T | Expr | undefined,\n    defaultValue?: T\n): T | undefined {\n    const env = context instanceof Env ? context : context.env;\n\n    let evaluated: Value | undefined;\n    if (Expr.isExpr(attrValue)) {\n        try {\n            evaluated = attrValue.evaluate(\n                env,\n                ExprScope.Dynamic,\n                !(context instanceof Env) ? context.cachedExprResults : undefined\n            );\n        } catch (error) {\n            logger.error(`failed to evaluate expression '${JSON.stringify(attrValue)}': ${error}`);\n            evaluated = undefined;\n        }\n    } else {\n        evaluated = (attrValue as unknown) as Value;\n    }\n    if (evaluated === undefined || evaluated === null) {\n        return defaultValue;\n    } else {\n        return (evaluated as unknown) as T;\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { isJsonExpr } from \"./Expr\";\nimport { StyleDeclaration, Theme } from \"./Theme\";\n\n/**\n * The ThemeVisitor visits every style in the theme in a depth-first fashion.\n */\nexport class ThemeVisitor {\n    constructor(readonly theme: Theme) {}\n    /**\n     * Applies a function to every style in the theme.\n     *\n     * @param visitFunc Function to be called with `style` as an argument. Function should return\n     *                  `true` to cancel visitation.\n     * @returns `true` if function has finished prematurely.\n     */\n    visitStyles(visitFunc: (style: StyleDeclaration) => boolean): boolean {\n        const visit = (style: StyleDeclaration): boolean => {\n            if (isJsonExpr(style)) {\n                return false;\n            }\n            if (visitFunc(style)) {\n                return true;\n            }\n            return false;\n        };\n        if (this.theme.styles !== undefined) {\n            for (const styleSetName in this.theme.styles) {\n                if (this.theme.styles[styleSetName] !== undefined) {\n                    for (const style of this.theme.styles[styleSetName]) {\n                        if (visit(style)) {\n                            return true;\n                        }\n                    }\n                }\n            }\n        }\n        return false;\n    }\n}\n","/*\n * Copyright (C) 2017-2020 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { Box3Like, GeoBox, Projection, ProjectionType } from \"@here/harp-geoutils\";\nimport { assert } from \"@here/harp-utils\";\nimport { Vector3 } from \"three\";\nimport { SubdivisionModifier } from \"./SubdivisionModifier\";\n\nconst VERTEX_POSITION_CACHE = [new Vector3(), new Vector3()];\n\nexport enum SubdivisionMode {\n    /**\n     * Subdivide all edges\n     */\n    All,\n    /**\n     * Only subdivide horizontal and vertical edges\n     */\n    NoDiagonals\n}\n\n/**\n * The [[EdgeLengthGeometrySubdivisionModifier]] subdivides triangle mesh depending on\n * length of edges.\n */\nexport class EdgeLengthGeometrySubdivisionModifier extends SubdivisionModifier {\n    private m_projectedBox: Box3Like;\n    private m_maxLength: number;\n    private m_maxLengthX: number;\n    private m_maxLengthY: number;\n\n    /**\n     * Constructs a new [[EdgeLengthGeometrySubdivisionModifier]].\n     *\n     * @param subdivision The subdivision factor\n     * @param geoBox The geo bounding box of a tile\n     * @param subdivisionMode Configures what edges to divide\n     * @param projection The projection that defines the world space of this geometry.\n     */\n    constructor(\n        readonly subdivision: number,\n        readonly geoBox: GeoBox,\n        readonly subdivisionMode: SubdivisionMode = SubdivisionMode.All,\n        readonly projection: Projection\n    ) {\n        super();\n\n        assert(\n            projection.type === ProjectionType.Planar,\n            \"EdgeLengthGeometrySubdivisionModifier only supports planar projections\"\n        );\n\n        const northEast = projection.projectPoint(geoBox.northEast, VERTEX_POSITION_CACHE[0]);\n        const southWest = projection.projectPoint(geoBox.southWest, VERTEX_POSITION_CACHE[1]);\n        this.m_projectedBox = {\n            min: {\n                x: Math.min(northEast.x, southWest.x),\n                y: Math.min(northEast.y, southWest.y),\n                z: Math.min(northEast.z, southWest.z)\n            },\n            max: {\n                x: Math.max(northEast.x, southWest.x),\n                y: Math.max(northEast.y, southWest.y),\n                z: Math.max(northEast.z, southWest.z)\n            }\n        };\n        this.m_maxLengthX = (this.m_projectedBox.max.x - this.m_projectedBox.min.x) / subdivision;\n        this.m_maxLengthY = (this.m_projectedBox.max.y - this.m_projectedBox.min.y) / subdivision;\n\n        // Increase max length slightly to account for precision errors\n        if (this.subdivisionMode === SubdivisionMode.All) {\n            this.m_maxLengthX *= 1.1;\n            this.m_maxLengthY *= 1.1;\n        }\n        this.m_maxLength = Math.sqrt(\n            this.m_maxLengthX * this.m_maxLengthX + this.m_maxLengthY * this.m_maxLengthY\n        );\n    }\n\n    /**\n     * Return upper bound for length of diagonal edges\n     */\n    get maxLength() {\n        return this.m_maxLength;\n    }\n\n    /**\n     * Return upper bound for edge length in x direction\n     */\n    get maxLengthX() {\n        return this.m_maxLengthX;\n    }\n\n    /**\n     * Return upper bound for edge length in y direction\n     */\n    get maxLengthY() {\n        return this.m_maxLengthY;\n    }\n\n    /** @override */\n    protected shouldSplitTriangle(a: Vector3, b: Vector3, c: Vector3): number | undefined {\n        const shouldSplitAB = this.shouldSplitEdge(a, b);\n        const shouldSplitBC = this.shouldSplitEdge(b, c);\n        const shouldSplitCA = this.shouldSplitEdge(c, a);\n        const shouldSplit = shouldSplitAB || shouldSplitBC || shouldSplitCA;\n\n        if (!shouldSplit) {\n            return;\n        }\n\n        const ab = a.distanceTo(b);\n        const bc = b.distanceTo(c);\n        const ca = c.distanceTo(a);\n        const maxDistance = Math.max(\n            shouldSplitAB ? ab : 0,\n            shouldSplitBC ? bc : 0,\n            shouldSplitCA ? ca : 0\n        );\n        if (ab === maxDistance) {\n            return 0;\n        } else if (bc === maxDistance) {\n            return 1;\n        } else if (ca === maxDistance) {\n            return 2;\n        }\n\n        throw new Error(\"Could not split triangle.\");\n    }\n\n    private shouldSplitEdge(a: Vector3, b: Vector3): boolean {\n        switch (this.subdivisionMode) {\n            case SubdivisionMode.All:\n                return (\n                    (a.y === b.y && Math.abs(a.x - b.x) > this.m_maxLengthX) ||\n                    (a.x === b.x && Math.abs(a.y - b.y) > this.m_maxLengthY) ||\n                    a.distanceTo(b) > this.m_maxLength\n                );\n            case SubdivisionMode.NoDiagonals:\n                return (\n                    (a.y === b.y && Math.abs(a.x - b.x) > this.m_maxLengthX) ||\n                    (a.x === b.x && Math.abs(a.y - b.y) > this.m_maxLengthY)\n                );\n        }\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { Projection, sphereProjection } from \"@here/harp-geoutils\";\nimport { Vector3 } from \"three\";\nimport { SubdivisionModifier } from \"./SubdivisionModifier\";\n\nconst VERTEX_POSITION_CACHE = [new Vector3(), new Vector3(), new Vector3()];\n\n/**\n * The [[SphericalGeometrySubdivisionModifier]] subdivides triangle mesh geometries positioned\n * on the surface of a sphere centered at `(0, 0, 0)`.\n */\nexport class SphericalGeometrySubdivisionModifier extends SubdivisionModifier {\n    /**\n     * Constructs a new [[SphericalGeometrySubdivisionModifier]].\n     *\n     * @param angle The maximum angle in radians between two vertices and the origin.\n     * @param projection The projection that defines the world space of this geometry.\n     */\n    constructor(readonly angle: number, readonly projection: Projection = sphereProjection) {\n        super();\n    }\n\n    /** @override */\n    protected shouldSplitTriangle(a: Vector3, b: Vector3, c: Vector3): number | undefined {\n        const aa = sphereProjection.reprojectPoint(this.projection, a, VERTEX_POSITION_CACHE[0]);\n        const bb = sphereProjection.reprojectPoint(this.projection, b, VERTEX_POSITION_CACHE[1]);\n        const cc = sphereProjection.reprojectPoint(this.projection, c, VERTEX_POSITION_CACHE[2]);\n\n        const alpha = aa.angleTo(bb);\n        const beta = bb.angleTo(cc);\n        const gamma = cc.angleTo(aa);\n\n        // find the maximum angle\n        const m = Math.max(alpha, Math.max(beta, gamma));\n\n        // split the triangle if needed.\n        if (m < this.angle) {\n            return undefined;\n        }\n\n        if (m === alpha) {\n            return 0;\n        } else if (m === beta) {\n            return 1;\n        } else if (m === gamma) {\n            return 2;\n        }\n\n        throw new Error(\"failed to split triangle\");\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport * as THREE from \"three\";\n\nimport { MemoryUsage } from \"../TextCanvas\";\nimport { GlyphData } from \"./GlyphData\";\nimport { GlyphTextureCache } from \"./GlyphTextureCache\";\nimport { FontStyle, FontVariant, TextRenderStyle } from \"./TextStyle\";\n\nconst ASSETS_PATH = \"_Assets/\";\nconst BOLD_ASSETS_PATH = \"_BoldAssets/\";\nconst ITALIC_ASSETS_PATH = \"_ItalicAssets/\";\nconst BOLD_ITALIC_ASSETS_PATH = \"_BoldItalicAssets/\";\nconst REPLACEMENT_PATH = \"_Assets/Extra/\";\n\ninterface SrcGlyphData {\n    id: number;\n    x: number;\n    y: number;\n    width: number;\n    height: number;\n    xoffset: number;\n    yoffset: number;\n    xadvance: number;\n    page: number;\n    chnl: number;\n}\n\n/**\n * Metrics defining the placement and rendering of all glyphs in a given [[Font]].\n */\nexport interface FontMetrics {\n    size: number;\n    distanceRange: number;\n    base: number;\n    lineHeight: number;\n    lineGap: number;\n    capHeight: number;\n    xHeight: number;\n}\n\n/**\n * Description of all assets, charset and metrics that define a font inside a [[FontCatalog]].\n */\nexport interface Font {\n    name: string;\n    metrics: FontMetrics;\n    charset: string;\n    bold?: string;\n    italic?: string;\n    boldItalic?: string;\n}\n\n/**\n * Description of a continuous range of Unicode code points (as well as information on which fonts\n * supports it).\n */\nexport interface UnicodeBlock {\n    name: string;\n    min: number;\n    max: number;\n    fonts: string[];\n}\n\n/**\n * Collection of font assets used to render glyphs when using a [[TextCanvas]].\n *\n * @summary A `FontCatalog` works as a stack of SDF bitmap fonts (using the BMFont format) designed\n * to cover the widest Unicode code point range possible. In order to manage all these assets\n * elegantly, the assets inside the `FontCatalog` are stored on a per-Unicode-Block basis, and\n * assets for a block are only loaded once a glyph belonging to that block is requested.\n *\n * Bitmap information coming from all different fonts is then stored in a unified WebGL GPU Texture\n * resource, which can be sampled to render all currently loaded glyphs.\n *\n */\nexport class FontCatalog {\n    /**\n     * Loads a `FontCatalog`.\n     *\n     * @param url Asset url.\n     * @param maxCodePointCount Maximum number of unique code points bitmaps this `FontCatalog`'s\n     * internal texture can store simultaneously.\n     *\n     * @returns `FontCatalog` Promise.\n     */\n    static async load(path: string, maxCodePointCount: number): Promise<FontCatalog> {\n        const url = new URL(path, window.location.href);\n        const fontCatalog = await FontCatalog.loadJSON(url.href);\n\n        const replacementDirUrl = new URL(`${fontCatalog.name}${REPLACEMENT_PATH}`, url);\n        const replacementJson = await FontCatalog.loadJSON(\n            replacementDirUrl.href + \"Specials.json\"\n        );\n        const replacementTexture = await FontCatalog.loadTexture(\n            replacementDirUrl.href + \"Specials.png\"\n        );\n        replacementTexture.wrapS = THREE.ClampToEdgeWrapping;\n        replacementTexture.wrapT = THREE.ClampToEdgeWrapping;\n        replacementTexture.minFilter = THREE.NearestFilter;\n        replacementTexture.needsUpdate = true;\n\n        const replacementFont = fontCatalog.fonts.find((font: Font) => font.name === \"Extra\");\n        const replacementGlyph = new GlyphData(\n            65533,\n            \"Specials\",\n            replacementJson.chars[0].width,\n            replacementJson.chars[0].height,\n            replacementJson.chars[0].xadvance,\n            replacementJson.chars[0].xoffset,\n            replacementJson.chars[0].yoffset,\n            0.0,\n            0.0,\n            1.0,\n            1.0,\n            replacementTexture,\n            replacementFont!\n        );\n\n        const fontCatalogInfo = new FontCatalog(\n            url.href.substr(0, url.href.lastIndexOf(\"/\")),\n            fontCatalog.name,\n            fontCatalog.type,\n            fontCatalog.size,\n            fontCatalog.maxWidth,\n            fontCatalog.maxHeight,\n            fontCatalog.distanceRange,\n            fontCatalog.fonts,\n            fontCatalog.supportedBlocks,\n            maxCodePointCount,\n            replacementGlyph\n        );\n        return fontCatalogInfo;\n    }\n\n    static async loadTexture(url: string): Promise<THREE.Texture> {\n        return new Promise(resolve => {\n            new THREE.TextureLoader().load(url, resolve);\n        }) as Promise<THREE.Texture>;\n    }\n\n    static async loadJSON(url: string): Promise<any> {\n        const response = await fetch(url);\n        if (!response.ok) {\n            throw new Error(`${url} Status Text:  ${response.statusText}`);\n        }\n        const rawJSON = await response.text();\n        return JSON.parse(rawJSON);\n    }\n\n    private m_glyphTextureCache: GlyphTextureCache;\n\n    private m_loadingJson: Map<string, Promise<any>>;\n    private m_loadingPages: Map<string, Promise<THREE.Texture>>;\n    private m_loadingGlyphs: Map<string, Promise<GlyphData>>;\n    private m_loadedJson: Map<string, any>;\n    private m_loadedPages: Map<string, THREE.Texture>;\n    private m_loadedGlyphs: Map<string, Map<number, GlyphData>>;\n\n    /**\n     * @hidden\n     * Creates a new FontCatalog.\n     *\n     * @param url FontCatalog's URL.\n     * @param name FontCatalog's name.\n     * @param type FontCatalog's type (sdf or msdf).\n     * @param size FontCatalog's glyph size (pixels).\n     * @param maxWidth FontCatalog's maximum glyph width (pixels).\n     * @param maxHeight FontCatalog's maximum glyph height (pixels).\n     * @param distanceRange Distance range used to generate the SDF bitmaps.\n     * @param fonts Array of supported fonts.\n     * @param unicodeBlocks Array of supported Unicode blocks.\n     * @param maxCodePointCount Maximum number of unique code points bitmaps this `FontCatalog`'s\n     * internal texture can store simultaneously.\n     * @param m_replacementGlyph [[GlyphData]] to be used whenever a Unicode code point is not\n     * supported by this `FontCatalog`.\n     *\n     * @returns New FontCatalog.\n     */\n    private constructor(\n        readonly url: string,\n        readonly name: string,\n        readonly type: string,\n        readonly size: number,\n        readonly maxWidth: number,\n        readonly maxHeight: number,\n        readonly distanceRange: number,\n        readonly fonts: Font[],\n        readonly unicodeBlocks: UnicodeBlock[],\n        readonly maxCodePointCount: number,\n        private m_replacementGlyph: GlyphData\n    ) {\n        this.m_glyphTextureCache = new GlyphTextureCache(\n            maxCodePointCount,\n            this.maxWidth + 1,\n            this.maxHeight + 1\n        );\n\n        this.m_loadingJson = new Map<string, Promise<any>>();\n        this.m_loadingPages = new Map<string, Promise<THREE.Texture>>();\n        this.m_loadingGlyphs = new Map<string, Promise<GlyphData>>();\n        this.m_loadedJson = new Map<string, any>();\n        this.m_loadedPages = new Map<string, THREE.Texture>();\n        this.m_loadedGlyphs = new Map<string, Map<number, GlyphData>>();\n    }\n\n    /**\n     * Release all allocated resources.\n     */\n    dispose() {\n        this.fonts.length = 0;\n        this.unicodeBlocks.length = 0;\n        this.m_glyphTextureCache.dispose();\n        this.m_loadingJson.clear();\n        this.m_loadingPages.clear();\n        this.m_loadingGlyphs.clear();\n        this.m_loadedJson.clear();\n        this.m_loadedPages.clear();\n        this.m_loadedGlyphs.clear();\n    }\n\n    /**\n     * Removes all loaded (and loading) assets.\n     */\n    clear() {\n        this.m_glyphTextureCache.clear();\n        this.m_loadingJson.clear();\n        this.m_loadingPages.clear();\n        this.m_loadingGlyphs.clear();\n        this.m_loadedJson.clear();\n        this.m_loadedPages.clear();\n        this.m_loadedGlyphs.clear();\n    }\n\n    /**\n     * Updates the internal WebGLRenderTarget.\n     * The update will copy the newly introduced glyphs since the previous update.\n     *\n     * @param renderer WebGLRenderer.\n     */\n    update(renderer: THREE.WebGLRenderer): void {\n        this.m_glyphTextureCache.update(renderer);\n    }\n\n    /**\n     * Internal WebGL Texture.\n     */\n    get texture(): THREE.Texture {\n        return this.m_glyphTextureCache.texture;\n    }\n\n    /**\n     * Internal WebGL Texture size.\n     */\n    get textureSize(): THREE.Vector2 {\n        return this.m_glyphTextureCache.textureSize;\n    }\n\n    /**\n     * Current internal loading state.\n     */\n    get isLoading(): boolean {\n        return (\n            this.m_loadingJson.size > 0 ||\n            this.m_loadingPages.size > 0 ||\n            this.m_loadingGlyphs.size > 0\n        );\n    }\n\n    /**\n     * Loads the description file for a specific [[UnicodeBlock]]. This speeds up consequent calls\n     * to `FontCatalog`.loadCharset() that require glyphs from this block to be loaded.\n     *\n     * @param block Requested [[UnicodeBlock]].\n     * @param font [[Font]] to retrieve this Unicode block from.\n     * @param fontStyle [[FontStyle]] assets to load.\n     * @param loadPages If `true`, all pages in this Unicode block will also be loaded.\n     *\n     * @returns Loaded Unicode Block json.\n     */\n    async loadBlock(\n        block: UnicodeBlock,\n        font: Font,\n        fontStyle: FontStyle,\n        loadPages?: boolean\n    ): Promise<any> {\n        const assetsPath = this.getAssetsPath(fontStyle, font);\n        const jsonPath = `${assetsPath}/${block.name.replace(/ /g, \"_\")}.json`;\n        let json = this.m_loadedJson.get(jsonPath);\n        if (json === undefined) {\n            let jsonPromise = this.m_loadingJson.get(jsonPath);\n            if (jsonPromise === undefined) {\n                try {\n                    jsonPromise = FontCatalog.loadJSON(jsonPath);\n                    this.m_loadingJson.set(jsonPath, jsonPromise);\n                    json = await jsonPromise;\n                    this.m_loadingJson.delete(jsonPath);\n                    this.m_loadedJson.set(jsonPath, json);\n                } catch (e) {\n                    // tslint:disable-next-line:no-console\n                    console.error(e);\n                    this.m_loadingJson.delete(jsonPath);\n                }\n            } else {\n                json = await jsonPromise;\n            }\n        }\n\n        const pagePromises: Array<Promise<THREE.Texture>> = [];\n        if (loadPages === true) {\n            for (const page of json.pages) {\n                pagePromises.push(this.loadPage(`${assetsPath}/${page}`));\n            }\n        }\n        await Promise.all(pagePromises);\n\n        return json;\n    }\n\n    /**\n     * Releases the description file for a specific [[UnicodeBlock]] (and all downloaded pages).\n     * Safe to call when no assets for this block have been loaded.\n     *\n     * @param block Requested [[UnicodeBlock]].\n     * @param font [[Font]] to remove this Unicode block from.\n     * @param fontStyle [[FontStyle]] assets to remove.\n     */\n    removeBlock(block: UnicodeBlock, font: Font, fontStyle: FontStyle): void {\n        const assetsPath = this.getAssetsPath(fontStyle, font);\n        const jsonPath = `${assetsPath}/${block.name.replace(/ /g, \"_\")}.json`;\n        const json = this.m_loadedJson.get(jsonPath);\n        if (json !== undefined) {\n            for (const page of json.pages) {\n                const pagePath = `${assetsPath}/${page}`;\n                this.m_loadingPages.delete(pagePath);\n                this.m_loadedPages.delete(pagePath);\n            }\n            this.m_loadingJson.delete(jsonPath);\n            this.m_loadedJson.delete(jsonPath);\n        }\n    }\n\n    /**\n     * Loads all the required glyphs needed to render the input text. Character repetition will not\n     * be considered, and only styled assets (with applied font selection, style and variants) will\n     * be loaded.\n     *\n     * @param input Input text.\n     * @param style Specific [[TextRenderStyle]] for which glyphs will be loaded.\n     *\n     * @returns Promise containing an array of all loaded [[GlyphData]] for the input text.\n     */\n    async loadCharset(input: string, style: TextRenderStyle): Promise<GlyphData[]> {\n        const fontName = style.fontName;\n        const fontStyle = style.fontStyle;\n        const shouldTransform =\n            style.fontVariant === FontVariant.AllCaps ||\n            style.fontVariant === FontVariant.SmallCaps;\n\n        const charset = (shouldTransform ? input.toUpperCase() : input).replace(\n            /[\\s\\S](?=([\\s\\S]+))/g,\n            (c, s) => {\n                return s.indexOf(c) + 1 ? \"\" : c;\n            }\n        );\n        const glyphPromises: Array<Promise<GlyphData>> = [];\n        for (const char of charset) {\n            const codePoint = char.codePointAt(0)!;\n            const font = this.getFont(codePoint, fontName);\n            const fontHash = `${font.name}_${fontStyle}`;\n            const glyphHash = `${fontHash}_${codePoint}`;\n\n            let fontGlyphMap = this.m_loadedGlyphs.get(fontHash);\n            if (fontGlyphMap === undefined) {\n                fontGlyphMap = new Map();\n                this.m_loadedGlyphs.set(fontHash, fontGlyphMap);\n            }\n\n            const glyph = fontGlyphMap.get(codePoint);\n            if (glyph === undefined) {\n                let glyphPromise = this.m_loadingGlyphs.get(glyphHash);\n                if (glyphPromise === undefined) {\n                    if (font.charset.indexOf(String.fromCodePoint(codePoint)) === -1) {\n                        const replacementGlyph = this.createReplacementGlyph(codePoint, char, font);\n                        fontGlyphMap!.set(codePoint, replacementGlyph);\n                        this.m_glyphTextureCache.add(glyphHash, replacementGlyph);\n                        continue;\n                    }\n\n                    let charUnicodeBlock: UnicodeBlock | undefined;\n                    for (const block of this.unicodeBlocks) {\n                        if (codePoint >= block.min && codePoint <= block.max) {\n                            charUnicodeBlock = block;\n                            break;\n                        }\n                    }\n\n                    glyphPromise = this.loadAssets(codePoint, fontStyle, charUnicodeBlock!, font);\n                    this.m_loadingGlyphs.set(glyphHash, glyphPromise);\n                    glyphPromise.then((loadedGlyph: GlyphData) => {\n                        this.m_loadingGlyphs.delete(glyphHash);\n                        fontGlyphMap!.set(codePoint, loadedGlyph);\n                        this.m_glyphTextureCache.add(glyphHash, loadedGlyph);\n                    });\n                }\n                glyphPromises.push(glyphPromise);\n            } else if (!this.m_glyphTextureCache.has(glyphHash)) {\n                glyphPromises.push(Promise.resolve(glyph));\n                this.m_glyphTextureCache.add(glyphHash, glyph);\n            }\n        }\n\n        return Promise.all(glyphPromises);\n    }\n\n    /**\n     * Retrieves the loaded [[GlyphData]] for a specific character.\n     * Returns `undefined` if the assets for this glyph haven't been loaded yet.\n     *\n     * @param codePoint Character's Unicode code point.\n     * @param font [[Font]] to get this glyph from.\n     * @param fontStyle Specific [[FontStyle]] to get glyphs for.\n     *\n     * @returns [[GlyphData]] for this code point.\n     */\n    getGlyph(codePoint: number, font: Font, fontStyle: FontStyle): GlyphData | undefined {\n        const fontGlyphMap = this.m_loadedGlyphs.get(`${font.name}_${fontStyle}`);\n        if (fontGlyphMap === undefined) {\n            return undefined;\n        }\n        return fontGlyphMap.get(codePoint);\n    }\n\n    /**\n     * Retrieves the loaded [[GlyphData]] for the specified text.\n     * Returns `undefined` if the assets for these glyphs haven't been loaded yet.\n     *\n     * @param input Input text.\n     * @param style Specific [[TextRenderStyle]] to get glyphs for.\n     * @param letterCaseArray Array containing the original letter case for the requested glyphs.\n     *\n     * @returns Array containing [[GlyphData]] for each character of the input text.\n     */\n    getGlyphs(\n        input: string,\n        style: TextRenderStyle,\n        letterCaseArray?: boolean[]\n    ): GlyphData[] | undefined {\n        const result = [];\n        const fontName = style.fontName;\n        const fontStyle = style.fontStyle;\n        const fontVariant = style.fontVariant;\n        const shouldTransform =\n            fontVariant === FontVariant.AllCaps || fontVariant === FontVariant.SmallCaps;\n        for (const character of input) {\n            const transformedCharacter = shouldTransform ? character.toUpperCase() : character;\n            for (const char of transformedCharacter) {\n                const codePoint = char.codePointAt(0)!;\n                const font = this.getFont(codePoint, fontName);\n                const glyphData = this.getGlyph(codePoint, font, fontStyle);\n                if (glyphData !== undefined) {\n                    result.push(glyphData);\n                    if (letterCaseArray !== undefined) {\n                        letterCaseArray.push(char !== character);\n                    }\n                } else {\n                    return undefined;\n                }\n            }\n        }\n        return result;\n    }\n\n    /**\n     * Gets the best matched font for a specific character.\n     *\n     * @param codePoint Character's Unicode code point.\n     * @param fontName Font name suggestion.\n     *\n     * @returns Best matched font.\n     */\n    getFont(codePoint: number, fontName?: string): Font {\n        let selectedFontName: string = this.fonts[0].name;\n        for (const block of this.unicodeBlocks) {\n            if (codePoint >= block.min && codePoint <= block.max) {\n                selectedFontName =\n                    fontName !== undefined &&\n                    block.fonts.find(element => {\n                        return element === fontName;\n                    }) !== undefined\n                        ? fontName\n                        : block.fonts[0];\n                break;\n            }\n        }\n\n        return this.fonts.find(element => {\n            return element.name === selectedFontName;\n        })!;\n    }\n\n    /**\n     * Update the info with the memory footprint caused by objects owned by the `FontCatalog`.\n     *\n     * @param info The info object to increment with the values from this `FontCatalog`.\n     */\n    updateMemoryUsage(info: MemoryUsage) {\n        let numBytes = 0;\n\n        for (const block of this.unicodeBlocks) {\n            numBytes += (block.max - block.min) * 2;\n        }\n\n        // Always stored in RGBA internally.\n        let textureBytes =\n            this.m_glyphTextureCache.textureSize.x * this.m_glyphTextureCache.textureSize.y * 4;\n\n        for (const page in this.m_loadedPages.entries) {\n            if (this.m_loadedPages.get(page) !== undefined) {\n                const loadedPage = this.m_loadedPages.get(page);\n                if (loadedPage !== undefined) {\n                    textureBytes += loadedPage.image.width * loadedPage.image.height * 4;\n                }\n            }\n        }\n\n        info.heapSize += numBytes + textureBytes;\n        info.gpuSize += textureBytes;\n    }\n\n    private createReplacementGlyph(codePoint: number, char: string, font: Font): GlyphData {\n        const replacementGlyph = this.m_replacementGlyph.clone();\n        (replacementGlyph as any).codePoint = codePoint;\n        (replacementGlyph as any).character = char;\n        (replacementGlyph as any).font = font;\n        return replacementGlyph;\n    }\n\n    private async loadAssets(\n        codePoint: number,\n        fontStyle: FontStyle,\n        block: UnicodeBlock,\n        font: Font\n    ): Promise<GlyphData> {\n        const json = await this.loadBlock(block, font, fontStyle);\n        if (json === undefined) {\n            return this.m_replacementGlyph;\n        }\n\n        const sourceGlyphData = (json.chars as SrcGlyphData[]).find(char => char.id === codePoint);\n        const assetsPath = this.getAssetsPath(fontStyle, font);\n        const texturePath = `${assetsPath}/${json.pages[sourceGlyphData!.page]}`;\n        const texture = await this.loadPage(texturePath);\n\n        const glyphData = new GlyphData(\n            sourceGlyphData!.id,\n            block.name,\n            sourceGlyphData!.width,\n            sourceGlyphData!.height,\n            sourceGlyphData!.xadvance,\n            sourceGlyphData!.xoffset,\n            sourceGlyphData!.yoffset,\n            sourceGlyphData!.x / texture!.image.width,\n            1.0 - (sourceGlyphData!.y + sourceGlyphData!.height) / texture!.image.height,\n            (sourceGlyphData!.x + sourceGlyphData!.width) / texture!.image.width,\n            1.0 - sourceGlyphData!.y / texture!.image.height,\n            texture!,\n            font\n        );\n\n        return glyphData;\n    }\n\n    private async loadPage(pagePath: string): Promise<THREE.Texture> {\n        let page = this.m_loadedPages.get(pagePath);\n        if (page === undefined) {\n            let pagePromise = this.m_loadingPages.get(pagePath);\n            if (pagePromise === undefined) {\n                pagePromise = FontCatalog.loadTexture(pagePath);\n                this.m_loadingPages.set(pagePath, pagePromise);\n                page = await pagePromise;\n                page.wrapS = THREE.ClampToEdgeWrapping;\n                page.wrapT = THREE.ClampToEdgeWrapping;\n                page.minFilter = THREE.NearestFilter;\n                page.needsUpdate = true;\n                if (this.m_loadingPages.delete(pagePath)) {\n                    this.m_loadedPages.set(pagePath, page);\n                }\n                this.m_loadingPages.delete(pagePath);\n            } else {\n                page = await pagePromise;\n            }\n        }\n        return page;\n    }\n\n    private getAssetsPath(fontStyle: FontStyle, font: Font) {\n        let fontStylePath = ASSETS_PATH;\n        switch (fontStyle) {\n            case FontStyle.Bold:\n                if (font.bold !== undefined) {\n                    fontStylePath = BOLD_ASSETS_PATH;\n                }\n                break;\n            case FontStyle.Italic:\n                if (font.italic !== undefined) {\n                    fontStylePath = ITALIC_ASSETS_PATH;\n                }\n                break;\n            case FontStyle.BoldItalic:\n                if (font.boldItalic !== undefined) {\n                    fontStylePath = BOLD_ITALIC_ASSETS_PATH;\n                } else if (font.italic !== undefined) {\n                    fontStylePath = ITALIC_ASSETS_PATH;\n                } else if (font.bold !== undefined) {\n                    fontStylePath = BOLD_ASSETS_PATH;\n                }\n                break;\n        }\n        return `${this.url}/${this.name}${fontStylePath}${font.name!}`;\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { LRUCache } from \"@here/harp-lrucache\";\nimport * as THREE from \"three\";\n\nimport { Font, FontMetrics } from \"./FontCatalog\";\nimport { GlyphData } from \"./GlyphData\";\nimport { GlyphClearMaterial, GlyphCopyMaterial } from \"./TextMaterials\";\n\n/**\n * Maximum number of texture atlas pages we can copy from in a single go. This amount is determined\n * by the maximum number of texture units available on a pixel shader for all devices:\n * https://webglstats.com/webgl/parameter/MAX_TEXTURE_IMAGE_UNITS\n */\nconst MAX_NUM_COPY_PAGES = 8;\n\n/**\n * Maximum texture size supported. This amount is determined by the maximum texture size supported\n * for all devices:\n * https://webglstats.com/webgl/parameter/MAX_TEXTURE_SIZE\n */\nconst MAX_TEXTURE_SIZE = 4096;\n\n/**\n * @hidden\n * Information stored for every entry in a [[GlyphTextureCache]].\n */\nexport interface GlyphCacheEntry {\n    glyphData: GlyphData;\n    location: THREE.Vector2;\n}\n\n/**\n * @hidden\n * Unified glyph SDF bitmap storage for all fonts in a [[FontCatalog]].\n * Implemented as an abstraction layer on top of an LRUCache and WebGLRenderTarget.\n */\nexport class GlyphTextureCache {\n    private m_cacheWidth: number;\n    private m_cacheHeight: number;\n    private m_textureSize: THREE.Vector2;\n    private m_entryCache: LRUCache<string, GlyphCacheEntry>;\n\n    private m_scene: THREE.Scene;\n    private m_camera: THREE.OrthographicCamera;\n    private m_rt: THREE.WebGLRenderTarget;\n\n    private m_copyTextureSet: Set<THREE.Texture>;\n    private m_copyTransform: THREE.Matrix3;\n    private m_copyPositions: THREE.Vector2[];\n    private m_copyMaterial: GlyphCopyMaterial;\n    private m_copyVertexBuffer: THREE.InterleavedBuffer;\n    private m_copyPositionAttribute: THREE.InterleavedBufferAttribute;\n    private m_copyUVAttribute: THREE.InterleavedBufferAttribute;\n    private m_copyGeometry: THREE.BufferGeometry;\n    private m_copyMesh: THREE.Mesh;\n    private m_copyGeometryDrawCount: number;\n\n    private m_clearMaterial: GlyphClearMaterial;\n    private m_clearPositionAttribute: THREE.BufferAttribute;\n    private m_clearGeometry: THREE.BufferGeometry;\n    private m_clearMesh: THREE.Mesh;\n    private m_clearGeometryDrawCount: number;\n\n    /**\n     * Creates a `GlyphTextureCache` object.\n     *\n     * @param capacity Cache's maximum glyph capacity.\n     * @param entryWidth Maximum entry width.\n     * @param entryHeight Maximum entry height.\n     *\n     * @returns New `GlyphTextureCache`.\n     */\n    constructor(\n        readonly capacity: number,\n        readonly entryWidth: number,\n        readonly entryHeight: number\n    ) {\n        const nRows = Math.floor(Math.sqrt(capacity));\n        this.m_cacheHeight = nRows * nRows < capacity ? nRows + 1 : nRows;\n        this.m_cacheWidth = nRows * this.m_cacheHeight < capacity ? nRows + 1 : nRows;\n\n        this.m_textureSize = new THREE.Vector2(\n            this.m_cacheWidth * entryWidth,\n            this.m_cacheHeight * entryHeight\n        );\n        if (this.m_textureSize.y > MAX_TEXTURE_SIZE || this.m_textureSize.x > MAX_TEXTURE_SIZE) {\n            // tslint:disable-next-line:no-console\n            console.warn(\n                \"GlyphTextureCache texture size (\" +\n                    this.m_textureSize.x +\n                    \", \" +\n                    this.m_textureSize.y +\n                    \") exceeds WebGL's widely supported MAX_TEXTURE_SIZE (\" +\n                    MAX_TEXTURE_SIZE +\n                    \").\\n\" +\n                    \"This could result in rendering errors on some devices.\\n\" +\n                    \"Please consider reducing its capacity or input assets size.\"\n            );\n        }\n\n        this.m_entryCache = new LRUCache<string, GlyphCacheEntry>(capacity);\n        this.initCacheEntries();\n\n        this.m_scene = new THREE.Scene();\n        this.m_camera = new THREE.OrthographicCamera(\n            0,\n            this.m_textureSize.x,\n            this.m_textureSize.y,\n            0\n        );\n        this.m_camera.position.z = 1;\n        this.m_camera.updateMatrixWorld(false);\n        this.m_rt = new THREE.WebGLRenderTarget(this.m_textureSize.x, this.m_textureSize.y, {\n            wrapS: THREE.ClampToEdgeWrapping,\n            wrapT: THREE.ClampToEdgeWrapping,\n            depthBuffer: false,\n            stencilBuffer: false\n        });\n\n        this.m_copyTextureSet = new Set<THREE.Texture>();\n        this.m_copyTransform = new THREE.Matrix3();\n        this.m_copyPositions = [];\n        this.m_copyPositions.push(\n            new THREE.Vector2(),\n            new THREE.Vector2(),\n            new THREE.Vector2(),\n            new THREE.Vector2()\n        );\n\n        this.m_copyMaterial = new GlyphCopyMaterial();\n        this.m_copyVertexBuffer = new THREE.InterleavedBuffer(new Float32Array(capacity * 20), 5);\n        this.m_copyVertexBuffer.setUsage(THREE.DynamicDrawUsage);\n\n        this.m_copyPositionAttribute = new THREE.InterleavedBufferAttribute(\n            this.m_copyVertexBuffer,\n            3,\n            0\n        );\n        this.m_copyUVAttribute = new THREE.InterleavedBufferAttribute(\n            this.m_copyVertexBuffer,\n            2,\n            3\n        );\n        this.m_copyGeometry = new THREE.BufferGeometry();\n        this.m_copyGeometry.setAttribute(\"position\", this.m_copyPositionAttribute);\n        this.m_copyGeometry.setAttribute(\"uv\", this.m_copyUVAttribute);\n\n        const copyIndexBuffer = new THREE.BufferAttribute(new Uint32Array(capacity * 6), 1);\n        copyIndexBuffer.setUsage(THREE.DynamicDrawUsage);\n        this.m_copyGeometry.setIndex(copyIndexBuffer);\n        this.m_copyMesh = new THREE.Mesh(this.m_copyGeometry, this.m_copyMaterial);\n        this.m_copyMesh.frustumCulled = false;\n        this.m_copyGeometryDrawCount = 0;\n\n        this.m_clearMaterial = new GlyphClearMaterial();\n        this.m_clearPositionAttribute = new THREE.BufferAttribute(\n            new Float32Array(capacity * 8),\n            2\n        );\n        this.m_clearPositionAttribute.setUsage(THREE.DynamicDrawUsage);\n        this.m_clearGeometry = new THREE.BufferGeometry();\n        this.m_clearGeometry.setAttribute(\"position\", this.m_clearPositionAttribute);\n        const clearIndexBuffer = new THREE.BufferAttribute(new Uint32Array(capacity * 6), 1);\n        clearIndexBuffer.setUsage(THREE.DynamicDrawUsage);\n\n        this.m_clearGeometry.setIndex(clearIndexBuffer);\n        this.m_clearMesh = new THREE.Mesh(this.m_clearGeometry, this.m_clearMaterial);\n        this.m_clearMesh.frustumCulled = false;\n        this.m_clearGeometryDrawCount = 0;\n\n        this.m_scene.add(this.m_clearMesh, this.m_copyMesh);\n    }\n\n    /**\n     * Release all allocated resources.\n     */\n    dispose(): void {\n        this.m_entryCache.clear();\n        this.m_scene.remove(this.m_clearMesh, this.m_copyMesh);\n        this.m_rt.dispose();\n        this.m_clearMaterial.dispose();\n        this.m_copyMaterial.dispose();\n        this.m_copyTextureSet.clear();\n        this.m_clearGeometry.dispose();\n        this.m_copyGeometry.dispose();\n    }\n\n    /**\n     * Internal WebGL Texture.\n     */\n    get texture(): THREE.Texture {\n        return this.m_rt.texture;\n    }\n\n    /**\n     * Internal WebGL Texture size.\n     */\n    get textureSize(): THREE.Vector2 {\n        return this.m_textureSize;\n    }\n\n    /**\n     * Add a new entry to the GlyphTextureCache. If the limit of entries is hit, the least requested\n     * entry will be replaced.\n     *\n     * @param hash Entry's hash.\n     * @param glyph Entry's glyph data.\n     */\n    add(hash: string, glyph: GlyphData): void {\n        const entry = this.m_entryCache.get(hash);\n        if (entry !== undefined) {\n            return;\n        }\n\n        const oldestEntry = this.m_entryCache.oldest;\n        if (oldestEntry === null) {\n            throw new Error(\"GlyphTextureCache is uninitialized!\");\n        }\n        this.clearCacheEntry(oldestEntry.value);\n        this.copyGlyphToCache(hash, glyph, oldestEntry.value.location);\n    }\n\n    /**\n     * Checks if an entry is in the cache.\n     *\n     * @param hash Entry's hash.\n     *\n     * @returns Test result.\n     */\n    has(hash: string): boolean {\n        return this.m_entryCache.has(hash);\n    }\n\n    /**\n     * Retrieves an entry from the cache.\n     *\n     * @param hash Entry's hash.\n     *\n     * @returns Retrieval result.\n     */\n    get(hash: string): GlyphCacheEntry | undefined {\n        return this.m_entryCache.get(hash);\n    }\n\n    /**\n     * Clears the internal LRUCache.\n     */\n    clear(): void {\n        this.m_copyGeometryDrawCount = 0;\n        this.m_clearGeometryDrawCount = 0;\n        this.m_entryCache.clear();\n        this.m_copyTextureSet.clear();\n        this.initCacheEntries();\n    }\n\n    /**\n     * Updates the internal WebGLRenderTarget.\n     * The update will copy the newly introduced glyphs since the previous update.\n     *\n     * @param renderer WebGLRenderer.\n     */\n    update(renderer: THREE.WebGLRenderer): void {\n        let oldRenderTarget: THREE.RenderTarget | null = null;\n\n        const willClearGeometry = this.m_clearGeometryDrawCount > 0;\n        const willCopyGeometry = this.m_copyGeometryDrawCount > 0;\n\n        if (willClearGeometry || willCopyGeometry) {\n            oldRenderTarget = renderer.getRenderTarget();\n            renderer.setRenderTarget(this.m_rt);\n        }\n\n        if (willClearGeometry) {\n            if (this.m_clearGeometry.index === null) {\n                throw new Error(\"GlyphTextureCache clear geometry index is uninitialized!\");\n            }\n            this.m_clearPositionAttribute.needsUpdate = true;\n            this.m_clearPositionAttribute.updateRange.offset = 0;\n            this.m_clearPositionAttribute.updateRange.count = this.m_clearGeometryDrawCount * 8;\n            this.m_clearGeometry.index.needsUpdate = true;\n            this.m_clearGeometry.index.updateRange.offset = 0;\n            this.m_clearGeometry.index.updateRange.count = this.m_clearGeometryDrawCount * 6;\n            this.m_clearGeometry.setDrawRange(0, this.m_clearGeometryDrawCount * 6);\n\n            this.m_clearMesh.visible = true;\n            this.m_copyMesh.visible = false;\n\n            renderer.render(this.m_scene, this.m_camera);\n            this.m_clearGeometryDrawCount = 0;\n            this.m_clearMesh.visible = false;\n        }\n\n        if (willCopyGeometry) {\n            if (this.m_copyGeometry.index === null) {\n                throw new Error(\"GlyphTextureCache copy geometry index is uninitialized!\");\n            }\n            this.m_copyVertexBuffer.needsUpdate = true;\n            this.m_copyVertexBuffer.updateRange.offset = 0;\n            this.m_copyVertexBuffer.updateRange.count = this.m_copyGeometryDrawCount * 20;\n            this.m_copyGeometry.index.needsUpdate = true;\n            this.m_copyGeometry.index.updateRange.offset = 0;\n            this.m_copyGeometry.index.updateRange.count = this.m_copyGeometryDrawCount * 6;\n            this.m_copyGeometry.setDrawRange(0, this.m_copyGeometryDrawCount * 6);\n\n            this.m_copyMesh.visible = true;\n            const srcPages = Array.from(this.m_copyTextureSet);\n            const nCopies = Math.ceil(this.m_copyTextureSet.size / MAX_NUM_COPY_PAGES);\n            for (let copyIndex = 0; copyIndex < nCopies; copyIndex++) {\n                const pageOffset = copyIndex * MAX_NUM_COPY_PAGES;\n                this.m_copyMaterial.uniforms.pageOffset.value = pageOffset;\n                for (let i = 0; i < MAX_NUM_COPY_PAGES; i++) {\n                    const pageIndex = pageOffset + i;\n                    if (pageIndex < this.m_copyTextureSet.size) {\n                        this.m_copyMaterial.uniforms[\"page\" + i].value = srcPages[pageIndex];\n                    }\n                }\n\n                renderer.render(this.m_scene, this.m_camera);\n            }\n            this.m_copyTextureSet.clear();\n            this.m_copyGeometryDrawCount = 0;\n        }\n        if (willClearGeometry || willCopyGeometry) {\n            renderer.setRenderTarget(oldRenderTarget);\n        }\n    }\n\n    private initCacheEntries() {\n        const dummyMetrics: FontMetrics = {\n            size: 0,\n            distanceRange: 0,\n            base: 0,\n            lineHeight: 0,\n            lineGap: 0,\n            capHeight: 0,\n            xHeight: 0\n        };\n        const dummyFont: Font = {\n            name: \"\",\n            metrics: dummyMetrics,\n            charset: \"\"\n        };\n\n        const dummyGlyphData = new GlyphData(\n            0,\n            \"\",\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            THREE.Texture.DEFAULT_IMAGE,\n            dummyFont\n        );\n\n        for (let i = 0; i < this.m_cacheHeight; i++) {\n            for (let j = 0; j < this.m_cacheWidth; j++) {\n                const dummyEntry: GlyphCacheEntry = {\n                    glyphData: dummyGlyphData,\n                    location: new THREE.Vector2(j, i)\n                };\n                this.m_entryCache.set(`Dummy_${i * this.m_cacheHeight + j}`, dummyEntry);\n            }\n        }\n    }\n\n    private copyGlyphToCache(hash: string, glyph: GlyphData, cacheLocation: THREE.Vector2) {\n        this.m_copyTextureSet.add(glyph.texture);\n        let copyTextureIndex = 0;\n        for (const value of this.m_copyTextureSet.values()) {\n            if (value === glyph.texture) {\n                break;\n            }\n            copyTextureIndex++;\n        }\n        glyph.copyIndex = copyTextureIndex;\n\n        this.m_copyTransform.set(\n            1.0,\n            0.0,\n            cacheLocation.x * this.entryWidth - glyph.offsetX,\n            0.0,\n            1.0,\n            cacheLocation.y * this.entryHeight - glyph.positions[0].y,\n            0.0,\n            0.0,\n            0.0\n        );\n        for (let i = 0; i < 4; ++i) {\n            this.m_copyPositions[i].set(glyph.positions[i].x, glyph.positions[i].y);\n            this.m_copyPositions[i].applyMatrix3(this.m_copyTransform);\n        }\n\n        if (this.m_copyGeometryDrawCount >= this.capacity) {\n            return;\n        }\n        const baseVertex = this.m_copyGeometryDrawCount * 4;\n        const baseIndex = this.m_copyGeometryDrawCount * 6;\n\n        for (let i = 0; i < 4; ++i) {\n            this.m_copyPositionAttribute.setXYZ(\n                baseVertex + i,\n                this.m_copyPositions[i].x,\n                this.m_copyPositions[i].y,\n                glyph.copyIndex\n            );\n            this.m_copyUVAttribute.setXY(\n                baseVertex + i,\n                glyph.sourceTextureCoordinates[i].x,\n                glyph.sourceTextureCoordinates[i].y\n            );\n        }\n\n        if (this.m_copyGeometry.index === null) {\n            throw new Error(\"GlyphTextureCache copy geometry index is uninitialized!\");\n        }\n        this.m_copyGeometry.index.setX(baseIndex, baseVertex);\n        this.m_copyGeometry.index.setX(baseIndex + 1, baseVertex + 1);\n        this.m_copyGeometry.index.setX(baseIndex + 2, baseVertex + 2);\n        this.m_copyGeometry.index.setX(baseIndex + 3, baseVertex + 2);\n        this.m_copyGeometry.index.setX(baseIndex + 4, baseVertex + 1);\n        this.m_copyGeometry.index.setX(baseIndex + 5, baseVertex + 3);\n\n        ++this.m_copyGeometryDrawCount;\n\n        const u0 = this.m_copyPositions[0].x / this.m_textureSize.x;\n        const v0 = this.m_copyPositions[0].y / this.m_textureSize.y;\n        const u1 = this.m_copyPositions[3].x / this.m_textureSize.x;\n        const v1 = this.m_copyPositions[3].y / this.m_textureSize.y;\n        glyph.dynamicTextureCoordinates[0].set(u0, v0);\n        glyph.dynamicTextureCoordinates[1].set(u1, v0);\n        glyph.dynamicTextureCoordinates[2].set(u0, v1);\n        glyph.dynamicTextureCoordinates[3].set(u1, v1);\n\n        glyph.isInCache = true;\n        this.m_entryCache.set(hash, {\n            glyphData: glyph,\n            location: cacheLocation\n        });\n    }\n\n    private clearCacheEntry(entry: GlyphCacheEntry) {\n        entry.glyphData.isInCache = false;\n        this.m_copyPositions[0].set(\n            entry.location.x * this.entryWidth,\n            entry.location.y * this.entryHeight\n        );\n        this.m_copyPositions[1].set(\n            (entry.location.x + 1) * this.entryWidth,\n            entry.location.y * this.entryHeight\n        );\n        this.m_copyPositions[2].set(\n            entry.location.x * this.entryWidth,\n            (entry.location.y + 1) * this.entryHeight\n        );\n        this.m_copyPositions[3].set(\n            (entry.location.x + 1) * this.entryWidth,\n            (entry.location.y + 1) * this.entryHeight\n        );\n\n        if (this.m_clearGeometryDrawCount >= this.capacity) {\n            return;\n        }\n        const baseVertex = this.m_clearGeometryDrawCount * 4;\n        const baseIndex = this.m_clearGeometryDrawCount * 6;\n\n        for (let i = 0; i < 4; ++i) {\n            this.m_clearPositionAttribute.setXY(\n                baseVertex + i,\n                this.m_copyPositions[i].x,\n                this.m_copyPositions[i].y\n            );\n        }\n\n        if (this.m_clearGeometry.index === null) {\n            throw new Error(\"GlyphTextureCache clear geometry index is uninitialized!\");\n        }\n        this.m_clearGeometry.index.setX(baseIndex, baseVertex);\n        this.m_clearGeometry.index.setX(baseIndex + 1, baseVertex + 1);\n        this.m_clearGeometry.index.setX(baseIndex + 2, baseVertex + 2);\n        this.m_clearGeometry.index.setX(baseIndex + 3, baseVertex + 2);\n        this.m_clearGeometry.index.setX(baseIndex + 4, baseVertex + 1);\n        this.m_clearGeometry.index.setX(baseIndex + 5, baseVertex + 3);\n\n        ++this.m_clearGeometryDrawCount;\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { assert } from \"@here/harp-utils\";\n\n/** @hidden */\nexport class Entry<Key, Value> {\n    constructor(\n        public key: Key,\n        public value: Value,\n        public size: number,\n        public newer: Entry<Key, Value> | null,\n        public older: Entry<Key, Value> | null\n    ) {}\n}\n\n/**\n * Fixed size cache that evicts its entries in least-recently-used order when it overflows.\n * Modeled after standard JavaScript `Map` otherwise.\n */\nexport class LRUCache<Key, Value> {\n    /**\n     * Optional callback that is called on every item that is evicted from the cache.\n     *\n     * **Note**: This callback is not called when an item is explicitly deleted from the map via\n     * [[delete]] or [[clear]].\n     */\n    evictionCallback?: (key: Key, value: Value) => void;\n\n    /**\n     * Optional callback that is called on every item that should be evicted from the cache to\n     * determine if it can be removed, or should be locked in the cache.\n     *\n     * It returns `true` if the item can be removed from cache, `false` otherwise. Locking items in\n     * the cache should be a temporary measure, since if the cache is filled with non-evictable\n     * items only, it may grow beyond its capacity.\n     *\n     * **Note**: This callback is not called when an item is explicitly deleted from the map via\n     * [[delete]] or [[clear]].\n     */\n    canEvict?: (key: Key, value: Value) => boolean;\n    private m_capacity: number;\n    private m_size = 0;\n\n    /**\n     * The internal map object that keeps the key-value pairs and their order.\n     */\n    private m_map = new Map<Key, Entry<Key, Value>>();\n\n    /**\n     * The newest entry, i.e. the most recently used item.\n     */\n    private m_newest: Entry<Key, Value> | null = null;\n\n    /**\n     * The oldest entry, i.e. the least recently used item.\n     */\n    private m_oldest: Entry<Key, Value> | null = null;\n\n    /**\n     * A function determining the size per element.\n     */\n    private m_sizeFunction: (v: Value) => number;\n\n    /**\n     * Creates a new instance of `LRUCache`.\n     *\n     * The optional [[sizeFunction]] can be used to fine tune the memory consumption of all cached\n     * elements, thus [[cacheCapacity]] means then memory used (in MBs). Otherwise, if\n     * [[sizeFunction]] is not specified, the [[cacheCapacity]] accounts for the maximum\n     * number of elements stored.\n     *\n     * @param cacheCapacity Number used to configure the maximum cache size, may express\n     * number of entries or memory consumed in megabytes depending on [[sizeFunction]].\n     * @param sizeFunction A function determining the size per element.\n     */\n    constructor(cacheCapacity: number, sizeFunction: (v: Value) => number = () => 1) {\n        this.m_capacity = cacheCapacity;\n        this.m_sizeFunction = sizeFunction;\n    }\n\n    /**\n     * Iterates over all items from the most recently used item to the least recently used one.\n     *\n     * **Note**: Results are undefined if the entire cache is modified during iteration. You may\n     * although modify the current element in [[callbackfn]] function.\n     *\n     * @param callbackfn The callback to call for each item.\n     * @param thisArg Optional this argument for the callback.\n     */\n    forEach(\n        callbackfn: (value: Value, key: Key, map: LRUCache<Key, Value>) => void,\n        thisArg?: any\n    ): void {\n        let entry = this.m_newest;\n        while (entry !== null) {\n            const older = entry.older;\n            callbackfn.call(thisArg, entry.value, entry.key, this);\n            entry = older;\n        }\n    }\n\n    /**\n     * The size of the cache, i.e. the sum of all the sizes of all the objects in the cache.\n     *\n     * @returns The size of the cache.\n     */\n    get size(): number {\n        return this.m_size;\n    }\n\n    /**\n     * Returns the maximum capacity of the cache, i.e. the maximum number of elements this cache\n     * can contain or the total amount of memory that may be consumed by cache if element size\n     * function was specified in cache c-tor.\n     *\n     * @returns The capacity of the cache.\n     */\n    get capacity(): number {\n        return this.m_capacity;\n    }\n\n    /**\n     * @deprecated - DO NOT USE. Will be removed in future versions.\n     *\n     * Returns the internal map object that keeps the key-value pairs and their order.\n     *\n     * @returns The internal map object.\n     */\n    get map(): Map<Key, Entry<Key, Value>> {\n        // ### TODO - remove me. Cache must not expose its internal object,\n        // modifications to it are fatal for the internal state machine.\n        return this.m_map;\n    }\n\n    /**\n     * Returns the newest entry in the cache.\n     *\n     * @returns Newest entry in the cache.\n     */\n    get newest(): Entry<Key, Value> | null {\n        return this.m_newest;\n    }\n\n    /**\n     * Returns the oldest entry in the cache.\n     *\n     * Note: Does not promote the oldest item as most recently used item.\n     *\n     * @returns Oldest entry in the cache.\n     */\n    get oldest(): Entry<Key, Value> | null {\n        return this.m_oldest;\n    }\n\n    /**\n     * Resets the capacity of this cache. If `newCapacity` is smaller than the current cache size,\n     * all items will be evicted until the cache shrinks to `newCapacity`.\n     *\n     * @param newCapacity The new capacity of this cache.\n     */\n    setCapacity(newCapacity: number): void {\n        this.m_capacity = newCapacity;\n        this.evict();\n    }\n\n    /**\n     * Resets the cache capacity and function used to measure the element size.\n     *\n     * @param newCapacity The new capacity masured in units returned from [[sizeMeasure]] funtion.\n     * @param sizeMeasure Function that defines the size of element, if you want to measure\n     * number of elements only always return 1 from this function (default), you may also\n     * specify own function that measures entries by memory consumed, nubmer of sub-elements, etc.\n     */\n    setCapacityAndMeasure(newCapacity: number, sizeMeasure: (v: Value) => number = () => 1) {\n        this.m_capacity = newCapacity;\n        this.m_sizeFunction = sizeMeasure;\n        this.shrinkToCapacity();\n    }\n\n    /**\n     * Updates the size of all elements in this cache. If their aggregated size is larger than the\n     * capacity, items will be evicted until the cache shrinks to fit the capacity.\n     */\n    shrinkToCapacity(): void {\n        let size = 0;\n        const sizeFunction = this.m_sizeFunction;\n\n        let entry = this.m_newest;\n        while (entry !== null) {\n            const entrySize = sizeFunction(entry.value);\n            entry.size = entrySize;\n            size += entrySize;\n            entry = entry.older;\n        }\n\n        this.m_size = size;\n        this.evict();\n    }\n\n    /**\n     * Inserts or updates a key/value pair in the cache.\n     *\n     * If the key already existed in the cache, it will be updated and promoted to the most recently\n     * used item.\n     *\n     * If the key didn't exist in the cache, it will be inserted as most recently used item. An\n     * eviction of the least recently used item takes place if the cache exceeded its capacity.\n     *\n     * @param key The key for the key-value pair to insert or update.\n     * @param value The value for the key-value pair to insert or update.\n     */\n    set(key: Key, value: Value) {\n        const valueSize = this.m_sizeFunction(value);\n        let entry = this.m_map.get(key);\n        if (entry !== undefined) {\n            this.m_size = this.m_size - entry.size + valueSize;\n            entry.value = value;\n            entry.size = valueSize;\n            this.promoteEntry(entry);\n            this.evict();\n        } else {\n            if (valueSize > this.m_capacity) {\n                return; // single item too big to cache\n            }\n\n            entry = new Entry<Key, Value>(key, value, valueSize, null, null);\n            if (this.m_map.size === 0) {\n                this.m_newest = this.m_oldest = entry;\n            } else {\n                assert(this.m_newest !== null);\n                const newest: Entry<Key, Value> = this.m_newest!;\n                entry.older = this.m_newest;\n                newest.newer = entry;\n                this.m_newest = entry;\n            }\n            this.m_map.set(key, entry);\n            this.m_size += valueSize;\n            this.evict();\n        }\n    }\n\n    /**\n     * Looks up key in the cache and returns the associated value.\n     *\n     * @param key The key to look up.\n     * @returns The associated value, or `undefined` if the key-value pair is not in the cache.\n     */\n    get(key: Key): Value | undefined {\n        const entry = this.m_map.get(key);\n        if (entry === undefined) {\n            return undefined;\n        }\n\n        this.promoteEntry(entry);\n        return entry.value;\n    }\n\n    /**\n     * Test if a key/value pair is in the cache.\n     *\n     * @param key The key to look up.\n     * @returns `true` if the key-value pair is in the cache, `false` otherwise.\n     */\n    has(key: Key): boolean {\n        return this.m_map.has(key);\n    }\n\n    /**\n     * Clears the cache and removes all stored key-value pairs.\n     *\n     * Does not call the eviction callback. Use [[evictAll]] to clear the cache and call the\n     * eviction callback.\n     */\n    clear(): void {\n        this.m_newest = this.m_oldest = null;\n        this.m_size = 0;\n        this.m_map.clear();\n    }\n\n    /**\n     * Evicts all items from the cache, calling the eviction callback on each item.\n     *\n     * Use [[clear]] to remove all items without calling the eviction callback.\n     */\n    evictAll(): void {\n        const cb = this.evictionCallback;\n        if (cb !== undefined) {\n            this.forEach((value, key) => cb(key, value));\n        }\n        this.clear();\n    }\n\n    /**\n     * Evict selected elements from the cache using [[selector]] function.\n     *\n     * @param selector The function for selecting elements for eviction.\n     * @param thisArg Optional _this_ object reference.\n     */\n    evictSelected(selector: (value: Value, key: Key) => boolean, thisArg?: any) {\n        const cb = this.evictionCallback;\n        let entry = this.m_newest;\n        while (entry !== null) {\n            const entryOlder = entry.older;\n            if (selector.call(thisArg, entry.value, entry.key)) {\n                if (cb !== undefined) {\n                    cb(entry.key, entry.value);\n                }\n                this.deleteEntry(entry);\n                this.m_map.delete(entry.key);\n            }\n            entry = entryOlder;\n        }\n    }\n\n    /**\n     * Explicitly removes a key-value pair from the cache.\n     *\n     * **Note**: This is an explicit removal, thus, the eviction callback will not be called.\n     *\n     * @param key The key of the key-value pair to delete.\n     * @returns `true` if the key-value pair existed and was deleted, `false` otherwise.\n     */\n    delete(key: Key): boolean {\n        const entry = this.m_map.get(key);\n        if (entry === undefined) {\n            return false;\n        }\n        this.deleteEntry(entry);\n        return this.m_map.delete(key);\n    }\n\n    protected evict() {\n        while (this.m_oldest !== null && this.m_size > this.m_capacity) {\n            const evicted = this.evictOldest();\n            if (evicted === undefined) {\n                return;\n            }\n        }\n    }\n\n    protected evictOldest(): Entry<Key, Value> | undefined {\n        assert(this.m_oldest !== null);\n        const oldest = this.m_oldest!;\n        assert(oldest.older === null);\n        let itemToRemove = oldest;\n\n        if (this.canEvict !== undefined) {\n            while (!this.canEvict(itemToRemove.key, itemToRemove.value)) {\n                if (itemToRemove.newer === null) {\n                    return undefined;\n                }\n                itemToRemove = itemToRemove.newer;\n            }\n        }\n\n        if (itemToRemove === oldest) {\n            this.m_oldest = itemToRemove.newer;\n            if (itemToRemove.newer !== null) {\n                assert(itemToRemove.newer.older === itemToRemove);\n                itemToRemove.newer.older = null;\n            }\n        } else {\n            if (itemToRemove.newer !== null) {\n                assert(itemToRemove.newer.older === itemToRemove);\n                itemToRemove.newer.older = itemToRemove.older;\n                if (itemToRemove.older !== null) {\n                    itemToRemove.older.newer = itemToRemove.newer;\n                }\n            } else {\n                return undefined;\n            }\n        }\n\n        const isOk = this.m_map.delete(itemToRemove.key);\n        assert(isOk === true);\n        if (isOk && this.evictionCallback !== undefined) {\n            this.evictionCallback(itemToRemove.key, itemToRemove.value);\n        }\n        this.m_size -= itemToRemove.size;\n        return itemToRemove;\n    }\n\n    private deleteEntry(entry: Entry<Key, Value>): void {\n        if (entry === this.m_newest) {\n            this.m_newest = entry.older;\n        } else if (entry.newer) {\n            entry.newer.older = entry.older;\n        } else {\n            assert(false);\n        }\n\n        if (entry === this.m_oldest) {\n            this.m_oldest = entry.newer;\n        } else if (entry.older) {\n            entry.older.newer = entry.newer;\n        } else {\n            assert(false);\n        }\n\n        this.m_size -= entry.size;\n    }\n\n    private promoteEntry(entry: Entry<Key, Value>): void {\n        if (entry === this.m_newest) {\n            return;\n        } // already newest, nothing to do\n\n        // re-link newer and older items\n        if (entry.newer) {\n            assert(entry.newer.older === entry);\n            entry.newer.older = entry.older;\n        }\n        if (entry.older) {\n            assert(entry.older.newer === entry);\n            entry.older.newer = entry.newer;\n        }\n        if (entry === this.m_oldest) {\n            this.m_oldest = entry.newer;\n        }\n        // re-link ourselves\n        entry.newer = null;\n        entry.older = this.m_newest;\n\n        // finally, set ourselves as the newest entry\n        assert(this.m_newest !== null);\n        const newest = this.m_newest!;\n        assert(newest.newer === null);\n        newest.newer = entry;\n        this.m_newest = entry;\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport * as THREE from \"three\";\n\nimport { FontCatalog } from \"./rendering/FontCatalog\";\nimport { GlyphData } from \"./rendering/GlyphData\";\nimport { TextBufferObject } from \"./rendering/TextBufferObject\";\nimport { QUAD_VERTEX_MEMORY_FOOTPRINT, TextGeometry } from \"./rendering/TextGeometry\";\nimport { SdfTextMaterial } from \"./rendering/TextMaterials\";\nimport { FontVariant, TextLayoutStyle, TextRenderStyle } from \"./rendering/TextStyle\";\nimport { LineTypesetter } from \"./typesetting/LineTypesetter\";\nimport { PathTypesetter, PathTypesettingParameters } from \"./typesetting/PathTypesetter\";\nimport { TypesettingParameters } from \"./typesetting/Typesetter\";\nimport { createSdfTextMaterial } from \"./utils/MaterialUtils\";\n\nconst tempTextPosition = new THREE.Vector3();\nconst tempTextBounds = {\n    array: [new THREE.Box2()],\n    offset: 0\n};\nlet tempVertexBuffer = new Float32Array();\n\ninterface TextPlacementParameters {\n    input: string | GlyphData[];\n    layer: TextCanvasLayer;\n    textPath?: THREE.Path | THREE.CurvePath<THREE.Vector2>;\n    textPathOverflow?: boolean;\n    bounds?: THREE.Box2;\n    individualBounds?: THREE.Box2[];\n    computeTextBuffer?: boolean;\n    letterCaseArray?: boolean[];\n}\n\n/**\n * Optional parameters passed on [[TextCanvas]].`measureText` function call.\n */\nexport interface MeasurementParameters {\n    /**\n     * Path where text should be placed on. Overrides the original position parameter.\n     */\n    path?: THREE.Path | THREE.CurvePath<THREE.Vector2>;\n\n    /**\n     * If `true`, text on a path will be placed even when its size its bigger than the path's size.\n     */\n    pathOverflow?: boolean;\n\n    /**\n     * Output per-character bounds.\n     */\n    outputCharacterBounds?: THREE.Box2[];\n\n    /**\n     * Array containing info on whether the glyphs are upper or lower case. Needed to support\n     * `SmallCaps`.\n     */\n    letterCaseArray?: boolean[];\n}\n\n/**\n * Optional parameters passed on [[TextCanvas]].`addText` function call.\n */\nexport interface AdditionParameters {\n    /**\n     * Path where text should be placed on. Overrides the original position parameter.\n     */\n    path?: THREE.Path | THREE.CurvePath<THREE.Vector2>;\n\n    /**\n     * If `true`, text on a path will be placed even when its size its bigger than the path's size.\n     */\n    pathOverflow?: boolean;\n\n    /**\n     * Layer where text will be added.\n     */\n    layer?: number;\n\n    /**\n     * If `true`, the input position parameter will be updated to contain the position of the last\n     * glyph added.\n     */\n    updatePosition?: boolean;\n\n    /**\n     * Object containing additional data intended to be retrieved during picking.\n     */\n    pickingData?: any;\n\n    /**\n     * Array containing info on whether the glyphs are upper or lower case. Needed to support\n     * `SmallCaps`.\n     */\n    letterCaseArray?: boolean[];\n}\n\n/**\n * Optional parameters passed on [[TextCanvas]].`createTextBufferObject` function call.\n */\nexport interface TextBufferCreationParameters {\n    /**\n     * Path where text should be placed on. Overrides the original position parameter.\n     */\n    path?: THREE.Path | THREE.CurvePath<THREE.Vector2>;\n\n    /**\n     * If `true`, text on a path will be placed even when its size its bigger than the path's size.\n     */\n    pathOverflow?: boolean;\n\n    /**\n     * Output text bounding-box.\n     */\n    outputBounds?: boolean;\n\n    /**\n     * Output per-character bounds.\n     */\n    outputCharacterBounds?: boolean;\n\n    /**\n     * Array containing info on whether the glyphs are upper or lower case. Needed to support\n     * `SmallCaps`.\n     */\n    letterCaseArray?: boolean[];\n\n    /**\n     * If `true`, both the [[TextRenderStyle]] and [[TextLayoutStyle]] used to generate the\n     * [[TextBufferObject]] will be stored in it.\n     */\n    storeStyles?: boolean;\n}\n\n/**\n * Optional parameters passed on [[TextCanvas]].`addTextBufferObject` function call.\n */\nexport interface TextBufferAdditionParameters {\n    layer?: number;\n    position?: THREE.Vector3;\n    scale?: number;\n    rotation?: number;\n    color?: THREE.Color;\n    opacity?: number;\n    backgroundColor?: THREE.Color;\n    backgroundOpacity?: number;\n    pickingData?: any;\n}\n\n/**\n * Default's [[TextCanvas]] layer identifier.\n */\nexport const DEFAULT_TEXT_CANVAS_LAYER = 0;\n\n/**\n * [[TextCanvas]] rendering layer.\n */\nexport interface TextCanvasLayer {\n    id: number;\n    storage: TextGeometry;\n}\n\n/**\n * [[TextCanvas]] construction parameters.\n */\nexport interface TextCanvasParameters {\n    /**\n     * WebGLRenderer internally used by this `TextCanvas`.\n     */\n    renderer: THREE.WebGLRenderer;\n\n    /**\n     * Initial [[FontCatalog]].\n     */\n    fontCatalog: FontCatalog;\n\n    /**\n     * Minimum amount of glyphs each [[TextCanvas]] layer can store.\n     */\n    minGlyphCount: number;\n\n    /**\n     * Maximum amount of glyphs each [[TextCanvas]] layer can store.\n     */\n    maxGlyphCount: number;\n\n    /**\n     * Material used to render text.\n     */\n    material?: THREE.Material;\n\n    /**\n     * Material used to render text background.\n     */\n    backgroundMaterial?: THREE.Material;\n}\n\n/**\n * Describes estimated usage of memory on heap and GPU.\n */\nexport interface MemoryUsage {\n    heapSize: number;\n    gpuSize: number;\n}\n\n/**\n * three.js text rendering engine which can manage and render high-quality, transformable, stylable\n * and properly layout SDF and MSDF text.\n */\nexport class TextCanvas {\n    private static defaultTextRenderStyle: TextRenderStyle = new TextRenderStyle();\n    private static defaultTextLayoutStyle: TextLayoutStyle = new TextLayoutStyle();\n    /**\n     * Minimum amount of glyphs each [[TextCanvas]] layer can store.\n     */\n    readonly minGlyphCount: number;\n\n    /**\n     * Maximum amount of glyphs each [[TextCanvas]] layer can store.\n     */\n    readonly maxGlyphCount: number;\n\n    private m_renderer: THREE.WebGLRenderer;\n    private m_fontCatalog: FontCatalog;\n\n    private m_currentTextRenderStyle: TextRenderStyle;\n    private m_currentTextLayoutStyle: TextLayoutStyle;\n\n    private m_material: SdfTextMaterial | THREE.Material;\n    private m_bgMaterial: SdfTextMaterial | THREE.Material;\n    private m_ownsMaterial: boolean;\n    private m_ownsBgMaterial: boolean;\n\n    private m_defaultLayer: TextCanvasLayer;\n    private m_layers: TextCanvasLayer[];\n\n    private m_lineTypesetter: LineTypesetter;\n    private m_pathTypesetter: PathTypesetter;\n\n    /**\n     * Constructs a new `TextCanvas`.\n     *\n     * @param params `TextCanvas` construction parameters.\n     *\n     * @returns New `TextCanvas`.\n     */\n    constructor(params: TextCanvasParameters) {\n        this.m_renderer = params.renderer;\n        this.m_fontCatalog = params.fontCatalog;\n        this.minGlyphCount = params.minGlyphCount;\n        this.maxGlyphCount = params.maxGlyphCount;\n\n        if (params.material === undefined) {\n            this.m_ownsMaterial = true;\n            this.m_material = createSdfTextMaterial({ fontCatalog: params.fontCatalog });\n        } else {\n            this.m_ownsMaterial = false;\n            this.m_material = params.material;\n        }\n        if (params.backgroundMaterial === undefined) {\n            this.m_ownsBgMaterial = true;\n            this.m_bgMaterial = createSdfTextMaterial({\n                fontCatalog: params.fontCatalog,\n                isBackground: true\n            });\n        } else {\n            this.m_ownsBgMaterial = false;\n            this.m_bgMaterial = params.backgroundMaterial;\n        }\n\n        this.m_defaultLayer = {\n            id: DEFAULT_TEXT_CANVAS_LAYER,\n            storage: new TextGeometry(\n                new THREE.Scene(),\n                this.m_material,\n                this.m_bgMaterial,\n                this.minGlyphCount,\n                this.maxGlyphCount\n            )\n        };\n        this.m_layers = [this.m_defaultLayer];\n\n        this.m_currentTextRenderStyle = new TextRenderStyle().copy(\n            TextCanvas.defaultTextRenderStyle\n        );\n        this.m_currentTextLayoutStyle = new TextLayoutStyle().copy(\n            TextCanvas.defaultTextLayoutStyle\n        );\n\n        this.m_lineTypesetter = new LineTypesetter();\n        this.m_pathTypesetter = new PathTypesetter();\n    }\n\n    /**\n     * Currently active [[FontCatalog]].\n     */\n    get fontCatalog(): FontCatalog {\n        return this.m_fontCatalog;\n    }\n    set fontCatalog(value: FontCatalog) {\n        this.m_fontCatalog = value;\n\n        const material = this.m_material as THREE.RawShaderMaterial;\n        material.uniforms.sdfTexture.value = this.m_fontCatalog.texture;\n        material.uniforms.sdfParams.value = new THREE.Vector4(\n            this.m_fontCatalog.textureSize.x,\n            this.m_fontCatalog.textureSize.y,\n            this.m_fontCatalog.size,\n            this.m_fontCatalog.distanceRange\n        );\n        material.defines.MSDF = this.m_fontCatalog.type === \"msdf\" ? 1.0 : 0.0;\n\n        const bgMaterial = this.m_bgMaterial as THREE.RawShaderMaterial;\n        bgMaterial.uniforms.sdfTexture.value = this.m_fontCatalog.texture;\n        bgMaterial.uniforms.sdfParams.value = new THREE.Vector4(\n            this.m_fontCatalog.textureSize.x,\n            this.m_fontCatalog.textureSize.y,\n            this.m_fontCatalog.size,\n            this.m_fontCatalog.distanceRange\n        );\n        bgMaterial.defines.MSDF = this.m_fontCatalog.type === \"msdf\" ? 1.0 : 0.0;\n    }\n\n    /**\n     * Currently active text rendering material.\n     */\n    get material(): THREE.Material {\n        return this.m_material;\n    }\n    set material(value: THREE.Material) {\n        if (this.m_ownsMaterial) {\n            this.m_material.dispose();\n            this.m_ownsMaterial = false;\n        }\n\n        this.m_material = value;\n        for (const layer of this.m_layers) {\n            layer.storage.mesh.material = this.m_material;\n        }\n    }\n\n    /**\n     * Currently active text background rendering material.\n     */\n    get backgroundMaterial(): THREE.Material {\n        return this.m_bgMaterial;\n    }\n    set backgroundMaterial(value: THREE.Material) {\n        if (this.m_ownsBgMaterial) {\n            this.m_bgMaterial.dispose();\n            this.m_ownsBgMaterial = false;\n        }\n\n        this.m_bgMaterial = value;\n        for (const layer of this.m_layers) {\n            layer.storage.backgroundMesh.material = this.m_bgMaterial;\n        }\n    }\n\n    /**\n     * Currently active text rendering style.\n     */\n    get textRenderStyle(): TextRenderStyle {\n        return this.m_currentTextRenderStyle;\n    }\n    set textRenderStyle(style: TextRenderStyle) {\n        this.m_currentTextRenderStyle.copy(style);\n    }\n\n    /**\n     * Currently active text layout style.\n     */\n    get textLayoutStyle(): TextLayoutStyle {\n        return this.m_currentTextLayoutStyle;\n    }\n    set textLayoutStyle(style: TextLayoutStyle) {\n        this.m_currentTextLayoutStyle.copy(style);\n    }\n\n    /**\n     * Clears all the placed glyphs in this `TextCanvas` (as well as resetting the current style).\n     */\n    clear() {\n        for (const layer of this.m_layers) {\n            layer.storage.clear();\n        }\n        this.m_currentTextRenderStyle.copy(TextCanvas.defaultTextRenderStyle);\n        this.m_currentTextLayoutStyle.copy(TextCanvas.defaultTextLayoutStyle);\n    }\n\n    /**\n     * Renders the content of this `TextCanvas`.\n     *\n     * @param camera Orthographic camera.\n     * @param target Optional render target.\n     * @param clear Optional render target clear operation.\n     */\n    render(camera: THREE.OrthographicCamera, target?: THREE.WebGLRenderTarget, clear?: boolean) {\n        this.m_fontCatalog.update(this.m_renderer);\n        let oldTarget: THREE.RenderTarget | null = null;\n        if (target !== undefined) {\n            oldTarget = this.m_renderer.getRenderTarget();\n            this.m_renderer.setRenderTarget(target);\n        }\n        if (clear === true) {\n            this.m_renderer.clear(true);\n        }\n        for (const layer of this.m_layers) {\n            layer.storage.update();\n            this.m_renderer.clear(false, true);\n            this.m_renderer.render(layer.storage.scene, camera);\n        }\n        if (target !== undefined) {\n            this.m_renderer.setRenderTarget(oldTarget);\n        }\n    }\n\n    /**\n     * Creates a new `TextCanvas` rendering layer and returns. If there was already a layer for the\n     * input `layerId`, it just returns this one instead.\n     *\n     * @param layerId Desired layer identifier.\n     *\n     * @returns Created [[TextCanvasLayer]].\n     */\n    addLayer(layerId: number): TextCanvasLayer {\n        let result = this.getLayer(layerId);\n        if (result === undefined) {\n            result = {\n                id: layerId,\n                storage: new TextGeometry(\n                    new THREE.Scene(),\n                    this.m_material,\n                    this.m_bgMaterial,\n                    this.minGlyphCount,\n                    this.maxGlyphCount\n                )\n            };\n\n            this.m_layers.push(result);\n            this.m_layers.sort((a: TextCanvasLayer, b: TextCanvasLayer) => {\n                return a.id - b.id;\n            });\n        }\n        return result;\n    }\n\n    /**\n     * Retrieves a specific `TextCanvas` rendering layer.\n     *\n     * @param layerId Desired layer identifier.\n     *\n     * @returns Selected [[TextCanvasLayer]].\n     */\n    getLayer(layerId: number): TextCanvasLayer | undefined {\n        return this.m_layers.find(layer => layer.id === layerId);\n    }\n\n    /**\n     * Retrieves all `TextCanvas` rendering layers.\n     *\n     * @returns Array of [[TextCanvasLayer]]s.\n     */\n    getAllLayers(): TextCanvasLayer[] {\n        return this.m_layers;\n    }\n\n    /**\n     * Returns the computed bounding box for the input text. The current [[TextRenderStyle]] and\n     * [[TextLayoutStyle]] will influence the results of this function.\n     *\n     * @param text Input text. Provide an array of [[GlyphData]] for better performance.\n     * @param outputBounds Output text bounding box.\n     * @param params Optional measurement parameters.\n     *\n     * @returns Result of the measurement. If `false`, some error occurred during execution and the\n     * input text couldn't be properly measured.\n     */\n    measureText(\n        text: string | GlyphData[],\n        outputBounds: THREE.Box2,\n        params?: MeasurementParameters\n    ): boolean {\n        tempTextPosition.set(0, 0, 0);\n\n        let path;\n        let pathOverflow;\n        let upperCaseArray;\n        let outputCharacterBounds;\n        if (params !== undefined) {\n            path = params.path;\n            pathOverflow = params.pathOverflow;\n            outputCharacterBounds = params.outputCharacterBounds;\n            if (params.path !== undefined) {\n                const pathOrigin = params.path.getPoint(0);\n                if (pathOrigin === null) {\n                    return false;\n                }\n                tempTextPosition.set(pathOrigin.x, pathOrigin.y, 0.0);\n            }\n            if (params.letterCaseArray) {\n                upperCaseArray = params.letterCaseArray;\n            }\n        }\n\n        return this.placeText({\n            input: text,\n            layer: this.m_defaultLayer,\n            textPath: path,\n            textPathOverflow: pathOverflow,\n            bounds: outputBounds,\n            individualBounds: outputCharacterBounds,\n            letterCaseArray: upperCaseArray\n        });\n    }\n\n    /**\n     * Adds the input text to this `TextCanvas` in the specified screen position. The current\n     * [[TextRenderStyle]] and [[TextLayoutStyle]] will influence the results of this function.\n     *\n     * @param text Input text. Provide an array of [[GlyphData]] for better performance.\n     * @param position Screen position.\n     * @param params Optional addition parameters.\n     *\n     * @returns Result of the addition. If `false`, some error occurred during execution and the\n     * input text couldn't be properly added.\n     */\n    addText(\n        text: string | GlyphData[],\n        position: THREE.Vector3,\n        params?: AdditionParameters\n    ): boolean {\n        tempTextPosition.copy(position);\n\n        let path;\n        let pathOverflow;\n        let upperCaseArray;\n        let targetLayer = this.m_defaultLayer;\n        if (params !== undefined) {\n            path = params.path;\n            pathOverflow = params.pathOverflow;\n            if (params.layer !== undefined) {\n                let tempLayer = this.getLayer(params.layer);\n                if (tempLayer === undefined) {\n                    tempLayer = this.addLayer(params.layer);\n                }\n                targetLayer = tempLayer;\n            }\n            if (params.path !== undefined) {\n                tempTextPosition.set(0, 0, tempTextPosition.z);\n            }\n            if (params.letterCaseArray) {\n                upperCaseArray = params.letterCaseArray;\n            }\n        }\n        const prevDrawCount = targetLayer.storage.drawCount;\n\n        const result = this.placeText({\n            input: text,\n            textPath: path,\n            textPathOverflow: pathOverflow,\n            layer: targetLayer,\n            letterCaseArray: upperCaseArray\n        });\n        if (result && params !== undefined) {\n            if (params.updatePosition === true) {\n                position.copy(tempTextPosition);\n            }\n            if (params.pickingData !== undefined) {\n                targetLayer.storage.addPickingData(\n                    prevDrawCount,\n                    targetLayer.storage.drawCount,\n                    params.pickingData\n                );\n            }\n        } else if (!result) {\n            (targetLayer.storage as any).m_drawCount = prevDrawCount;\n        }\n        return result;\n    }\n\n    /**\n     * Creates a new [[TextBufferObject]]. The computed text vertex buffer is equivalent to the\n     * result of performing the `addText` function for the input text in the screen origin.\n     *\n     * @param text Input text. Provide an array of [[GlyphData]] for better performance.\n     * @param params Optional creation parameters.\n     *\n     * @returns New [[TextBufferObject]] (or `undefined` if requested text glyphs couldn't be\n     * retrieved from the current [[FontCatalog]]).\n     */\n    createTextBufferObject(\n        text: string | GlyphData[],\n        params?: TextBufferCreationParameters\n    ): TextBufferObject | undefined {\n        tempTextPosition.set(0, 0, 0);\n\n        let glyphArray;\n        let upperCaseArray: boolean[] | undefined;\n        const smallCapsEnabled =\n            this.m_currentTextRenderStyle.fontVariant === FontVariant.SmallCaps;\n        if (typeof text !== \"string\") {\n            glyphArray = text;\n            if (params !== undefined && params.letterCaseArray) {\n                upperCaseArray = params.letterCaseArray;\n            }\n        } else {\n            upperCaseArray = [];\n            glyphArray = this.m_fontCatalog.getGlyphs(\n                text,\n                this.m_currentTextRenderStyle,\n                smallCapsEnabled ? upperCaseArray : undefined\n            );\n            if (glyphArray === undefined) {\n                return undefined;\n            }\n        }\n\n        let path;\n        let pathOverflow;\n        let textBounds;\n        let characterBounds;\n        let renderStyle;\n        let layoutStyle;\n        if (params !== undefined) {\n            path = params.path;\n            pathOverflow = params.pathOverflow;\n            if (params.outputBounds === true) {\n                textBounds = new THREE.Box2();\n            }\n            if (params.outputCharacterBounds === true) {\n                characterBounds = [];\n            }\n            if (params.storeStyles === true) {\n                renderStyle = this.m_currentTextRenderStyle.clone();\n                layoutStyle = this.m_currentTextLayoutStyle.clone();\n            }\n        }\n\n        this.placeText({\n            input: text,\n            layer: this.m_defaultLayer,\n            computeTextBuffer: true,\n            textPath: path,\n            textPathOverflow: pathOverflow,\n            bounds: textBounds,\n            individualBounds: characterBounds,\n            letterCaseArray: upperCaseArray\n        });\n\n        return new TextBufferObject(\n            glyphArray,\n            new Float32Array(tempVertexBuffer),\n            textBounds,\n            characterBounds,\n            renderStyle,\n            layoutStyle\n        );\n    }\n\n    /**\n     * Adds a previously created [[TextBufferObject]] to the `TextCanvas`. Additional parameters can\n     * be provided to override the attributes stored in the buffer.\n     *\n     * @param textBufferObject [[TextBufferObject]] to add.\n     * @param params Optional addition parameters.\n     *\n     * @returns Result of the addition. If `false`, some error occurred during execution and the\n     * input text couldn't be properly added.\n     */\n    addTextBufferObject(\n        textBufferObject: TextBufferObject,\n        params?: TextBufferAdditionParameters\n    ): boolean {\n        let targetLayer = this.m_defaultLayer;\n        let position;\n        let scale;\n        let rotation;\n        let color;\n        let opacity;\n        let bgColor;\n        let bgOpacity;\n\n        if (params !== undefined) {\n            if (params.layer !== undefined) {\n                let tempLayer = this.getLayer(params.layer);\n                if (tempLayer === undefined) {\n                    tempLayer = this.addLayer(params.layer);\n                }\n                targetLayer = tempLayer;\n            }\n            position = params.position?.clone();\n            scale = params.scale;\n            rotation = params.rotation;\n            color = params.color;\n            opacity = params.opacity;\n            bgColor = params.backgroundColor;\n            bgOpacity = params.backgroundOpacity;\n        }\n        const prevDrawCount = targetLayer.storage.drawCount;\n\n        const result = targetLayer.storage.addTextBufferObject(\n            textBufferObject,\n            position,\n            scale,\n            rotation,\n            color,\n            opacity,\n            bgColor,\n            bgOpacity\n        );\n        if (result && params !== undefined) {\n            if (params.pickingData !== undefined) {\n                targetLayer.storage.addPickingData(\n                    prevDrawCount,\n                    targetLayer.storage.drawCount,\n                    params.pickingData\n                );\n            }\n        } else if (!result) {\n            (targetLayer.storage as any).m_drawCount = prevDrawCount;\n        }\n        return result;\n    }\n\n    /**\n     * Executes the `pickCallback` for all previously stored picking data for text covering the\n     * specified screen position.\n     *\n     * @param screenPosition Screen coordinate of picking position.\n     * @param pickCallback Callback to be called for every picked element.\n     */\n    pickText(position: THREE.Vector2, callback: (pickData: any | undefined) => void): void {\n        for (const layer of this.m_layers) {\n            layer.storage.pick(position, callback);\n        }\n    }\n\n    /**\n     * Update the info with the memory footprint caused by objects owned by the `TextCanvas`.\n     *\n     * @param info The info object to increment with the values from this `TextCanvas`.\n     */\n    getMemoryUsage(info: MemoryUsage) {\n        this.m_fontCatalog.updateMemoryUsage(info);\n\n        for (const layer of this.m_layers) {\n            layer.storage.updateMemoryUsage(info);\n        }\n    }\n\n    // Places all glyphs for input text. Depending on parameters, it can store the resulting glyphs\n    // in the current [[TextGeometry]] (or into a separate buffer) or compute the bounding box for\n    // the input (as a whole or on a per-character basis).\n    private placeText(params: TextPlacementParameters): boolean {\n        if (params.input.length === 0 || this.m_currentTextLayoutStyle.maxLines! === 0) {\n            if (params.bounds !== undefined) {\n                params.bounds.min.set(0, 0);\n                params.bounds.max.set(0, 0);\n            }\n            if (params.individualBounds !== undefined) {\n                params.individualBounds.length = 0;\n            }\n            return true;\n        }\n\n        let glyphArray;\n        let smallCapsTransformations: boolean[] | undefined;\n        const smallCapsEnabled =\n            this.m_currentTextRenderStyle.fontVariant === FontVariant.SmallCaps;\n        if (typeof params.input !== \"string\") {\n            glyphArray = params.input;\n            if (params.letterCaseArray) {\n                smallCapsTransformations = params.letterCaseArray;\n            }\n        } else {\n            smallCapsTransformations = [];\n            glyphArray = this.m_fontCatalog.getGlyphs(\n                params.input,\n                this.m_currentTextRenderStyle,\n                smallCapsEnabled ? smallCapsTransformations : undefined\n            );\n            if (glyphArray === undefined) {\n                return false;\n            }\n        }\n\n        let glyphBounds;\n        if (params.individualBounds !== undefined) {\n            tempTextBounds.array = params.individualBounds;\n            tempTextBounds.offset = 0;\n            glyphBounds = tempTextBounds;\n        }\n        if (params.bounds !== undefined) {\n            params.bounds.min.set(Infinity, Infinity);\n            params.bounds.max.set(-Infinity, -Infinity);\n        }\n        if (params.computeTextBuffer === true) {\n            tempVertexBuffer = new Float32Array(glyphArray.length * QUAD_VERTEX_MEMORY_FOOTPRINT);\n        }\n\n        const isPath = params.textPath !== undefined;\n        const typesettingParams: TypesettingParameters | PathTypesettingParameters = {\n            glyphs: glyphArray,\n            fontCatalog: this.m_fontCatalog,\n            textRenderStyle: this.m_currentTextRenderStyle,\n            textLayoutStyle: this.m_currentTextLayoutStyle,\n            position: tempTextPosition,\n            geometry: params.layer.storage,\n            smallCapsArray: smallCapsEnabled ? smallCapsTransformations : undefined,\n            globalBounds: params.bounds,\n            individualBounds: glyphBounds,\n            vertexBuffer: params.computeTextBuffer === true ? tempVertexBuffer : undefined\n        };\n\n        let result = true;\n        if (isPath) {\n            Object.assign(typesettingParams as PathTypesettingParameters, {\n                path: params.textPath,\n                pathOverflow: params.textPathOverflow === true\n            });\n            result = this.m_pathTypesetter.arrangeGlyphs(\n                typesettingParams as PathTypesettingParameters\n            );\n        } else {\n            result = this.m_lineTypesetter.arrangeGlyphs(typesettingParams);\n        }\n        if (glyphBounds !== undefined) {\n            glyphBounds.array.length = glyphBounds.offset;\n        }\n\n        return result;\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport * as THREE from \"three\";\n\nimport { QUAD_VERTEX_MEMORY_FOOTPRINT } from \"../rendering/TextGeometry\";\nimport { FontStyle, FontVariant, WrappingMode } from \"../rendering/TextStyle\";\nimport { TypesettingUtils } from \"../utils/TypesettingUtils\";\nimport { UnicodeUtils } from \"../utils/UnicodeUtils\";\nimport { Typesetter, TypesettingParameters } from \"./Typesetter\";\n\n/**\n * [[Typesetter]] implementation that handles multi-line complex layout text.\n */\nexport class LineTypesetter implements Typesetter {\n    private m_tempTransform: THREE.Matrix3;\n    private m_tempCorners: THREE.Vector3[];\n    private m_tempLineDirection: UnicodeUtils.Direction;\n    private m_tempRunDirection: UnicodeUtils.Direction;\n    private m_tempPixelSize: number;\n    private m_tempPixelBgSize: number;\n    private m_tempScale: number;\n    private m_tempSmallCaps: boolean;\n\n    private m_currentParams?: TypesettingParameters;\n\n    /**\n     * Creates a `LineTypesetter` object.\n     *\n     * @returns New `LineTypesetter`.\n     */\n    constructor() {\n        this.m_tempTransform = new THREE.Matrix3();\n        this.m_tempCorners = [\n            new THREE.Vector3(),\n            new THREE.Vector3(),\n            new THREE.Vector3(),\n            new THREE.Vector3()\n        ];\n        this.m_tempLineDirection = UnicodeUtils.Direction.LTR;\n        this.m_tempRunDirection = UnicodeUtils.Direction.LTR;\n        this.m_tempPixelSize = 1.0;\n        this.m_tempPixelBgSize = 1.0;\n        this.m_tempScale = 1.0;\n        this.m_tempSmallCaps = false;\n    }\n\n    /**\n     * Arranges the specified glyphs using this `LineTypesetter`. Text will be placed into multiple\n     * bidirectional lines, that will be generated taking into account [[textLayoutStyle]] features,\n     * such as:\n     * - Maximum line width.\n     * - Word and character wrapping.\n     * - Maximum number of lines.\n     * - Vertical and horizontal alignment.\n     * - Leading (spacing between lines).\n     *\n     * @param params Typesetting parameters.\n     *\n     * @returns If `false`, some error occurred during execution and the output should be dismissed.\n     */\n    arrangeGlyphs(params: TypesettingParameters): boolean {\n        // Initializes common typesetting parameters (used across all functions in this class).\n        this.m_currentParams = params;\n        this.m_tempLineDirection = TypesettingUtils.getDirection(this.m_currentParams.glyphs, 0);\n        this.m_tempRunDirection = this.m_tempLineDirection;\n        this.m_tempPixelSize = TypesettingUtils.getPixelSize(\n            this.m_currentParams.textRenderStyle.fontSize.size,\n            this.m_currentParams.textRenderStyle.fontSize.unit,\n            this.m_currentParams.fontCatalog.size\n        );\n        this.m_tempScale = this.m_tempPixelSize / this.m_currentParams.fontCatalog.size;\n        this.m_tempPixelBgSize = Math.min(\n            TypesettingUtils.getPixelSize(\n                this.m_currentParams.textRenderStyle.fontSize.backgroundSize,\n                this.m_currentParams.textRenderStyle.fontSize.unit,\n                this.m_currentParams.fontCatalog.size\n            ),\n            this.m_currentParams!.fontCatalog.distanceRange * this.m_tempScale\n        );\n        this.m_tempSmallCaps = this.m_currentParams!.smallCapsArray !== undefined;\n\n        this.m_currentParams.position.y +=\n            this.m_currentParams.textLayoutStyle.verticalAlignment *\n            this.m_currentParams.glyphs[0].font.metrics.capHeight *\n            this.m_tempScale;\n\n        const isOnlyMeasured =\n            this.m_currentParams.globalBounds !== undefined &&\n            this.m_currentParams.vertexBuffer === undefined;\n\n        // Compute line origin and height.\n        const origin = this.m_currentParams.position.x;\n        const lineHeight =\n            this.m_currentParams.glyphs[0].font.metrics.lineHeight +\n            this.m_currentParams.textLayoutStyle.leading;\n\n        // Initialize line-breaking and wrapping variables.\n        let lineStartIdx = 0;\n        let glyphWrapIdx = 0;\n        let wordWrapIdx = 0;\n        let lineStartX = 0;\n        let lineCurrX = 0;\n        let glyphWrapX = 0;\n        let wordWrapX = 0;\n\n        let lineCount = 0;\n        let isBidirectionalLine = false;\n        for (let i = 0; i < this.m_currentParams.glyphs.length; ++i) {\n            if (lineCount > this.m_currentParams.textLayoutStyle.maxLines - 1) {\n                break;\n            }\n            const glyphData = this.m_currentParams.glyphs[i];\n            if (!glyphData.isInCache && !isOnlyMeasured) {\n                return false;\n            }\n\n            const isNewLine = UnicodeUtils.isNewLine(glyphData.codePoint);\n            const isWhiteSpace = UnicodeUtils.isWhiteSpace(glyphData.codePoint);\n\n            // Check if this line should be treated as bidirectional.\n            if (!isBidirectionalLine && glyphData.direction === -this.m_tempLineDirection) {\n                isBidirectionalLine = true;\n            }\n            // Advance the line's current X offset (only for printable characters).\n            if (UnicodeUtils.isPrintable(glyphData.codePoint)) {\n                lineCurrX +=\n                    (glyphData.advanceX + this.m_currentParams.textLayoutStyle.tracking) *\n                    this.m_tempScale *\n                    (this.m_tempSmallCaps\n                        ? TypesettingUtils.getSmallCapsScale(\n                              this.m_currentParams.glyphs,\n                              this.m_currentParams.smallCapsArray!,\n                              i,\n                              this.m_currentParams.textRenderStyle.fontVariant\n                          )\n                        : 1.0);\n            }\n            // If this is the first character in a line, update the line's X offset values (needed\n            // to properly center and wrap).\n            if (i === lineStartIdx) {\n                lineStartX = lineCurrX;\n                glyphWrapX = lineCurrX;\n                wordWrapX = lineCurrX;\n            }\n\n            // Check if should break the current line.\n            if (\n                isNewLine ||\n                (this.m_currentParams.textLayoutStyle.wrappingMode === WrappingMode.Character &&\n                    lineCurrX > this.m_currentParams.textLayoutStyle.lineWidth) ||\n                (this.m_currentParams.textLayoutStyle.wrappingMode === WrappingMode.Word &&\n                    lineCurrX > this.m_currentParams.textLayoutStyle.lineWidth &&\n                    wordWrapX !== lineStartX)\n            ) {\n                // Perform wrapping.\n                if (this.m_currentParams.textLayoutStyle.wrappingMode !== WrappingMode.None) {\n                    let wrapPointIdx = glyphWrapIdx;\n                    let wrapPointX = glyphWrapX;\n                    // Only wrap words when more than a single word fits into the current line.\n                    if (\n                        this.m_currentParams.textLayoutStyle.wrappingMode === WrappingMode.Word &&\n                        wordWrapX !== lineStartX\n                    ) {\n                        wrapPointIdx = wordWrapIdx;\n                        wrapPointX = wordWrapX;\n                    }\n\n                    lineCurrX = wrapPointX;\n                    i = Math.min(\n                        isNewLine ? (lineStartIdx === i ? wrapPointIdx : i) : wrapPointIdx,\n                        this.m_currentParams.glyphs.length - 1\n                    );\n                }\n\n                // Calculate the correct starting position for the line base on alignment, and place\n                // all glyphs in it.\n                const lineAlignment =\n                    this.m_tempLineDirection === UnicodeUtils.Direction.RTL && isBidirectionalLine\n                        ? 1.0 + this.m_currentParams.textLayoutStyle.horizontalAlignment\n                        : this.m_currentParams.textLayoutStyle.horizontalAlignment;\n                this.m_currentParams.position.x =\n                    this.m_currentParams.position.x + lineCurrX * lineAlignment;\n                if (\n                    !this.placeLine(lineStartIdx, i, this.m_tempLineDirection, isBidirectionalLine)\n                ) {\n                    return false;\n                }\n\n                // Update the line position.\n                this.m_currentParams.position.y -= lineHeight * this.m_tempScale;\n                this.m_currentParams.position.x = origin;\n\n                // Find the beginning of a new line (removing trailing white spaces).\n                while (\n                    i !== lineStartIdx &&\n                    i + 1 < this.m_currentParams.glyphs.length &&\n                    UnicodeUtils.isWhiteSpace(this.m_currentParams.glyphs[i + 1].codePoint)\n                ) {\n                    ++i;\n                }\n                lineStartIdx = i + 1;\n                if (lineStartIdx === this.m_currentParams.glyphs.length) {\n                    break;\n                }\n\n                // Only reset the line's direction when a new line character is found (to keep\n                // correct bidirectional behaviour when a bidirectional run is placed between\n                // multiple lines).\n                if (isNewLine) {\n                    this.m_tempLineDirection = TypesettingUtils.getDirection(\n                        this.m_currentParams.glyphs,\n                        lineStartIdx\n                    );\n                    this.m_tempRunDirection = this.m_tempLineDirection;\n                }\n\n                // Reset the line placement parameters.\n                lineStartX = 0;\n                lineCurrX = 0;\n                glyphWrapIdx = lineStartIdx;\n                glyphWrapX = 0;\n                wordWrapIdx = lineStartIdx;\n                wordWrapX = 0;\n                isBidirectionalLine = false;\n                lineCount++;\n            }\n            // If not, should if we should record any new wrapping points.\n            else if (\n                this.m_currentParams.textLayoutStyle.wrappingMode !== WrappingMode.None &&\n                !isWhiteSpace\n            ) {\n                // Update the per-glyph wrapping point.\n                glyphWrapIdx = i;\n                glyphWrapX = lineCurrX;\n\n                // Update the word wrapping point (only if mode is correctly set and we are\n                // currently placed at the end of a word).\n                if (\n                    this.m_currentParams.textLayoutStyle.wrappingMode === WrappingMode.Word &&\n                    i + 1 < this.m_currentParams.glyphs.length &&\n                    (UnicodeUtils.isWhiteSpace(this.m_currentParams.glyphs[i + 1].codePoint) ||\n                        UnicodeUtils.isNewLine(this.m_currentParams.glyphs[i + 1].codePoint))\n                ) {\n                    wordWrapIdx = i;\n                    wordWrapX = lineCurrX;\n                }\n            }\n        }\n\n        // If we still haven't placed all characters, place a final line.\n        if (\n            lineCount <= this.m_currentParams.textLayoutStyle.maxLines - 1 &&\n            lineStartIdx <= this.m_currentParams.glyphs.length - 1\n        ) {\n            const offset =\n                this.m_tempLineDirection === UnicodeUtils.Direction.RTL && isBidirectionalLine\n                    ? 1.0 + this.m_currentParams.textLayoutStyle.horizontalAlignment\n                    : this.m_currentParams.textLayoutStyle.horizontalAlignment;\n            this.m_currentParams.position.setX(\n                this.m_currentParams.position.x + lineCurrX * offset\n            );\n            if (\n                !this.placeLine(\n                    lineStartIdx,\n                    this.m_currentParams.glyphs.length - 1,\n                    this.m_tempLineDirection,\n                    isBidirectionalLine\n                )\n            ) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n\n    // Place characters alongside a line. Text direction is taken into account, and text is broken\n    // into directional runs.\n    private placeLine(\n        startIdx: number,\n        endIdx: number,\n        direction: UnicodeUtils.Direction,\n        isBidirectional: boolean\n    ): boolean {\n        // If the line is not bidirectional, place it as a single directional run.\n        if (!isBidirectional) {\n            return this.placeRun(startIdx, endIdx, direction);\n        }\n\n        // Gather common typesetting parameters.\n        const glyphDataArray = this.m_currentParams!.glyphs;\n        const smallCapsArray = this.m_currentParams!.smallCapsArray;\n        const textRenderStyle = this.m_currentParams!.textRenderStyle;\n        const textLayoutStyle = this.m_currentParams!.textLayoutStyle;\n        const position = this.m_currentParams!.position;\n\n        // Initialize line placement parameters.\n        const isRTL = direction === UnicodeUtils.Direction.RTL;\n        const origin = position.x;\n        let offset = 0;\n        let runStart = startIdx;\n\n        for (let i = startIdx; i <= endIdx; ++i) {\n            const glyphData = glyphDataArray[i];\n\n            // If the current glyph changes the line direction, place the current run.\n            if (glyphData.direction === -this.m_tempRunDirection) {\n                if (isRTL) {\n                    position.x = origin + offset;\n                }\n                if (!this.placeRun(runStart, i - 1, this.m_tempRunDirection)) {\n                    return false;\n                }\n                if (!isRTL) {\n                    position.x = origin + offset;\n                }\n\n                runStart = i;\n                this.m_tempRunDirection *= -1.0;\n            }\n            // If the current glyph has neutral direction (i.e. white space) and we're in the middle\n            // of a run with direction opposite to the line's main direction, check for the closest\n            // strong direction in the run.\n            else if (\n                glyphData.direction === UnicodeUtils.Direction.Neutral &&\n                this.m_tempRunDirection === -direction\n            ) {\n                let neutralIdx = i;\n                while (\n                    neutralIdx + 1 < glyphDataArray.length &&\n                    Math.abs(glyphDataArray[neutralIdx].direction) !== 1\n                ) {\n                    ++neutralIdx;\n                }\n\n                // If the closest strong direction in the run is not the current run's direction,\n                // place the current run.\n                if (glyphDataArray[neutralIdx].direction !== this.m_tempRunDirection) {\n                    if (isRTL) {\n                        position.x = origin + offset;\n                    }\n                    if (!this.placeRun(runStart, i - 1, this.m_tempRunDirection)) {\n                        return false;\n                    }\n                    if (!isRTL) {\n                        position.x = origin + offset;\n                    }\n\n                    runStart = i;\n                    this.m_tempRunDirection *= -1.0;\n                }\n            }\n\n            // Advance the offset position in the line.\n            offset +=\n                (glyphData.advanceX + textLayoutStyle.tracking) *\n                this.m_tempScale *\n                (this.m_tempSmallCaps\n                    ? TypesettingUtils.getSmallCapsScale(\n                          glyphDataArray,\n                          smallCapsArray!,\n                          i,\n                          textRenderStyle.fontVariant\n                      )\n                    : 1.0) *\n                direction;\n        }\n\n        // If we still haven't placed all characters in the line, place a final run.\n        if (runStart <= endIdx) {\n            if (isRTL) {\n                position.x = origin + offset;\n            }\n            if (!this.placeRun(runStart, endIdx, this.m_tempRunDirection)) {\n                return false;\n            }\n            if (!isRTL) {\n                position.x = origin + offset;\n            }\n        }\n\n        return true;\n    }\n\n    // Place a directional run of index inside a line.\n    private placeRun(startIdx: number, endIdx: number, direction: UnicodeUtils.Direction): boolean {\n        // Gather common typesetting parameters.\n        const glyphDataArray = this.m_currentParams!.glyphs;\n        const smallCapsArray = this.m_currentParams!.smallCapsArray;\n        const fontCatalog = this.m_currentParams!.fontCatalog;\n        const textRenderStyle = this.m_currentParams!.textRenderStyle;\n        const textLayoutStyle = this.m_currentParams!.textLayoutStyle;\n        const position = this.m_currentParams!.position;\n        const geometry = this.m_currentParams!.geometry;\n        const globalBounds = this.m_currentParams!.globalBounds;\n        const individualBounds = this.m_currentParams!.individualBounds;\n        const vertexBuffer = this.m_currentParams!.vertexBuffer;\n\n        // Move through the glyph array following the run's direction (as the order of the glyphs in\n        // memory might not match the order on glyphs on scree).\n        const start = direction === UnicodeUtils.Direction.LTR ? startIdx : endIdx;\n        const end = direction === UnicodeUtils.Direction.LTR ? endIdx : startIdx;\n        for (\n            let i = start;\n            direction === UnicodeUtils.Direction.RTL ? i >= end : i <= end;\n            i += direction\n        ) {\n            // Only process printable characters.\n            const glyphData = glyphDataArray[i];\n            if (!UnicodeUtils.isPrintable(glyphData.codePoint)) {\n                continue;\n            }\n\n            // When placing a RTL run, we need to check for weak runs (numerical runs of characters\n            // that don't change the overall run direction, but should always be displayed as LTR\n            // text).\n            if (\n                startIdx !== endIdx &&\n                i !== 0 &&\n                direction === UnicodeUtils.Direction.RTL &&\n                glyphData.direction === UnicodeUtils.Direction.Weak\n            ) {\n                let weakRunStart = i;\n                let weakGlyph = glyphDataArray[weakRunStart - 1];\n                while (\n                    weakRunStart !== startIdx &&\n                    (weakGlyph.direction === UnicodeUtils.Direction.Weak ||\n                        (weakGlyph.direction === UnicodeUtils.Direction.Neutral &&\n                            !UnicodeUtils.isWhiteSpace(weakGlyph.codePoint)))\n                ) {\n                    --weakRunStart;\n                    weakGlyph = glyphDataArray[weakRunStart - 1];\n                }\n\n                this.placeRun(Math.max(weakRunStart, startIdx), i, UnicodeUtils.Direction.LTR);\n\n                i = weakRunStart;\n                continue;\n            }\n\n            // Compute various rendering parameters for this glyph.\n            const glyphFont = glyphData.font;\n            const glyphFontMetrics = glyphFont.metrics;\n            const fontStyle = textRenderStyle.fontStyle;\n\n            const isBoldEmulated =\n                (fontStyle === FontStyle.Bold && glyphFont.bold === undefined) ||\n                (fontStyle === FontStyle.BoldItalic &&\n                    glyphFont.bold === undefined &&\n                    glyphFont.boldItalic === undefined);\n            const isItalicEmulated =\n                (fontStyle === FontStyle.Italic && glyphFont.italic === undefined) ||\n                (fontStyle === FontStyle.BoldItalic &&\n                    glyphFont.italic === undefined &&\n                    glyphFont.boldItalic === undefined);\n\n            const isSmallCaps = this.m_tempSmallCaps\n                ? smallCapsArray![i] && textRenderStyle.fontVariant === FontVariant.SmallCaps\n                : false;\n            const smallCapsScale = isSmallCaps\n                ? glyphFontMetrics.xHeight / glyphFontMetrics.capHeight\n                : 1.0;\n            const glyphScale = this.m_tempScale * smallCapsScale;\n\n            const emulationWeight =\n                ((isBoldEmulated ? 0.02 : 0.0) + (isSmallCaps ? 0.01 : 0.0)) *\n                (fontCatalog.size / fontCatalog.distanceRange);\n            const bgWeight =\n                (0.5 * this.m_tempPixelBgSize!) /\n                (fontCatalog.distanceRange * Math.max(glyphScale, 1.0));\n            const isMirrored =\n                UnicodeUtils.isRtlMirrored(glyphData.codePoint) &&\n                direction === UnicodeUtils.Direction.RTL;\n            const verticalOffset =\n                glyphFontMetrics.lineHeight -\n                glyphFontMetrics.base -\n                glyphFontMetrics.distanceRange * 0.5;\n\n            // Compute the glyphs transformation matrix and apply to all corners of a glyph.\n            TypesettingUtils.computeGlyphTransform(\n                this.m_tempTransform,\n                position,\n                glyphScale,\n                textLayoutStyle.canvasRotation,\n                textRenderStyle.rotation\n            );\n            for (let j = 0; j < 4; ++j) {\n                const glyphVertexPosition = glyphData.positions[j];\n                const horizontalOffset =\n                    isItalicEmulated && j > 1\n                        ? TypesettingUtils.OBLIQUE_OFFSET * glyphFontMetrics.size\n                        : 0.0;\n                this.m_tempCorners[j].set(\n                    glyphVertexPosition.x + horizontalOffset,\n                    glyphVertexPosition.y - verticalOffset,\n                    glyphVertexPosition.z\n                );\n                this.m_tempCorners[j].applyMatrix3(this.m_tempTransform);\n            }\n\n            // Depending on the typesetting options, add the computed glyph to the TextGeometry or\n            // update the text bounds.\n            if (globalBounds === undefined && vertexBuffer === undefined) {\n                if (\n                    !geometry.add(\n                        glyphData,\n                        this.m_tempCorners,\n                        emulationWeight,\n                        emulationWeight + bgWeight,\n                        isMirrored,\n                        textRenderStyle\n                    )\n                ) {\n                    return false;\n                }\n            } else {\n                if (globalBounds !== undefined) {\n                    TypesettingUtils.updateBounds(\n                        this.m_tempCorners,\n                        globalBounds,\n                        individualBounds\n                    );\n                }\n                if (vertexBuffer !== undefined) {\n                    geometry.addToBuffer(\n                        vertexBuffer,\n                        i * QUAD_VERTEX_MEMORY_FOOTPRINT,\n                        glyphData,\n                        this.m_tempCorners,\n                        emulationWeight,\n                        emulationWeight + bgWeight,\n                        isMirrored,\n                        textRenderStyle\n                    );\n                }\n            }\n\n            // Advance the current position and proceed to next glyph in the run.\n            position.set(\n                position.x +\n                    (glyphData.advanceX + textLayoutStyle.tracking) *\n                        glyphScale *\n                        Math.cos(textLayoutStyle.lineRotation),\n                position.y +\n                    (glyphData.advanceX + textLayoutStyle.tracking) *\n                        glyphScale *\n                        Math.sin(textLayoutStyle.lineRotation),\n                position.z\n            );\n        }\n\n        return true;\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport * as THREE from \"three\";\n\nimport { QUAD_VERTEX_MEMORY_FOOTPRINT } from \"../rendering/TextGeometry\";\nimport { FontStyle, FontVariant } from \"../rendering/TextStyle\";\nimport { TypesettingUtils } from \"../utils/TypesettingUtils\";\nimport { UnicodeUtils } from \"../utils/UnicodeUtils\";\nimport { Typesetter, TypesettingParameters } from \"./Typesetter\";\n\n/**\n * @hidden\n * Parameters passed when placing glyphs using [[PathTypesetter]]'s `arrangeGlyphs` function.\n */\nexport interface PathTypesettingParameters extends TypesettingParameters {\n    /**\n     * Path to be followed when arranging glyphs.\n     */\n    path: THREE.Path | THREE.CurvePath<THREE.Vector2>;\n\n    /**\n     * If `true`, text on a path will be placed even when its size its bigger than the path's size.\n     */\n    pathOverflow: boolean;\n}\n\n/**\n * [[Typesetter]] implementation that arranges glyphs alongside a specified path.\n */\nexport class PathTypesetter implements Typesetter {\n    private m_tempTransform: THREE.Matrix3;\n    private m_tempCorners: THREE.Vector3[];\n    private m_tempLineDirection: UnicodeUtils.Direction;\n    private m_tempRunDirection: UnicodeUtils.Direction;\n    private m_tempPixelSize: number;\n    private m_tempPixelBgSize: number;\n    private m_tempScale: number;\n    private m_tempSmallCaps: boolean;\n\n    private m_tempPathPosition: THREE.Vector3;\n    private m_tempPathLength: number;\n    private m_tempPathOffset: number;\n\n    private m_currentParams?: PathTypesettingParameters;\n\n    /**\n     * Creates a `PathTypesetter` object.\n     *\n     * @returns New `PathTypesetter`.\n     */\n    constructor() {\n        this.m_tempTransform = new THREE.Matrix3();\n        this.m_tempCorners = [\n            new THREE.Vector3(),\n            new THREE.Vector3(),\n            new THREE.Vector3(),\n            new THREE.Vector3()\n        ];\n        this.m_tempLineDirection = UnicodeUtils.Direction.LTR;\n        this.m_tempRunDirection = UnicodeUtils.Direction.LTR;\n        this.m_tempPixelSize = 1.0;\n        this.m_tempPixelBgSize = 1.0;\n        this.m_tempScale = 1.0;\n        this.m_tempSmallCaps = false;\n\n        this.m_tempPathPosition = new THREE.Vector3();\n        this.m_tempPathLength = 0.0;\n        this.m_tempPathOffset = 0.0;\n    }\n\n    /**\n     * Arranges the specified glyphs using this `PathTypesetter`. Text will be placed into a single\n     * bidirectional line that follows the specified path. Characters will be orientated and placed\n     * alongside this path following [[TextLayout]]'s [[VerticalAlignment]] and\n     * [[HorizontalAlignment]].\n     *\n     * @param params Typesetting parameters.\n     *\n     * @returns If `false`, some error occurred during execution and the output should be dismissed.\n     */\n    arrangeGlyphs(params: PathTypesettingParameters): boolean {\n        // Initializes common typesetting parameters (used across all functions in this class).\n        this.m_currentParams = params;\n        this.m_tempLineDirection = TypesettingUtils.getDirection(this.m_currentParams.glyphs, 0);\n        this.m_tempRunDirection = this.m_tempLineDirection;\n        this.m_tempPixelSize = TypesettingUtils.getPixelSize(\n            this.m_currentParams.textRenderStyle.fontSize.size,\n            this.m_currentParams.textRenderStyle.fontSize.unit,\n            this.m_currentParams.fontCatalog.size\n        );\n        this.m_tempScale = this.m_tempPixelSize / this.m_currentParams.fontCatalog.size;\n        this.m_tempPixelBgSize = Math.min(\n            TypesettingUtils.getPixelSize(\n                this.m_currentParams.textRenderStyle.fontSize.backgroundSize,\n                this.m_currentParams.textRenderStyle.fontSize.unit,\n                this.m_currentParams.fontCatalog.size\n            ),\n            this.m_currentParams!.fontCatalog.distanceRange * this.m_tempScale\n        );\n        this.m_tempSmallCaps = this.m_currentParams!.smallCapsArray !== undefined;\n\n        this.m_tempPathLength = this.m_currentParams.path.getLength();\n        this.m_tempPathOffset = 0.0;\n\n        const isOnlyMeasured =\n            this.m_currentParams.globalBounds !== undefined &&\n            this.m_currentParams.vertexBuffer === undefined;\n\n        // To be able to properly set the horizontal alignment on a path, we need to first retrieve\n        // how much of the path the input text covers, so we can calculate the correct initial\n        // offset.\n        let isBidirectional = false;\n        let pathWidth = 0.0;\n        for (let i = 0; i < this.m_currentParams.glyphs.length; ++i) {\n            const glyphData = this.m_currentParams.glyphs[i];\n            if (!glyphData.isInCache && !isOnlyMeasured) {\n                return false;\n            }\n\n            if (!UnicodeUtils.isPrintable(glyphData.codePoint)) {\n                continue;\n            }\n            if (!isBidirectional && glyphData.direction === -this.m_tempLineDirection) {\n                isBidirectional = true;\n            }\n\n            pathWidth +=\n                (glyphData.advanceX + this.m_currentParams.textLayoutStyle.tracking) *\n                this.m_tempScale *\n                (this.m_tempSmallCaps\n                    ? TypesettingUtils.getSmallCapsScale(\n                          this.m_currentParams.glyphs,\n                          this.m_currentParams.smallCapsArray!,\n                          i,\n                          this.m_currentParams.textRenderStyle.fontVariant\n                      )\n                    : 1.0);\n        }\n        this.m_tempPathOffset = Math.min(\n            Math.max(\n                -this.m_currentParams.textLayoutStyle.horizontalAlignment +\n                    (this.m_currentParams.textLayoutStyle.horizontalAlignment * pathWidth) /\n                        this.m_tempPathLength,\n                0\n            ),\n            1\n        );\n\n        // Place the input text as a single path line.\n        return this.placeLine(this.m_tempLineDirection, isBidirectional);\n    }\n\n    // Place characters alongside a path line. Text direction is taken into account, and text is\n    // broken into directional runs.\n    private placeLine(direction: UnicodeUtils.Direction, isBidirectional: boolean): boolean {\n        // If the line is not bidirectional, place it as a single directional run.\n        if (!isBidirectional) {\n            return this.placeRun(0, this.m_currentParams!.glyphs.length - 1, direction);\n        }\n\n        // Gather common typesetting parameters.\n        const glyphDataArray = this.m_currentParams!.glyphs;\n\n        // Initialize line placement parameters.\n        let runStart = 0;\n        for (let i = runStart; i < glyphDataArray.length; ++i) {\n            const glyphData = glyphDataArray[i];\n\n            // If the current glyph changes the line direction, place the current run.\n            if (glyphData.direction === -this.m_tempRunDirection) {\n                if (!this.placeRun(runStart, i - 1, this.m_tempRunDirection)) {\n                    return false;\n                }\n\n                runStart = i;\n                this.m_tempRunDirection *= -1.0;\n            }\n            // If the current glyph has neutral direction (i.e. white space) and we're in the middle\n            // of a run with direction opposite to the line's main direction, check for the closest\n            // strong direction in the run.\n            else if (\n                glyphData.direction === UnicodeUtils.Direction.Neutral &&\n                this.m_tempRunDirection === -direction\n            ) {\n                let neutralIdx = i;\n                while (\n                    neutralIdx + 1 < glyphDataArray.length &&\n                    Math.abs(glyphDataArray[neutralIdx].direction) !== 1\n                ) {\n                    ++neutralIdx;\n                }\n\n                // If the closest strong direction in the run is not the current run's direction,\n                // place the current run.\n                if (glyphDataArray[neutralIdx].direction !== this.m_tempRunDirection) {\n                    if (!this.placeRun(runStart, i - 1, this.m_tempRunDirection)) {\n                        return false;\n                    }\n\n                    runStart = i;\n                    this.m_tempRunDirection *= -1.0;\n                }\n            }\n        }\n\n        // If we still haven't placed all characters in the line, place a final run.\n        if (runStart < glyphDataArray.length) {\n            if (!this.placeRun(runStart, glyphDataArray.length - 1, this.m_tempRunDirection)) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n\n    // Place a directional run of index inside a path line.\n    private placeRun(startIdx: number, endIdx: number, direction: UnicodeUtils.Direction): boolean {\n        // Gather common typesetting parameters.\n        const glyphDataArray = this.m_currentParams!.glyphs;\n        const smallCapsArray = this.m_currentParams!.smallCapsArray;\n        const fontCatalog = this.m_currentParams!.fontCatalog;\n        const textRenderStyle = this.m_currentParams!.textRenderStyle;\n        const textLayoutStyle = this.m_currentParams!.textLayoutStyle;\n        const position = this.m_currentParams!.position;\n        const geometry = this.m_currentParams!.geometry;\n        const globalBounds = this.m_currentParams!.globalBounds;\n        const individualBounds = this.m_currentParams!.individualBounds;\n        const vertexBuffer = this.m_currentParams!.vertexBuffer;\n        const path = this.m_currentParams!.path;\n\n        const defaultGlyphRotation = textRenderStyle.rotation;\n        const normalDisplacement =\n            textLayoutStyle.verticalAlignment *\n            glyphDataArray[0].font.metrics.capHeight *\n            this.m_tempScale;\n\n        // Move through the glyph array following the run's direction (as the order of the glyphs in\n        // memory might not match the order on glyphs on scree).\n        const start = direction === UnicodeUtils.Direction.LTR ? startIdx : endIdx;\n        const end = direction === UnicodeUtils.Direction.LTR ? endIdx : startIdx;\n        for (\n            let i = start;\n            direction === UnicodeUtils.Direction.RTL ? i >= end : i <= end;\n            i += direction\n        ) {\n            // Only process printable characters.\n            const glyphData = glyphDataArray[i];\n            if (!UnicodeUtils.isPrintable(glyphData.codePoint)) {\n                continue;\n            }\n\n            // When placing a RTL run, we need to check for weak runs (numerical runs of characters\n            // that don't change the overall run direction, but should always be displayed as LTR\n            // text).\n            if (\n                startIdx !== endIdx &&\n                i !== 0 &&\n                direction === UnicodeUtils.Direction.RTL &&\n                glyphData.direction === UnicodeUtils.Direction.Weak\n            ) {\n                let weakRunStart = i;\n                let weakGlyph = glyphDataArray[weakRunStart - 1];\n                while (\n                    weakRunStart !== startIdx &&\n                    (weakGlyph.direction === UnicodeUtils.Direction.Weak ||\n                        (weakGlyph.direction === UnicodeUtils.Direction.Neutral &&\n                            !UnicodeUtils.isWhiteSpace(weakGlyph.codePoint)))\n                ) {\n                    --weakRunStart;\n                    weakGlyph = glyphDataArray[weakRunStart - 1];\n                }\n\n                this.placeRun(Math.max(weakRunStart, startIdx), i, UnicodeUtils.Direction.LTR);\n\n                i = weakRunStart;\n                continue;\n            }\n\n            // Compute various rendering parameters for this glyph.\n            const glyphFont = glyphData.font;\n            const glyphFontMetrics = glyphFont.metrics;\n            const fontStyle = textRenderStyle.fontStyle;\n\n            const isBoldEmulated =\n                (fontStyle === FontStyle.Bold && glyphFont.bold === undefined) ||\n                (fontStyle === FontStyle.BoldItalic &&\n                    glyphFont.bold === undefined &&\n                    glyphFont.boldItalic === undefined);\n            const isItalicEmulated =\n                (fontStyle === FontStyle.Italic && glyphFont.italic === undefined) ||\n                (fontStyle === FontStyle.BoldItalic &&\n                    glyphFont.italic === undefined &&\n                    glyphFont.boldItalic === undefined);\n\n            const isSmallCaps = this.m_tempSmallCaps\n                ? smallCapsArray![i] && textRenderStyle.fontVariant === FontVariant.SmallCaps\n                : false;\n            const smallCapsScale = isSmallCaps\n                ? glyphFontMetrics.xHeight / glyphFontMetrics.capHeight\n                : 1.0;\n            const glyphScale = this.m_tempScale * smallCapsScale;\n\n            const emulationWeight =\n                ((isBoldEmulated ? 0.02 : 0.0) + (isSmallCaps ? 0.01 : 0.0)) *\n                (fontCatalog.size / fontCatalog.distanceRange);\n            const bgWeight =\n                (0.5 * this.m_tempPixelBgSize!) /\n                (fontCatalog.distanceRange * Math.max(glyphScale, 1.0));\n            const isMirrored =\n                UnicodeUtils.isRtlMirrored(glyphData.codePoint) &&\n                direction === UnicodeUtils.Direction.RTL;\n\n            const verticalOffset =\n                glyphFontMetrics.lineHeight -\n                glyphFontMetrics.base -\n                glyphFontMetrics.distanceRange * 0.5;\n\n            // Update the current interpolated path position and angle.\n            const textPoint = path.getPoint(this.m_tempPathOffset);\n            if (textPoint === null) {\n                return this.m_currentParams!.pathOverflow;\n            }\n            const tangent = path.getTangent(this.m_tempPathOffset);\n            const normal = new THREE.Vector2(-tangent.y, tangent.x).multiplyScalar(\n                normalDisplacement\n            );\n            const angle = Math.atan2(tangent.y, tangent.x);\n            this.m_tempPathPosition.set(normal.x + textPoint.x, normal.y + textPoint.y, position.z);\n            textRenderStyle.rotation = defaultGlyphRotation + angle;\n\n            // Compute the glyphs transformation matrix and apply to all corners of a glyph.\n            TypesettingUtils.computeGlyphTransform(\n                this.m_tempTransform,\n                this.m_tempPathPosition,\n                glyphScale,\n                0.0,\n                textRenderStyle.rotation\n            );\n            for (let j = 0; j < 4; ++j) {\n                const glyphVertexPosition = glyphData.positions[j];\n                const horizontalOffset =\n                    isItalicEmulated && j > 1\n                        ? TypesettingUtils.OBLIQUE_OFFSET * glyphFontMetrics.size\n                        : 0.0;\n                this.m_tempCorners[j].set(\n                    glyphVertexPosition.x + horizontalOffset,\n                    glyphVertexPosition.y - verticalOffset,\n                    glyphVertexPosition.z\n                );\n                this.m_tempCorners[j].applyMatrix3(this.m_tempTransform);\n\n                this.m_tempCorners[j].x -= position.x;\n                this.m_tempCorners[j].y -= position.y;\n            }\n\n            // Depending on the typesetting options, add the computed glyph to the TextGeometry or\n            // update the text bounds.\n            if (globalBounds === undefined && vertexBuffer === undefined) {\n                if (\n                    !geometry.add(\n                        glyphData,\n                        this.m_tempCorners,\n                        emulationWeight,\n                        emulationWeight + bgWeight,\n                        isMirrored,\n                        textRenderStyle\n                    )\n                ) {\n                    return false;\n                }\n            } else {\n                if (globalBounds !== undefined) {\n                    TypesettingUtils.updateBounds(\n                        this.m_tempCorners,\n                        globalBounds,\n                        individualBounds\n                    );\n                }\n                if (vertexBuffer !== undefined) {\n                    geometry.addToBuffer(\n                        vertexBuffer,\n                        i * QUAD_VERTEX_MEMORY_FOOTPRINT,\n                        glyphData,\n                        this.m_tempCorners,\n                        emulationWeight,\n                        emulationWeight + bgWeight,\n                        isMirrored,\n                        textRenderStyle\n                    );\n                }\n            }\n\n            // Restore the original glyph rotation.\n            textRenderStyle.rotation = defaultGlyphRotation;\n\n            // Advance the current position and proceed to next glyph in the run.\n            this.m_tempPathOffset +=\n                ((glyphData.advanceX + textLayoutStyle.tracking) * glyphScale) /\n                this.m_tempPathLength;\n        }\n\n        return true;\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nenum ContextualForm {\n    Initial,\n    Medial,\n    Final\n}\n\nenum CombinedForm {\n    Isolated,\n    Connected\n}\n\n/**\n * Converter between arabic isolated forms (in Unicode Block 'Arabic') and their contextual forms\n * (in Unicode Block 'Arabic Presentation Forms-B').\n */\nexport class ContextualArabicConverter {\n    private static m_instance: ContextualArabicConverter;\n    static get instance(): ContextualArabicConverter {\n        if (this.m_instance === undefined) {\n            this.m_instance = new ContextualArabicConverter();\n        }\n        return this.m_instance;\n    }\n\n    private m_singleCharactersMap: Map<number, ReadonlyArray<number | undefined>> = new Map();\n    private m_combinedCharactersMap: Map<\n        number,\n        Map<number, ReadonlyArray<number | undefined>>\n    > = new Map();\n    private m_neutralCharacters: number[];\n\n    private constructor() {\n        // Single characters.\n        this.m_singleCharactersMap.set(0x0621, [undefined, undefined, undefined]); // HAMZA\n        this.m_singleCharactersMap.set(0x0622, [undefined, undefined, 0xfe82]); // ALEF_MADDA\n        this.m_singleCharactersMap.set(0x0623, [undefined, undefined, 0xfe84]); // ALEF_HAMZA_ABOVE\n        this.m_singleCharactersMap.set(0x0624, [undefined, undefined, 0xfe86]); // WAW_HAMZA\n        this.m_singleCharactersMap.set(0x0625, [undefined, undefined, 0xfe88]); // ALEF_HAMZA_BELOW\n        this.m_singleCharactersMap.set(0x0626, [0xfe8b, 0xfe8c, 0xfe8a]); // YEH_HAMZA\n        this.m_singleCharactersMap.set(0x0627, [undefined, undefined, 0xfe8e]); // ALEF\n        this.m_singleCharactersMap.set(0x0628, [0xfe91, 0xfe92, 0xfe90]); // BEH\n        this.m_singleCharactersMap.set(0x0629, [undefined, undefined, 0xfe94]); // TEH_MARBUTA\n        this.m_singleCharactersMap.set(0x062a, [0xfe97, 0xfe98, 0xfe96]); // TEH\n        this.m_singleCharactersMap.set(0x062b, [0xfe9b, 0xfe9c, 0xfe9a]); // THEH\n        this.m_singleCharactersMap.set(0x062c, [0xfe9f, 0xfea0, 0xfe9e]); // JEEM\n        this.m_singleCharactersMap.set(0x062d, [0xfea3, 0xfea4, 0xfea2]); // HAH\n        this.m_singleCharactersMap.set(0x062e, [0xfea7, 0xfea8, 0xfea6]); // KHAH\n        this.m_singleCharactersMap.set(0x062f, [undefined, undefined, 0xfeaa]); // DAL\n        this.m_singleCharactersMap.set(0x0630, [undefined, undefined, 0xfeac]); // THAL\n        this.m_singleCharactersMap.set(0x0631, [undefined, undefined, 0xfeae]); // REH\n        this.m_singleCharactersMap.set(0x0632, [undefined, undefined, 0xfeb0]); // ZAIN\n        this.m_singleCharactersMap.set(0x0633, [0xfeb3, 0xfeb4, 0xfeb2]); // SEEN\n        this.m_singleCharactersMap.set(0x0634, [0xfeb7, 0xfeb8, 0xfeb6]); // SHEEN\n        this.m_singleCharactersMap.set(0x0635, [0xfebb, 0xfebc, 0xfeba]); // SAD\n        this.m_singleCharactersMap.set(0x0636, [0xfebf, 0xfec0, 0xfebe]); // DAD\n        this.m_singleCharactersMap.set(0x0637, [0xfec3, 0xfec4, 0xfec2]); // TAH\n        this.m_singleCharactersMap.set(0x0638, [0xfec7, 0xfec8, 0xfec6]); // ZAH\n        this.m_singleCharactersMap.set(0x0639, [0xfecb, 0xfecc, 0xfeca]); // AIN\n        this.m_singleCharactersMap.set(0x063a, [0xfecf, 0xfed0, 0xfece]); // GHAIN\n        this.m_singleCharactersMap.set(0x0640, [0x0640, 0x0640, 0x0640]); // TATWEEL\n        this.m_singleCharactersMap.set(0x0641, [0xfed3, 0xfed4, 0xfed2]); // FEH\n        this.m_singleCharactersMap.set(0x0642, [0xfed7, 0xfed8, 0xfed6]); // QAF\n        this.m_singleCharactersMap.set(0x0643, [0xfedb, 0xfedc, 0xfeda]); // KAF\n        this.m_singleCharactersMap.set(0x0644, [0xfedf, 0xfee0, 0xfede]); // LAM\n        this.m_singleCharactersMap.set(0x0645, [0xfee3, 0xfee4, 0xfee2]); // MEEM\n        this.m_singleCharactersMap.set(0x0646, [0xfee7, 0xfee8, 0xfee6]); // NOON\n        this.m_singleCharactersMap.set(0x0647, [0xfeeb, 0xfeec, 0xfeea]); // HEH\n        this.m_singleCharactersMap.set(0x0648, [undefined, undefined, 0xfeee]); // WAW\n        this.m_singleCharactersMap.set(0x0649, [undefined, undefined, 0xfef0]); // ALEF_MAKSURA\n        this.m_singleCharactersMap.set(0x064a, [0xfef3, 0xfef4, 0xfef2]); // YEH\n        this.m_singleCharactersMap.set(0x067e, [0xfb58, 0xfb59, 0xfb57]); // PEH\n        this.m_singleCharactersMap.set(0x06cc, [0xfbfe, 0xfbff, 0xfbfd]); // Farsi Yeh\n        this.m_singleCharactersMap.set(0x0686, [0xfb7c, 0xfb7d, 0xfb7b]); // Tcheh\n        this.m_singleCharactersMap.set(0x06a9, [0xfb90, 0xfb91, 0xfb8f]); // Keheh\n        this.m_singleCharactersMap.set(0x06af, [0xfb94, 0xfb95, 0xfb93]); // Gaf\n        this.m_singleCharactersMap.set(0x0698, [undefined, undefined, 0xfb8b]); // Jeh\n\n        // Combined characters.\n        this.m_combinedCharactersMap.set(0x0644, new Map());\n        // LAM_ALEF_MADDA\n        this.m_combinedCharactersMap.get(0x0644)!.set(0x0622, [0xfef5, 0xfef6]);\n        // LAM_ALEF_HAMZA_ABOVE\n        this.m_combinedCharactersMap.get(0x0644)!.set(0x0623, [0xfef7, 0xfef8]);\n        // LAM_ALEF_HAMZA_BELOW\n        this.m_combinedCharactersMap.get(0x0644)!.set(0x0625, [0xfef9, 0xfefa]);\n        // LAM_ALEF\n        this.m_combinedCharactersMap.get(0x0644)!.set(0x0627, [0xfefb, 0xfefc]);\n\n        // Neutral characters.\n        this.m_neutralCharacters = [\n            0x0610, // ARABIC SIGN SALLALLAHOU ALAYHE WASSALLAM\n            0x0612, // ARABIC SIGN ALAYHE ASSALLAM\n            0x0613, // ARABIC SIGN RADI ALLAHOU ANHU\n            0x0614, // ARABIC SIGN TAKHALLUS\n            0x0615, // ARABIC SMALL HIGH TAH\n            0x064b, // ARABIC FATHATAN\n            0x064c, // ARABIC DAMMATAN\n            0x064d, // ARABIC KASRATAN\n            0x064e, // ARABIC FATHA\n            0x064f, // ARABIC DAMMA\n            0x0650, // ARABIC KASRA\n            0x0651, // ARABIC SHADDA\n            0x0652, // ARABIC SUKUN\n            0x0653, // ARABIC MADDAH ABOVE\n            0x0654, // ARABIC HAMZA ABOVE\n            0x0655, // ARABIC HAMZA BELOW\n            0x0656, // ARABIC SUBSCRIPT ALEF\n            0x0657, // ARABIC INVERTED DAMMA\n            0x0658, // ARABIC MARK NOON GHUNNA\n            0x0670, // ARABIC LETTER SUPERSCRIPT ALEF\n            0x06d6, // ARABIC SMALL HIGH LIGATURE SAD WITH LAM WITH ALEF MAKSURA\n            0x06d7, // ARABIC SMALL HIGH LIGATURE QAF WITH LAM WITH ALEF MAKSURA\n            0x06d8, // ARABIC SMALL HIGH MEEM INITIAL FORM\n            0x06d9, // ARABIC SMALL HIGH LAM ALEF\n            0x06da, // ARABIC SMALL HIGH JEEM\n            0x06db, // ARABIC SMALL HIGH THREE DOTS\n            0x06dc, // ARABIC SMALL HIGH SEEN\n            0x06df, // ARABIC SMALL HIGH ROUNDED ZERO\n            0x06e0, // ARABIC SMALL HIGH UPRIGHT RECTANGULAR ZERO\n            0x06e1, // ARABIC SMALL HIGH DOTLESS HEAD OF KHAH\n            0x06e2, // ARABIC SMALL HIGH MEEM ISOLATED FORM\n            0x06e3, // ARABIC SMALL LOW SEEN\n            0x06e4, // ARABIC SMALL HIGH MADDA\n            0x06e7, // ARABIC SMALL HIGH YEH\n            0x06e8, // ARABIC SMALL HIGH NOON\n            0x06ea, // ARABIC EMPTY CENTRE LOW STOP\n            0x06eb, // ARABIC EMPTY CENTRE HIGH STOP\n            0x06ec, // ARABIC ROUNDED HIGH STOP WITH FILLED CENTRE\n            0x06ed // ARABIC SMALL LOW MEEM\n        ];\n    }\n\n    /**\n     * Converts isolated arabic characters into their contextual form.\n     *\n     * @param input String with isolated arabic characters.\n     */\n    convert(input: string): string {\n        let output = \"\";\n        for (let i = 0; i < input.length; ++i) {\n            const currentCodePoint = input.charCodeAt(i);\n\n            // Only process arabic characters in the map.\n            if (this.isArabicCharacter(currentCodePoint)) {\n                // Find the first previous non-neutral character.\n                let prevIndex = i - 1;\n                for (; prevIndex >= 0; --prevIndex) {\n                    if (!this.isNeutral(input.charCodeAt(prevIndex))) {\n                        break;\n                    }\n                }\n\n                // Check if the previous character has ligatures with following characters.\n                let prevCodePoint = prevIndex >= 0 ? input.charCodeAt(prevIndex) : undefined;\n                if (prevCodePoint !== undefined) {\n                    const prevMap = this.getCharacterMap(prevCodePoint);\n                    if (\n                        prevMap === undefined ||\n                        (prevMap[ContextualForm.Initial] === undefined &&\n                            prevMap[ContextualForm.Medial] === undefined)\n                    ) {\n                        prevCodePoint = undefined;\n                    }\n                }\n\n                // Find the first next non-neutral character.\n                let nextIndex = i + 1;\n                for (; nextIndex < input.length; ++nextIndex) {\n                    if (!this.isNeutral(input.charCodeAt(nextIndex))) {\n                        break;\n                    }\n                }\n\n                // Check if the next character has ligatures with previous characters.\n                let nextCodePoint =\n                    nextIndex < input.length ? input.charCodeAt(nextIndex) : undefined;\n                if (nextCodePoint !== undefined) {\n                    const nextMap = this.getCharacterMap(nextCodePoint);\n                    if (\n                        nextMap === undefined ||\n                        (nextMap[ContextualForm.Medial] === undefined &&\n                            nextMap[ContextualForm.Final] === undefined)\n                    ) {\n                        nextCodePoint = undefined;\n                    }\n                }\n\n                // Check for Lam Alef combinated forms.\n                if (\n                    currentCodePoint === 0x0644 &&\n                    nextCodePoint !== undefined &&\n                    (nextCodePoint === 0x0622 ||\n                        nextCodePoint === 0x0623 ||\n                        nextCodePoint === 0x0625 ||\n                        nextCodePoint === 0x0627)\n                ) {\n                    const combinedMap = this.getCombinedCharacterMap(\n                        currentCodePoint,\n                        nextCodePoint\n                    )!;\n                    if (prevCodePoint !== undefined) {\n                        output += String.fromCharCode(combinedMap[CombinedForm.Connected]!);\n                    } else {\n                        output += String.fromCharCode(combinedMap[CombinedForm.Isolated]!);\n                    }\n\n                    // Skip the next character and continue.\n                    ++i;\n                    continue;\n                }\n\n                // Check for single character contextual forms.\n                const map = this.getCharacterMap(currentCodePoint)!;\n                // Intermediate.\n                if (\n                    prevCodePoint !== undefined &&\n                    nextCodePoint !== undefined &&\n                    map[ContextualForm.Medial] !== undefined\n                ) {\n                    output += String.fromCharCode(map[ContextualForm.Medial]!);\n                }\n                // Final.\n                else if (prevCodePoint !== undefined && map[ContextualForm.Final] !== undefined) {\n                    output += String.fromCharCode(map[ContextualForm.Final]!);\n                }\n                // Initial.\n                else if (nextCodePoint !== undefined && map[ContextualForm.Initial] !== undefined) {\n                    output += String.fromCharCode(map[ContextualForm.Initial]!);\n                }\n                // Isolated.\n                else {\n                    output += String.fromCharCode(currentCodePoint);\n                }\n            } else {\n                output += String.fromCharCode(currentCodePoint);\n            }\n        }\n\n        return output;\n    }\n\n    private isArabicCharacter(codePoint: number): boolean {\n        return this.m_singleCharactersMap.has(codePoint);\n    }\n\n    private getCharacterMap(codePoint: number): ReadonlyArray<number | undefined> | undefined {\n        return this.m_singleCharactersMap.get(codePoint);\n    }\n\n    private getCombinedCharacterMap(\n        codePoint: number,\n        nextCodePoint: number\n    ): ReadonlyArray<number | undefined> | undefined {\n        const map = this.m_combinedCharactersMap.get(codePoint);\n        if (map !== undefined) {\n            return map.get(nextCodePoint);\n        }\n        return undefined;\n    }\n\n    private isNeutral(codePoint: number): boolean {\n        for (const character of this.m_neutralCharacters) {\n            if (character === codePoint) {\n                return true;\n            }\n        }\n        return false;\n    }\n}\n","/*\n * Copyright (C) 2020 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { DisplacementFeature, hasDisplacementFeature } from \"@here/harp-materials\";\nimport { assert } from \"@here/harp-utils\";\nimport * as THREE from \"three\";\nimport { DisplacedBufferAttribute } from \"./DisplacedBufferAttribute\";\nimport { DisplacedBufferGeometry, DisplacementRange } from \"./DisplacedBufferGeometry\";\n\nfunction isDisplacementMaterial(material: any): material is DisplacementFeature {\n    const isDisplacementFeature = hasDisplacementFeature(material);\n    assert(isDisplacementFeature, \"Material does not support displacement maps.\");\n    return isDisplacementFeature;\n}\n\nfunction isDataTextureMap(map?: THREE.Texture | null): map is THREE.DataTexture {\n    if (!map) {\n        return false;\n    }\n    const isDataTexture = map instanceof THREE.DataTexture;\n    assert(isDataTexture, \"Material does not support displacement maps.\");\n    return isDataTexture;\n}\n\n/**\n * Mesh with geometry modified by a displacement map. Overrides raycasting behaviour to apply\n * displacement map before intersection test.\n * @internal\n */\nexport class DisplacedMesh extends THREE.Mesh {\n    private static displacedPositions?: DisplacedBufferAttribute;\n\n    private static getDisplacedPositionAttribute(\n        geometry: THREE.BufferGeometry,\n        displacementMap: THREE.DataTexture\n    ): DisplacedBufferAttribute {\n        // Reuse same buffer attribute for all meshes since it's only needed during the\n        // intersection test.\n        if (!DisplacedMesh.displacedPositions) {\n            DisplacedMesh.displacedPositions = new DisplacedBufferAttribute(\n                geometry.attributes.position,\n                geometry.attributes.normal,\n                geometry.attributes.uv,\n                displacementMap\n            );\n        } else {\n            DisplacedMesh.displacedPositions.reset(\n                geometry.attributes.position,\n                geometry.attributes.normal,\n                geometry.attributes.uv,\n                displacementMap\n            );\n        }\n        return DisplacedMesh.displacedPositions;\n    }\n\n    displacedGeometry?: DisplacedBufferGeometry;\n\n    /**\n     * Creates an instance of displaced mesh.\n     * @param geometry Original geometry to displace.\n     * @param material Material(s) to be used by the mesh. All must have the same displacement map.\n     * @param m_getDisplacementRange Displacement values range getter.\n     * @param [m_raycastStrategy] Function that will be used to find ray intersections. If not\n     * provided, THREE.Mesh's raycast will be used.\n     */\n    constructor(\n        geometry: THREE.BufferGeometry,\n        material: THREE.Material | THREE.Material[],\n        private m_getDisplacementRange: () => DisplacementRange,\n        private m_raycastStrategy?: (\n            mesh: THREE.Mesh,\n            raycaster: THREE.Raycaster,\n            intersects: THREE.Intersection[]\n        ) => void\n    ) {\n        super(geometry, material);\n    }\n\n    // HARP-9585: Override of base class method, however tslint doesn't recognize it as such.\n    // tslint:disable-next-line: explicit-override\n    raycast(raycaster: THREE.Raycaster, intersects: THREE.Intersection[]): void {\n        // All materials in the object are expected to have the same displacement map.\n        const firstMaterial = this.firstMaterial;\n\n        // Use default raycasting implementation if there's no displacement material or if there's\n        // no displacement map or its type is not supported.\n        if (\n            !isDisplacementMaterial(firstMaterial) ||\n            !isDataTextureMap(firstMaterial.displacementMap)\n        ) {\n            super.raycast(raycaster, intersects);\n            return;\n        }\n        const displacementMap = firstMaterial.displacementMap;\n        const displacementRange = { ...this.m_getDisplacementRange() };\n\n        assert(this.geometry instanceof THREE.BufferGeometry, \"Unsupported geometry type.\");\n        const geometry = this.geometry as THREE.BufferGeometry;\n        if (this.displacedGeometry) {\n            this.displacedGeometry.reset(geometry, displacementMap, displacementRange);\n        } else {\n            this.displacedGeometry = new DisplacedBufferGeometry(\n                geometry,\n                displacementMap,\n                displacementRange,\n                DisplacedMesh.getDisplacedPositionAttribute(geometry, displacementMap)\n            );\n        }\n\n        // Replace the original geometry by the displaced one only during the intersection test.\n        this.geometry = this.displacedGeometry;\n        if (this.m_raycastStrategy) {\n            this.m_raycastStrategy(this, raycaster, intersects);\n        } else {\n            super.raycast(raycaster, intersects);\n        }\n        super.geometry = this.displacedGeometry.originalGeometry;\n    }\n\n    private get firstMaterial(): THREE.Material {\n        return Array.isArray(this.material) ? this.material[0] : this.material;\n    }\n}\n","/*\n * Copyright (C) 2020 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { Vector3Like } from \"@here/harp-geoutils\";\nimport { assert } from \"@here/harp-utils\";\n\n// Offsets for the fields stored in cache for each vertex.\nenum Field {\n    VertexId = 0,\n    OlderIdx, // Index in cache of the immediately older vertex.\n    NewerIdx, // Index in cache of the immediately newer vertex.\n    X,\n    Y,\n    Z,\n    Count\n}\n\nconst Invalid: number = -1;\n\n/**\n * Compact vertex LRU Cache for on the fly temporary mesh transformations.\n * @internal\n */\nexport class VertexCache {\n    private m_cache: number[] = []; // Stores all fields for every cached vertex (see Field).\n    private m_vertexCount: number = 0;\n    private m_oldestIdx: number = 0;\n    private m_newestIdx: number = 0;\n\n    /**\n     * Creates a new cache with the specified maximum size.\n     * @param maxVertexCount The maximum number of vertices the cache will store.\n     */\n    constructor(readonly maxVertexCount: number) {\n        this.m_cache.length = this.maxVertexCount * Field.Count;\n        this.clear();\n    }\n\n    /**\n     * Clears the vertex cache.\n     */\n    clear() {\n        this.m_cache.fill(Invalid);\n        this.m_vertexCount = 0;\n    }\n\n    /**\n     * Gets a vertex from cache.\n     * @param vertexId The id of the vertex to get.\n     * @param vertex The vertex coordinates will be set here if found.\n     * @returns whether the vertex was found on cache.\n     */\n    get(vertexId: number, vertex: Vector3Like): boolean {\n        const vertexIdx = this.find(vertexId);\n        if (vertexIdx === undefined) {\n            return false;\n        }\n        this.promoteEntry(vertexIdx);\n        this.getVertex(vertexIdx, vertex);\n        return true;\n    }\n\n    /**\n     * Sets a vertex in cache. It's assumed there's no vertex with the same id already in cache.\n     * @param vertexId The vertex id.\n     * @param vertex The vertex coordinates.\n     */\n    set(vertexId: number, vertex: Vector3Like) {\n        let vertexIdx = Invalid;\n        if (this.m_vertexCount < this.maxVertexCount) {\n            vertexIdx = this.m_vertexCount * Field.Count;\n            this.m_vertexCount++;\n        } else {\n            vertexIdx = this.m_oldestIdx;\n        }\n        if (this.m_vertexCount === 1) {\n            this.m_oldestIdx = this.m_newestIdx = vertexIdx;\n        } else {\n            this.promoteEntry(vertexIdx);\n        }\n        this.setVertex(vertexIdx, vertexId, vertex);\n    }\n\n    private find(vertexId: number): number | undefined {\n        const size = this.m_cache.length;\n        for (let i = 0; i < size; i += Field.Count) {\n            if (this.m_cache[i] === vertexId) {\n                return i;\n            }\n        }\n        return undefined;\n    }\n    private promoteEntry(vertexIdx: number): void {\n        if (vertexIdx === this.m_newestIdx) {\n            return;\n        } // already newest, nothing to do\n        // re-link newer and older items\n        const newerIdx = this.getNewerIdx(vertexIdx);\n        const olderIdx = this.getOlderIdx(vertexIdx);\n        if (newerIdx !== Invalid) {\n            assert(this.getOlderIdx(newerIdx) === vertexIdx);\n            this.setOlderIdx(newerIdx, olderIdx);\n        }\n        if (olderIdx !== Invalid) {\n            assert(this.getNewerIdx(olderIdx) === vertexIdx);\n            this.setNewerIdx(olderIdx, newerIdx);\n        }\n        if (vertexIdx === this.m_oldestIdx) {\n            this.m_oldestIdx = newerIdx;\n        }\n        // re-link ourselves\n        this.setNewerIdx(vertexIdx, Invalid);\n        this.setOlderIdx(vertexIdx, this.m_newestIdx);\n        // finally, set ourselves as the newest entry\n        assert(this.m_newestIdx !== Invalid);\n        assert(this.getNewerIdx(this.m_newestIdx) === Invalid);\n        this.setNewerIdx(this.m_newestIdx, vertexIdx);\n        this.m_newestIdx = vertexIdx;\n    }\n    private getOlderIdx(vertexIdx: number): number {\n        return this.m_cache[vertexIdx + Field.OlderIdx];\n    }\n    private setOlderIdx(vertexIdx: number, olderIdx: number): void {\n        this.m_cache[vertexIdx + Field.OlderIdx] = olderIdx;\n    }\n    private getNewerIdx(vertexIdx: number): number {\n        return this.m_cache[vertexIdx + Field.NewerIdx];\n    }\n    private setNewerIdx(vertexIdx: number, newerIdx: number): void {\n        this.m_cache[vertexIdx + Field.NewerIdx] = newerIdx;\n    }\n    private getVertex(vertexIdx: number, vertex: Vector3Like): void {\n        vertex.x = this.m_cache[vertexIdx + Field.X];\n        vertex.y = this.m_cache[vertexIdx + Field.Y];\n        vertex.z = this.m_cache[vertexIdx + Field.Z];\n    }\n    private setVertex(vertexIdx: number, vertexId: number, vertex: Vector3Like): void {\n        this.m_cache[vertexIdx] = vertexId;\n        this.m_cache[vertexIdx + Field.X] = vertex.x;\n        this.m_cache[vertexIdx + Field.Y] = vertex.y;\n        this.m_cache[vertexIdx + Field.Z] = vertex.z;\n    }\n}\n","/*\n * Copyright (C) 2020 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { OrientedBox3 } from \"@here/harp-geoutils\";\nimport { SolidLineMaterial } from \"@here/harp-materials\";\nimport { assert } from \"@here/harp-utils\";\nimport * as THREE from \"three\";\nimport { displaceBox, DisplacedBufferGeometry, DisplacementRange } from \"./DisplacedBufferGeometry\";\n\nconst tmpSphere = new THREE.Sphere();\nconst tmpInverseMatrix = new THREE.Matrix4();\nconst tmpRay = new THREE.Ray();\nconst tmpLine1 = new THREE.Line3();\nconst tmpBox = new THREE.Box3();\nconst tmpOBB = new OrientedBox3();\nconst tmpPlane = new THREE.Plane();\nconst tmpV1 = new THREE.Vector3();\nconst tmpV2 = new THREE.Vector3();\nconst tmpV3 = new THREE.Vector3();\nconst tmpV4 = new THREE.Vector3();\n\n// Strides to access the index buffer. See [[createLineGeometry]].\n// Stride between the start vertex indices of consecutive segments, each one made of 2 triangles.\nconst SEGMENT_STRIDE = 6;\n// Stride between the start and end vertex indices of a segment. Vertices are duplicated so that\n// each copy is extruded in opposite directions in the vertex shader.\nconst VERTEX_STRIDE = 2;\n\nfunction isSolidLineMaterial(material: THREE.Material | THREE.Material[]): boolean {\n    return Array.isArray(material)\n        ? material.every(mat => mat instanceof SolidLineMaterial)\n        : material instanceof SolidLineMaterial;\n}\n\n/**\n * Computes the bounding sphere of the part of a given geometry corresponding to a feature.\n * @param geometry The geometry containing the feature.\n * @param featureBeginIndex The index where the feature starts in the geometry's indices attribute.\n * @param featureEndIndex The index where the feature end in the geometry's indices attribute.\n * @returns The feature bounding sphere.\n */\nfunction computeFeatureBoundingSphere(\n    geometry: THREE.BufferGeometry | DisplacedBufferGeometry,\n    featureBeginIndex: number,\n    featureEndIndex: number\n): THREE.Sphere {\n    let displacementRange: DisplacementRange | undefined;\n\n    if (geometry instanceof DisplacedBufferGeometry) {\n        displacementRange = geometry.displacementRange;\n        geometry = geometry.originalGeometry;\n    }\n\n    const attributes = geometry.attributes;\n    const pos = attributes.position as THREE.BufferAttribute;\n    const indices = geometry.index!.array;\n    const sphere = new THREE.Sphere();\n    const bbox = tmpBox.makeEmpty();\n    const vertex = tmpV1;\n\n    // First compute the bounding box for all line segments.\n    for (let i = featureBeginIndex; i < featureEndIndex; i += SEGMENT_STRIDE) {\n        bbox.expandByPoint(vertex.fromBufferAttribute(pos, indices[i]));\n        bbox.expandByPoint(vertex.fromBufferAttribute(pos, indices[i + VERTEX_STRIDE]));\n    }\n\n    if (displacementRange) {\n        // If geometry is displaced, expand the bounding box to cover the whole displacement range,\n        // and return the sphere bounding the box. This is a coarse estimation, but avoids having\n        // to displace all vertices.\n        // All normals in the geometry are assumed to be the same or close enough so that any of\n        // them can be used as displacement direction. For sphere projection, the surface normals\n        // within a tile are approximately the same from level 4 onwards. Here are some examples of\n        // the minimum dot product between normals in a tile (normals at tile's opposite corners):\n        // TILE: (6,9,4): 0.9806892129880023\n        // TILE: (12,17,5): 0.9946739445457075\n        // TILE: (25,34,6): 0.9986326302953471\n        // TILE: (50,68,7): 0.9996583822992287\n        // TILE: (1620,2199,12): 0.9999996706085572\n        const normal = tmpV2;\n        normal.fromBufferAttribute(geometry.attributes.normal as THREE.BufferAttribute, 0);\n        return displaceBox(bbox, displacementRange, normal).getBoundingSphere(sphere);\n    }\n\n    return bbox.getBoundingSphere(sphere);\n}\n\n/**\n * Finds the intersection of a ray with a extruded line.\n * @param ray Intersection ray in object's local space.\n * @param line The centerline.\n * @param vExtrusion Line extrusion vector.\n * @param normal Extrusion plane normal.\n * @param hWidth Extrusion half width.\n * @returns Distance of the extruded line intersection to the ray origin.\n */\nfunction intersectExtrudedLine(\n    ray: THREE.Ray,\n    line: THREE.Line3,\n    vExtrusion: THREE.Vector3,\n    normal: THREE.Vector3,\n    hWidth: number\n): number {\n    const obb = tmpOBB;\n    line.getCenter(obb.position);\n    line.delta(obb.xAxis).normalize();\n    obb.yAxis.copy(vExtrusion);\n    obb.zAxis.copy(normal);\n    obb.extents.set(line.distance() / 2, hWidth, hWidth);\n\n    if (obb.contains(ray.origin)) {\n        return 0;\n    }\n    return obb.intersectsRay(ray) ?? Infinity;\n}\n\n/**\n * Finds the intersection of a ray with the closest end cap of a extruded line.\n * @param ray Intersection ray in object's local space.\n * @param line The centerline.\n * @param hWidth Extrusion half width.\n * @returns Distance of the end cap intersection to the ray origin.\n */\nfunction intersectClosestEndCap(ray: THREE.Ray, line: THREE.Line3, hWidth: number): number {\n    const sphere = new THREE.Sphere(line.start, hWidth);\n    const startCapT = sphere.containsPoint(ray.origin)\n        ? 0\n        : ray.intersectSphere(sphere, tmpV4)\n        ? tmpV4.sub(ray.origin).length()\n        : Infinity;\n    sphere.center.copy(line.end);\n    const endCapT = sphere.containsPoint(ray.origin)\n        ? 0\n        : ray.intersectSphere(sphere, tmpV4)\n        ? tmpV4.sub(ray.origin).length()\n        : Infinity;\n    return Math.min(startCapT, endCapT);\n}\n\n/**\n * Intersects line\n * @param ray Intersection ray in object's local space.\n * @param line The line to intersect.\n * @param vExtrusion Line extrusion vector.\n * @param hWidth The line's extrusion half width.\n * @param hWidthSq The line's extrusion half width squared.\n * @param plane The extrusion plane.\n * @param interPlane The intersection of the ray with the extrusion plane.\n * @param outInterLine The ray intersetion with the extruded line.\n * @returns true if ray intersects the extruded line, false otherwise.\n */\nfunction intersectLine(\n    ray: THREE.Ray,\n    line: THREE.Line3,\n    vExtrusion: THREE.Vector3,\n    hWidth: number,\n    hWidthSq: number,\n    plane: THREE.Plane,\n    interPlane: THREE.Vector3,\n    outInterLine: THREE.Vector3\n): boolean {\n    if (interPlane.equals(ray.origin) && ray.direction.dot(plane.normal) === 0) {\n        // Corner case: ray is coplanar to extruded line, find distance to extruded line sides\n        // and end caps.\n        const extrLineT = intersectExtrudedLine(ray, line, vExtrusion, plane.normal, hWidth);\n        const endCapT = intersectClosestEndCap(ray, line, hWidth);\n\n        const minT = Math.min(extrLineT, endCapT);\n        if (minT === Infinity) {\n            return false;\n        }\n        ray.at(minT, outInterLine);\n        return true;\n    }\n\n    // The plain intersection is also a line intersection only if it's closer to the line\n    // than the extrusion half width.\n    const distSq = interPlane.distanceToSquared(line.closestPointToPoint(interPlane, true, tmpV4));\n\n    if (distSq > hWidthSq) {\n        return false;\n    }\n    outInterLine.copy(interPlane);\n    return true;\n}\n\n/**\n * Finds the intersections of a ray with a partition of a solid line mesh representing a feature.\n * @param mesh The mesh whose intersections will be found.\n * @param raycaster Contains the intersection ray.\n * @param localRay Same ray as raycaster.ray but in object's local space.\n * @param halfWidth The line's extrusion half width.\n * @param lHalfWidth The line's extrusion half width in mesh local space.\n * @param lHalfWidthSq The line's extrusion half width squared in mesh local space.\n * @param beginIdx The index where the feature starts in the mesh geometry's indices attribute.\n * @param endIdx The index where the feature end in the mesh geometry's indices attribute.\n * @param bSphere The feature bounding sphere.\n * @param intersections Array where all intersections found between ray and feature will be pushed.\n */\nfunction intersectFeature(\n    mesh: THREE.Mesh,\n    raycaster: THREE.Raycaster,\n    localRay: THREE.Ray,\n    halfWidth: number,\n    lHalfWidth: number,\n    lHalfWidthSq: number,\n    beginIdx: number,\n    endIdx: number,\n    bSphere: THREE.Sphere,\n    intersections: THREE.Intersection[]\n): void {\n    const vExt = tmpV1;\n    const plane = tmpPlane;\n    const interPlane = tmpV2;\n    const line = tmpLine1;\n\n    const geometry = mesh.geometry as THREE.BufferGeometry;\n    const attributes = geometry.attributes;\n    const position = attributes.position as THREE.BufferAttribute;\n    const bitangent = attributes.bitangent;\n    const indices = geometry.index!.array;\n\n    tmpSphere.copy(bSphere);\n    tmpSphere.applyMatrix4(mesh.matrixWorld);\n    tmpSphere.radius += halfWidth;\n\n    if (!raycaster.ray.intersectsSphere(tmpSphere)) {\n        return;\n    }\n\n    for (let i = beginIdx; i < endIdx; i += SEGMENT_STRIDE) {\n        const a = indices[i];\n        const b = indices[i + VERTEX_STRIDE];\n\n        // Find the plane containing the line segment, using the segment start, end and extrusion\n        // vector.\n        line.start.fromBufferAttribute(position, a);\n        line.end.fromBufferAttribute(position, b);\n        vExt.set(bitangent.getX(a), bitangent.getY(a), bitangent.getZ(a)).normalize();\n        plane.setFromCoplanarPoints(line.start, tmpV3.copy(line.start).add(vExt), line.end);\n        if (plane.normal.manhattanLength() === 0) {\n            // Invalid plane, coplanar points are actually collinear because:\n            // a) The line segment has length 0.\n            // b) The extrusion vector has length 0.\n            // c) The extrusion and segment directions are the same.\n            // In any case it's a degenerate segment, skip it.\n            continue;\n        }\n\n        // The ray intersection if any, will be on the extrusion plane.\n        if (!localRay.intersectPlane(plane, interPlane)) {\n            continue;\n        }\n\n        const interLine = tmpV3;\n        if (\n            !intersectLine(\n                localRay,\n                line,\n                vExt,\n                lHalfWidth,\n                lHalfWidthSq,\n                plane,\n                interPlane,\n                interLine\n            )\n        ) {\n            continue;\n        }\n\n        // Move back to world space for distance calculation\n        const interLineWorld = interLine.applyMatrix4(mesh.matrixWorld);\n\n        const distance = raycaster.ray.origin.distanceTo(interLineWorld);\n\n        if (distance < raycaster.near || distance > raycaster.far) {\n            continue;\n        }\n\n        intersections.push({\n            distance,\n            point: interLineWorld.clone(),\n            index: i,\n            object: mesh\n        });\n    }\n}\n\nconst singleFeatureStart = [0];\nconst MAX_SCALE_RATIO_DIFF = 1e-2;\n\n/**\n * Finds the intersections of a ray with a group within a solid line mesh.\n * @param mesh The mesh whose intersections will be found.\n * @param material The material used by the group inside the mesh.\n * @param raycaster  Contains the intersection ray.\n * @param localRay Same ray as raycaster.ray but in object's local space.\n * @param firstFeatureIdx Index of the first feature in the group.\n * @param groupEndIdx Index of the last vertex in the group.\n * @param intersections  Array where all intersections found between ray and group will be pushed.\n * @returns The next feature index after the group.\n */\nfunction intersectGroup(\n    mesh: THREE.Mesh,\n    material: THREE.Material,\n    raycaster: THREE.Raycaster,\n    localRay: THREE.Ray,\n    firstFeatureIdx: number,\n    groupEndIdx: number,\n    intersections: THREE.Intersection[]\n): number {\n    const bVolumes = mesh.userData.feature.boundingVolumes;\n    assert(mesh.geometry instanceof THREE.BufferGeometry, \"Unsupported geometry type.\");\n    const geometry = mesh.geometry as THREE.BufferGeometry;\n    assert(isSolidLineMaterial(material), \"Unsupported material type\");\n    const solidLineMaterial = material as SolidLineMaterial;\n\n    const halfWidth = (solidLineMaterial.lineWidth + solidLineMaterial.outlineWidth) / 2;\n    // Assumption: scaling is uniform or close enough to use a local width independent of direction.\n    assert(Math.abs(1 - mesh.scale.x / mesh.scale.y) < MAX_SCALE_RATIO_DIFF);\n    assert(Math.abs(1 - mesh.scale.x / mesh.scale.z) < MAX_SCALE_RATIO_DIFF);\n    assert(Math.abs(1 - mesh.scale.y / mesh.scale.z) < MAX_SCALE_RATIO_DIFF);\n    const localHalfWidth = halfWidth / ((mesh.scale.x + mesh.scale.y + mesh.scale.z) / 3);\n    const localHalfWidthSq = localHalfWidth * localHalfWidth;\n    const featureStarts = mesh.userData.feature.starts ?? singleFeatureStart;\n\n    let featureIdx = firstFeatureIdx;\n    let beginIdx = featureStarts[featureIdx];\n    const lastFeatureIdx = featureStarts.length - 1;\n\n    while (beginIdx < groupEndIdx) {\n        const bVolumeIdx = featureIdx;\n        const endIdx = featureIdx < lastFeatureIdx ? featureStarts[++featureIdx] : groupEndIdx;\n        if (bVolumeIdx >= bVolumes.length) {\n            // Geometry might be extruded on any direction. To avoid extruding all vertices, the\n            // centerline geometry is used to compute a bounding sphere whose radius is later\n            // expanded by the extrusion half width to ensure it contains the extruded geometry.\n            bVolumes.push(computeFeatureBoundingSphere(geometry, beginIdx, endIdx));\n        }\n        intersectFeature(\n            mesh,\n            raycaster,\n            localRay,\n            halfWidth,\n            localHalfWidth,\n            localHalfWidthSq,\n            beginIdx,\n            endIdx,\n            bVolumes[bVolumeIdx],\n            intersections\n        );\n        beginIdx = endIdx;\n    }\n    return featureIdx;\n}\n\n/**\n * Mesh formed by extruding a polyline in the shaders. Overrides raycasting behaviour to account for\n * extrusion, see [[SolidLineMaterial]].\n * @internal\n */\nexport class SolidLineMesh extends THREE.Mesh {\n    /**\n     * Finds the intersections of a ray with a mesh, assuming the mesh is a polyline extruded in\n     * the shaders (see [[SolidLineMaterial]]).\n     * @param mesh The mesh whose intersections will be found.\n     * @param raycaster Contains the intersection ray.\n     * @param intersections Array where all intersections found between ray and mesh will be pushed.\n     */\n    static raycast(\n        mesh: THREE.Mesh,\n        raycaster: THREE.Raycaster,\n        intersections: THREE.Intersection[]\n    ): void {\n        assert(mesh.geometry instanceof THREE.BufferGeometry, \"Unsupported geometry type\");\n        const geometry = mesh.geometry as THREE.BufferGeometry;\n        assert(geometry.index !== null, \"Geometry does not have indices\");\n        const matrixWorld = mesh.matrixWorld;\n\n        tmpInverseMatrix.getInverse(matrixWorld);\n        const localRay = tmpRay.copy(raycaster.ray).applyMatrix4(tmpInverseMatrix);\n\n        // Test intersection of ray with each of the features within the mesh.\n        if (!mesh.userData.feature) {\n            mesh.userData.feature = {};\n        }\n        if (!mesh.userData.feature.boundingVolumes) {\n            mesh.userData.feature.boundingVolumes = [];\n        }\n        const indices = geometry.index!.array;\n\n        if (Array.isArray(mesh.material)) {\n            let nextFeatureIdx = 0;\n            for (const group of geometry.groups) {\n                const material = mesh.material[group.materialIndex!];\n                const groupEndIdx = group.start + group.count;\n                nextFeatureIdx = intersectGroup(\n                    mesh,\n                    material,\n                    raycaster,\n                    localRay,\n                    nextFeatureIdx,\n                    groupEndIdx,\n                    intersections\n                );\n            }\n        } else {\n            intersectGroup(\n                mesh,\n                mesh.material,\n                raycaster,\n                localRay,\n                0,\n                indices.length,\n                intersections\n            );\n        }\n    }\n\n    /**\n     * Creates an instance of SolidLineMesh.\n     * @param geometry Mesh geometry.\n     * @param material Material(s) to be used by the mesh. They must be instances of\n     * [[SolidLineMaterial]].\n     */\n    constructor(geometry: THREE.BufferGeometry, material: THREE.Material | THREE.Material[]) {\n        super(geometry, material);\n    }\n\n    // HARP-9585: Override of base class method, however tslint doesn't recognize it as such.\n    // tslint:disable-next-line: explicit-override\n    raycast(raycaster: THREE.Raycaster, intersects: THREE.Intersection[]): void {\n        SolidLineMesh.raycast(this, raycaster, intersects);\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { Vector3Like } from \"@here/harp-geoutils\";\nimport * as THREE from \"three\";\n\n/**\n * This path in world coordinates is projected to screen space and blocks all other labels.\n *\n * It could be used for example:\n * - Border rejects labels.\n * - Route blocks street labels from being rendered underneath.\n *\n * Could potentially be expanded in future to have a priority, however for now, this isn't required.\n */\n\nexport class PathBlockingElement {\n    /**\n     * Note, [[screenSpaceLines]] is only used as a performance improvement and contains no\n     * useful information. They are used to contain the screen space coordinates of the\n     * points. By allocating the space here, we avoid per frame allocations, see\n     * [[TextElementsRenderer.prepopulateScreenWithBlockingElements]].\n     */\n    readonly screenSpaceLines: THREE.Line3[];\n\n    /**\n     * Constructs a path from a list of points.\n     * Pre allocates the [[screenSpaceLines]] used to render.\n     * @param points Points in world coordinates.\n     */\n    constructor(readonly points: Vector3Like[]) {\n        this.screenSpaceLines = new Array<THREE.Line3>(points.length >= 2 ? points.length - 1 : 0);\n        for (let i = 0; i < this.screenSpaceLines.length; i++) {\n            this.screenSpaceLines[i] = new THREE.Line3(new THREE.Vector3(), new THREE.Vector3());\n        }\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\nimport { Math2D } from \"@here/harp-utils\";\nimport * as THREE from \"three\";\n\nimport { MemoryUsage } from \"@here/harp-text-canvas\";\nimport { getPixelFromImage, screenToUvCoordinates } from \"./PixelPicker\";\n\n/**\n * Declares an interface for a `struct` containing a [[BoxBuffer]]'s attribute state information.\n */\nexport interface State {\n    positionAttributeCount: number;\n    colorAttributeCount: number;\n    uvAttributeCount: number;\n    indexAttributeCount: number;\n    pickInfoCount: number;\n}\n\n/**\n * Initial number of boxes in BoxBuffer.\n */\nconst START_BOX_BUFFER_SIZE = 0;\n\n/**\n * Maximum number of boxes in BoxBuffer.\n */\nconst MAX_BOX_BUFFER_SIZE = 32 * 1024;\n\n/**\n * Number of vertices per box/glyph element: 4 corners.\n */\nconst NUM_VERTICES_PER_ELEMENT = 4;\n\n/**\n * Number of indices added per box/glyph: 2 triangles, 6 indices.\n */\nconst NUM_INDICES_PER_ELEMENT = 6;\n\n/**\n * Number of values per position.\n */\nconst NUM_POSITION_VALUES_PER_VERTEX = 3;\n\n/**\n * Number of values per color.\n */\nconst NUM_COLOR_VALUES_PER_VERTEX = 4;\n\n/**\n * Number of values per UV.\n */\nconst NUM_UV_VALUES_PER_VERTEX = 4;\n\n/**\n * Number of values per index.\n */\nconst NUM_INDEX_VALUES_PER_VERTEX = 1;\n\n/**\n * Number of bytes for float in an Float32Array.\n */\nconst NUM_BYTES_PER_FLOAT = 4;\n\n/**\n * Number of bytes for integer number in an UInt32Array.\n */\nconst NUM_BYTES_PER_INT32 = 4;\n\n/**\n * SubClass of [[THREE.Mesh]] to identify meshes that have been created by [[BoxBuffer]] and\n * [[TextBuffer]]. Add the isEmpty flag to quickly test for empty meshes.\n */\nexport class BoxBufferMesh extends THREE.Mesh {\n    constructor(geometry: THREE.BufferGeometry, material: THREE.Material | THREE.Material[]) {\n        super(geometry, material);\n\n        this.type = \"BoxBufferMesh\";\n    }\n\n    /**\n     * A mesh that has no positions and indices set is defined to be empty.\n     *\n     * @returns `True` if no indices have been added to the mesh.\n     */\n    get isEmpty(): boolean {\n        if (this.geometry === undefined) {\n            return true;\n        } else {\n            const bufferGeometry = this.geometry as THREE.BufferGeometry;\n            return bufferGeometry.index === null || bufferGeometry.index.count === 0;\n        }\n    }\n}\n\n/**\n * Buffer for (untransformed) `Box2` objects. Can be used to create a single geometry for screen-\n * aligned boxes, like POIs.\n */\nexport class BoxBuffer {\n    /**\n     * [[BufferAttribute]] holding the `BoxBuffer` position data.\n     */\n    protected positionAttribute?: THREE.BufferAttribute;\n\n    /**\n     * [[BufferAttribute]] holding the `BoxBuffer` color data.\n     */\n    protected colorAttribute?: THREE.BufferAttribute;\n\n    /**\n     * [[BufferAttribute]] holding the `BoxBuffer` uv data.\n     */\n    protected uvAttribute?: THREE.BufferAttribute;\n\n    /**\n     * [[BufferAttribute]] holding the `BoxBuffer` index data.\n     */\n    protected indexAttribute?: THREE.BufferAttribute;\n    protected pickInfos: Array<any | undefined>;\n\n    /**\n     * [[BufferGeometry]] holding all the different [[BufferAttribute]]s.\n     */\n    protected geometry: THREE.BufferGeometry | undefined;\n\n    /**\n     * [[Mesh]] used for rendering.\n     */\n    protected internalMesh: BoxBufferMesh | undefined;\n\n    private m_size: number = 0;\n\n    /**\n     * Creates a new `BoxBuffer`.\n     *\n     * @param material Material to be used for [[Mesh]] of this `BoxBuffer`.\n     * @param renderOrder Optional renderOrder of this buffer.\n     * @param startElementCount Initial number of elements this `BoxBuffer` can hold.\n     * @param maxElementCount Maximum number of elements this `BoxBuffer` can hold.\n     */\n    constructor(\n        readonly material: THREE.Material | THREE.Material[],\n        readonly renderOrder: number = 0,\n        readonly startElementCount = START_BOX_BUFFER_SIZE,\n        readonly maxElementCount = MAX_BOX_BUFFER_SIZE\n    ) {\n        this.resizeBuffer(startElementCount);\n        this.pickInfos = new Array();\n    }\n\n    /**\n     * Duplicate this `BoxBuffer` with same material and renderOrder.\n     *\n     * @returns A clone of this `BoxBuffer`.\n     */\n    clone(): BoxBuffer {\n        return new BoxBuffer(this.material, this.renderOrder);\n    }\n\n    /**\n     * Dispose of the geometry.\n     */\n    dispose() {\n        if (this.geometry !== undefined) {\n            this.geometry.dispose();\n            this.geometry = undefined;\n        }\n        this.internalMesh = undefined;\n    }\n\n    /**\n     * Return the current number of elements the buffer can hold.\n     */\n    get size(): number {\n        return this.m_size;\n    }\n\n    /**\n     * Clear's the `BoxBuffer` attribute buffers.\n     */\n    reset() {\n        if (this.positionAttribute !== undefined) {\n            this.positionAttribute.count = 0;\n            this.colorAttribute!.count = 0;\n            this.uvAttribute!.count = 0;\n            this.indexAttribute!.count = 0;\n            this.pickInfos!.length = 0;\n        }\n    }\n\n    /**\n     * Returns `true` if this `BoxBuffer` can hold the specified amount of glyphs. If the buffer\n     * can only add the glyph by increasing the buffer size, the resize() method is called, which\n     * will then create a new geometry for the mesh.\n     *\n     * @param glyphCount Number of glyphs to be added to the buffer.\n     * @returns `true` if the element (box or glyph) can be added to the buffer, `false` otherwise.\n     */\n    canAddElements(glyphCount = 1): boolean {\n        const indexAttribute = this.indexAttribute!;\n        if (\n            indexAttribute.count + glyphCount * NUM_INDICES_PER_ELEMENT >=\n            indexAttribute.array.length\n        ) {\n            // Too many elements for the current buffer, check if we can resize the buffer.\n            if (indexAttribute.array.length >= this.maxElementCount * NUM_INDICES_PER_ELEMENT) {\n                return false;\n            }\n\n            const newSize = Math.min(this.maxElementCount, this.size === 0 ? 256 : this.size * 2);\n            this.resize(newSize);\n        }\n        return true;\n    }\n\n    /**\n     * Returns this `BoxBuffer`'s attribute [[State]].\n     */\n    saveState(): State {\n        const state: State = {\n            positionAttributeCount: this.positionAttribute!.count,\n            colorAttributeCount: this.colorAttribute!.count,\n            uvAttributeCount: this.uvAttribute!.count,\n            indexAttributeCount: this.indexAttribute!.count,\n            pickInfoCount: this.pickInfos!.length\n        };\n        return state;\n    }\n\n    /**\n     * Store this `BoxBuffer`'s attribute [[State]] to a previously stored one.\n     *\n     * @param state [[State]] struct describing a previous attribute state.\n     */\n    restoreState(state: State) {\n        this.positionAttribute!.count = state.positionAttributeCount;\n        this.colorAttribute!.count = state.colorAttributeCount;\n        this.uvAttribute!.count = state.uvAttributeCount;\n        this.indexAttribute!.count = state.indexAttributeCount;\n        this.pickInfos!.length = state.pickInfoCount;\n    }\n\n    /**\n     * Adds a new box to this `BoxBuffer`.\n     *\n     * @param screenBox [[Math2D.Box]] holding screen coordinates for this box.\n     * @param uvBox [[Math2D.UvBox]] holding uv coordinates for this box.\n     * @param color Box's color.\n     * @param opacity Box's opacity.\n     * @param distance Box's distance to camera.\n     * @param pickInfo Box's picking information.\n     */\n    addBox(\n        screenBox: Math2D.Box,\n        uvBox: Math2D.UvBox,\n        color: THREE.Color,\n        opacity: number,\n        distance: number,\n        pickInfo?: any\n    ): boolean {\n        if (!this.canAddElements()) {\n            return false;\n        }\n\n        const { s0, t0, s1, t1 } = uvBox;\n        const { x, y, w, h } = screenBox;\n\n        const r = Math.round(color.r * 255);\n        const g = Math.round(color.g * 255);\n        const b = Math.round(color.b * 255);\n        const a = Math.round(opacity * 255);\n\n        const positionAttribute = this.positionAttribute!;\n        const colorAttribute = this.colorAttribute!;\n        const uvAttribute = this.uvAttribute!;\n        const indexAttribute = this.indexAttribute!;\n\n        const baseVertex = positionAttribute.count;\n        const baseIndex = indexAttribute.count;\n\n        positionAttribute.setXYZ(baseVertex, x, y, distance);\n        positionAttribute.setXYZ(baseVertex + 1, x + w, y, distance);\n        positionAttribute.setXYZ(baseVertex + 2, x, y + h, distance);\n        positionAttribute.setXYZ(baseVertex + 3, x + w, y + h, distance);\n\n        colorAttribute.setXYZW(baseVertex, r, g, b, a);\n        colorAttribute.setXYZW(baseVertex + 1, r, g, b, a);\n        colorAttribute.setXYZW(baseVertex + 2, r, g, b, a);\n        colorAttribute.setXYZW(baseVertex + 3, r, g, b, a);\n\n        uvAttribute.setXY(baseVertex, s0, t0);\n        uvAttribute.setXY(baseVertex + 1, s1, t0);\n        uvAttribute.setXY(baseVertex + 2, s0, t1);\n        uvAttribute.setXY(baseVertex + 3, s1, t1);\n\n        indexAttribute.setX(baseIndex, baseVertex);\n        indexAttribute.setX(baseIndex + 1, baseVertex + 1);\n        indexAttribute.setX(baseIndex + 2, baseVertex + 2);\n        indexAttribute.setX(baseIndex + 3, baseVertex + 2);\n        indexAttribute.setX(baseIndex + 4, baseVertex + 1);\n        indexAttribute.setX(baseIndex + 5, baseVertex + 3);\n\n        positionAttribute.count += NUM_VERTICES_PER_ELEMENT;\n        colorAttribute.count += NUM_VERTICES_PER_ELEMENT;\n        uvAttribute.count += NUM_VERTICES_PER_ELEMENT;\n        indexAttribute.count += NUM_INDICES_PER_ELEMENT;\n\n        this.pickInfos.push(pickInfo);\n\n        return true;\n    }\n\n    /**\n     * Updates a [[BufferGeometry]] object to reflect the changes in this `TextBuffer`'s attribute\n     * data.\n     */\n    updateBufferGeometry() {\n        const positionAttribute = this.positionAttribute!;\n        const colorAttribute = this.colorAttribute!;\n        const uvAttribute = this.uvAttribute!;\n        const indexAttribute = this.indexAttribute!;\n\n        if (positionAttribute.count > 0) {\n            positionAttribute.needsUpdate = true;\n            positionAttribute.updateRange.offset = 0;\n            positionAttribute.updateRange.count =\n                positionAttribute.count * NUM_VERTICES_PER_ELEMENT;\n        }\n\n        if (colorAttribute.count > 0) {\n            colorAttribute.needsUpdate = true;\n            colorAttribute.updateRange.offset = 0;\n            colorAttribute.updateRange.count = colorAttribute.count * NUM_VERTICES_PER_ELEMENT;\n        }\n\n        if (uvAttribute.count > 0) {\n            uvAttribute.needsUpdate = true;\n            uvAttribute.updateRange.offset = 0;\n            uvAttribute.updateRange.count = uvAttribute.count * NUM_VERTICES_PER_ELEMENT;\n        }\n\n        if (indexAttribute.count > 0) {\n            indexAttribute.needsUpdate = true;\n            indexAttribute.updateRange.offset = 0;\n            indexAttribute.updateRange.count = indexAttribute.count;\n        }\n\n        if (this.geometry !== undefined) {\n            this.geometry.clearGroups();\n            this.geometry.addGroup(0, this.indexAttribute!.count);\n        }\n    }\n\n    /**\n     * Check if the buffer is empty. If it is empty, the memory usage is minimized to reduce\n     * footprint.\n     */\n    cleanUp() {\n        // If there is nothing in this buffer, resize it, it may never be used again.\n        if (this.indexAttribute!.count === 0 && this.size > START_BOX_BUFFER_SIZE) {\n            this.clearAttributes();\n        }\n    }\n\n    /**\n     * Determine if the mesh is empty.\n     */\n    get isEmpty(): boolean {\n        return this.internalMesh!.isEmpty;\n    }\n\n    /**\n     * Get the [[Mesh]] object. The geometry instance of the mesh may change if the buffers are\n     * resized. The mesh, once created, will not change, so it can always be added to the scene.\n     */\n    get mesh(): BoxBufferMesh {\n        if (this.internalMesh === undefined) {\n            this.resize();\n        }\n        return this.internalMesh!;\n    }\n\n    /**\n     * Fill the picking results for the pixel with the given screen coordinate. If multiple\n     * boxes are found, the order of the results is unspecified.\n     *\n     * @param screenPosition Screen coordinate of picking position.\n     * @param pickCallback Callback to be called for every picked element.\n     * @param imageData Image data to test if the pixel is transparent\n     */\n    pickBoxes(\n        screenPosition: THREE.Vector2,\n        pickCallback: (pickData: any | undefined) => void,\n        imageData?: ImageBitmap | ImageData\n    ) {\n        const n = this.pickInfos.length;\n        const pickInfos = this.pickInfos;\n        const positions = this.positionAttribute!;\n        const screenX = screenPosition.x;\n        const screenY = screenPosition.y;\n\n        const canvas = document.createElement(\"canvas\");\n        for (let pickInfoIndex = 0; pickInfoIndex < n; pickInfoIndex++) {\n            const positionIndex = pickInfoIndex * NUM_VERTICES_PER_ELEMENT;\n\n            const minX = positions.getX(positionIndex);\n            if (screenX < minX) {\n                continue;\n            }\n\n            const maxX = positions.getX(positionIndex + 1);\n            if (screenX > maxX) {\n                continue;\n            }\n\n            const minY = positions.getY(positionIndex);\n            if (screenY < minY) {\n                continue;\n            }\n\n            const maxY = positions.getY(positionIndex + 2);\n            if (screenY > maxY) {\n                continue;\n            }\n\n            const box = new Math2D.Box(minX, minY, maxX - minX, maxY - minY);\n            if (\n                imageData !== undefined &&\n                pickInfos[pickInfoIndex].poiInfo !== undefined &&\n                pickInfos[pickInfoIndex].poiInfo.uvBox !== undefined &&\n                this.isPixelTransparent(\n                    imageData,\n                    screenX,\n                    screenY,\n                    box,\n                    pickInfos[pickInfoIndex].poiInfo.uvBox,\n                    canvas\n                )\n            ) {\n                continue;\n            }\n\n            if (pickInfos[pickInfoIndex] !== undefined) {\n                pickCallback(pickInfos[pickInfoIndex]);\n            }\n        }\n    }\n\n    /**\n     * Creates a new [[Geometry]] object from all the attribute data stored in this `BoxBuffer`.\n     * The [[Mesh]] object may be created if it is not initialized already.\n     *\n     * @param newSize Optional number of elements to resize the buffer to.\n     * @param forceResize Optional flag to force a resize even if new size is smaller than before.\n     */\n    resize(newSize?: number, forceResize?: boolean): BoxBufferMesh {\n        if (this.geometry !== undefined) {\n            this.geometry.dispose();\n        }\n\n        this.geometry = new THREE.BufferGeometry();\n\n        if (newSize !== undefined && (forceResize === true || newSize > this.size)) {\n            this.resizeBuffer(newSize);\n        }\n\n        this.geometry.setAttribute(\"position\", this.positionAttribute!);\n        this.geometry.setAttribute(\"color\", this.colorAttribute!);\n        this.geometry.setAttribute(\"uv\", this.uvAttribute!);\n        this.geometry.setIndex(this.indexAttribute!);\n        this.geometry.addGroup(0, this.indexAttribute!.count);\n\n        if (this.internalMesh === undefined) {\n            this.internalMesh = new BoxBufferMesh(this.geometry, this.material);\n            this.internalMesh.renderOrder = this.renderOrder;\n        } else {\n            this.internalMesh.geometry = this.geometry;\n        }\n        return this.internalMesh;\n    }\n\n    /**\n     * Update the info with the memory footprint caused by objects owned by the `BoxBuffer`.\n     *\n     * @param info The info object to increment with the values from this `BoxBuffer`.\n     */\n    updateMemoryUsage(info: MemoryUsage) {\n        const numBytes =\n            this.positionAttribute!.count * NUM_POSITION_VALUES_PER_VERTEX * NUM_BYTES_PER_FLOAT +\n            this.colorAttribute!.count * NUM_COLOR_VALUES_PER_VERTEX +\n            this.uvAttribute!.count * NUM_UV_VALUES_PER_VERTEX * NUM_BYTES_PER_FLOAT +\n            this.indexAttribute!.count * NUM_BYTES_PER_INT32; // May be UInt16, so we overestimate\n\n        info.heapSize += numBytes;\n        info.gpuSize += numBytes;\n    }\n\n    /**\n     * Check if a pixel is transparent or not.\n     *\n     * @param imageData Data containing the pixels.\n     * @param xScreenPos X position of the pixel.\n     * @param yScreenPos Y position of the pixel.\n     * @param box Bounding box of the image in screen coordinates.\n     * @param uvBox Uv box referred to the given bounding box.\n     * @param canvas Canvas element that will be used to draw the image, in case the imageData is an\n     *      ImageBitmap\n     */\n    protected isPixelTransparent(\n        imageData: ImageBitmap | ImageData,\n        xScreenPos: number,\n        yScreenPos: number,\n        box: Math2D.Box,\n        uvBox: Math2D.UvBox,\n        canvas?: HTMLCanvasElement\n    ): boolean {\n        let pixelIsTransparent = false;\n\n        const { u, v } = screenToUvCoordinates(xScreenPos, yScreenPos, box, uvBox);\n\n        const imageWidth = imageData.width;\n        const x = imageWidth * u;\n        const imageHeight = imageData.height;\n        const y = imageHeight * v;\n\n        const pixel = getPixelFromImage(x, y, imageData, canvas);\n\n        if (pixel !== undefined && pixel[3] === 0) {\n            pixelIsTransparent = true;\n        }\n        return pixelIsTransparent;\n    }\n\n    /**\n     * Remove current attributes and arrays. Minimizes memory footprint.\n     */\n    protected clearAttributes() {\n        this.positionAttribute = undefined;\n        this.colorAttribute = undefined;\n        this.uvAttribute = undefined;\n        this.indexAttribute = undefined;\n        this.resize(START_BOX_BUFFER_SIZE, true);\n    }\n\n    /**\n     * Resize the attribute buffers. New value must be larger than the previous one.\n     *\n     * @param newSize New number of elements in the buffer. Number has to be larger than the\n     *      previous size.\n     */\n    protected resizeBuffer(newSize: number) {\n        const newPositionArray = new Float32Array(\n            newSize * NUM_VERTICES_PER_ELEMENT * NUM_POSITION_VALUES_PER_VERTEX\n        );\n\n        if (this.positionAttribute !== undefined && this.positionAttribute.array.length > 0) {\n            const positionAttributeCount = this.positionAttribute.count;\n            newPositionArray.set(this.positionAttribute.array);\n            this.positionAttribute.array = newPositionArray;\n            this.positionAttribute.count = positionAttributeCount;\n        } else {\n            this.positionAttribute = new THREE.BufferAttribute(\n                newPositionArray,\n                NUM_POSITION_VALUES_PER_VERTEX\n            );\n            this.positionAttribute.count = 0;\n            this.positionAttribute.setUsage(THREE.DynamicDrawUsage);\n        }\n\n        const newColorArray = new Uint8Array(\n            newSize * NUM_VERTICES_PER_ELEMENT * NUM_COLOR_VALUES_PER_VERTEX\n        );\n\n        if (this.colorAttribute !== undefined) {\n            const colorAttributeCount = this.colorAttribute.count;\n            newColorArray.set(this.colorAttribute.array);\n            this.colorAttribute.array = newColorArray;\n            this.colorAttribute.count = colorAttributeCount;\n        } else {\n            this.colorAttribute = new THREE.BufferAttribute(\n                newColorArray,\n                NUM_COLOR_VALUES_PER_VERTEX,\n                true\n            );\n            this.colorAttribute.count = 0;\n            this.colorAttribute.setUsage(THREE.DynamicDrawUsage);\n        }\n\n        const newUvArray = new Float32Array(\n            newSize * NUM_VERTICES_PER_ELEMENT * NUM_UV_VALUES_PER_VERTEX\n        );\n\n        if (this.uvAttribute !== undefined) {\n            const uvAttributeCount = this.uvAttribute.count;\n            newUvArray.set(this.uvAttribute.array);\n            this.uvAttribute.array = newUvArray;\n            this.uvAttribute.count = uvAttributeCount;\n        } else {\n            this.uvAttribute = new THREE.BufferAttribute(newUvArray, NUM_UV_VALUES_PER_VERTEX);\n            this.uvAttribute.count = 0;\n            this.uvAttribute.setUsage(THREE.DynamicDrawUsage);\n        }\n\n        const numIndexValues = newSize * NUM_INDICES_PER_ELEMENT * NUM_INDEX_VALUES_PER_VERTEX;\n\n        const newIndexArray =\n            numIndexValues > 65535\n                ? new Uint32Array(numIndexValues)\n                : new Uint16Array(numIndexValues);\n\n        if (this.indexAttribute !== undefined) {\n            const indexAttributeCount = this.indexAttribute.count;\n            newIndexArray.set(this.indexAttribute.array);\n            this.indexAttribute.array = newIndexArray;\n            this.indexAttribute.count = indexAttributeCount;\n        } else {\n            this.indexAttribute = new THREE.BufferAttribute(\n                newIndexArray,\n                NUM_INDEX_VALUES_PER_VERTEX\n            );\n            this.indexAttribute.count = 0;\n            this.indexAttribute.setUsage(THREE.DynamicDrawUsage);\n        }\n\n        this.m_size = newSize;\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { Math2D, MathUtils } from \"@here/harp-utils\";\n\n/**\n * It returns an array containing the channel colors for the pixel at the given coordinates.\n *\n * @param xPos X value of the pixel.\n * @param yPos Y value of the pixel.\n * @param imageData Data containing the pixels.\n * @param canvas Canvas element that will be used to draw the image, in case the imageData is an\n * ImageBitmap\n */\nexport function getPixelFromImage(\n    xPos: number,\n    yPos: number,\n    imageData: ImageData | ImageBitmap,\n    canvas?: HTMLCanvasElement\n): Uint8ClampedArray | undefined {\n    let pickedColor;\n\n    const isImageBitmap = (imgData: ImageBitmap | ImageData) => {\n        return (imgData as ImageBitmap).close !== undefined;\n    };\n\n    if (isImageBitmap(imageData!)) {\n        if (canvas === undefined) {\n            canvas = document.createElement(\"canvas\");\n        }\n        pickedColor = getPixelFromImageBitmap(imageData as ImageBitmap, xPos, yPos, canvas);\n    } else {\n        const pixelsData = imageData as ImageData;\n        const stride = pixelsData.data.length / (pixelsData.height * pixelsData.width);\n        pickedColor = getPixelFromImageData(pixelsData, xPos, yPos, stride);\n    }\n    return pickedColor;\n}\n\n/**\n * Given the x and y position in screen coordinates inside the target box, it map them to the UV\n * coordinates.\n * @param screenX X value in screen coordinates.\n * @param screenY Y value in screen coordinates.\n * @param box Bounding box in screen coordinates.\n * @param uvBox Uv box referred to the given bounding box.\n */\nexport function screenToUvCoordinates(\n    screenX: number,\n    screenY: number,\n    box: Math2D.Box,\n    uvBox: Math2D.UvBox\n): { u: number; v: number } {\n    const minX = box.x;\n    const maxX = box.x + box.w;\n    const minY = box.y;\n    const maxY = box.y + box.h;\n    const u = MathUtils.map(screenX, minX, maxX, uvBox.s0, uvBox.s1);\n    const v = MathUtils.map(screenY, minY, maxY, uvBox.t0, uvBox.t1);\n\n    return { u, v };\n}\n\n/**\n * It returns an Uint8ClampedArray containing the color channel values for the given pixel\n * coordinates. It returns undefined if the given coordinates are out of range.\n *\n * @param image Bitmap image in which the pixels are stored.\n * @param xPos X value of the pixel.\n * @param yPos Y value of the pixel.\n * @param canvas HTML Canvas element on which the image is drawn.\n */\nexport function getPixelFromImageBitmap(\n    image: ImageBitmap,\n    xPos: number,\n    yPos: number,\n    canvas: HTMLCanvasElement\n): Uint8ClampedArray | undefined {\n    if (xPos > image.width || xPos < 0 || yPos > image.height || yPos < 0) {\n        return undefined;\n    }\n\n    let pixelData;\n\n    canvas.width = image.width;\n    canvas.height = image.height;\n\n    const context = canvas.getContext(\"2d\");\n    if (context !== null) {\n        context.drawImage(\n            image,\n            0,\n            0,\n            image.width,\n            image.height,\n            0,\n            0,\n            canvas.width,\n            canvas.height\n        );\n        pixelData = context.getImageData(xPos, yPos, 1, 1).data;\n    }\n    return pixelData;\n}\n\n/**\n * It returns an Uint8ClampedArray containing the color channel values for the given pixel\n * coordinates. It returns undefined if the given coordinates are out of range.\n *\n * @param image Image data in which the pixels are stored.\n * @param xPos X value of the pixel.\n * @param yPos Y value of the pixel.\n * @param stride The stride value of the image data.\n */\nexport function getPixelFromImageData(\n    imgData: ImageData,\n    xPos: number,\n    yPos: number,\n    stride: number\n): Uint8ClampedArray | undefined {\n    const getPixel = (imageData: ImageData, index: number, strd: number) => {\n        const i = index * strd;\n        const d = imageData.data;\n        const pixel = new Uint8ClampedArray(strd);\n        for (let s = 0; s < strd; s++) {\n            pixel[0] = d[i + s];\n        }\n        return pixel;\n    };\n    if (xPos > imgData.width || xPos < 0 || yPos > imgData.height || yPos < 0) {\n        return undefined;\n    }\n    return getPixel(imgData, yPos * imgData.width + xPos, stride);\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\nimport { IChannel } from \"@here/harp-utils\";\n\nexport class PlacementStats {\n    totalGroups: number = 0;\n    resortedGroups: number = 0;\n    total: number = 0;\n    uninitialized: number = 0;\n    tooFar: number = 0;\n    numNotVisible: number = 0;\n    numPathTooSmall: number = 0;\n    numCannotAdd: number = 0;\n    numRenderedPoiIcons: number = 0;\n    numRenderedPoiTexts: number = 0;\n    numPoiTextsInvisible: number = 0;\n    numRenderedTextElements: number = 0;\n\n    constructor(private readonly m_logger: IChannel) {}\n\n    clear() {\n        this.totalGroups = 0;\n        this.resortedGroups = 0;\n        this.total = 0;\n        this.uninitialized = 0;\n        this.tooFar = 0;\n        this.numNotVisible = 0;\n        this.numPathTooSmall = 0;\n        this.numCannotAdd = 0;\n        this.numRenderedPoiIcons = 0;\n        this.numRenderedPoiTexts = 0;\n        this.numPoiTextsInvisible = 0;\n        this.numRenderedTextElements = 0;\n    }\n    log() {\n        const numNotRendered =\n            this.uninitialized +\n            this.numPoiTextsInvisible +\n            this.tooFar +\n            this.numNotVisible +\n            this.numCannotAdd;\n        this.m_logger.debug(\"Total groups\", this.totalGroups);\n        this.m_logger.debug(\"Resorted groups\", this.resortedGroups);\n        this.m_logger.debug(\"Total labels\", this.total);\n        this.m_logger.debug(\"Rendered labels\", this.numRenderedTextElements);\n        this.m_logger.debug(\"Rejected labels\", numNotRendered);\n        this.m_logger.debug(\"Unitialized labels\", this.uninitialized);\n        this.m_logger.debug(\"Rendered poi icons\", this.numRenderedPoiIcons);\n        this.m_logger.debug(\"Rendered poi texts\", this.numRenderedPoiTexts);\n        this.m_logger.debug(\"Poi text invisible\", this.numPoiTextsInvisible);\n        this.m_logger.debug(\"Too far\", this.tooFar);\n        this.m_logger.debug(\"Not visible\", this.numNotVisible);\n        this.m_logger.debug(\"Path too small\", this.numPathTooSmall);\n        this.m_logger.debug(\"Rejected, max glyphs reached\", this.numCannotAdd);\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport * as THREE from \"three\";\n\n/**\n * @hidden\n */\nexport class SimpleLineCurve extends THREE.LineCurve {\n    private m_lengths?: number[];\n\n    constructor(v1: THREE.Vector2, v2: THREE.Vector2) {\n        super(v1, v2);\n    }\n\n    getLengths(): number[] {\n        if (this.m_lengths === undefined) {\n            this.m_lengths = [0, this.v2.distanceTo(this.v1)];\n        }\n        return this.m_lengths;\n    }\n}\n\n/**\n * @hidden\n */\nexport class PathParam {\n    private m_point: THREE.Vector2 | undefined;\n\n    constructor(readonly path: THREE.Path, readonly index: number, readonly t: number) {}\n\n    get curve(): THREE.Curve<THREE.Vector2> {\n        return this.path.curves[this.index];\n    }\n\n    get point(): THREE.Vector2 {\n        if (this.m_point === undefined) {\n            this.m_point = this.curve.getPoint(this.t);\n        }\n        return this.m_point;\n    }\n}\n\n/**\n * @hidden\n */\nexport class SimplePath extends THREE.Path {\n    private m_cache?: number[];\n\n    constructor() {\n        super();\n    }\n\n    getLengths(): number[] {\n        if (this.m_cache) {\n            return this.m_cache;\n        }\n        let sum = 0;\n        const lengths = new Array<number>();\n        lengths.push(0);\n\n        this.curves.forEach(curve => {\n            const lineCurve = curve as THREE.LineCurve;\n            sum += lineCurve.v1.distanceTo(lineCurve.v2);\n            lengths.push(sum);\n        });\n        this.m_cache = lengths;\n        return lengths;\n    }\n\n    getParamAt(t: number): PathParam | null {\n        const distance = t * this.getLength();\n        const curveLengths = this.getCurveLengths();\n\n        for (let index = 0; index < curveLengths.length; ++index) {\n            if (curveLengths[index] < distance) {\n                continue;\n            }\n\n            const diff = curveLengths[index] - distance;\n            const curve = this.curves[index] as THREE.LineCurve;\n            const segmentLength = curve.getLength();\n            const u = segmentLength === 0 ? 0 : 1 - diff / segmentLength;\n            return new PathParam(this, index, u);\n        }\n\n        return null;\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nconst DEFAULT_FONT_CATALOG = \"./resources/fonts/Default_FontCatalog.json\";\n\n/**\n * Default number of labels/POIs rendered in the scene\n */\nconst DEFAULT_MAX_NUM_RENDERED_TEXT_ELEMENTS = 500;\n\n/**\n * Number of elements that are put into second queue. This second chance queue is used to render\n * TextElements that have not been on screen before. This is a quick source for elements that can\n * appear when the camera moves a bit, before new elements are placed.\n */\nconst DEFAULT_MAX_NUM_SECOND_CHANCE_ELEMENTS = 300;\n\n/**\n * Maximum distance for text labels expressed as a ratio of distance to from the camera (0) to the\n * far plane (1.0). May be synchronized with fog value ?\n */\nconst DEFAULT_MAX_DISTANCE_RATIO_FOR_LABELS = 0.99;\n\n/**\n * Minimum scaling factor that may be applied to labels when their are distant from focus point.\n */\nconst DEFAULT_LABEL_DISTANCE_SCALE_MIN = 0.7;\n\n/**\n * Maximum scaling factor that may be applied to labels due to their distance from focus point.\n */\nconst DEFAULT_LABEL_DISTANCE_SCALE_MAX = 1.5;\n\nconst MIN_GLYPH_COUNT = 1024;\n\nconst MAX_GLYPH_COUNT = 32768;\n\nexport interface TextElementsRendererOptions {\n    /**\n     * The path to the font catalog file. Default is [[DEFAULT_FONT_CATALOG]].\n     */\n    fontCatalog?: string;\n    /**\n     * Optional initial number of glyphs (characters) for labels. In situations with limited,\n     * available memory, decreasing this number may be beneficial.\n     *\n     * @default [[MIN_GLYPH_COUNT]]\n     */\n    minNumGlyphs?: number;\n    /**\n     * Optional limit of number of glyphs (characters) for labels. In situations with limited,\n     * available memory, decreasing this number may be beneficial.\n     *\n     * @default [[MAX_GLYPH_COUNT]]\n     */\n    maxNumGlyphs?: number;\n    /**\n     * Limits the number of [[DataSource]] labels visible, such as road names and POIs.\n     * On small devices, you can reduce this number to to increase performance.\n     * @default [[DEFAULT_MAX_NUM_RENDERED_TEXT_ELEMENTS]].\n     */\n    maxNumVisibleLabels?: number;\n    /**\n     * The number of [[TextElement]]s that the [[TextElementsRenderer]] tries to render even\n     * if they were not visible during placement. This property only applies to [[TextElement]]s\n     * that were culled by the frustum; useful for map movements and animations.\n     * @default [[DEFAULT_MAX_NUM_SECOND_CHANCE_ELEMENTS]].\n     */\n    numSecondChanceLabels?: number;\n    /**\n     * The maximum distance for [[TextElement]] to be rendered, expressed as a fraction of\n     * the distance between the near and far plane [0, 1.0].\n     * @default [[DEFAULT_MAX_DISTANCE_RATIO_FOR_LABELS]].\n     */\n    maxDistanceRatioForTextLabels?: number;\n    /**\n     * The maximum distance for [[TextElement]] with icons to be rendered,\n     * expressed as a fraction of the distance\n     * between the near and far plane [0, 1.0].\n     * @default [[DEFAULT_MAX_DISTANCE_RATIO_FOR_LABELS]].\n     */\n    maxDistanceRatioForPoiLabels?: number;\n    /**\n     * The minimum scaling factor that may be applied to [[TextElement]]s due to their distance.\n     * If not defined the default value specified in [[TextElementsRenderer]] will be used.\n     * @default [[DEFAULT_LABEL_DISTANCE_SCALE_MIN]].\n     */\n    labelDistanceScaleMin?: number;\n    /**\n     * The maximum scaling factor that may be applied to [[TextElement]]s due to their distance.\n     * If not defined the default value specified in [[TextElementsRenderer]] will be used.\n     * @default [[DEFAULT_LABEL_DISTANCE_SCALE_MAX]].\n     */\n    labelDistanceScaleMax?: number;\n\n    /**\n     * Disable all fading animations for debugging and performance measurement.\n     * @default `false`\n     */\n    disableFading?: boolean;\n}\n\n/**\n * Initializes undefined text renderer options to default values.\n * @param options The options to be initialized.\n */\nexport function initializeDefaultOptions(options: TextElementsRendererOptions) {\n    if (options.fontCatalog === undefined) {\n        options.fontCatalog = DEFAULT_FONT_CATALOG;\n    }\n\n    if (options.minNumGlyphs === undefined) {\n        options.minNumGlyphs = MIN_GLYPH_COUNT;\n    }\n    if (options.maxNumGlyphs === undefined) {\n        options.maxNumGlyphs = MAX_GLYPH_COUNT;\n    }\n    if (options.maxNumVisibleLabels === undefined) {\n        options.maxNumVisibleLabels = DEFAULT_MAX_NUM_RENDERED_TEXT_ELEMENTS;\n    }\n    // TODO: Unused so far.\n    if (options.numSecondChanceLabels === undefined) {\n        options.numSecondChanceLabels = DEFAULT_MAX_NUM_SECOND_CHANCE_ELEMENTS;\n    }\n    if (options.labelDistanceScaleMin === undefined) {\n        options.labelDistanceScaleMin = DEFAULT_LABEL_DISTANCE_SCALE_MIN;\n    }\n    if (options.labelDistanceScaleMax === undefined) {\n        options.labelDistanceScaleMax = DEFAULT_LABEL_DISTANCE_SCALE_MAX;\n    }\n    if (options.maxDistanceRatioForTextLabels === undefined) {\n        options.maxDistanceRatioForTextLabels = DEFAULT_MAX_DISTANCE_RATIO_FOR_LABELS;\n    }\n    if (options.maxDistanceRatioForPoiLabels === undefined) {\n        options.maxDistanceRatioForPoiLabels = DEFAULT_MAX_DISTANCE_RATIO_FOR_LABELS;\n    }\n\n    if (options.disableFading === undefined) {\n        options.disableFading = false;\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { TileKey } from \"@here/harp-geoutils\";\nimport { assert, LoggerManager, LogLevel } from \"@here/harp-utils\";\nimport { TextElement } from \"./TextElement\";\nimport { TextElementGroup } from \"./TextElementGroup\";\nimport { TextElementFilter, TextElementGroupState } from \"./TextElementGroupState\";\nimport { TextElementState } from \"./TextElementState\";\nimport { TextElementType } from \"./TextElementType\";\n\nconst logger = LoggerManager.instance.create(\"TextElementsStateCache\", { level: LogLevel.Log });\n\n/**\n * Label distance tolerance squared in meters. Point labels with the same name that are closer in\n * world space than this value are treated as the same label. Used to identify duplicate labels in\n * overlapping tiles and label replacements at different storage levels.\n */\nfunction getDedupSqDistTolerance(zoomLevel: number) {\n    // Defining here a minimum tolerance of 10m at zoom level 13 or higher.\n    const minSqTol = 100;\n    const minSqTolLevel = 13;\n    const maxLevelDelta = 4;\n    const levelDelta = Math.min(\n        maxLevelDelta,\n        minSqTolLevel - Math.min(minSqTolLevel, Math.floor(zoomLevel))\n    );\n    // Distance tolerance computed applying a factor over an arbitrary minimum tolerance for a\n    // chosen zoom level. The factor is an exponential function on zoom level delta wrt minimum\n    // tolerance zoom level.\n    // error = sqrt(sqError) = sqrt(minSqError* 2^(4d)) = minError*2^(2d)\n\n    //tslint:disable-next-line: no-bitwise\n    return minSqTol << (levelDelta << 2);\n}\n\nconst tmpCachedDuplicate: { entries: TextElementState[]; index: number } = {\n    entries: [],\n    index: -1\n};\n\nfunction getCacheKey(element: TextElement): string | number {\n    return element.hasFeatureId() ? element.featureId! : element.text;\n}\n\n/**\n * Finds a duplicate for a text element among a list of candidates using their feature ids.\n * @param elementState The state of the text element for which the duplicate will be found.\n * @param candidates The list of candidates to check.\n * @returns The index of the candidate chosen as duplicate, or `undefined` if none was found.\n */\nfunction findDuplicateById(\n    elementState: TextElementState,\n    candidates: TextElementState[]\n): number | undefined {\n    // Cached entries with same feature id found, find the entry with the same tile offset.\n    const element = elementState.element;\n    const duplicateIndex = candidates.findIndex(\n        entry => entry.element.tileOffset === element.tileOffset\n    );\n    if (duplicateIndex === -1) {\n        return -1;\n    }\n    const candidate = candidates[duplicateIndex].element;\n    assert(element.featureId === candidate.featureId);\n\n    if (candidate.text !== element.text) {\n        // Labels with different text shouldn't share the same feature id. This points to\n        // an issue on the map data side. Submit a ticket to the corresponding map backend\n        // issue tracking system if available (e.g. OLPRPS project in JIRA for OMV),\n        // indicating affected labels including tile keys, texts and feature id.\n        logger.debug(\n            `Text feature id ${element.featureId} collision between \"${element.text} and \\\n             ${candidate.text}`\n        );\n        return undefined;\n    }\n    return duplicateIndex;\n}\n\ntype DuplicateCmp = (\n    newCandidate: TextElement,\n    newDistance: number,\n    oldCandidate: TextElement,\n    oldDistance: number\n) => boolean;\n\n// Duplicate criteria for path labels. Candidates are better the longer their paths are.\nfunction isBetterPathDuplicate(\n    newCandidate: TextElement,\n    _newDistance: number,\n    oldCandidate: TextElement,\n    _oldDistance: number\n): boolean {\n    if (newCandidate.pathLengthSqr === undefined) {\n        return false;\n    }\n    if (oldCandidate.pathLengthSqr === undefined) {\n        return false;\n    }\n    return newCandidate.pathLengthSqr > oldCandidate.pathLengthSqr;\n}\n\n// Duplicate criteria for point labels. Candidates are better the nearer they are to the label being\n// tested for duplicates.\nfunction isBetterPointDuplicate(\n    _newCandidate: TextElement,\n    newDistance: number,\n    _oldCandidate: TextElement,\n    oldDistance: number\n): boolean {\n    return newDistance < oldDistance;\n}\n\n/**\n * Finds a duplicate for a text element among a list of candidates using their text and distances.\n * @param elementState The state of the text element for which the duplicate will be found.\n * @param candidates The list of candidates to check.\n * @param zoomLevel Current zoom level.\n * @returns The index of the candidate chosen as duplicate, or `undefined` if none was found.\n */\nfunction findDuplicateByText(\n    elementState: TextElementState,\n    candidates: TextElementState[],\n    zoomLevel: number\n): number {\n    const element = elementState.element;\n    const maxSqDistError = getDedupSqDistTolerance(zoomLevel);\n    const entryCount = candidates.length;\n    const elementPosition = element.position;\n    const elementVisible = elementState.visible;\n    let dupIndex: number = -1;\n    let duplicate: TextElement | undefined;\n    let dupDistSquared: number = Infinity;\n    const isBetterDuplicate: DuplicateCmp =\n        element.type === TextElementType.PoiLabel ? isBetterPointDuplicate : isBetterPathDuplicate;\n\n    for (let i = 0; i < entryCount; ++i) {\n        const candidateEntry = candidates[i];\n        const cachedElement = candidateEntry.element;\n        const areDiffType = element.type !== cachedElement.type;\n        const areBothVisible = elementVisible && candidateEntry.visible;\n        if (areDiffType || areBothVisible) {\n            // Two text elements with different type or visible at the same time are always\n            // considered distinct.\n            continue;\n        }\n        const distSquared = elementPosition.distanceToSquared(cachedElement.position);\n        if (distSquared > maxSqDistError) {\n            // Cached text element is too far away to be a duplicate.\n            continue;\n        }\n        if (\n            duplicate === undefined ||\n            isBetterDuplicate(cachedElement, distSquared, duplicate, dupDistSquared)\n        ) {\n            dupIndex = i;\n            duplicate = cachedElement;\n            dupDistSquared = distSquared;\n        }\n    }\n\n    return dupIndex;\n}\n\n/**\n * Caches the state of text element groups currently rendered as well as the text element states\n * belonging to them, including their fading state and text deduplication information.\n */\nexport class TextElementStateCache {\n    private readonly m_referenceMap = new Map<TextElementGroup, TextElementGroupState>();\n    private m_sortedGroupStates: TextElementGroupState[] | undefined;\n\n    // Cache for point labels which may have duplicates in same tile or in neighboring tiles.\n    private readonly m_textMap = new Map<string | number, TextElementState[]>();\n\n    /**\n     * Gets the state corresponding to a given text element group or sets a newly created state if\n     * not found. It updates the states of the text elements belonging to the group using the\n     * specified parameters.\n     * @param textElementGroup The group of which the state will be obtained.\n     * @param tileKey The key of the tile to which the group belongs.\n     * @param textElementFilter Filter used to decide if a text element must be initialized,\n     * @see [[TextElementGroupState]] construction.\n     * @returns Tuple with the group state as first element and a boolean indicating whether the\n     * state was found in cache (`true`) or newly created (`false`) as second element.\n     */\n    getOrSet(\n        textElementGroup: TextElementGroup,\n        tileKey: TileKey,\n        textElementFilter: TextElementFilter\n    ): [TextElementGroupState, boolean] {\n        let groupState = this.get(textElementGroup);\n\n        if (groupState !== undefined) {\n            assert(groupState.size === textElementGroup.elements.length);\n            groupState.updateElements(textElementFilter);\n            return [groupState, true];\n        }\n\n        groupState = new TextElementGroupState(textElementGroup, tileKey, textElementFilter);\n        this.set(textElementGroup, groupState);\n\n        return [groupState, false];\n    }\n\n    get size(): number {\n        return this.m_referenceMap.size;\n    }\n\n    /**\n     * @returns All text element group states in the cache by group priority.\n     */\n    get sortedGroupStates(): TextElementGroupState[] {\n        if (this.m_sortedGroupStates === undefined) {\n            this.m_sortedGroupStates = Array.from(this.m_referenceMap.values());\n            this.m_sortedGroupStates.sort((a: TextElementGroupState, b: TextElementGroupState) => {\n                return b.group.priority - a.group.priority;\n            });\n        }\n\n        assert(this.m_referenceMap.size === this.m_sortedGroupStates.length);\n        return this.m_sortedGroupStates;\n    }\n\n    /**\n     * Updates state of all cached groups, discarding those that are not needed anymore.\n     * @param time The current time.\n     * @param disableFading `True` if fading is currently disabled, `false` otherwise.\n     * @param findReplacements `True` to replace each visible unvisited text element with a\n     * visited duplicate.\n     * @param zoomLevel Current zoom level.\n     * @returns `True` if any textElementGroup was evicted from cache, false otherwise.\n     */\n    update(time: number, disableFading: boolean, findReplacements: boolean, zoomLevel: number) {\n        const replaceCallback = findReplacements\n            ? this.replaceElement.bind(this, zoomLevel)\n            : undefined;\n\n        let anyEviction = false;\n        for (const [key, groupState] of this.m_referenceMap.entries()) {\n            if (groupState.visited) {\n                groupState.updateFading(time, disableFading);\n            } else {\n                if (findReplacements) {\n                    groupState.traverseVisibleElements(replaceCallback!);\n                }\n                this.m_referenceMap.delete(key);\n                this.m_sortedGroupStates = undefined;\n                anyEviction = true;\n            }\n        }\n        return anyEviction;\n    }\n\n    /**\n     * Clears visited state for all text element groups in cache.\n     */\n    clearVisited() {\n        for (const groupState of this.m_referenceMap.values()) {\n            groupState.visited = false;\n        }\n    }\n\n    clearTextCache() {\n        this.m_textMap.clear();\n    }\n\n    /**\n     * Clears the whole cache contents.\n     */\n    clear() {\n        this.m_referenceMap.clear();\n        this.m_sortedGroupStates = undefined;\n        this.m_textMap.clear();\n    }\n\n    /**\n     * Removes duplicates for a given text element.\n     *\n     * @param zoomLevel Current zoom level.\n     * @param elementState State of the text element to deduplicate.\n     * @returns True if it's the remaining element after deduplication, false if it's been marked\n     * as duplicate.\n     */\n    deduplicateElement(zoomLevel: number, elementState: TextElementState): boolean {\n        const cacheResult = this.findDuplicate(elementState, zoomLevel);\n\n        if (cacheResult === undefined) {\n            // Text not found so far, add this element to cache.\n            this.m_textMap.set(getCacheKey(elementState.element), [elementState]);\n            return true;\n        }\n\n        if (cacheResult.index === -1) {\n            // No duplicate found among elements with same text,add this one to cache.\n            cacheResult.entries.push(elementState);\n            return true;\n        }\n\n        // Duplicate found, check whether there's a label already visible and keep that one.\n        const cachedDuplicate = cacheResult.entries[cacheResult.index];\n\n        if (!cachedDuplicate.visible && elementState.visible) {\n            // New label is visible, substitute the cached label.\n            cacheResult.entries[cacheResult.index] = elementState;\n            cachedDuplicate.reset();\n            return true;\n        }\n\n        return false;\n    }\n\n    /**\n     * Replaces a visible unvisited text element with a visited duplicate.\n     * @param zoomLevel Current zoom level.\n     * @param elementState State of the text element to deduplicate.\n     */\n    replaceElement(zoomLevel: number, elementState: TextElementState): void {\n        assert(elementState.visible);\n        const cacheResult = this.findDuplicate(elementState, zoomLevel);\n\n        if (cacheResult === undefined || cacheResult.index === -1) {\n            // No replacement found;\n            return;\n        }\n\n        const replacement = cacheResult.entries[cacheResult.index];\n        assert(!replacement.visible);\n\n        replacement.replace(elementState);\n    }\n\n    /**\n     * Gets the state corresponding to a given text element group.\n     * @param textElementGroup The group of which the state will be obtained.\n     * @returns The group state if cached, otherwise `undefined`.\n     */\n    private get(textElementGroup: TextElementGroup): TextElementGroupState | undefined {\n        const groupState = this.m_referenceMap.get(textElementGroup);\n\n        if (groupState !== undefined) {\n            groupState.visited = true;\n        }\n        return groupState;\n    }\n\n    /**\n     * Sets a specified state for a given text element group.\n     * @param textElementGroup  The group of which the state will be set.\n     * @param textElementGroupState The state to set for the group.\n     */\n    private set(textElementGroup: TextElementGroup, textElementGroupState: TextElementGroupState) {\n        assert(textElementGroup.elements.length > 0);\n        this.m_referenceMap.set(textElementGroup, textElementGroupState);\n        this.m_sortedGroupStates = undefined;\n    }\n\n    private findDuplicate(\n        elementState: TextElementState,\n        zoomLevel: number\n    ): { entries: TextElementState[]; index: number } | undefined {\n        // Point labels may have duplicates (as can path labels), Identify them\n        // and keep the one we already display.\n\n        const element = elementState.element;\n        const cachedEntries = this.m_textMap.get(getCacheKey(element));\n\n        if (cachedEntries === undefined) {\n            // No labels found with the same key.\n            return undefined;\n        }\n\n        tmpCachedDuplicate.entries = cachedEntries;\n        const index = element.hasFeatureId()\n            ? findDuplicateById(elementState, cachedEntries)\n            : findDuplicateByText(elementState, cachedEntries, zoomLevel);\n\n        if (index === undefined) {\n            // Feature id collision, try finding duplicates using text as key.\n            element.featureId = undefined;\n            return this.findDuplicate(elementState, zoomLevel);\n        }\n        tmpCachedDuplicate.index = index;\n        return tmpCachedDuplicate;\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { TileKey } from \"@here/harp-geoutils\";\nimport { assert } from \"@here/harp-utils\";\nimport { TextElementGroup } from \"./TextElementGroup\";\nimport { TextElementState } from \"./TextElementState\";\n\n/**\n * Type of functions used to do early rejection of elements during group state creation or update.\n * @param textElementState The state of the text element to check.\n * @returns `undefined` if element was rejected, otherwise its current view distance.\n */\nexport type TextElementFilter = (textElementState: TextElementState) => number | undefined;\n\n/**\n * `TextElementGroupState` keeps the state of a text element group and each element in it while\n * they're being rendered.\n */\nexport class TextElementGroupState {\n    private m_textElementStates: TextElementState[];\n    private m_visited: boolean = false;\n\n    /**\n     * Creates the state for specified group.\n     * @param group The group of which the state will be created.\n     * @param tileKey The key of the tile to which this group belongs.\n     * @param filter Function used to do early rejection. @see [[TextElementFilter]].\n     */\n    constructor(\n        readonly group: TextElementGroup,\n        readonly tileKey: TileKey,\n        filter: TextElementFilter\n    ) {\n        assert(group.elements.length > 0);\n        const length = group.elements.length;\n        this.m_textElementStates = new Array(length);\n        this.m_visited = true;\n\n        // TODO: HARP-7648. Reduce number of allocations here:\n        // a) Avoid creating the state for labels that don't pass early placement checks and make\n        //    this checks more strict.\n        // b) Break label state objects into a set of arrays held at group level, one for each\n        //    primitive field in the label state.\n        for (let i = 0; i < length; ++i) {\n            const textElement = group.elements[i];\n            const state = new TextElementState(textElement);\n            const textDistance = filter(state);\n            state.update(textDistance);\n            this.m_textElementStates[i] = state;\n        }\n    }\n\n    /**\n     * Indicates whether the group has been submitted to the [[TextElementsRenderer]] in the current\n     * frame.\n     */\n    get visited(): boolean {\n        return this.m_visited;\n    }\n\n    set visited(visited: boolean) {\n        this.m_visited = visited;\n    }\n\n    /**\n     * @returns the priority of the text elements in the group.\n     */\n    get priority() {\n        return this.group.priority;\n    }\n\n    /**\n     * Updates the fading state of all text elements within the group to the specified time.\n     * @param time The time to which the fading state will be updated.\n     * @param disableFading `true` if fading is disabled, `false` otherwise.\n     */\n    updateFading(time: number, disableFading: boolean): void {\n        for (const elementState of this.m_textElementStates) {\n            if (elementState !== undefined) {\n                elementState.updateFading(time, disableFading);\n            }\n        }\n    }\n\n    /**\n     * Calls the specified callback for every visible text elements in the group.\n     * @param visibleElementsCallback Functions that will be called for every visible text element\n     * in the group.\n     */\n    traverseVisibleElements(visibleElementsCallback: (e: TextElementState) => void): void {\n        for (const elementState of this.m_textElementStates) {\n            if (elementState !== undefined && elementState.visible) {\n                visibleElementsCallback(elementState);\n            }\n        }\n    }\n\n    /**\n     * Updates the states of elements within the group.\n     * @param filter Function used to do early rejection. @see [[TextElementFilter]].\n     */\n    updateElements(filter: TextElementFilter) {\n        for (const elementState of this.m_textElementStates) {\n            const textDistance = filter(elementState);\n            elementState.update(textDistance);\n        }\n    }\n\n    get size(): number {\n        return this.m_textElementStates.length;\n    }\n\n    /**\n     * Returns text element states.\n     * @returns Array of element states.\n     */\n    get textElementStates(): TextElementState[] {\n        return this.m_textElementStates;\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { assert } from \"@here/harp-utils\";\nimport { AnchorPlacement, LayoutState } from \"./LayoutState\";\nimport { RenderState } from \"./RenderState\";\nimport { TextElement } from \"./TextElement\";\nimport { TextElementType } from \"./TextElementType\";\n\n/**\n * `TextElementState` keeps the current state of a text element while it's being rendered.\n */\nexport class TextElementState {\n    /**\n     * @hidden\n     * Used during label placement to reserve space from front to back.\n     */\n    private m_viewDistance: number | undefined;\n\n    /**\n     * @hidden\n     * Used during rendering. The array type is used for line markers only, which have a points\n     * array and multiple icon positions to render. Since line markers use the same renderState\n     * for text part and icon, there is no separate array of [[RenderState]]s for the text parts\n     * of the line markers.\n     */\n    private m_iconRenderStates?: RenderState | RenderState[];\n\n    /**\n     * @hidden\n     * Used during rendering.\n     */\n    private m_textRenderState?: RenderState;\n    /**\n     * @hidden\n     * Used to store recently used text layout.\n     */\n    private m_textLayoutState?: LayoutState;\n\n    constructor(readonly element: TextElement) {}\n\n    get initialized(): boolean {\n        return this.m_textRenderState !== undefined || this.m_iconRenderStates !== undefined;\n    }\n\n    /**\n     * @returns `true` if any component of the element is visible, `false` otherwise.\n     */\n    get visible(): boolean {\n        if (this.m_textRenderState !== undefined && this.m_textRenderState.isVisible()) {\n            return true;\n        }\n\n        const iconRenderState = this.iconRenderState;\n        if (iconRenderState !== undefined && iconRenderState.isVisible()) {\n            return true;\n        }\n\n        const iconRenderStates = this.iconRenderStates;\n        if (iconRenderStates === undefined) {\n            return false;\n        }\n\n        for (const state of iconRenderStates) {\n            if (state.isVisible()) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    /**\n     * Return the last text placement used.\n     *\n     * If the text wasn't yet rendered or have no alternative placements it will fallback to\n     * style/theme based placement.\n     *\n     * @returns [[AnchorPlacement]] object containing vertical/horizontal align.\n     */\n    get textPlacement(): AnchorPlacement {\n        const themeLayout = this.element.layoutStyle!;\n        const stateLayout = this.m_textLayoutState;\n        // Would be good to test for persistence when getting state layout, but with this\n        // most of the isolated placement unit tests will fail.\n        const lastPlacement =\n            stateLayout !== undefined\n                ? stateLayout.textPlacement\n                : { h: themeLayout.horizontalAlignment, v: themeLayout.verticalAlignment };\n        return lastPlacement;\n    }\n\n    /**\n     * Set text placement to be used.\n     *\n     * This may be base text anchor placement as defined by style or alternative placement.\n     *\n     * @param placement The text placement to be used.\n     */\n    set textPlacement(placement: AnchorPlacement) {\n        if (this.m_textLayoutState === undefined && this.isBaseTextPlacement(placement) === true) {\n            // Do nothing, layout state is not required cause we leave the base placement.\n            return;\n        }\n        if (this.m_textLayoutState === undefined) {\n            // State is not yet defined, but we have placement to store, either alternative or\n            // not yet specified in the context of layoutStyle.\n            this.m_textLayoutState = new LayoutState(placement);\n        } else {\n            this.m_textLayoutState.textPlacement = placement;\n        }\n    }\n\n    /**\n     * Returns information if the text placement provided is the base one defined in style (theme).\n     *\n     * @param placement The text placement to check.\n     * @returns [[true]] if the placement provided is exactly the same as in theme base layout,\n     * [[false]] if it differs from the basic layout provided in style or\n     * [[undefined]] if the layout style is not yet defined so it is hard to say.\n     */\n    isBaseTextPlacement(placement: AnchorPlacement): boolean | undefined {\n        const themeLayout = this.element.layoutStyle;\n        if (themeLayout !== undefined) {\n            return (\n                placement.h === themeLayout.horizontalAlignment &&\n                placement.v === themeLayout.verticalAlignment\n            );\n        }\n        return undefined;\n    }\n\n    /**\n     * Resets the element to an initialized state.\n     */\n    reset() {\n        if (this.m_textRenderState !== undefined) {\n            this.m_textRenderState.reset();\n        }\n        if (this.m_textLayoutState !== undefined) {\n            if (this.element.layoutStyle !== undefined) {\n                this.m_textLayoutState.reset(this.element.layoutStyle);\n            } else {\n                this.m_textLayoutState = undefined;\n            }\n        }\n\n        if (this.iconRenderState) {\n            (this.m_iconRenderStates as RenderState).reset();\n        } else if (this.m_iconRenderStates !== undefined) {\n            for (const renderState of this.m_iconRenderStates as RenderState[]) {\n                renderState.reset();\n            }\n        }\n        this.m_viewDistance = undefined;\n        this.element.textBufferObject = undefined;\n    }\n\n    /**\n     * Replaces given text element, inheriting its current state.\n     * The predecessor text element state is erased.\n     * @param predecessor Text element state to be replaced.\n     */\n    replace(predecessor: TextElementState) {\n        this.m_textRenderState = predecessor.m_textRenderState;\n        this.m_textLayoutState = predecessor.m_textLayoutState;\n        this.m_iconRenderStates = predecessor.m_iconRenderStates;\n        predecessor.m_textRenderState = undefined;\n        predecessor.m_textLayoutState = undefined;\n        predecessor.m_iconRenderStates = undefined;\n\n        if (this.element.glyphs === undefined) {\n            // Use the predecessor glyphs, bounds and case array until proper ones are computed.\n            this.element.glyphs = predecessor.element.glyphs;\n            this.element.bounds = predecessor.element.bounds;\n            this.element.glyphCaseArray = predecessor.element.glyphCaseArray;\n        }\n        this.element.textBufferObject = undefined;\n    }\n\n    /**\n     * Returns the last computed distance of the text element to the camera.\n     * @returns Distance to camera.\n     */\n    get viewDistance(): number | undefined {\n        return this.m_viewDistance;\n    }\n\n    /**\n     * Updates the text element state.\n     * @param viewDistance The new view distance to set. If `undefined`, element is considered to\n     * be out of view.\n     */\n    update(viewDistance: number | undefined) {\n        if (!this.initialized && viewDistance !== undefined) {\n            this.initializeRenderStates();\n        }\n\n        this.setViewDistance(viewDistance);\n    }\n\n    /**\n     * Sets the distance of the element to the current view center.\n     * @param viewDistance The new view distance to set. If `undefined`, element is considered to\n     * be out of view.\n     */\n    setViewDistance(viewDistance: number | undefined) {\n        this.m_viewDistance = viewDistance;\n    }\n\n    /**\n     * Return the last distance that has been computed for sorting during placement. This may not be\n     * the actual distance if the camera is moving, as the distance is computed only during\n     * placement. If the property `alwaysOnTop` is true, the value returned is always `0`.\n     *\n     * @returns 0 or negative distance to camera.\n     */\n    get renderDistance(): number {\n        return this.element.alwaysOnTop === true\n            ? 0\n            : this.m_viewDistance !== undefined\n            ? -this.m_viewDistance\n            : 0;\n    }\n\n    /**\n     * @returns The text render state.\n     */\n    get textRenderState(): RenderState | undefined {\n        return this.m_textRenderState;\n    }\n\n    /**\n     * Returns the icon render state for the case where the text element has only one icon.\n     * @returns The icon render state if the text element has a single icon, otherwise undefined.\n     */\n    get iconRenderState(): RenderState | undefined {\n        if (this.m_iconRenderStates === undefined) {\n            return undefined;\n        }\n\n        return this.m_iconRenderStates instanceof RenderState ? this.m_iconRenderStates : undefined;\n    }\n\n    /**\n     * Returns the icon render states for text elements with multiple icons.\n     * @returns The icon render states if the text element has multiple icons, otherwise undefined.\n     */\n    get iconRenderStates(): RenderState[] | undefined {\n        if (this.m_iconRenderStates === undefined) {\n            return undefined;\n        }\n\n        return this.m_iconRenderStates instanceof RenderState\n            ? undefined\n            : (this.m_iconRenderStates as RenderState[]);\n    }\n\n    /**\n     * Updates the fading state to the specified time.\n     * @param time The current time.\n     * @param disableFading If `True` there will be no fading transitions, i.e., state will go\n     * directly from FadedIn to FadedOut and viceversa.\n     */\n    updateFading(time: number, disableFading: boolean): void {\n        if (this.m_textRenderState !== undefined) {\n            this.m_textRenderState.updateFading(time, disableFading);\n        }\n\n        if (this.iconRenderState !== undefined) {\n            const iconRenderState = this.m_iconRenderStates as RenderState;\n            iconRenderState.updateFading(time, disableFading);\n        } else if (this.iconRenderStates !== undefined) {\n            for (const renderState of this.m_iconRenderStates as RenderState[]) {\n                renderState.updateFading(time, disableFading);\n            }\n        }\n    }\n\n    /**\n     * Initialize text and icon render states\n     */\n    private initializeRenderStates() {\n        assert(this.m_textRenderState === undefined);\n        assert(this.m_textLayoutState === undefined);\n        assert(this.m_iconRenderStates === undefined);\n\n        const { textFadeTime } = this.element;\n        const iconFadeTime = this.element.poiInfo?.technique.iconFadeTime;\n        if (this.element.type === TextElementType.LineMarker) {\n            this.m_iconRenderStates = new Array<RenderState>();\n            for (const _point of this.element.points as THREE.Vector3[]) {\n                const iconRenderStates = this.m_iconRenderStates as RenderState[];\n                const renderState = new RenderState(iconFadeTime);\n                iconRenderStates.push(renderState);\n            }\n            return;\n        }\n\n        this.m_textRenderState = new RenderState(textFadeTime);\n\n        if (this.element.type === TextElementType.PoiLabel) {\n            this.m_iconRenderStates = new RenderState(iconFadeTime);\n        }\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport {\n    DefaultTextStyle,\n    HorizontalAlignment,\n    TextLayoutStyle,\n    VerticalAlignment\n} from \"@here/harp-text-canvas\";\n\n/**\n * Defines possible text placement relative to anchor.\n */\nexport interface AnchorPlacement {\n    h: HorizontalAlignment;\n    v: VerticalAlignment;\n}\n\n/**\n * Layout state of the text part of the `TextElement`.\n *\n * Used mainly for multi-anchor placement algorithm.\n * @hidden\n */\nexport class LayoutState {\n    private m_hAlign = DefaultTextStyle.DEFAULT_HORIZONTAL_ALIGNMENT;\n    private m_vAlign = DefaultTextStyle.DEFAULT_VERTICAL_ALIGNMENT;\n\n    constructor(placement: AnchorPlacement) {\n        this.textPlacement = placement;\n    }\n    /**\n     * Set layout based on theme style defined and optional text placement.\n     *\n     * @param placement The optional new anchor placement.\n     */\n    set textPlacement(placement: AnchorPlacement) {\n        this.m_hAlign = placement.h;\n        this.m_vAlign = placement.v;\n    }\n\n    /**\n     * Acquire current placement setup.\n     *\n     * Function returns alternative or base placement depending on layout state.\n     *\n     * @returns The current anchor placement.\n     */\n    get textPlacement(): AnchorPlacement {\n        return { h: this.m_hAlign, v: this.m_vAlign };\n    }\n\n    /**\n     * Reset existing `LayoutState` to contain values from style/theme layout.\n     */\n    reset(layoutStyle: TextLayoutStyle) {\n        this.m_hAlign = layoutStyle.horizontalAlignment;\n        this.m_vAlign = layoutStyle.verticalAlignment;\n    }\n\n    get horizontalAlignment(): HorizontalAlignment {\n        return this.m_hAlign;\n    }\n\n    get verticalAlignment(): VerticalAlignment {\n        return this.m_vAlign;\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { assert, MathUtils } from \"@here/harp-utils\";\nimport * as THREE from \"three\";\n\n/**\n * State of fading.\n */\nexport enum FadingState {\n    Undefined = 0,\n    FadingIn = 1,\n    FadedIn = 2,\n    FadingOut = -1,\n    FadedOut = -2\n}\n\n/**\n * Time to fade in/fade out the labels in milliseconds.\n */\nexport const DEFAULT_FADE_TIME = 800;\n\n/**\n * State of rendering of the icon and text part of the `TextElement`. Mainly for fading the elements\n * in and out, to compute the opacity.\n *\n * @hidden\n */\nexport class RenderState {\n    /**\n     * Current fading value [0..1]\n     */\n    value: number = 0.0;\n\n    /**\n     * Timestamp the fading started.\n     */\n    startTime: number = 0;\n\n    /**\n     * Computed opacity depending on value.\n     */\n    opacity: number = 1.0;\n\n    private m_state = FadingState.Undefined;\n\n    /**\n     * Create a `RenderState`.\n     *\n     * @param fadeTime The duration of the fading in milliseconds.\n     */\n    constructor(public fadeTime = DEFAULT_FADE_TIME) {}\n\n    /**\n     * Reset existing `RenderState` to appear like a fresh state.\n     */\n    reset() {\n        this.m_state = FadingState.Undefined;\n        this.value = 0.0;\n        this.startTime = 0.0;\n        this.opacity = 1.0;\n    }\n\n    /**\n     * @returns `true` if element state is `FadingState.Undefined`.\n     */\n    isUndefined(): boolean {\n        return this.m_state === FadingState.Undefined;\n    }\n\n    /**\n     * @returns `true` if element is either fading in or fading out.\n     */\n    isFading(): boolean {\n        const fading =\n            this.m_state === FadingState.FadingIn || this.m_state === FadingState.FadingOut;\n        return fading;\n    }\n\n    /**\n     * @returns `true` if element is fading in.\n     */\n    isFadingIn(): boolean {\n        const fadingIn = this.m_state === FadingState.FadingIn;\n        return fadingIn;\n    }\n\n    /**\n     * @returns `true` if element is fading out.\n     */\n    isFadingOut(): boolean {\n        const fadingOut = this.m_state === FadingState.FadingOut;\n        return fadingOut;\n    }\n\n    /**\n     * @returns `true` if element is done with fading in.\n     */\n    isFadedIn(): boolean {\n        const fadedIn = this.m_state === FadingState.FadedIn;\n        return fadedIn;\n    }\n\n    /**\n     * @returns `true` if element is done with fading out.\n     */\n    isFadedOut(): boolean {\n        const fadedOut = this.m_state === FadingState.FadedOut;\n        return fadedOut;\n    }\n\n    /**\n     * @returns `true` if state is neither faded out nor undefined.\n     */\n    isVisible(): boolean {\n        return this.m_state !== FadingState.FadedOut && this.m_state !== FadingState.Undefined;\n    }\n\n    /**\n     * Updates the state to [[FadingState.FadingIn]].\n     * If previous state is [[FadingState.FadingIn]] or [[FadingState.FadedIn]] it remains\n     * unchanged.\n     *\n     * @param time Current time.\n     */\n    startFadeIn(time: number) {\n        if (this.m_state === FadingState.FadingIn || this.m_state === FadingState.FadedIn) {\n            return;\n        }\n\n        if (this.m_state === FadingState.FadingOut) {\n            // The fadeout is not complete: compute the virtual fadingStartTime in the past, to get\n            // a correct end time:\n            this.value = 1.0 - this.value;\n            this.startTime = time - this.value * this.fadeTime;\n        } else {\n            this.startTime = time;\n            this.value = 0.0;\n            this.opacity = 0;\n        }\n\n        this.m_state = FadingState.FadingIn;\n    }\n\n    /**\n     * Updates the state to [[FadingState.FadingOut]].\n     * If previous state is [[FadingState.FadingOut]] or [[FadingState.FadedOut]] it remains\n     * unchanged.\n     *\n     * @param time Current time.\n     */\n    startFadeOut(time: number) {\n        if (this.m_state === FadingState.FadingOut || this.m_state === FadingState.FadedOut) {\n            return;\n        }\n\n        if (this.m_state === FadingState.FadingIn) {\n            // The fade-in is not complete: compute the virtual fadingStartTime in the past, to get\n            // a correct end time:\n            this.startTime = time - this.value * this.fadeTime;\n            this.value = 1.0 - this.value;\n        } else {\n            this.startTime = time;\n            this.value = 0.0;\n            this.opacity = 1;\n        }\n\n        this.m_state = FadingState.FadingOut;\n    }\n\n    /**\n     * Updates opacity to current time, changing the state to [[FadingState.FadedOut]] or\n     * [[FadingState.FadedIn]] when the opacity becomes 0 or 1 respectively.\n     * It does nothing if [[isFading]] !== `true`.\n     *\n     * @param time Current time.\n     * @param disableFading `true` if fading is disabled, `false` otherwise.\n     */\n    updateFading(time: number, disableFading: boolean): void {\n        if (this.m_state !== FadingState.FadingIn && this.m_state !== FadingState.FadingOut) {\n            return;\n        }\n\n        if (this.startTime === 0) {\n            this.startTime = time;\n        }\n\n        const fadingTime = time - this.startTime;\n        const startValue = this.m_state === FadingState.FadingIn ? 0 : 1;\n        const endValue = this.m_state === FadingState.FadingIn ? 1 : 0;\n\n        if (disableFading || fadingTime >= this.fadeTime) {\n            this.value = 1.0;\n            this.opacity = endValue;\n            this.m_state =\n                this.m_state === FadingState.FadingIn ? FadingState.FadedIn : FadingState.FadedOut;\n        } else {\n            // TODO: HARP-7648. Do this once for all labels (calculate the last frame value\n            // increment).\n            this.value = fadingTime / this.fadeTime;\n\n            this.opacity = THREE.MathUtils.clamp(\n                MathUtils.smootherStep(startValue, endValue, this.value),\n                0,\n                1\n            );\n            assert(this.isFading());\n        }\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { IChannel } from \"@here/harp-utils\";\nimport { PrePlacementResult } from \"./Placement\";\n\nexport class UpdateStats {\n    tiles: number = 0;\n    totalGroups: number = 0;\n    newGroups: number = 0;\n    totalLabels: number = 0;\n    results = new Array<number>(PrePlacementResult.Count);\n\n    constructor(private readonly m_logger: IChannel) {\n        this.results.fill(0);\n    }\n\n    clear() {\n        this.tiles = 0;\n        this.totalGroups = 0;\n        this.newGroups = 0;\n        this.totalLabels = 0;\n        this.results.fill(0);\n    }\n    log() {\n        this.m_logger.debug(\"Tiles\", this.tiles);\n        this.m_logger.debug(\"Total groups\", this.totalGroups);\n        this.m_logger.debug(\"New groups\", this.newGroups);\n        this.m_logger.debug(\"Total labels\", this.totalLabels);\n        this.m_logger.debug(\"Placed labels\", this.results[PrePlacementResult.Ok]);\n        this.m_logger.debug(\"Invisible\", this.results[PrePlacementResult.Invisible]);\n        this.m_logger.debug(\"Poi not ready\", this.results[PrePlacementResult.NotReady]);\n        this.m_logger.debug(\"Too far\", this.results[PrePlacementResult.TooFar]);\n        this.m_logger.debug(\"Duplicate\", this.results[PrePlacementResult.Duplicate]);\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { PriorityListGroup } from \"@here/harp-utils\";\nimport { TextElement } from \"./TextElement\";\n\n/**\n * Group of [[TextElement]] sharing same priority.\n */\nexport class TextElementGroup extends PriorityListGroup<TextElement> {}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { GroupedPriorityList } from \"@here/harp-utils\";\nimport { TextElement } from \"./TextElement\";\n\n/**\n * List of [[TextElement]] groups sorted by priority.\n */\nexport class TextElementGroupPriorityList extends GroupedPriorityList<TextElement> {}\n","/*\n * Copyright (C) 2020 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport {\n    IndexedTechniqueParams,\n    LineMarkerTechnique,\n    PoiTechnique,\n    TextTechnique\n} from \"@here/harp-datasource-protocol\";\nimport { TextLayoutStyle, TextRenderStyle } from \"@here/harp-text-canvas\";\nimport { Tile } from \"../Tile\";\n\nexport class TileTextStyleCache {\n    private textRenderStyles: TextRenderStyle[] = [];\n    private textLayoutStyles: TextLayoutStyle[] = [];\n    private tile: Tile;\n\n    constructor(tile: Tile) {\n        this.tile = tile;\n    }\n\n    clear() {\n        this.textRenderStyles.length = 0;\n        this.textLayoutStyles.length = 0;\n    }\n\n    getRenderStyle(\n        technique: (TextTechnique | PoiTechnique | LineMarkerTechnique) & IndexedTechniqueParams\n    ): TextRenderStyle {\n        let style = this.textRenderStyles[technique._index];\n        if (style === undefined) {\n            style = this.textRenderStyles[\n                technique._index\n            ] = this.tile.mapView.textElementsRenderer.styleCache.createRenderStyle(\n                this.tile,\n                technique\n            );\n        }\n        return style;\n    }\n\n    getLayoutStyle(\n        technique: (TextTechnique | PoiTechnique | LineMarkerTechnique) & IndexedTechniqueParams\n    ): TextLayoutStyle {\n        let style = this.textLayoutStyles[technique._index];\n        if (style === undefined) {\n            style = this.textLayoutStyles[\n                technique._index\n            ] = this.tile.mapView.textElementsRenderer.styleCache.createLayoutStyle(\n                this.tile,\n                technique\n            );\n        }\n        return style;\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\nimport * as THREE from \"three\";\n\nimport {\n    IBloomEffect,\n    IOutlineEffect,\n    ISepiaEffect,\n    IVignetteEffect\n} from \"@here/harp-datasource-protocol\";\nimport { SepiaShader, VignetteShader } from \"@here/harp-materials\";\nimport { IPassManager } from \"./IPassManager\";\nimport { LowResRenderPass } from \"./LowResRenderPass\";\nimport { MSAARenderPass, MSAASampling } from \"./MSAARenderPass\";\nimport { OutlineEffect } from \"./Outline\";\nimport { RenderPass, ShaderPass } from \"./Pass\";\nimport { BloomPass } from \"./UnrealBloomPass\";\n\nconst DEFAULT_DYNAMIC_MSAA_SAMPLING_LEVEL = MSAASampling.Level_1;\nconst DEFAULT_STATIC_MSAA_SAMPLING_LEVEL = MSAASampling.Level_4;\n\n/**\n * Interface for the antialias settings passed when instantiating a [[MapView]], and transferred to\n * the [[MapRenderingManager]] instance. These parameters can be changed at runtime as opposed to\n * the native WebGL antialiasing.\n */\nexport interface IMapAntialiasSettings {\n    /**\n     * Whether the MSAA is enabled or not.\n     *\n     * @default `false`\n     */\n    msaaEnabled: boolean;\n\n    /**\n     * The sampling level to use for MSAA during continuous rendering.\n     *\n     * @default `MSAASampling.Level_1`\n     */\n    dynamicMsaaSamplingLevel?: MSAASampling;\n\n    /**\n     * The sampling level to use for MSAA when the rendering stops.\n     *\n     * @default `MSAASampling.Level_4`\n     */\n    staticMsaaSamplingLevel?: MSAASampling;\n}\n\n/**\n * The `MapRenderingManager` class manages the map rendering (as opposed to text) by dispatching the\n * [[MapRenderingManager.render]] call to a set of internal [[Pass]] instances. It provides an API\n * to modify some of the rendering processes like the antialiasing behaviour at runtime.\n */\nexport interface IMapRenderingManager extends IPassManager {\n    /**\n     * Bloom effect parameters.\n     */\n    bloom: IBloomEffect;\n\n    /**\n     * Outline effect parameters.\n     */\n    outline: IOutlineEffect;\n\n    /**\n     * Vignette effect parameters.\n     */\n    vignette: IVignetteEffect;\n\n    /**\n     * Sepia effect parameters.\n     */\n    sepia: ISepiaEffect;\n\n    /**\n     * Set a `pixelRatio` for dynamic rendering (i.e. during animations). If a value is specified,\n     * the `LowResRenderPass` will be employed to used to render the scene into a lower resolution\n     * render target, which will then be rendered to the screen.\n     */\n    lowResPixelRatio?: number;\n\n    /**\n     * The level of MSAA sampling while the user interacts. It should be a low level so that the\n     * MSAA does not impact the framerate.\n     */\n    dynamicMsaaSamplingLevel: MSAASampling;\n\n    /**\n     * Enable or disable the MSAA. If disabled, `MapRenderingManager` will use the renderer provided\n     * in the [[MapRenderingManager.render]] method to render the scene.\n     */\n    msaaEnabled: boolean;\n\n    /**\n     * The higher level of MSAA sampling for a last frame to render, when the camera is static. It\n     * can be a high level, providing high quality renders requiring few tens of seconds, since no\n     * frame is expected to immediately follow in the requestAnimationFrame. It is still limited by\n     * zooming, since zooming is not requestAnimationFrame-based and can lead to stuttering if the\n     * render time is too long, except on desktop Mac, where mouse interaction already implements\n     * some damping. Higher levels of sampling may lead to noticeable color banding, visible in\n     * areas with a slight color gradient, like large areas or the sky background.\n     */\n    staticMsaaSamplingLevel: MSAASampling;\n\n    /**\n     * The method to call to render the map. This method depends on an `isStaticFrame` boolean that\n     * notifies the pass manager to switch to a higher level render quality for the last frame.\n     *\n     * @param renderer The ThreeJS WebGLRenderer instance to render the map with.\n     * @param isStaticFrame Whether the frame to render is static or dynamic. Selects level of\n     * antialiasing.\n     * @param time Optional time argument provided by the requestAnimationFrame, to pass to\n     * sub-passes.\n     */\n    render(\n        renderer: THREE.WebGLRenderer,\n        scene: THREE.Scene,\n        camera: THREE.PerspectiveCamera | THREE.OrthographicCamera,\n        isStaticFrame: boolean,\n        time?: number\n    ): void;\n\n    /**\n     * Updating the outline rebuilds the outline materials of every outlined mesh.\n     *\n     * @param options outline options from the [[Theme]].\n     */\n    updateOutline(options: {\n        thickness: number;\n        color: string;\n        ghostExtrudedPolygons: boolean;\n    }): void;\n}\n\n/**\n * The implementation of [[IMapRenderingManager]] to instantiate in [[MapView]] and manage the map\n * rendering.\n */\nexport class MapRenderingManager implements IMapRenderingManager {\n    bloom = {\n        enabled: false,\n        strength: 1.5,\n        radius: 0.4,\n        threshold: 0.85\n    };\n    outline = {\n        enabled: false,\n        thickness: 0.005,\n        color: \"#000000\",\n        ghostExtrudedPolygons: false,\n        needsUpdate: false\n    };\n    vignette = {\n        enabled: false,\n        offset: 1.0,\n        darkness: 1.0\n    };\n    sepia = {\n        enabled: false,\n        amount: 0.5\n    };\n\n    private m_width: number = 1;\n    private m_height: number = 1;\n\n    private m_outlineEffect?: OutlineEffect;\n    private m_msaaPass: MSAARenderPass;\n    private m_renderPass: RenderPass = new RenderPass();\n    private m_target1: THREE.WebGLRenderTarget = new THREE.WebGLRenderTarget(1, 1);\n    private m_target2: THREE.WebGLRenderTarget = new THREE.WebGLRenderTarget(1, 1);\n    private m_bloomPass?: BloomPass;\n    private m_sepiaPass: ShaderPass = new ShaderPass(SepiaShader);\n    private m_vignettePass: ShaderPass = new ShaderPass(VignetteShader);\n    private m_readBuffer: THREE.WebGLRenderTarget;\n    private m_dynamicMsaaSamplingLevel: MSAASampling;\n    private m_staticMsaaSamplingLevel: MSAASampling;\n    private m_lowResPass: LowResRenderPass;\n\n    /**\n     * The constructor of `MapRenderingManager`.\n     *\n     * @param width Width of the frame buffer.\n     * @param height Height of the frame buffer.\n     * @param lowResPixelRatio The `pixelRatio` determines the resolution of the internal\n     *  `WebGLRenderTarget`. Values between 0.5 and `window.devicePixelRatio` can be tried to give\n     * good results. A value of `undefined` disables the low res render pass. The value should not\n     * be larger than`window.devicePixelRatio`.\n     * @param antialiasSetting The object defining the demeanor of MSAA.\n     */\n    constructor(\n        width: number,\n        height: number,\n        lowResPixelRatio: number | undefined,\n        antialiasSettings: IMapAntialiasSettings | undefined = { msaaEnabled: false }\n    ) {\n        this.m_readBuffer = new THREE.WebGLRenderTarget(width, height);\n        this.m_msaaPass = new MSAARenderPass();\n        this.m_msaaPass.enabled =\n            antialiasSettings !== undefined ? antialiasSettings.msaaEnabled === true : false;\n        this.m_dynamicMsaaSamplingLevel =\n            antialiasSettings.dynamicMsaaSamplingLevel === undefined\n                ? DEFAULT_DYNAMIC_MSAA_SAMPLING_LEVEL\n                : antialiasSettings.dynamicMsaaSamplingLevel;\n        this.m_staticMsaaSamplingLevel =\n            antialiasSettings.staticMsaaSamplingLevel === undefined\n                ? DEFAULT_STATIC_MSAA_SAMPLING_LEVEL\n                : antialiasSettings.staticMsaaSamplingLevel;\n        this.m_lowResPass = new LowResRenderPass(lowResPixelRatio);\n        this.m_lowResPass.enabled = lowResPixelRatio !== undefined;\n    }\n\n    updateOutline(options: { thickness: number; color: string; ghostExtrudedPolygons: boolean }) {\n        this.outline.color = options.color;\n        this.outline.thickness = options.thickness;\n        this.outline.ghostExtrudedPolygons = options.ghostExtrudedPolygons;\n        this.outline.needsUpdate = true;\n    }\n\n    /**\n     * The method to call to render the map with the `MapRenderingManager` instance. It contains the\n     * chain of sub-passes that can transfer the write and read buffers, and other sheer rendering\n     * conditions as disabling AA when a high DPI device is in use.\n     *\n     * @param renderer The ThreeJS WebGLRenderer instance to render the map with.\n     * @param scene The ThreeJS Scene instance containing the map objects to render.\n     * @param camera The ThreeJS Camera instance to render the scene through.\n     * @param isStaticFrame Whether the frame to render is static or dynamic. Selects level of\n     * antialiasing.\n     */\n    render(\n        renderer: THREE.WebGLRenderer,\n        scene: THREE.Scene,\n        camera: THREE.PerspectiveCamera | THREE.OrthographicCamera,\n        isStaticFrame: boolean\n    ) {\n        const target = null;\n        if (!isStaticFrame && this.m_lowResPass.pixelRatio !== undefined) {\n            // Not designed to be combined with our own MSAA\n            this.m_lowResPass.renderToScreen = true;\n            this.m_lowResPass.render(renderer, scene, camera, target, this.m_readBuffer);\n            return;\n        }\n\n        const usePostEffects =\n            this.bloom.enabled ||\n            this.outline.enabled ||\n            this.vignette.enabled ||\n            this.sepia.enabled;\n\n        let activeTarget: null | THREE.WebGLRenderTarget = null;\n\n        // 1. If the bloom is enabled, clear the depth.\n        if (this.bloom.enabled || this.vignette.enabled || this.sepia.enabled) {\n            renderer.setRenderTarget(this.m_target1);\n            renderer.clearDepth();\n        }\n\n        // 2. Render the map.\n\n        if (this.m_msaaPass.enabled) {\n            // Use a higher MSAA sampling level for static rendering.\n            this.m_msaaPass.samplingLevel = isStaticFrame\n                ? this.m_staticMsaaSamplingLevel\n                : this.m_dynamicMsaaSamplingLevel;\n            // MSAA is the only effect for the moment.\n            this.m_msaaPass.renderToScreen = !usePostEffects;\n            // Render to the specified target with the MSAA pass.\n            this.m_msaaPass.render(renderer, scene, camera, target, this.m_readBuffer);\n        } else {\n            if (this.bloom.enabled || this.vignette.enabled || this.sepia.enabled) {\n                activeTarget = this.m_target1;\n                this.m_renderPass.render(renderer, scene, camera, this.m_target1, null!);\n            } else if (!this.outline.enabled || (this.outline.enabled && !this.bloom.enabled)) {\n                renderer.render(scene, camera);\n            }\n        }\n\n        // 3. Apply effects\n        if (this.outline.enabled) {\n            if (this.m_outlineEffect === undefined) {\n                this.m_outlineEffect = new OutlineEffect(renderer);\n            }\n            if (this.outline.needsUpdate) {\n                this.m_outlineEffect.color = this.outline.color;\n                this.m_outlineEffect.thickness = this.outline.thickness;\n                this.m_outlineEffect.ghostExtrudedPolygons = this.outline.ghostExtrudedPolygons;\n                this.outline.needsUpdate = false;\n            }\n            const nextEffectEnabled =\n                this.bloom.enabled || this.vignette.enabled || this.sepia.enabled;\n            if (nextEffectEnabled) {\n                activeTarget = this.m_target1;\n            }\n            renderer.setRenderTarget(nextEffectEnabled ? activeTarget : null!);\n            this.m_outlineEffect.render(scene, camera);\n        }\n\n        if (this.bloom.enabled) {\n            if (this.m_bloomPass === undefined) {\n                this.m_bloomPass = new BloomPass(\n                    new THREE.Vector2(this.m_width, this.m_height),\n                    this.bloom.strength,\n                    this.bloom.radius,\n                    this.bloom.threshold\n                );\n            }\n            const nextEffectEnabled = this.vignette.enabled || this.sepia.enabled;\n            this.m_bloomPass.renderToScreen = !nextEffectEnabled;\n            this.m_bloomPass.radius = this.bloom.radius;\n            this.m_bloomPass.strength = this.bloom.strength;\n            this.m_bloomPass.threshold = this.bloom.threshold;\n            this.m_bloomPass.render(renderer, scene, camera, null!, activeTarget!);\n        } else if (this.m_bloomPass !== undefined) {\n            this.m_bloomPass.dispose();\n            this.m_bloomPass = undefined;\n        }\n\n        if (this.vignette.enabled) {\n            const oldTarget = activeTarget!;\n            const nextEffectEnabled = this.sepia.enabled;\n            this.m_vignettePass.uniforms.offset.value = this.vignette.offset;\n            this.m_vignettePass.uniforms.darkness.value = this.vignette.darkness;\n            this.m_vignettePass.renderToScreen = !nextEffectEnabled;\n            if (nextEffectEnabled) {\n                activeTarget = activeTarget === this.m_target1 ? this.m_target2 : this.m_target1;\n            }\n            this.m_vignettePass.render(renderer, scene, camera, activeTarget!, oldTarget);\n        }\n\n        if (this.sepia.enabled) {\n            this.m_sepiaPass.renderToScreen = true;\n            this.m_sepiaPass.uniforms.amount.value = this.sepia.amount;\n            this.m_sepiaPass.render(renderer, scene, camera, null!, activeTarget!);\n        }\n    }\n\n    /**\n     * The resize function to call on resize events to resize the render targets. It shall include\n     * the resize methods of all the sub-passes used in `MapRenderingManager`.\n     *\n     * @param width New width to use.\n     * @param height New height to use.\n     */\n    setSize(width: number, height: number) {\n        this.m_readBuffer.setSize(width, height);\n        this.m_msaaPass.setSize(width, height);\n        if (this.m_bloomPass !== undefined) {\n            this.m_bloomPass.setSize(width, height);\n        }\n        this.m_lowResPass.setSize(width, height);\n        this.m_target1.setSize(width, height);\n        this.m_target2.setSize(width, height);\n        this.m_width = width;\n        this.m_height = height;\n    }\n\n    /**\n     * The `lowResPixelRatio` determines the resolution of the internal `WebGLRenderTarget`. Values\n     * between 0.5 and `window.devicePixelRatio` can be tried to give  good results. A value of\n     * `undefined` disables the low res render pass. The value should not be larger than\n     * `window.devicePixelRatio`.\n     */\n    get lowResPixelRatio(): number | undefined {\n        return this.m_lowResPass.pixelRatio;\n    }\n\n    set lowResPixelRatio(pixelRatio: number | undefined) {\n        this.m_lowResPass.pixelRatio = pixelRatio;\n        this.m_lowResPass.enabled = pixelRatio !== undefined;\n    }\n\n    /**\n     * Set the level of sampling while the user interacts.\n     *\n     * @param samplingLevel The sampling level.\n     */\n    set dynamicMsaaSamplingLevel(samplingLevel: MSAASampling) {\n        this.m_dynamicMsaaSamplingLevel = samplingLevel;\n    }\n\n    /**\n     * Return the sampling level defined during continuous rendering.\n     */\n    get dynamicMsaaSamplingLevel(): MSAASampling {\n        return this.m_dynamicMsaaSamplingLevel;\n    }\n\n    /**\n     * Enable or disable the MSAA. If disabled, `MapRenderingManager` will use the renderer provided\n     * in the [[MapRenderingManager.render]] method to render the scene.\n     *\n     * @param value If `true`, MSAA is enabled, disabled otherwise.\n     */\n    set msaaEnabled(value: boolean) {\n        this.m_msaaPass.enabled = value;\n    }\n\n    /**\n     * Return whether the MSAA is enabled.\n     */\n    get msaaEnabled(): boolean {\n        return this.m_msaaPass.enabled;\n    }\n\n    /**\n     * Set the sampling level for rendering static frames.\n     *\n     * @param samplingLevel The sampling level.\n     */\n    set staticMsaaSamplingLevel(samplingLevel: MSAASampling) {\n        this.m_staticMsaaSamplingLevel = samplingLevel;\n    }\n\n    /**\n     * Return the sampling level defined for rendering static frames.\n     */\n\n    get staticMsaaSamplingLevel(): MSAASampling {\n        return this.m_staticMsaaSamplingLevel;\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\nimport { CopyMaterial, CopyShader } from \"@here/harp-materials\";\nimport * as THREE from \"three\";\n\nimport { Pass } from \"./Pass\";\n\n/**\n * The `LowResRenderPass` renders the scene at a lower resolution into an internal\n * `WebGLRenderTarget`, and then copies the result into the frame buffer. The size of the internal\n * buffer is determined by the current frame buffer size multiplied by `pixelRatio`.\n *\n * @note Since no anti-aliasing is applied during dynamic rendering, visual artifacts may be\n * visible.\n */\nexport class LowResRenderPass extends Pass {\n    private m_renderTarget: THREE.WebGLRenderTarget | null = null;\n    private readonly m_localCamera: THREE.OrthographicCamera = new THREE.OrthographicCamera(\n        -1,\n        1,\n        1,\n        -1,\n        0,\n        1\n    );\n    private readonly m_quadScene: THREE.Scene = new THREE.Scene();\n    private readonly m_quadUniforms: { [uniformName: string]: THREE.IUniform } =\n        CopyShader.uniforms;\n    private readonly m_quadMaterial: THREE.ShaderMaterial = new CopyMaterial(this.m_quadUniforms);\n    private readonly m_quad: THREE.Mesh = new THREE.Mesh(\n        new THREE.PlaneBufferGeometry(2, 2),\n        this.m_quadMaterial\n    );\n    private m_pixelRatio: number | undefined;\n    private m_savedWidth = 0;\n    private m_savedHeight = 0;\n\n    /**\n     * The constructor for `LowResRenderPass`. It builds an internal scene with a camera looking at\n     * a quad.\n     *\n     * @param lowResPixelRatio The `pixelRatio` determines the resolution of the internal\n     *  `WebGLRenderTarget`. Values between 0.5 and `window.devicePixelRatio` can be tried to give\n     * good results. A value of `undefined` disables the low res render pass. The value should not\n     * be larger than`window.devicePixelRatio`.\n     */\n    constructor(public lowResPixelRatio?: number) {\n        super();\n        this.m_quad.frustumCulled = false;\n        this.m_quadScene.add(this.m_quad);\n        this.m_pixelRatio = lowResPixelRatio;\n    }\n\n    /**\n     * Releases all used resources.\n     */\n    dispose() {\n        this.m_quadMaterial.dispose();\n        this.m_quad.geometry.dispose();\n        if (this.m_renderTarget !== null) {\n            this.m_renderTarget.dispose();\n            this.m_renderTarget = null;\n        }\n    }\n\n    /**\n     * If a value is specified, a low resolution render pass is used to render the scene into a\n     * low resolution render target, before it is copied to the screen.\n     *\n     * A value of `undefined` disables the low res render pass. The value should not be larger than\n     * `window.devicePixelRatio`.\n     *\n     * @default `undefined`\n     */\n    set pixelRatio(ratio: number | undefined) {\n        this.m_pixelRatio = ratio;\n        if (this.m_renderTarget && this.pixelRatio !== undefined) {\n            this.m_renderTarget.setSize(\n                Math.floor(this.m_savedWidth * this.pixelRatio),\n                Math.floor(this.m_savedHeight * this.pixelRatio)\n            );\n        }\n    }\n\n    get pixelRatio(): number | undefined {\n        return this.m_pixelRatio;\n    }\n\n    /**\n     * The render function of `LowResRenderPass`. It renders the whole scene into an internal\n     * `WebGLRenderTarget` instance with a lower resolution, using the passed in `WebGLRenderer`.\n     * The low resolution image is then copied to the `writeBuffer`, which is `undefined` in case it\n     * is the screen.\n     *\n     * @param renderer The ThreeJS WebGLRenderer instance to render the scene with.\n     * @param scene The ThreeJS Scene instance to render the scene with.\n     * @param camera The ThreeJS Camera instance to render the scene with.\n     * @param writeBuffer A ThreeJS WebGLRenderTarget instance to render the scene to.\n     * @param readBuffer A ThreeJS WebGLRenderTarget instance to render the scene.\n     * @override\n     */\n    render(\n        renderer: THREE.WebGLRenderer,\n        scene: THREE.Scene,\n        camera: THREE.PerspectiveCamera | THREE.OrthographicCamera,\n        writeBuffer: THREE.WebGLRenderTarget | null,\n        readBuffer: THREE.WebGLRenderTarget\n    ) {\n        if (!this.enabled || this.pixelRatio === undefined) {\n            return;\n        }\n\n        // Initiates the local render target with the read buffer's dimensions, if not available.\n        if (this.m_renderTarget === null) {\n            this.m_savedWidth = readBuffer.width;\n            this.m_savedHeight = readBuffer.height;\n            this.m_renderTarget = new THREE.WebGLRenderTarget(\n                Math.floor(this.m_savedWidth * this.pixelRatio),\n                Math.floor(this.m_savedHeight * this.pixelRatio),\n                {\n                    minFilter: THREE.LinearFilter,\n                    magFilter: THREE.LinearFilter,\n                    format: THREE.RGBAFormat,\n                    depthBuffer: true,\n                    stencilBuffer: true\n                }\n            );\n            this.m_renderTarget.texture.name = \"LowResRenderPass.sample\";\n        }\n\n        this.m_quadUniforms.tDiffuse.value = this.m_renderTarget.texture;\n        this.m_quadUniforms.opacity.value = 1.0;\n\n        const oldRenderTarget = renderer.getRenderTarget();\n        renderer.setRenderTarget(this.m_renderTarget);\n        renderer.clear();\n        // Render into the low resolution internal render target.\n        renderer.render(scene, camera);\n\n        // Render the low resolution target into the screen.\n        // NOTE: three.js doesn't like undefined as renderTarget, but works with `null`\n        renderer.setRenderTarget(this.renderToScreen ? null : writeBuffer);\n        renderer.clear();\n        renderer.render(this.m_quadScene, this.m_localCamera);\n        renderer.setRenderTarget(oldRenderTarget);\n    }\n\n    /**\n     * Resize the internal render target to match the new size specified. The size of internal\n     * buffer depends on the `pixelRatio`.\n     *\n     * @param width New width to apply to the render target.\n     * @param height New height to apply to the render target.\n     * @override\n     */\n    setSize(width: number, height: number) {\n        this.m_savedWidth = width;\n        this.m_savedHeight = height;\n        if (this.m_renderTarget && this.pixelRatio !== undefined) {\n            this.m_renderTarget.setSize(\n                Math.floor(width * this.pixelRatio),\n                Math.floor(height * this.pixelRatio)\n            );\n        }\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\nimport { chainCallbacks } from \"@here/harp-utils\";\nimport * as THREE from \"three\";\n\nconst vertexShaderChunk = `\n    uniform float outlineThickness;\n\n    vec4 calculateOutline( vec4 pos, vec3 objectNormal, vec4 skinned ) {\n\n        float thickness = outlineThickness;\n        const float ratio = 1.0;\n        vec4 pos2 = projectionMatrix * modelViewMatrix * vec4( skinned.xyz + objectNormal, 1.0 );\n        vec4 norm = normalize( pos - pos2 );\n        return pos + norm * thickness * pos.w * ratio;\n\n    }`;\n\nconst vertexShaderChunk2 = `\n    #if ! defined( LAMBERT ) && ! defined( PHONG ) && ! defined( TOON ) && ! defined( STANDARD )\n        #ifndef USE_ENVMAP\n            vec3 objectNormal = normalize( normal );\n        #endif\n    #endif\n\n    #ifdef FLIP_SIDED\n        objectNormal = -objectNormal;\n    #endif\n\n    #ifdef DECLARE_TRANSFORMED\n        vec3 transformed = vec3( position );\n    #endif\n\n    gl_Position = calculateOutline( gl_Position, objectNormal, vec4( transformed, 1.0 ) );\n\n    #include <fog_vertex>`;\n\nconst fragmentShader = `\n    #include <common>\n    #include <fog_pars_fragment>\n\n    uniform vec3 outlineColor;\n    uniform float outlineAlpha;\n\n    void main() {\n\n        gl_FragColor = vec4( outlineColor, outlineAlpha );\n\n        #include <fog_fragment>\n\n    }`;\n\nexport class OutlineEffect {\n    enabled: boolean = true;\n\n    autoClear: boolean;\n    domElement: HTMLCanvasElement;\n    shadowMap: THREE.WebGLShadowMap;\n\n    private m_defaultThickness: number = 0.02;\n    private m_defaultColor: THREE.Color = new THREE.Color(0, 0, 0);\n    private m_defaultAlpha: number = 1;\n    private m_defaultKeepAlive: boolean = false;\n    private m_ghostExtrudedPolygons: boolean = false;\n\n    private m_cache: any = {};\n    private m_removeThresholdCount: number = 60;\n    private m_originalMaterials: any = {};\n    private m_originalOnBeforeRenders: any = {};\n\n    private m_shaderIDs: { [key: string]: string } = {\n        MeshBasicMaterial: \"basic\",\n        MeshLambertMaterial: \"lambert\",\n        MeshPhongMaterial: \"phong\",\n        MeshToonMaterial: \"phong\",\n        MeshStandardMaterial: \"physical\",\n        MeshPhysicalMaterial: \"physical\"\n    };\n    private m_uniformsChunk = {\n        outlineThickness: { value: this.m_defaultThickness },\n        outlineColor: { value: this.m_defaultColor },\n        outlineAlpha: { value: this.m_defaultAlpha }\n    };\n\n    constructor(private m_renderer: THREE.WebGLRenderer) {\n        this.autoClear = m_renderer.autoClear;\n        this.domElement = m_renderer.domElement;\n        this.shadowMap = m_renderer.shadowMap;\n    }\n\n    set thickness(thickness: number) {\n        this.m_defaultThickness = thickness;\n        this.m_uniformsChunk.outlineThickness.value = thickness;\n        this.m_cache = {};\n    }\n\n    set color(color: string) {\n        this.m_defaultColor.set(color);\n        this.m_cache = {};\n    }\n\n    set ghostExtrudedPolygons(ghost: boolean) {\n        this.m_ghostExtrudedPolygons = ghost;\n    }\n\n    clear(color: boolean, depth: boolean, stencil: boolean) {\n        this.m_renderer.clear(color, depth, stencil);\n    }\n\n    getPixelRatio() {\n        return this.m_renderer.getPixelRatio();\n    }\n\n    setPixelRatio(value: number) {\n        this.m_renderer.setPixelRatio(value);\n    }\n\n    getSize(target: THREE.Vector2) {\n        return this.m_renderer.getSize(target);\n    }\n\n    setSize(width: number, height: number, updateStyle: boolean) {\n        this.m_renderer.setSize(width, height, updateStyle);\n    }\n\n    setViewport(x: number, y: number, width: number, height: number) {\n        this.m_renderer.setViewport(x, y, width, height);\n    }\n\n    setScissor(x: number, y: number, width: number, height: number) {\n        this.m_renderer.setScissor(x, y, width, height);\n    }\n\n    setScissorTest(boolean: boolean) {\n        this.m_renderer.setScissorTest(boolean);\n    }\n\n    setRenderTarget(renderTarget: THREE.WebGLRenderTarget) {\n        this.m_renderer.setRenderTarget(renderTarget);\n    }\n\n    render(scene: THREE.Scene, camera: THREE.Camera) {\n        // Re-rendering the scene with the outline effect enables to hide the\n        // extruded polygons and show only the outlines (it is a hack and should be\n        // implemented another way!).\n        if (this.m_ghostExtrudedPolygons) {\n            if (!this.enabled) {\n                this.m_renderer.render(scene, camera);\n                return;\n            }\n\n            const currentAutoClear = this.m_renderer.autoClear;\n            this.m_renderer.autoClear = this.autoClear;\n\n            this.m_renderer.render(scene, camera);\n\n            this.m_renderer.autoClear = currentAutoClear;\n        }\n\n        this.renderOutline(scene, camera);\n    }\n\n    renderOutline(scene: THREE.Scene, camera: THREE.Camera) {\n        const currentAutoClear = this.m_renderer.autoClear;\n        const currentSceneAutoUpdate = scene.autoUpdate;\n        const currentSceneBackground = scene.background;\n        const currentShadowMapEnabled = this.m_renderer.shadowMap.enabled;\n\n        scene.autoUpdate = false;\n        scene.background = null;\n        this.m_renderer.autoClear = false;\n        this.m_renderer.shadowMap.enabled = false;\n\n        scene.traverse(this.setOutlineMaterial.bind(this));\n\n        this.m_renderer.render(scene, camera);\n\n        scene.traverse(this.restoreOriginalMaterial.bind(this));\n\n        this.cleanupCache();\n\n        scene.autoUpdate = currentSceneAutoUpdate;\n        scene.background = currentSceneBackground;\n        this.m_renderer.autoClear = currentAutoClear;\n        this.m_renderer.shadowMap.enabled = currentShadowMapEnabled;\n    }\n\n    private createInvisibleMaterial() {\n        return new THREE.ShaderMaterial({ name: \"invisible\", visible: false });\n    }\n\n    private createMaterial(originalMaterial: THREE.Material) {\n        const shaderID = this.m_shaderIDs[originalMaterial.type];\n        let originalUniforms;\n        let originalVertexShader;\n\n        if (shaderID !== undefined) {\n            const shader = THREE.ShaderLib[shaderID];\n            originalUniforms = shader.uniforms;\n            originalVertexShader = shader.vertexShader;\n        } else if ((originalMaterial as any).isRawShaderMaterial === true) {\n            originalUniforms = (originalMaterial as any).uniforms;\n            originalVertexShader = (originalMaterial as any).vertexShader;\n\n            if (\n                !/attribute\\s+vec3\\s+position\\s*;/.test(originalVertexShader) ||\n                !/attribute\\s+vec3\\s+normal\\s*;/.test(originalVertexShader)\n            ) {\n                return this.createInvisibleMaterial();\n            }\n        } else if ((originalMaterial as any).isShaderMaterial === true) {\n            originalUniforms = (originalMaterial as any).uniforms;\n            originalVertexShader = (originalMaterial as any).vertexShader;\n        } else {\n            return this.createInvisibleMaterial();\n        }\n\n        const uniforms = { ...originalUniforms, ...this.m_uniformsChunk };\n\n        const vertexShader = originalVertexShader\n            // put vertexShaderChunk right before \"void main() {...}\"\n            .replace(/void\\s+main\\s*\\(\\s*\\)/, vertexShaderChunk + \"\\nvoid main()\")\n            // put vertexShaderChunk2 the end of \"void main() {...}\"\n            // Note: here assums originalVertexShader ends with \"}\" of \"void main() {...}\"\n            .replace(/\\}\\s*$/, vertexShaderChunk2 + \"\\n}\")\n            // remove any light related lines\n            // Note: here is very sensitive to originalVertexShader\n            // TODO: consider safer way\n            .replace(/#include\\s+<[\\w_]*light[\\w_]*>/g, \"\");\n\n        const defines = {};\n\n        if (\n            !/vec3\\s+transformed\\s*=/.test(originalVertexShader) &&\n            !/#include\\s+<begin_vertex>/.test(originalVertexShader)\n        ) {\n            (defines as any).DECLARE_TRANSFORMED = true;\n        }\n\n        return new THREE.ShaderMaterial({\n            defines,\n            uniforms,\n            vertexShader,\n            fragmentShader,\n            side: THREE.BackSide,\n            //wireframe: true,\n            skinning: false,\n            morphTargets: false,\n            morphNormals: false,\n            fog: false\n        });\n    }\n\n    private getOutlineMaterialFromCache(originalMaterial: THREE.Material) {\n        let data = this.m_cache[originalMaterial.uuid];\n\n        if (data === undefined) {\n            data = {\n                material: this.createMaterial(originalMaterial),\n                used: true,\n                keepAlive: this.m_defaultKeepAlive,\n                count: 0\n            };\n\n            this.m_cache[originalMaterial.uuid] = data;\n        }\n\n        data.used = true;\n\n        return data.material;\n    }\n\n    private getOutlineMaterial(originalMaterial: THREE.Material) {\n        const outlineMaterial = this.getOutlineMaterialFromCache(originalMaterial);\n\n        this.m_originalMaterials[outlineMaterial.uuid] = originalMaterial;\n\n        this.updateOutlineMaterial(outlineMaterial, originalMaterial);\n\n        return outlineMaterial;\n    }\n\n    private setOutlineMaterial(object: THREE.Object3D) {\n        if ((object as THREE.Mesh).material === undefined) {\n            return;\n        }\n\n        if (Array.isArray((object as THREE.Mesh).material)) {\n            for (\n                let i = 0, il = ((object as THREE.Mesh).material as THREE.Material[]).length;\n                i < il;\n                i++\n            ) {\n                ((object as THREE.Mesh).material as THREE.Material[])[i] = this.getOutlineMaterial(\n                    ((object as THREE.Mesh).material as THREE.Material[])[i]\n                );\n            }\n        } else {\n            (object as THREE.Mesh).material = this.getOutlineMaterial(\n                (object as THREE.Mesh).material as THREE.Material\n            );\n        }\n\n        this.m_originalOnBeforeRenders[object.uuid] = object.onBeforeRender;\n        object.onBeforeRender = chainCallbacks(\n            object.onBeforeRender,\n            this.onBeforeRender.bind(this)\n        );\n    }\n\n    private restoreOriginalMaterial(object: THREE.Object3D) {\n        if ((object as THREE.Mesh).material === undefined) {\n            return;\n        }\n\n        if (Array.isArray((object as THREE.Mesh).material)) {\n            for (\n                let i = 0, il = ((object as THREE.Mesh).material as THREE.Material[]).length;\n                i < il;\n                i++\n            ) {\n                ((object as THREE.Mesh).material as THREE.Material[])[i] = this.m_originalMaterials[\n                    ((object as THREE.Mesh).material as THREE.Material[])[i].uuid\n                ];\n            }\n        } else {\n            (object as THREE.Mesh).material = this.m_originalMaterials[\n                ((object as THREE.Mesh).material as THREE.Material).uuid\n            ];\n        }\n\n        object.onBeforeRender = this.m_originalOnBeforeRenders[object.uuid];\n    }\n\n    private onBeforeRender(\n        renderer: THREE.WebGLRenderer,\n        scene: THREE.Scene,\n        camera: THREE.Camera,\n        geometry: THREE.Geometry | THREE.BufferGeometry,\n        material: THREE.Material,\n        group: THREE.Group\n    ) {\n        const originalMaterial = this.m_originalMaterials[material.uuid];\n\n        // just in case\n        if (originalMaterial === undefined) {\n            return;\n        }\n\n        this.updateUniforms(material, originalMaterial);\n    }\n\n    private updateUniforms(material: THREE.Material, originalMaterial: THREE.Material) {\n        const outlineParameters = originalMaterial.userData.outlineParameters;\n\n        (material as any).uniforms.outlineAlpha.value = originalMaterial.opacity;\n\n        if (outlineParameters !== undefined) {\n            if (outlineParameters.thickness !== undefined) {\n                (material as any).uniforms.outlineThickness.value = outlineParameters.thickness;\n            }\n            if (outlineParameters.color !== undefined) {\n                (material as any).uniforms.outlineColor.value.fromArray(outlineParameters.color);\n            }\n            if (outlineParameters.alpha !== undefined) {\n                (material as any).uniforms.outlineAlpha.value = outlineParameters.alpha;\n            }\n        }\n    }\n\n    private updateOutlineMaterial(material: THREE.Material, originalMaterial: THREE.Material) {\n        if (material.name === \"invisible\") {\n            return;\n        }\n\n        const outlineParameters = originalMaterial.userData.outlineParameters;\n\n        (material as any).skinning = (originalMaterial as any).skinning;\n        (material as any).morphTargets = (originalMaterial as any).morphTargets;\n        (material as any).morphNormals = (originalMaterial as any).morphNormals;\n        material.fog = originalMaterial.fog;\n\n        if (outlineParameters !== undefined) {\n            material.visible =\n                originalMaterial.visible === false\n                    ? false\n                    : outlineParameters.visible !== undefined\n                    ? outlineParameters.visible\n                    : true;\n\n            material.transparent =\n                outlineParameters.alpha !== undefined && outlineParameters.alpha < 1.0\n                    ? true\n                    : originalMaterial.transparent;\n\n            if (outlineParameters.keepAlive !== undefined) {\n                this.m_cache[originalMaterial.uuid].keepAlive = outlineParameters.keepAlive;\n            }\n        } else {\n            material.transparent = originalMaterial.transparent;\n            material.visible = originalMaterial.visible;\n        }\n\n        if ((originalMaterial as any).wireframe === true || originalMaterial.depthTest === false) {\n            material.visible = false;\n        }\n    }\n\n    private cleanupCache() {\n        let keys;\n\n        // clear originialMaterials\n        keys = Object.keys(this.m_originalMaterials);\n\n        for (let i = 0, il = keys.length; i < il; i++) {\n            this.m_originalMaterials[keys[i]] = undefined;\n        }\n\n        // clear originalOnBeforeRenders\n        keys = Object.keys(this.m_originalOnBeforeRenders);\n\n        for (let i = 0, il = keys.length; i < il; i++) {\n            this.m_originalOnBeforeRenders[keys[i]] = undefined;\n        }\n\n        // remove unused outlineMaterial from cache\n        keys = Object.keys(this.m_cache);\n\n        for (const key of keys) {\n            if (this.m_cache[key].used === false) {\n                this.m_cache[key].count++;\n\n                if (\n                    this.m_cache[key].keepAlive === false &&\n                    this.m_cache[key].count > this.m_removeThresholdCount\n                ) {\n                    delete this.m_cache[key];\n                }\n            } else {\n                this.m_cache[key].used = false;\n                this.m_cache[key].count = 0;\n            }\n        }\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { CopyShader, LuminosityHighPassShader } from \"@here/harp-materials\";\nimport * as THREE from \"three\";\nimport { Pass } from \"./Pass\";\n\nconst BlurDirectionX = new THREE.Vector2(1.0, 0.0);\nconst BlurDirectionY = new THREE.Vector2(0.0, 1.0);\n\n/**\n * The TS version of ThreeJS's UnrealBloomPass.\n */\nexport class BloomPass extends Pass {\n    strength: number;\n    radius: number;\n    threshold: number;\n    resolution: THREE.Vector2 = new THREE.Vector2(256, 256);\n    private m_renderTargetsHorizontal: THREE.WebGLRenderTarget[] = [];\n    private m_renderTargetsVertical: THREE.WebGLRenderTarget[] = [];\n    private m_nMips: number = 5;\n    private m_highPassUniforms: any;\n    private m_materialHighPassFilter: THREE.ShaderMaterial;\n    private m_separableBlurMaterials: THREE.ShaderMaterial[] = [];\n    private m_materialCopy: THREE.ShaderMaterial;\n    private m_copyUniforms: any;\n    private m_compositeMaterial: THREE.ShaderMaterial;\n\n    private m_camera: THREE.OrthographicCamera = new THREE.OrthographicCamera(-1, 1, 1, -1, 0, 1);\n    private m_scene: THREE.Scene = new THREE.Scene();\n    private m_basic = new THREE.MeshBasicMaterial();\n    private m_quad = new THREE.Mesh(new THREE.PlaneBufferGeometry(2, 2));\n\n    private m_bloomTintColors: THREE.Vector3[] = [\n        new THREE.Vector3(1, 1, 1),\n        new THREE.Vector3(1, 1, 1),\n        new THREE.Vector3(1, 1, 1),\n        new THREE.Vector3(1, 1, 1),\n        new THREE.Vector3(1, 1, 1)\n    ];\n\n    private m_renderTargetBright: THREE.WebGLRenderTarget;\n\n    constructor(resolution: THREE.Vector2, strength: number, radius: number, threshold: number) {\n        super();\n\n        this.strength = strength;\n        this.radius = radius;\n        this.threshold = threshold;\n        this.resolution = resolution;\n\n        this.m_quad.frustumCulled = false;\n        this.m_scene.add(this.m_quad);\n\n        const pars = {\n            minFilter: THREE.LinearFilter,\n            magFilter: THREE.LinearFilter,\n            format: THREE.RGBAFormat\n        };\n\n        let resx = Math.round(this.resolution.x / 2);\n        let resy = Math.round(this.resolution.y / 2);\n\n        this.m_renderTargetBright = new THREE.WebGLRenderTarget(resx, resy, pars);\n        this.m_renderTargetBright.texture.name = \"UnrealBloomPass.bright\";\n        this.m_renderTargetBright.texture.generateMipmaps = false;\n\n        for (let i = 0; i < this.m_nMips; i++) {\n            const renderTargetHorizonal = new THREE.WebGLRenderTarget(resx, resy, pars);\n            renderTargetHorizonal.texture.name = \"UnrealBloomPass.h\" + i;\n            renderTargetHorizonal.texture.generateMipmaps = false;\n            this.m_renderTargetsHorizontal.push(renderTargetHorizonal);\n\n            const renderTargetVertical = new THREE.WebGLRenderTarget(resx, resy, pars);\n            renderTargetVertical.texture.name = \"UnrealBloomPass.v\" + i;\n            renderTargetVertical.texture.generateMipmaps = false;\n            this.m_renderTargetsVertical.push(renderTargetVertical);\n\n            resx = Math.round(resx / 2);\n            resy = Math.round(resy / 2);\n        }\n\n        this.m_highPassUniforms = THREE.UniformsUtils.clone(LuminosityHighPassShader.uniforms);\n\n        // tslint:disable:no-string-literal\n        this.m_highPassUniforms[\"luminosityThreshold\"].value = threshold;\n        this.m_highPassUniforms[\"smoothWidth\"].value = 0.01;\n\n        this.m_materialHighPassFilter = new THREE.ShaderMaterial({\n            uniforms: this.m_highPassUniforms,\n            vertexShader: LuminosityHighPassShader.vertexShader,\n            fragmentShader: LuminosityHighPassShader.fragmentShader,\n            defines: {}\n        });\n\n        // Gaussian Blur Materials\n        const kernelSizeArray = [3, 5, 7, 9, 11];\n        resx = Math.round(this.resolution.x / 2);\n        resy = Math.round(this.resolution.y / 2);\n        for (let i = 0; i < this.m_nMips; i++) {\n            this.m_separableBlurMaterials.push(this.getSeperableBlurMaterial(kernelSizeArray[i]));\n            this.m_separableBlurMaterials[i].uniforms[\"texSize\"].value = new THREE.Vector2(\n                resx,\n                resy\n            );\n            resx = Math.round(resx / 2);\n            resy = Math.round(resy / 2);\n        }\n\n        // Composite material\n        this.m_compositeMaterial = this.getCompositeMaterial(this.m_nMips);\n        this.m_compositeMaterial.uniforms[\n            \"blurTexture1\"\n        ].value = this.m_renderTargetsVertical[0].texture;\n        this.m_compositeMaterial.uniforms[\n            \"blurTexture2\"\n        ].value = this.m_renderTargetsVertical[1].texture;\n        this.m_compositeMaterial.uniforms[\n            \"blurTexture3\"\n        ].value = this.m_renderTargetsVertical[2].texture;\n        this.m_compositeMaterial.uniforms[\n            \"blurTexture4\"\n        ].value = this.m_renderTargetsVertical[3].texture;\n        this.m_compositeMaterial.uniforms[\n            \"blurTexture5\"\n        ].value = this.m_renderTargetsVertical[4].texture;\n        this.m_compositeMaterial.uniforms[\"bloomStrength\"].value = strength;\n        this.m_compositeMaterial.uniforms[\"bloomRadius\"].value = 0.1;\n        this.m_compositeMaterial.needsUpdate = true;\n\n        const bloomFactors = [1.0, 0.8, 0.6, 0.4, 0.2];\n        this.m_compositeMaterial.uniforms[\"bloomFactors\"].value = bloomFactors;\n        this.m_compositeMaterial.uniforms[\"bloomTintColors\"].value = this.m_bloomTintColors;\n\n        this.m_copyUniforms = THREE.UniformsUtils.clone(CopyShader.uniforms);\n        this.m_copyUniforms[\"opacity\"].value = 1.0;\n        // tslint:enable:no-string-literal\n\n        this.m_materialCopy = new THREE.ShaderMaterial({\n            uniforms: this.m_copyUniforms,\n            vertexShader: CopyShader.vertexShader,\n            fragmentShader: CopyShader.fragmentShader,\n            blending: THREE.AdditiveBlending,\n            depthTest: false,\n            depthWrite: false,\n            transparent: true\n        });\n    }\n    dispose() {\n        for (const rt of this.m_renderTargetsHorizontal) {\n            rt.dispose();\n        }\n        for (const rt of this.m_renderTargetsVertical) {\n            rt.dispose();\n        }\n        this.m_renderTargetBright.dispose();\n    }\n    /** @override */\n    setSize(width: number, height: number) {\n        let resx = Math.round(width / 2);\n        let resy = Math.round(height / 2);\n        this.m_renderTargetBright.setSize(resx, resy);\n        for (let i = 0; i < this.m_nMips; i++) {\n            this.m_renderTargetsHorizontal[i].setSize(resx, resy);\n            this.m_renderTargetsVertical[i].setSize(resx, resy);\n            // tslint:disable-next-line:no-string-literal\n            this.m_separableBlurMaterials[i].uniforms[\"texSize\"].value = new THREE.Vector2(\n                resx,\n                resy\n            );\n            resx = Math.round(resx / 2);\n            resy = Math.round(resy / 2);\n        }\n    }\n    /** @override */\n    render(\n        renderer: THREE.WebGLRenderer,\n        scene: THREE.Scene,\n        camera: THREE.Camera,\n        writeBuffer: THREE.WebGLRenderTarget | null,\n        readBuffer: THREE.WebGLRenderTarget\n    ) {\n        // tslint:disable:no-string-literal\n\n        // Render input to screen\n        if (this.renderToScreen) {\n            this.m_quad.material = this.m_basic;\n            this.m_basic.map = readBuffer.texture;\n            renderer.setRenderTarget(null!);\n            renderer.clear();\n            renderer.render(this.m_scene, this.m_camera);\n        }\n\n        // 1. Extract bright areas\n        this.m_highPassUniforms[\"tDiffuse\"].value = readBuffer.texture;\n        this.m_highPassUniforms[\"luminosityThreshold\"].value = this.threshold;\n        this.m_quad.material = this.m_materialHighPassFilter;\n\n        renderer.setRenderTarget(this.m_renderTargetBright);\n        renderer.clear();\n        renderer.render(this.m_scene, this.m_camera);\n\n        // 2. Blur all the mips progressively\n        let inputRenderTarget = this.m_renderTargetBright;\n\n        for (let i = 0; i < this.m_nMips; i++) {\n            this.m_quad.material = this.m_separableBlurMaterials[i];\n\n            this.m_separableBlurMaterials[i].uniforms[\"colorTexture\"].value =\n                inputRenderTarget.texture;\n            this.m_separableBlurMaterials[i].uniforms[\"direction\"].value = BlurDirectionX;\n            renderer.setRenderTarget(this.m_renderTargetsHorizontal[i]);\n            renderer.clear();\n            renderer.render(this.m_scene, this.m_camera);\n\n            this.m_separableBlurMaterials[i].uniforms[\n                \"colorTexture\"\n            ].value = this.m_renderTargetsHorizontal[i].texture;\n            this.m_separableBlurMaterials[i].uniforms[\"direction\"].value = BlurDirectionY;\n            renderer.setRenderTarget(this.m_renderTargetsVertical[i]);\n            renderer.clear();\n            renderer.render(this.m_scene, this.m_camera);\n\n            inputRenderTarget = this.m_renderTargetsVertical[i];\n        }\n\n        // Composite all the mips\n        this.m_quad.material = this.m_compositeMaterial;\n        this.m_compositeMaterial.uniforms[\"bloomStrength\"].value = this.strength;\n        this.m_compositeMaterial.uniforms[\"bloomRadius\"].value = this.radius;\n        this.m_compositeMaterial.uniforms[\"bloomTintColors\"].value = this.m_bloomTintColors;\n\n        renderer.setRenderTarget(this.m_renderTargetsHorizontal[0]);\n        renderer.clear();\n        renderer.render(this.m_scene, this.m_camera);\n\n        // Blend it additively over the input texture\n        this.m_quad.material = this.m_materialCopy;\n        this.m_copyUniforms[\"tDiffuse\"].value = this.m_renderTargetsHorizontal[0].texture;\n\n        if (this.renderToScreen) {\n            renderer.setRenderTarget(null!);\n            renderer.render(this.m_scene, this.m_camera);\n        } else {\n            renderer.setRenderTarget(readBuffer);\n            renderer.render(this.m_scene, this.m_camera);\n        }\n        // tslint:enable:no-string-literal\n    }\n\n    getSeperableBlurMaterial(kernelRadius: number): THREE.ShaderMaterial {\n        return new THREE.ShaderMaterial({\n            defines: {\n                KERNEL_RADIUS: kernelRadius,\n                SIGMA: kernelRadius\n            },\n\n            uniforms: {\n                colorTexture: { value: null },\n                texSize: { value: new THREE.Vector2(0.5, 0.5) },\n                direction: { value: new THREE.Vector2(0.5, 0.5) }\n            },\n\n            vertexShader: `varying vec2 vUv;\n            void main() {\n                vUv = uv;\n                gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n            }`,\n\n            fragmentShader: `#include <common>\n            varying vec2 vUv;\n            uniform sampler2D colorTexture;\n            uniform vec2 texSize;\n            uniform vec2 direction;\n\n            float gaussianPdf(in float x, in float sigma) {\n                return 0.39894 * exp( -0.5 * x * x/( sigma * sigma))/sigma;\n            }\n            void main() {\\n\\\n                vec2 invSize = 1.0 / texSize;\n                float fSigma = float(SIGMA);\n                float weightSum = gaussianPdf(0.0, fSigma);\n                vec3 diffuseSum = texture2D( colorTexture, vUv).rgb * weightSum;\n                for( int i = 1; i < KERNEL_RADIUS; i ++ ) {\n                    float x = float(i);\n                    float w = gaussianPdf(x, fSigma);\n                    vec2 uvOffset = direction * invSize * x;\n                    vec3 sample1 = texture2D( colorTexture, vUv + uvOffset).rgb;\n                    vec3 sample2 = texture2D( colorTexture, vUv - uvOffset).rgb;\n                    diffuseSum += (sample1 + sample2) * w;\n                    weightSum += 2.0 * w;\n                }\n                gl_FragColor = vec4(diffuseSum/weightSum, 1.0);\n            }`\n        });\n    }\n\n    getCompositeMaterial(nMips: number): THREE.ShaderMaterial {\n        return new THREE.ShaderMaterial({\n            defines: {\n                NUM_MIPS: nMips\n            },\n\n            uniforms: {\n                blurTexture1: { value: null },\n                blurTexture2: { value: null },\n                blurTexture3: { value: null },\n                blurTexture4: { value: null },\n                blurTexture5: { value: null },\n                dirtTexture: { value: null },\n                bloomStrength: { value: 1.0 },\n                bloomFactors: { value: null },\n                bloomTintColors: { value: null },\n                bloomRadius: { value: 0.0 }\n            },\n\n            vertexShader: `varying vec2 vUv;\n                void main() {\n                    vUv = uv;\n                    gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n                }`,\n\n            fragmentShader: `varying vec2 vUv;\n                uniform sampler2D blurTexture1;\n                uniform sampler2D blurTexture2;\n                uniform sampler2D blurTexture3;\n                uniform sampler2D blurTexture4;\n                uniform sampler2D blurTexture5;\n                uniform sampler2D dirtTexture;\n                uniform float bloomStrength;\n                uniform float bloomRadius;\n                uniform float bloomFactors[NUM_MIPS];\n                uniform vec3 bloomTintColors[NUM_MIPS];\n\n                float lerpBloomFactor(const in float factor) {\n                    float mirrorFactor = 1.2 - factor;\n                    return mix(factor, mirrorFactor, bloomRadius);\n                }\n\n                void main() {\n                    gl_FragColor = bloomStrength * (\nlerpBloomFactor(bloomFactors[0]) * vec4(bloomTintColors[0], 1.0) * texture2D(blurTexture1, vUv) +\nlerpBloomFactor(bloomFactors[1]) * vec4(bloomTintColors[1], 1.0) * texture2D(blurTexture2, vUv) +\nlerpBloomFactor(bloomFactors[2]) * vec4(bloomTintColors[2], 1.0) * texture2D(blurTexture3, vUv) +\nlerpBloomFactor(bloomFactors[3]) * vec4(bloomTintColors[3], 1.0) * texture2D(blurTexture4, vUv) +\nlerpBloomFactor(bloomFactors[4]) * vec4(bloomTintColors[4], 1.0) * texture2D(blurTexture5, vUv) );\n                }`\n        });\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * Message sent by web worker that requests to resolve actual\n * URLs of it's dependencies.\n *\n * Main thread is expected.\n */\nexport interface WorkerBootstrapRequest {\n    type: \"worker-bootstrap-request\";\n\n    /// Names of dependencies, usually NPM package names.\n    dependencies: string[];\n}\n\nexport interface WorkerBootstrapResponse {\n    type: \"worker-bootstrap-response\";\n\n    /// Actual URL scripts requested in [[WorkerBootstrapRequest]].\n    resolvedDependencies: string[];\n}\n\nexport function isWorkerBootstrapRequest(message: any): message is WorkerBootstrapRequest {\n    return (\n        message &&\n        message.type === \"worker-bootstrap-request\" &&\n        Array.isArray(message.dependencies)\n    );\n}\n\nexport function isWorkerBootstrapResponse(message: any): message is WorkerBootstrapResponse {\n    return (\n        message &&\n        message.type === \"worker-bootstrap-response\" &&\n        Array.isArray(message.resolvedDependencies)\n    );\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport {\n    OrientedBox3,\n    Projection,\n    ProjectionType,\n    TileKey,\n    TilingScheme\n} from \"@here/harp-geoutils\";\nimport { assert } from \"@here/harp-utils\";\nimport * as THREE from \"three\";\nimport { DataSource } from \"./DataSource\";\nimport { CalculationStatus, ElevationRangeSource } from \"./ElevationRangeSource\";\nimport { MapTileCuller } from \"./MapTileCuller\";\nimport { MapView } from \"./MapView\";\nimport { MapViewUtils, TileOffsetUtils } from \"./Utils\";\n\nconst tmpVectors3 = [new THREE.Vector3(), new THREE.Vector3()];\nconst tmpVector4 = new THREE.Vector4();\n\n/**\n * Represents a unique TileKey and the area it takes up on screen.\n *\n * Note, in certain tiling projections, it is possible to have an offset, which represents a tile\n * which has fully wrapped around, hence this defaults to 0 to simplify usage for projections which\n * don't require it.\n */\nexport class TileKeyEntry {\n    constructor(\n        public tileKey: TileKey,\n        public area: number,\n        public offset: number = 0,\n        public minElevation: number = 0,\n        public maxElevation: number = 0,\n        public distance: number = 0\n    ) {}\n}\n\nfunction getGeoBox(tilingScheme: TilingScheme, childTileKey: TileKey, offset: number) {\n    const geoBox = tilingScheme.getGeoBox(childTileKey);\n    const longitudeOffset = 360.0 * offset;\n    geoBox.northEast.longitude += longitudeOffset;\n    geoBox.southWest.longitude += longitudeOffset;\n    return geoBox;\n}\n\n/**\n * Map tile keys to TileKeyEntry.\n * Keys are a combination of morton code and tile offset,\n * see [[TileOffsetUtils.getKeyForTileKeyAndOffset]].\n */\ntype TileKeyEntries = Map<number, TileKeyEntry>;\n\n/**\n * Map zoom level to map of visible tile key entries\n */\ntype ZoomLevelTileKeyMap = Map<number, TileKeyEntries>;\n\n/**\n * Result of frustum intersection\n */\ninterface IntersectionResult {\n    /**\n     * Tiles intersected by the frustum per zoom level.\n     */\n    readonly tileKeyEntries: ZoomLevelTileKeyMap;\n\n    /**\n     * True if the intersection was calculated using precise elevation data, false if it's an\n     * approximation.\n     */\n    calculationFinal: boolean;\n}\n\n/**\n * Computes the tiles intersected by the frustum defined by the current camera setup.\n */\nexport class FrustumIntersection {\n    private readonly m_frustum: THREE.Frustum = new THREE.Frustum();\n    // used to project global coordinates into camera local coordinates\n    private readonly m_viewProjectionMatrix = new THREE.Matrix4();\n    private readonly m_mapTileCuller: MapTileCuller;\n    private m_rootTileKeys: TileKeyEntry[] = [];\n    private readonly m_tileKeyEntries: ZoomLevelTileKeyMap = new Map();\n\n    constructor(\n        private readonly m_camera: THREE.PerspectiveCamera,\n        readonly mapView: MapView,\n        private readonly m_extendedFrustumCulling: boolean,\n        private readonly m_tileWrappingEnabled: boolean,\n        private readonly m_enableMixedLod: boolean\n    ) {\n        this.m_mapTileCuller = new MapTileCuller(m_camera);\n    }\n\n    /**\n     * Return camera used for generating frustum.\n     */\n    get camera(): THREE.PerspectiveCamera {\n        return this.m_camera;\n    }\n\n    /**\n     * Return projection used to convert geo coordinates to world coordinates.\n     */\n    get projection(): Projection {\n        return this.mapView.projection;\n    }\n\n    /**\n     * Updates the frustum to match the current camera setup.\n     */\n    updateFrustum(projectionMatrixOverride?: THREE.Matrix4) {\n        this.m_viewProjectionMatrix.multiplyMatrices(\n            projectionMatrixOverride !== undefined\n                ? projectionMatrixOverride\n                : this.m_camera.projectionMatrix,\n            this.m_camera.matrixWorldInverse\n        );\n\n        this.m_frustum.setFromProjectionMatrix(this.m_viewProjectionMatrix);\n\n        if (this.m_extendedFrustumCulling) {\n            this.m_mapTileCuller.setup();\n        }\n        this.computeRequiredInitialRootTileKeys(this.m_camera.position);\n    }\n\n    /**\n     * Computes the tiles intersected by the updated frustum, see [[updateFrustum]].\n     *\n     * @param tilingScheme The tiling scheme used to generate the tiles.\n     * @param elevationRangeSource Source of elevation range data if any.\n     * @param zoomLevels A list of zoom levels to render.\n     * @param dataSources A list of data sources to render.\n     * @returns The computation result, see [[FrustumIntersection.Result]].\n     */\n    compute(\n        tilingScheme: TilingScheme,\n        elevationRangeSource: ElevationRangeSource | undefined,\n        zoomLevels: number[],\n        dataSources: DataSource[]\n    ): IntersectionResult {\n        this.m_tileKeyEntries.clear();\n        let calculationFinal = true;\n\n        // Compute target tile area in clip space size.\n        // A tile should take up roughly 256x256 pixels on screen in accordance to\n        // the zoom level chosen by [MapViewUtils.calculateZoomLevelFromDistance].\n        assert(this.mapView.viewportHeight !== 0);\n        const targetTileArea = Math.pow(256 / this.mapView.viewportHeight, 2);\n        const useElevationRangeSource: boolean =\n            elevationRangeSource !== undefined &&\n            elevationRangeSource.getTilingScheme() === tilingScheme;\n        const obbIntersections =\n            this.mapView.projection.type === ProjectionType.Spherical || useElevationRangeSource;\n        const tileBounds = obbIntersections ? new OrientedBox3() : new THREE.Box3();\n        const uniqueZoomLevels = new Set(zoomLevels);\n\n        // create tile key map per zoom level\n        for (const zoomLevel of uniqueZoomLevels) {\n            this.m_tileKeyEntries.set(zoomLevel, new Map());\n        }\n        for (const item of this.m_rootTileKeys) {\n            const tileKeyEntry = new TileKeyEntry(\n                item.tileKey,\n                Infinity,\n                item.offset,\n                item.minElevation,\n                item.maxElevation\n            );\n            for (const zoomLevel of uniqueZoomLevels) {\n                const tileKeyEntries = this.m_tileKeyEntries.get(zoomLevel)!;\n                tileKeyEntries.set(\n                    TileOffsetUtils.getKeyForTileKeyAndOffset(item.tileKey, item.offset),\n                    tileKeyEntry\n                );\n            }\n        }\n\n        const workList = [...this.m_rootTileKeys.values()];\n        while (workList.length > 0) {\n            const tileEntry = workList.pop();\n\n            if (tileEntry === undefined) {\n                break;\n            }\n\n            // Stop subdivision if hightest visible level is reached\n            const tileKey = tileEntry.tileKey;\n            const subdivide = dataSources.some((ds, i) =>\n                ds.shouldSubdivide(zoomLevels[i], tileKey)\n            );\n            if (!subdivide) {\n                continue;\n            }\n\n            // Stop subdivision if area of tile is too small(mixed LOD only)\n            if (this.m_enableMixedLod && tileEntry.area < targetTileArea) {\n                continue;\n            }\n\n            const parentTileKey = TileOffsetUtils.getKeyForTileKeyAndOffset(\n                tileKey,\n                tileEntry.offset\n            );\n\n            // delete parent tile key from applicable zoom levels\n            for (const zoomLevel of uniqueZoomLevels) {\n                if (tileKey.level >= zoomLevel) {\n                    continue;\n                }\n\n                const tileKeyEntries = this.m_tileKeyEntries.get(zoomLevel)!;\n                tileKeyEntries.delete(parentTileKey);\n            }\n\n            for (const childTileKey of tilingScheme.getSubTileKeys(tileKey)) {\n                const offset = tileEntry.offset;\n                const tileKeyAndOffset = TileOffsetUtils.getKeyForTileKeyAndOffset(\n                    childTileKey,\n                    offset\n                );\n\n                const geoBox = getGeoBox(tilingScheme, childTileKey, offset);\n\n                // For tiles without elevation range source, default 0 (getGeoBox always\n                // returns box with altitude min/max equal to zero) will be propagated as\n                // min and max elevation, these tiles most probably contains features that\n                // lays directly on the ground surface.\n                if (useElevationRangeSource) {\n                    const range = elevationRangeSource!.getElevationRange(childTileKey);\n                    geoBox.southWest.altitude = range.minElevation;\n                    geoBox.northEast.altitude = range.maxElevation;\n                    calculationFinal =\n                        calculationFinal &&\n                        range.calculationStatus === CalculationStatus.FinalPrecise;\n                }\n\n                this.mapView.projection.projectBox(geoBox, tileBounds);\n                const { area, distance } = this.computeTileAreaAndDistance(tileBounds);\n\n                if (area > 0) {\n                    const subTileEntry = new TileKeyEntry(\n                        childTileKey,\n                        area,\n                        offset,\n                        geoBox.southWest.altitude, // minElevation\n                        geoBox.northEast.altitude, // maxElevation\n                        distance\n                    );\n\n                    // insert sub tile entry into tile entries map per zoom level\n                    for (const zoomLevel of uniqueZoomLevels) {\n                        if (subTileEntry.tileKey.level > zoomLevel) {\n                            continue;\n                        }\n\n                        const tileKeyEntries = this.m_tileKeyEntries.get(zoomLevel)!;\n                        tileKeyEntries.set(tileKeyAndOffset, subTileEntry);\n                    }\n\n                    workList.push(subTileEntry);\n                }\n            }\n        }\n        return { tileKeyEntries: this.m_tileKeyEntries, calculationFinal };\n    }\n\n    /**\n     * Estimate screen space area of tile and distance to center of tile\n     * @param tileBounds The bounding volume of a tile\n     * @return Area estimate and distance to tile center in clip space\n     */\n    private computeTileAreaAndDistance(\n        tileBounds: THREE.Box3 | OrientedBox3\n    ): { area: number; distance: number } {\n        if (tileBounds instanceof THREE.Box3) {\n            if (\n                (this.m_extendedFrustumCulling &&\n                    !this.m_mapTileCuller.frustumIntersectsTileBox(tileBounds)) ||\n                !this.m_frustum.intersectsBox(tileBounds)\n            ) {\n                return {\n                    area: 0,\n                    distance: Infinity\n                };\n            }\n        } else if (!tileBounds.intersects(this.m_frustum)) {\n            return {\n                area: 0,\n                distance: Infinity\n            };\n        }\n\n        // Project tile bounds center\n        const center = tileBounds.getCenter(tmpVectors3[0]);\n        const projectedPoint = tmpVector4\n            .set(center.x, center.y, center.z, 1.0)\n            .applyMatrix4(this.m_viewProjectionMatrix);\n\n        // Estimate objects screen space size with diagonal of bounds\n        // Dividing by w projects object size to screen space\n        const size = tileBounds.getSize(tmpVectors3[1]);\n        const objectSize = (0.5 * size.length()) / projectedPoint.w;\n\n        return {\n            area: objectSize * objectSize,\n            distance: projectedPoint.z / projectedPoint.w\n        };\n    }\n\n    /**\n     * Create a list of root nodes to test against the frustum. The root nodes each start at level 0\n     * and have an offset (see [[Tile]]) based on:\n     * - the current position [[worldCenter]].\n     * - the height of the camera above the world.\n     * - the field of view of the camera (the maximum value between the horizontal / vertical\n     *   values)\n     * - the tilt of the camera (because we see more tiles when tilted).\n     *\n     * @param worldCenter The center of the camera in world space.\n     */\n    private computeRequiredInitialRootTileKeys(worldCenter: THREE.Vector3) {\n        this.m_rootTileKeys = [];\n        const rootTileKey = TileKey.fromRowColumnLevel(0, 0, 0);\n        const tileWrappingEnabled = this.mapView.projection.type === ProjectionType.Planar;\n\n        if (!tileWrappingEnabled || !this.m_tileWrappingEnabled) {\n            this.m_rootTileKeys.push(new TileKeyEntry(rootTileKey, Infinity, 0, 0));\n            return;\n        }\n\n        const worldGeoPoint = this.mapView.projection.unprojectPoint(worldCenter);\n        const startOffset = Math.round(worldGeoPoint.longitude / 360.0);\n\n        // This algorithm computes the number of offsets we need to test. The following diagram may\n        // help explain the algorithm below.\n        //\n        //   |🎥\n        //   |.\\ .\n        //   | . \\  .\n        // z |  .  \\   .c2\n        //   |  c1.  \\b    .\n        //   |     .   \\      .\n        //___|a___d1.____\\e______.d2______f\n        //\n        // Where:\n        // - 🎥 is the camera\n        // - z is the height of the camera above the ground.\n        // - a is a right angle.\n        // - b is the look at vector of the camera.\n        // - c1 and c2 are the frustum planes of the camera.\n        // - c1 to c2 is the fov.\n        // - d1 and d2 are the intersection points of the frustum with the world plane.\n        // - e is the tilt/pitch of the camera.\n        // - f is the world\n        //\n        // The goal is to find the distance from e->d2. This is a longitude value, and we convert it\n        // to some offset range. Note e->d2 >= e->d1 (because we can't have a negative tilt).\n        // To find e->d2, we use the right triangle 🎥, a, d2 and subtract the distance a->d2 with\n        // a->e.\n        // a->d2 is found using the angle between a and d2 from the 🎥, this is simply e (because of\n        // similar triangles, angle between a, 🎥 and e equals the tilt) + half of the fov (because\n        // we need the angle between e, 🎥 and d2) and using trigonometry, result is therefore:\n        // (tan(a->d2) * z).\n        // a->e needs just the tilt and trigonometry to compute, result is: (tan(a->e) * z).\n\n        const camera = this.m_camera;\n        const cameraPitch = MapViewUtils.extractAttitude(this.mapView, camera).pitch;\n        // Ensure that the aspect is >= 1.\n        const aspect = camera.aspect > 1 ? camera.aspect : 1 / camera.aspect;\n        // Angle between a->d2, note, the fov is vertical, hence we translate to horizontal.\n        const totalAngleRad = THREE.MathUtils.degToRad((camera.fov * aspect) / 2) + cameraPitch;\n        // Length a->d2\n        const worldLengthHorizontalFull = Math.tan(totalAngleRad) * camera.position.z;\n        // Length a->e\n        const worldLengthHorizontalSmallerHalf = Math.tan(cameraPitch) * camera.position.z;\n        // Length e -> d2\n        const worldLengthHorizontal = worldLengthHorizontalFull - worldLengthHorizontalSmallerHalf;\n        const worldLeftPoint = new THREE.Vector3(\n            worldCenter.x - worldLengthHorizontal,\n            worldCenter.y,\n            worldCenter.z\n        );\n        const worldLeftGeoPoint = this.mapView.projection.unprojectPoint(worldLeftPoint);\n        // We multiply by SQRT2 because we need to account for a rotated view (in which case there\n        // are more tiles that can be seen).\n        const offsetRange = THREE.MathUtils.clamp(\n            Math.ceil(\n                Math.abs((worldGeoPoint.longitude - worldLeftGeoPoint.longitude) / 360) * Math.SQRT2\n            ),\n            0,\n            // We can store currently up to 16 unique keys(2^4, where 4 is the default bit-shift\n            // value which is used currently in the [[VisibleTileSet]] methods) hence we can have a\n            // maximum range of 7 (because 2*7+1 = 15).\n            7\n        );\n        for (\n            let offset = -offsetRange + startOffset;\n            offset <= offsetRange + startOffset;\n            offset++\n        ) {\n            this.m_rootTileKeys.push(new TileKeyEntry(rootTileKey, Infinity, offset, 0, 0));\n        }\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport * as THREE from \"three\";\n\n/**\n * Second step tile culling: Do additional check for intersection of box and frustum by checking if\n * the frustum is outside any plane of the tiles `bbox` (oriented, not AABB). It's in the inverse of\n * the standard frustum test, which excludes many cases where the large terrain tiles straddle the\n * planes of the frustum.\n *\n * @see http://www.iquilezles.org/www/articles/frustumcorrect/frustumcorrect.htm\n */\nexport class MapTileCuller {\n    private m_globalFrustumMin = new THREE.Vector3();\n    private m_globalFrustumMax = new THREE.Vector3();\n\n    private m_frustumCorners = [\n        new THREE.Vector3(),\n        new THREE.Vector3(),\n        new THREE.Vector3(),\n        new THREE.Vector3(),\n        new THREE.Vector3(),\n        new THREE.Vector3(),\n        new THREE.Vector3(),\n        new THREE.Vector3()\n    ];\n\n    /**\n     * Constructs a `MapTileCuller`.\n     *\n     * @param m_camera A `THREE.Camera`.\n     */\n    constructor(private m_camera: THREE.Camera) {}\n\n    /**\n     * Sets up culling and computes frustum corners. You mus call this function before the culling\n     * starts.\n     */\n    setup() {\n        const frustumCorners = this.getFrustumCorners();\n\n        const matrix = this.m_camera.matrixWorld;\n\n        this.m_globalFrustumMin.set(Number.MAX_VALUE, Number.MAX_VALUE, Number.MAX_VALUE);\n        this.m_globalFrustumMax.set(-Number.MAX_VALUE, -Number.MAX_VALUE, -Number.MAX_VALUE);\n\n        for (const frustumCorner of frustumCorners) {\n            frustumCorner.applyMatrix4(matrix);\n\n            this.m_globalFrustumMin.x = Math.min(this.m_globalFrustumMin.x, frustumCorner.x);\n            this.m_globalFrustumMin.y = Math.min(this.m_globalFrustumMin.y, frustumCorner.y);\n            this.m_globalFrustumMin.z = Math.min(this.m_globalFrustumMin.z, frustumCorner.z);\n\n            this.m_globalFrustumMax.x = Math.max(this.m_globalFrustumMax.x, frustumCorner.x);\n            this.m_globalFrustumMax.y = Math.max(this.m_globalFrustumMax.y, frustumCorner.y);\n            this.m_globalFrustumMax.z = Math.max(this.m_globalFrustumMax.z, frustumCorner.z);\n        }\n    }\n\n    /**\n     * Checks if the tile's bounding box intersects with the current view's frustum.\n     *\n     * @param tileBounds The bounding box for the tile.\n     */\n    frustumIntersectsTileBox(tileBounds: THREE.Box3): boolean {\n        const globalFrustumMin = this.m_globalFrustumMin;\n        const globalFrustumMax = this.m_globalFrustumMax;\n\n        if (\n            globalFrustumMax.x < tileBounds.min.x ||\n            globalFrustumMax.y < tileBounds.min.y ||\n            globalFrustumMax.z < tileBounds.min.z ||\n            globalFrustumMin.x > tileBounds.max.x ||\n            globalFrustumMin.y > tileBounds.max.y ||\n            globalFrustumMin.z > tileBounds.max.z\n        ) {\n            return false;\n        }\n        return true;\n    }\n\n    /**\n     * Returns the eight corners of the frustum.\n     */\n    private getFrustumCorners(): THREE.Vector3[] {\n        const frustumCorners = this.m_frustumCorners;\n        const invProjMatrix = (this.m_camera as any).projectionMatrixInverse as THREE.Matrix4;\n\n        let cornerIndex = 0;\n\n        function addPoint(x: number, y: number, z: number) {\n            frustumCorners[cornerIndex++].set(x, y, z).applyMatrix4(invProjMatrix);\n        }\n\n        const w = 1;\n        const h = 1;\n        const n = -1;\n        const f = 1;\n\n        // near\n        addPoint(-w, -h, n);\n        addPoint(w, -h, n);\n        addPoint(-w, h, n);\n        addPoint(w, h, n);\n\n        // far\n        addPoint(-w, -h, f);\n        addPoint(w, -h, f);\n        addPoint(-w, h, f);\n        addPoint(w, h, f);\n\n        return frustumCorners;\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { GeometryKind, GeometryKindSet } from \"@here/harp-datasource-protocol\";\nimport { MapView } from \"../MapView\";\nimport { Tile } from \"../Tile\";\nimport { TileGeometryLoader } from \"./TileGeometryLoader\";\n\ntype TileUpdateCallback = (tile: Tile) => void;\n\n/**\n * Manages the content (the geometries) of a tile.\n */\nexport class TileGeometryManager {\n    /**\n     * The set of geometry kinds that is enabled. Their geometry will be created after decoding.\n     */\n    get enabledGeometryKinds(): GeometryKindSet {\n        return this.enabledKinds;\n    }\n\n    set enabledGeometryKinds(kinds: GeometryKindSet) {\n        this.enabledKinds = kinds;\n    }\n\n    /**\n     * The set of geometry kinds that is disabled. Their geometry will not be created after\n     * decoding.\n     */\n    get disabledGeometryKinds(): GeometryKindSet {\n        return this.disabledKinds;\n    }\n\n    set disabledGeometryKinds(kinds: GeometryKindSet) {\n        this.disabledKinds = kinds;\n    }\n\n    /**\n     * The set of geometry kinds that is hidden. Their geometry may be created, but it is hidden\n     * until the method `hideKind` with an argument of `addOrRemoveToHiddenSet:false` is called.\n     */\n    get hiddenGeometryKinds(): GeometryKindSet {\n        return this.hiddenKinds;\n    }\n\n    set hiddenGeometryKinds(kinds: GeometryKindSet) {\n        this.hiddenKinds = kinds;\n        this.incrementVisibilityCounter();\n    }\n\n    /**\n     * If set to `true`, the filters of enabled/disabledGeometryKinds are applied, otherwise they\n     * are ignored.\n     */\n    enableFilterByKind: boolean = true;\n\n    protected get visibilityCounter(): number {\n        return this.m_visibilityCounter;\n    }\n\n    protected enabledKinds: GeometryKindSet = new GeometryKindSet();\n    protected disabledKinds: GeometryKindSet = new GeometryKindSet();\n    protected hiddenKinds: GeometryKindSet = new GeometryKindSet();\n\n    protected m_tileUpdateCallback: TileUpdateCallback | undefined;\n\n    /**\n     * Optimization for evaluation in `update()` method. Only if a kind is hidden/unhidden, the\n     * visibility of the kinds is applied to their geometries.\n     */\n    private m_visibilityCounter: number = 1;\n\n    /**\n     * Creates an instance of `TileGeometryManager` with a reference to the [[MapView]].\n     */\n    constructor(protected mapView: MapView) {}\n\n    /**\n     * Initialize the [[Tile]] with the TileGeometryManager.\n     */\n    initTile(tile: Tile): void {\n        if (tile.dataSource.useGeometryLoader) {\n            tile.tileGeometryLoader = new TileGeometryLoader(tile);\n        }\n    }\n\n    /**\n     * Process the [[Tile]]s for rendering. May alter the content of the tile per frame.\n     */\n    updateTiles(tiles: Tile[]): void {\n        for (const tile of tiles) {\n            const geometryLoader = tile.tileGeometryLoader;\n            if (geometryLoader !== undefined) {\n                geometryLoader.update(\n                    this.enableFilterByKind ? this.enabledGeometryKinds : undefined,\n                    this.enableFilterByKind ? this.disabledGeometryKinds : undefined\n                );\n                if (this.m_tileUpdateCallback) {\n                    this.m_tileUpdateCallback(tile);\n                }\n            }\n        }\n\n        // If the visibility status of the kinds changed since the last update, the new visibility\n        // status is applied (again).\n        if (this.updateTileObjectVisibility(tiles)) {\n            this.mapView.update();\n        }\n    }\n\n    /**\n     * Clear the enabled, disabled and hidden sets.\n     */\n    clear(): void {\n        this.enabledKinds.clear();\n        this.disabledKinds.clear();\n        this.hiddenKinds.clear();\n    }\n\n    /**\n     * Enable a [[GeometryKind]] by adding it to the enabled set, or remove it from that set.\n     *\n     * @param {(GeometryKind | GeometryKind[] | GeometryKindSet)} kind The kind to add or remove\n     *      from the enabled set.\n     * @param {boolean} addOrRemoveToEnabledSet Pass in `true` to add the kind to the set, pass in\n     *      `false` to remove from that set.\n     */\n    enableKind(\n        kind: GeometryKind | GeometryKind[] | GeometryKindSet,\n        addOrRemoveToEnabledSet: boolean = true\n    ): void {\n        this.enableDisableKinds(this.enabledKinds, kind, addOrRemoveToEnabledSet);\n    }\n\n    /**\n     * Disable a [[GeometryKind]] by adding it to the disabled set, or remove it from that set.\n     *\n     * @param {(GeometryKind | GeometryKind[] | GeometryKindSet)} kind The kind to add or remove\n     *      from the disabled set.\n     * @param {boolean} addOrRemoveToHiddenSet Pass in `true` to add the kind to the set, pass in\n     *      `false` to remove from that set.\n     */\n    disableKind(\n        kind: GeometryKind | GeometryKind[] | GeometryKindSet,\n        addOrRemoveToDisabledSet: boolean = true\n    ): void {\n        this.enableDisableKinds(this.disabledKinds, kind, addOrRemoveToDisabledSet);\n    }\n\n    /**\n     * Hide a [[GeometryKind]] by adding it to the hidden set, or remove it from that set.\n     *\n     * @param {(GeometryKind | GeometryKind[] | GeometryKindSet)} kind The kind to add or remove\n     *      from the hidden set.\n     * @param {boolean} addOrRemoveToHiddenSet Pass in `true` to hide the kind(s), `false` to show\n     *      it again.\n     */\n    hideKind(\n        kind: GeometryKind | GeometryKind[] | GeometryKindSet,\n        addOrRemoveToHiddenSet: boolean = true\n    ): void {\n        let visibilityHasChanged = false;\n\n        if (Array.isArray(kind) || kind instanceof Set) {\n            for (const oneKind of kind) {\n                const visibilityChange = this.addRemove(\n                    this.hiddenKinds,\n                    oneKind,\n                    addOrRemoveToHiddenSet\n                );\n                visibilityHasChanged = visibilityHasChanged || visibilityChange;\n            }\n        } else {\n            visibilityHasChanged = this.addRemove(this.hiddenKinds, kind, addOrRemoveToHiddenSet);\n        }\n\n        // Will be evaluated in the next update()\n        if (visibilityHasChanged) {\n            this.incrementVisibilityCounter();\n        }\n    }\n\n    /**\n     * Return all [[GeometryKind]]s that are contained in the tiles.\n     *\n     * @param {IterableIterator<Tile>} tiles The\n     * @returns {GeometryKindSet}\n     */\n    getAvailableKinds(tiles: IterableIterator<Tile>): GeometryKindSet {\n        const visibleKinds: GeometryKindSet = new GeometryKindSet();\n        for (const tile of tiles) {\n            const geometryLoader = tile.tileGeometryLoader;\n            if (geometryLoader !== undefined) {\n                const tileKinds = geometryLoader.availableGeometryKinds;\n                if (tileKinds !== undefined) {\n                    for (const kind of tileKinds) {\n                        visibleKinds.add(kind);\n                    }\n                }\n            }\n        }\n        return visibleKinds;\n    }\n\n    /**\n     * Apply the visibility status taken from the `hiddenKinds` to all geometries in the specified\n     * tiles.\n     *\n     * @param {Tile[]} tiles List of [[Tiles]] to process the visibility status of.\n     */\n    updateTileObjectVisibility(tiles: Tile[]): boolean {\n        let needUpdate = false;\n\n        for (const tile of tiles) {\n            if (tile.objects.length === 0 || tile.visibilityCounter === this.visibilityCounter) {\n                continue;\n            }\n            tile.visibilityCounter = this.visibilityCounter;\n\n            for (const object of tile.objects) {\n                const geometryKind: GeometryKind[] | undefined =\n                    object.userData !== undefined ? object.userData.kind : undefined;\n                if (geometryKind !== undefined) {\n                    const nowVisible = !geometryKind.some(kind => this.hiddenKinds.has(kind));\n                    needUpdate = needUpdate || object.visible !== nowVisible;\n                    object.visible = nowVisible;\n                }\n            }\n        }\n        return needUpdate;\n    }\n\n    /**\n     * Sets a callback that will be called for every updated tile on [[updateTiles]].\n     *\n     * @param {TileUpdateCallback} callback The callback that will be called after a tile has been\n     * updated, passing the updated tile as argument. If `undefined`, a previously set callback will\n     * be cleared.\n     */\n    setTileUpdateCallback(callback?: TileUpdateCallback): void {\n        this.m_tileUpdateCallback = callback;\n    }\n\n    protected incrementVisibilityCounter(): number {\n        return ++this.m_visibilityCounter;\n    }\n\n    /**\n     * Add or remove a kind|array of kinds|set of kinds from the specified kind set.\n     *\n     * @hidden\n     * @param {GeometryKindSet} set\n     * @param {(GeometryKind | GeometryKind[] | GeometryKindSet)} kind\n     * @param {boolean} addToSet\n     */\n    private enableDisableKinds(\n        set: GeometryKindSet,\n        kind: GeometryKind | GeometryKind[] | GeometryKindSet,\n        addToSet: boolean\n    ): void {\n        if (Array.isArray(kind)) {\n            for (const oneKind of kind as GeometryKind[]) {\n                this.addRemove(set, oneKind, addToSet);\n            }\n        } else if (kind instanceof Set) {\n            const kindSet = kind as GeometryKindSet;\n            for (const oneKind of kindSet) {\n                this.addRemove(set, oneKind, addToSet);\n            }\n        } else if (kind !== undefined) {\n            this.addRemove(set, kind, addToSet);\n        }\n    }\n\n    /**\n     * Add or remove a single kind from the specified kind set.\n     *\n     * @hidden\n     * @param {GeometryKindSet} set\n     * @param {(GeometryKind | GeometryKind[] | GeometryKindSet)} kind\n     * @param {boolean} addToSet\n     */\n    private addRemove(kindsSet: GeometryKindSet, kind: GeometryKind, addToSet: boolean): boolean {\n        if (addToSet) {\n            if (!kindsSet.has(kind)) {\n                kindsSet.add(kind);\n                return true;\n            }\n        } else {\n            if (kindsSet.has(kind)) {\n                kindsSet.delete(kind);\n                return true;\n            }\n        }\n        return false;\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\nimport {\n    DecodedTile,\n    GeometryKind,\n    GeometryKindSet,\n    isExtrudedLineTechnique,\n    isExtrudedPolygonTechnique,\n    isFillTechnique,\n    isLineMarkerTechnique,\n    isLineTechnique,\n    isPoiTechnique,\n    isSegmentsTechnique,\n    isSolidLineTechnique,\n    isTextTechnique,\n    Technique\n} from \"@here/harp-datasource-protocol\";\nimport { PerformanceTimer } from \"@here/harp-utils\";\n\nimport { PerformanceStatistics } from \"../Statistics\";\nimport { Tile } from \"../Tile\";\nimport { TileGeometryCreator } from \"./TileGeometryCreator\";\n\n/**\n * Loads the geometry for its [[Tile]]. Loads all geometry in a single step.\n */\nexport class TileGeometryLoader {\n    /**\n     * Make sure that all technique have their geometryKind set, either from the theme or their\n     * default value.\n     *\n     * Also gather set of the [[GeometryKind]]s found in the techniques and return it.\n     *\n     * @param {DecodedTile} decodedTile\n     * @returns {GeometryKindSet} The set of kinds used in the decodeTile.\n     */\n    static prepareAvailableGeometryKinds(decodedTile: DecodedTile): GeometryKindSet {\n        const foundSet: GeometryKindSet = new GeometryKindSet();\n\n        for (const technique of decodedTile.techniques) {\n            const geometryKind = TileGeometryLoader.compileGeometryKind(technique);\n\n            if (geometryKind instanceof Set) {\n                for (const kind of geometryKind) {\n                    foundSet.add(kind);\n                }\n            } else {\n                foundSet.add(geometryKind);\n            }\n        }\n        return foundSet;\n    }\n\n    /**\n     * Make sure that the technique has its geometryKind set, either from the theme or their default\n     * value.\n     *\n     * @param {Technique} technique\n     */\n    static compileGeometryKind(technique: Technique): GeometryKind | GeometryKindSet {\n        // tslint:disable-next-line: deprecation\n        let geometryKind = technique.kind;\n\n        // Set default kind based on technique.\n        if (geometryKind === undefined) {\n            if (isFillTechnique(technique)) {\n                geometryKind = GeometryKind.Area;\n            } else if (\n                isLineTechnique(technique) ||\n                isSolidLineTechnique(technique) ||\n                isSegmentsTechnique(technique) ||\n                isExtrudedLineTechnique(technique)\n            ) {\n                geometryKind = GeometryKind.Line;\n            } else if (isExtrudedPolygonTechnique(technique)) {\n                geometryKind = GeometryKind.Building;\n            } else if (\n                isPoiTechnique(technique) ||\n                isLineMarkerTechnique(technique) ||\n                isTextTechnique(technique)\n            ) {\n                geometryKind = GeometryKind.Label;\n            } else {\n                geometryKind = GeometryKind.All;\n            }\n\n            // tslint:disable-next-line: deprecation\n            technique.kind = geometryKind;\n        } else if (Array.isArray(geometryKind)) {\n            // tslint:disable-next-line: deprecation\n            geometryKind = technique.kind = new GeometryKindSet(geometryKind);\n        }\n\n        return geometryKind;\n    }\n\n    private m_decodedTile?: DecodedTile;\n    private m_isFinished: boolean = false;\n    private m_availableGeometryKinds: GeometryKindSet | undefined;\n    private m_enabledKinds: GeometryKindSet | undefined;\n    private m_disabledKinds: GeometryKindSet | undefined;\n    private m_timeout: any;\n\n    constructor(private m_tile: Tile) {}\n\n    /**\n     * The [[Tile]] this `TileGeometryLoader` is managing.\n     */\n    get tile(): Tile {\n        return this.m_tile;\n    }\n\n    /**\n     * `True` if all geometry of the `Tile` has been loaded and the loading process is finished.\n     */\n    get isFinished(): boolean {\n        return this.m_isFinished;\n    }\n\n    /**\n     * `True` if geometry of a `Tile` has been loaded but is not fully processed.\n     */\n    get geometryCreationPending(): boolean {\n        // Geometry loading not yet finished and timeout already set, but not yet processing\n        // (m_timeout !== undefined), or timeout callback already in progress\n        // (m_timeout === undefined), but decoded tile still not reset.\n        return !this.isFinished && this.m_decodedTile !== undefined;\n    }\n\n    /**\n     * `True` if the basic geometry has been loaded, and the `Tile` is ready  for display.\n     */\n    get basicGeometryLoaded(): boolean {\n        return this.m_tile.hasGeometry;\n    }\n\n    /**\n     * `True` if all geometry of the `Tile` has been loaded.\n     */\n    get allGeometryLoaded(): boolean {\n        return this.m_isFinished;\n    }\n\n    /**\n     * Set the [[DecodedTile]] of the tile. Is called after the decoded tile has been loaded, and\n     * prepares its content for later processing in the 'updateXXX' methods.\n     *\n     * @param {DecodedTile} decodedTile The decoded tile with the flat geometry data belonging to\n     *      this tile.\n     * @returns {DecodedTile} The processed decoded tile.\n     */\n    setDecodedTile(decodedTile: DecodedTile): DecodedTile {\n        this.m_decodedTile = decodedTile;\n\n        if (this.m_decodedTile !== undefined) {\n            this.m_availableGeometryKinds = TileGeometryLoader.prepareAvailableGeometryKinds(\n                this.m_decodedTile\n            );\n        }\n        return this.m_decodedTile;\n    }\n\n    /**\n     * The kinds of geometry stored in this [[Tile]].\n     */\n    get availableGeometryKinds(): GeometryKindSet | undefined {\n        return this.m_availableGeometryKinds;\n    }\n\n    /**\n     * Start with or continue with loading geometry. Called repeatedly until `isFinished` is `true`.\n     */\n    update(\n        enabledKinds: GeometryKindSet | undefined,\n        disabledKinds: GeometryKindSet | undefined\n    ): void {\n        const tile = this.tile;\n\n        // Cheap sanity check, do it first so no longer processing is needed.\n        if (this.isFinished) {\n            return;\n        }\n\n        // Check if tile should be already discarded (invisible, disposed).\n        // If the tile is not ready for display, or if it has become invisible while being loaded,\n        // for example by moving the camera, the tile is not finished and its geometry is not\n        // created. This is an optimization for fast camera movements and zooms.\n        if (this.discardNeedlessTile(tile)) {\n            return;\n        }\n\n        // Geometry kinds have changed when loading, if so reset entire loading because\n        // this geometry loader generates all geometry at once.\n        if (\n            this.geometryCreationPending &&\n            !this.compareGeometryKinds(enabledKinds, disabledKinds)\n        ) {\n            this.reset();\n        }\n\n        // First time this tile is handled, or reset has been requested.\n        // Note: Finished condition already checked above.\n        if (!this.geometryCreationPending && tile.decodedTile !== undefined) {\n            TileGeometryCreator.instance.processTechniques(tile, enabledKinds, disabledKinds);\n            this.setGeometryKinds(enabledKinds, disabledKinds);\n            this.setDecodedTile(tile.decodedTile);\n            this.prepareForRender(enabledKinds, disabledKinds);\n        }\n    }\n\n    /**\n     * Dispose of any resources.\n     */\n    dispose(): void {\n        this.m_decodedTile = undefined;\n        // TODO: Release other resource: availableGeometryKind, enabled/disabled sets, timeout?\n    }\n\n    /**\n     * Reset the loader to its initial state and cancels any asynchronous work.\n     */\n    reset(): void {\n        this.m_availableGeometryKinds?.clear();\n        this.m_enabledKinds?.clear();\n        this.m_disabledKinds?.clear();\n\n        this.m_decodedTile = undefined;\n        this.m_isFinished = false;\n\n        if (this.m_timeout !== undefined) {\n            clearTimeout(this.m_timeout);\n            this.m_timeout = undefined;\n        }\n    }\n\n    private finish() {\n        this.m_tile.loadingFinished();\n        this.m_tile.removeDecodedTile();\n\n        this.m_decodedTile = undefined;\n        this.m_isFinished = true;\n\n        if (this.m_timeout !== undefined) {\n            clearTimeout(this.m_timeout);\n            this.m_timeout = undefined;\n        }\n    }\n\n    /**\n     * Called by [[VisibleTileSet]] to mark that [[Tile]] is visible and it should prepare geometry.\n     */\n    private prepareForRender(\n        enabledKinds: GeometryKindSet | undefined,\n        disabledKinds: GeometryKindSet | undefined\n    ) {\n        const tile = this.tile;\n        const decodedTile = this.m_decodedTile;\n\n        // Just a sanity check that satisfies compiler check below.\n        if (decodedTile === undefined) {\n            this.finish();\n            return;\n        }\n\n        this.m_timeout = setTimeout(() => {\n            // Reset timeout so it is untouched during processing.\n            this.m_timeout = undefined;\n\n            if (this.discardNeedlessTile(tile)) {\n                return;\n            }\n\n            const stats = PerformanceStatistics.instance;\n            let now = 0;\n            if (stats.enabled) {\n                now = PerformanceTimer.now();\n            }\n\n            const geometryCreator = TileGeometryCreator.instance;\n\n            tile.clear();\n            // Set up techniques which should be processed.\n            geometryCreator.initDecodedTile(decodedTile, enabledKinds, disabledKinds);\n            geometryCreator.createAllGeometries(tile, decodedTile);\n\n            if (stats.enabled) {\n                const geometryCreationTime = PerformanceTimer.now() - now;\n                const currentFrame = stats.currentFrame;\n\n                // Account for the geometry creation in the current frame.\n                currentFrame.addValue(\"render.fullFrameTime\", geometryCreationTime);\n                currentFrame.addValue(\"render.geometryCreationTime\", geometryCreationTime);\n\n                currentFrame.addValue(\"geometry.geometryCreationTime\", geometryCreationTime);\n                currentFrame.addValue(\"geometryCount.numGeometries\", decodedTile.geometries.length);\n                currentFrame.addValue(\"geometryCount.numTechniques\", decodedTile.techniques.length);\n                currentFrame.addValue(\n                    \"geometryCount.numPoiGeometries\",\n                    decodedTile.poiGeometries !== undefined ? decodedTile.poiGeometries.length : 0\n                );\n                currentFrame.addValue(\n                    \"geometryCount.numTextGeometries\",\n                    decodedTile.textGeometries !== undefined ? decodedTile.textGeometries.length : 0\n                );\n                currentFrame.addValue(\n                    \"geometryCount.numTextPathGeometries\",\n                    decodedTile.textPathGeometries !== undefined\n                        ? decodedTile.textPathGeometries.length\n                        : 0\n                );\n                currentFrame.addValue(\n                    \"geometryCount.numPathGeometries\",\n                    decodedTile.pathGeometries !== undefined ? decodedTile.pathGeometries.length : 0\n                );\n                currentFrame.addMessage(\n                    // tslint:disable-next-line: max-line-length\n                    `Decoded tile: ${tile.dataSource.name} # lvl=${tile.tileKey.level} col=${tile.tileKey.column} row=${tile.tileKey.row}`\n                );\n            }\n            this.finish();\n            tile.dataSource.requestUpdate();\n        }, 0);\n    }\n\n    private discardNeedlessTile(tile: Tile): boolean {\n        // If the tile has become invisible while being loaded, for example by moving the\n        // camera, the tile is not finished and its geometry is not created. This is an\n        // optimization for fast camera movements and zooms.\n        if (!tile.isVisible) {\n            // Dispose the tile from the visible set, so it can be reloaded properly next time\n            // it is needed.\n            tile.mapView.visibleTileSet.disposeTile(tile);\n\n            const stats = PerformanceStatistics.instance;\n            if (stats.enabled) {\n                stats.currentFrame.addMessage(\n                    // tslint:disable-next-line: max-line-length\n                    `Decoded tile: ${tile.dataSource.name} # lvl=${tile.tileKey.level} col=${tile.tileKey.column} row=${tile.tileKey.row} DISCARDED - invisible`\n                );\n            }\n            this.finish();\n            return true;\n        }\n        // Tile already disposed (this may potentially happen in timeout callback).\n        else if (tile.disposed) {\n            const stats = PerformanceStatistics.instance;\n            if (stats.enabled) {\n                stats.currentFrame.addMessage(\n                    // tslint:disable-next-line: max-line-length\n                    `Decoded tile: ${tile.dataSource.name} # lvl=${tile.tileKey.level} col=${tile.tileKey.column} row=${tile.tileKey.row} DISCARDED - disposed`\n                );\n            }\n            this.finish();\n            return true;\n        }\n        return false;\n    }\n\n    /**\n     * Stores geometry kinds used to load decoded tile geometry.\n     *\n     * This values are stored to detect geometry kind changes during loading.\n     *\n     * @param enabledKinds Set of geometry kinds to be displayed or undefined.\n     * @param disabledKinds Set of geometry kinds that won't be rendered.\n     */\n    private setGeometryKinds(\n        enabledKinds: GeometryKindSet | undefined,\n        disabledKinds: GeometryKindSet | undefined\n    ): void {\n        if (enabledKinds !== undefined) {\n            this.m_enabledKinds = Object.assign(\n                this.m_enabledKinds ?? new GeometryKindSet(),\n                enabledKinds\n            );\n        }\n        if (disabledKinds !== undefined) {\n            this.m_disabledKinds = Object.assign(\n                this.m_disabledKinds ?? new GeometryKindSet(),\n                disabledKinds\n            );\n        }\n    }\n\n    /**\n     * Compare enabled and disabled geometry kinds with currently set.\n     *\n     * Method compares input sets with recently used geometry kinds in performance wise\n     * manner, taking special care of undefined and zero size sets.\n     *\n     * @param enabledKinds Set of geometry kinds to be displayed or undefined.\n     * @param disabledKinds Set of geometry kinds that won't be rendered.\n     * @return `true` only if sets are logically equal, meaning that undefined and empty sets\n     * may result in same geometry (techniques kind) beeing rendered.\n     */\n    private compareGeometryKinds(\n        enabledKinds: GeometryKindSet | undefined,\n        disabledKinds: GeometryKindSet | undefined\n    ): boolean {\n        const enabledSame = this.m_enabledKinds === enabledKinds;\n        const disabledSame = this.m_disabledKinds === disabledKinds;\n        // Same references, no need to compare.\n        if (enabledSame && disabledSame) {\n            return true;\n        }\n        const enabledEmpty =\n            (this.m_enabledKinds === undefined || this.m_enabledKinds.size === 0) &&\n            (enabledKinds === undefined || enabledKinds.size === 0);\n        const disabledEmpty =\n            (this.m_disabledKinds === undefined || this.m_disabledKinds.size === 0) &&\n            (disabledKinds === undefined || disabledKinds.size === 0);\n\n        // We deal only with empty, the same or undefined sets - fast return, no need to compare.\n        if (\n            (enabledEmpty && disabledEmpty) ||\n            (enabledSame && disabledEmpty) ||\n            (disabledSame && enabledEmpty)\n        ) {\n            return true;\n        }\n        // It is enough that one the the sets are different, try to spot difference otherwise\n        // return true. Compare only non-empty sets.\n        if (!enabledEmpty) {\n            // If one set undefined then other must be non-empty, for sure different.\n            if (enabledKinds === undefined || this.m_enabledKinds === undefined) {\n                return false;\n            }\n            // Both defined and non-empty, compare the sets.\n            else if (!enabledKinds.has(this.m_enabledKinds)) {\n                return false;\n            }\n        }\n        if (!disabledEmpty) {\n            // One set defined and non-empty other undefined, for sure different.\n            if (disabledKinds === undefined || this.m_disabledKinds === undefined) {\n                return false;\n            }\n            // Both defined and non-empty, compare the sets.\n            else if (!disabledKinds.has(this.m_disabledKinds)) {\n                return false;\n            }\n        }\n        // No difference found.\n        return true;\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport * as THREE from \"three\";\n\n/**\n * Raycasting points is not supported as necessary in Three.js. This class extends a\n * [[THREE.Raycaster]] and adds the width / height of the canvas to allow picking of screen space\n * geometry.\n *\n * @internal\n */\nexport class PickingRaycaster extends THREE.Raycaster {\n    /**\n     * Constructor.\n     *\n     * @param width the canvas width.\n     * @param height the canvas height.\n     */\n    constructor(public width: number, public height: number) {\n        super();\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { TextCanvas } from \"@here/harp-text-canvas\";\nimport { MapView } from \"../MapView\";\nimport { PoiRenderer } from \"./PoiRenderer\";\n\nexport class PoiRendererFactory {\n    /**\n     * Creates an instance of poi renderer factory.\n     * @param m_mapView\n     */\n    constructor(private readonly m_mapView: MapView) {}\n\n    /**\n     * Creates poi renderer\n     * @param textCanvas\n     * @returns\n     */\n    createPoiRenderer(textCanvas: TextCanvas): PoiRenderer {\n        return new PoiRenderer(this.m_mapView, textCanvas);\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nexport * from \"./lib/StyleSetEvaluator\";\nexport * from \"./lib/Extruder\";\nexport * from \"./lib/IMeshBuffers\";\nexport * from \"./lib/Outliner\";\nexport * from \"./lib/Expr\";\nexport * from \"./lib/ThreeBufferUtils\";\nexport * from \"./lib/GeoJsonDataType\";\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { LoggerManager } from \"@here/harp-utils\";\n\nimport {\n    BooleanLiteralExpr,\n    CallExpr,\n    CaseExpr,\n    Env,\n    Expr,\n    ExprScope,\n    ExprVisitor,\n    HasAttributeExpr,\n    isJsonExpr,\n    JsonExpr,\n    LiteralExpr,\n    MatchExpr,\n    NullLiteralExpr,\n    NumberLiteralExpr,\n    ObjectLiteralExpr,\n    StringLiteralExpr,\n    Value,\n    VarExpr\n} from \"./Expr\";\nimport { ExprPool } from \"./ExprPool\";\nimport {\n    interpolatedPropertyDefinitionToJsonExpr,\n    isInterpolatedPropertyDefinition\n} from \"./InterpolatedPropertyDefs\";\nimport { AttrScope, mergeTechniqueDescriptor } from \"./TechniqueDescriptor\";\nimport { IndexedTechnique, Technique, techniqueDescriptors } from \"./Techniques\";\nimport {\n    Definitions,\n    isActualSelectorDefinition,\n    isJsonExprReference,\n    LineStyle,\n    Style,\n    StyleDeclaration,\n    StyleSelector,\n    StyleSet\n} from \"./Theme\";\n\nconst logger = LoggerManager.instance.create(\"StyleSetEvaluator\");\n\nconst emptyTechniqueDescriptor = mergeTechniqueDescriptor<Technique>({});\n\ninterface StyleInternalParams {\n    /**\n     * Optimization: Lazy creation and storage of expression in a style object.\n     */\n    _whenExpr?: Expr;\n    _minZoomLevelExpr?: Expr;\n    _maxZoomLevelExpr?: Expr;\n\n    _staticAttributes?: Array<[string, Value]>;\n\n    /**\n     * These attributes are used to instantiate Technique variants.\n     *\n     * @see [[TechiqueDescriptor.techniquePropNames]]\n     */\n    _dynamicTechniqueAttributes?: Array<[string, Expr]>;\n\n    /**\n     * These attributes must be evaluated basing with feature env.\n     *\n     * They are not propagated to rendering scope.\n     *\n     * @see [[TechniqueAttrScope.Feature]]\n     */\n    _dynamicFeatureAttributes?: Array<[string, Expr]>;\n\n    /**\n     * These attributes are forwarded as serialized by decoder to main thread, so they are resolved\n     * directly in render loop.\n     *\n     * Will contain attributes from these lists\n     *  - interpolants from [[TechiqueDescriptor.techniquePropNames]]\n     *  - expressions [[TechniqueDescriptor.dynamicPropNames]] (Future)\n     */\n    _dynamicForwardedAttributes?: Array<[string, Expr]>;\n    _dynamicTechniques?: Map<string, IndexedTechnique>;\n\n    /**\n     * Optimization: Index into table in StyleSetEvaluator.\n     * @hidden\n     */\n    _staticTechnique?: IndexedTechnique;\n\n    /**\n     * Optimization: StyleSet index.\n     * @hidden\n     */\n    _styleSetIndex?: number;\n\n    /**\n     * Optimization: Requested $geometryType.\n     * @hidden\n     */\n    _geometryType?: string;\n\n    /**\n     * `true` if any of the properties of this technique\n     * requires access to the feature's state.\n     */\n    _usesFeatureState?: boolean;\n}\n\ntype InternalStyle = Style & StyleSelector & StyleInternalParams;\n\n/**\n * [[StyleConditionClassifier]] searches for usages of `$layer` in `when` conditions\n * associated with styling rules.\n *\n * @hidden\n */\nclass StyleConditionClassifier implements ExprVisitor<Expr | undefined, Expr | undefined> {\n    private _style!: InternalStyle;\n\n    classify(style: InternalStyle) {\n        if (style._whenExpr) {\n            const savedStyle = this.switchStyle(style);\n            style._whenExpr = style._whenExpr.accept(this, undefined);\n            this._style = savedStyle;\n        }\n    }\n\n    visitNullLiteralExpr(expr: NullLiteralExpr, enclosingExpr: Expr | undefined): Expr {\n        return expr;\n    }\n\n    visitBooleanLiteralExpr(expr: BooleanLiteralExpr, enclosingExpr: Expr | undefined): Expr {\n        return expr;\n    }\n\n    visitNumberLiteralExpr(expr: NumberLiteralExpr, enclosingExpr: Expr | undefined): Expr {\n        return expr;\n    }\n\n    visitStringLiteralExpr(expr: StringLiteralExpr, enclosingExpr: Expr | undefined): Expr {\n        return expr;\n    }\n\n    visitObjectLiteralExpr(expr: ObjectLiteralExpr, enclosingExpr: Expr | undefined): Expr {\n        return expr;\n    }\n\n    visitVarExpr(expr: VarExpr, enclosingExpr: Expr | undefined): Expr {\n        return expr;\n    }\n\n    visitHasAttributeExpr(expr: HasAttributeExpr, enclosingExpr: Expr | undefined): Expr {\n        return expr;\n    }\n\n    visitMatchExpr(expr: MatchExpr, enclosingExpr: Expr | undefined): Expr {\n        return expr;\n    }\n\n    visitCaseExpr(expr: CaseExpr, enclosingExpr: Expr | undefined): Expr {\n        return expr;\n    }\n\n    visitCallExpr(call: CallExpr, enclosingExpr: Expr | undefined): Expr | undefined {\n        if (call.op === \"all\") {\n            // processing of an `[\"all\", e1, e2, ... eN]` expression. In this case\n            // search for expressions matching comparison of `$layer` and string literals\n            // in the sub expressions.\n            const children = call.args\n                .map(childExpr => childExpr.accept(this, call))\n                .filter(childExpr => childExpr !== undefined) as Expr[];\n\n            return new CallExpr(call.op, children);\n        } else if (enclosingExpr) {\n            // `call` is a direct child expression of an `\"all\"` operator.\n            const matched = this.matchVarStringComparison(call);\n\n            if (matched) {\n                if (this._style.layer === undefined && matched.name === \"$layer\") {\n                    // found a subexpression `[\"==\", [\"get\", \"$layer\"], \"some layer name\"]`\n                    // enclosed in an `[\"all\", e1...eN]` expression. Remove it from\n                    // its parent expression and store the value of the expected $layer in\n                    // [[StyleInternalParams]].\n\n                    this._style.layer = matched.value;\n\n                    // return `undefined` to remove this sub expression from its parent.\n                    return undefined;\n                } else if (\n                    this._style._geometryType === undefined &&\n                    matched.name === \"$geometryType\"\n                ) {\n                    // found a subexpression `[\"==\", [\"get\", \"$geometryType\"], \"geometry\"]`\n                    // enclosed in an `[\"all\", e1...eN]` expression. Remove it from\n                    // its parent expression and store the value of the expected $geometryType in\n                    // [[StyleInternalParams]].\n\n                    this._style._geometryType = matched.value;\n\n                    // return `undefined` to remove this sub expression from its parent.\n                    return undefined;\n                }\n            }\n        }\n\n        return call;\n    }\n\n    /**\n     * Tests if the given `call` matches the structure [\"==\", [\"get\", name], value].\n     * If a match is found returns an object containing the `name` and the `value`;\n     *\n     * @param call The expression to match.\n     */\n    private matchVarStringComparison(call: CallExpr) {\n        if (call.op === \"==\") {\n            const left = call.args[0];\n            const right = call.args[1];\n\n            if (left instanceof VarExpr && right instanceof StringLiteralExpr) {\n                return { name: left.name, value: right.value };\n            }\n\n            if (right instanceof VarExpr && left instanceof StringLiteralExpr) {\n                return { name: right.name, value: left.value };\n            }\n        }\n\n        return undefined;\n    }\n\n    /**\n     * Sets the given `style` as current.\n     *\n     * @returns The previous `style`.\n     */\n    private switchStyle(style: InternalStyle) {\n        const saved = this._style;\n        this._style = style;\n        return saved;\n    }\n}\n\nclass OptimizedSubSetKey {\n    key: string;\n    layer: string | undefined;\n    geometryType: string | undefined;\n\n    cachedStyleSet?: InternalStyle[];\n\n    constructor(layer?: string | undefined, geometryType?: string | undefined) {\n        this.key = \"\";\n        this.set(layer, geometryType);\n    }\n\n    set(\n        layer: string | undefined,\n        geometryType: string | undefined,\n        env?: Env\n    ): OptimizedSubSetKey {\n        let keyUpdateNeeded: boolean = false;\n        if (layer === undefined) {\n            const envLayer = env !== undefined ? env.lookup(\"$layer\") : undefined;\n            layer = typeof envLayer === \"string\" ? envLayer : undefined;\n        }\n        if (this.layer !== layer) {\n            this.layer = layer;\n            keyUpdateNeeded = true;\n        }\n\n        if (geometryType === undefined) {\n            const envGeometryType = env !== undefined ? env.lookup(\"$geometryType\") : undefined;\n            geometryType = typeof envGeometryType === \"string\" ? envGeometryType : undefined;\n        }\n        if (this.geometryType !== geometryType) {\n            this.geometryType = geometryType;\n            keyUpdateNeeded = true;\n        }\n\n        if (keyUpdateNeeded) {\n            this.updateKey();\n        }\n        return this;\n    }\n\n    private updateKey() {\n        if (this.layer !== undefined) {\n            // tslint:disable-next-line:prefer-conditional-expression\n            if (this.geometryType !== undefined) {\n                this.key = `${this.layer}:${this.geometryType}`;\n            } else {\n                this.key = `${this.layer}:`;\n            }\n        } else {\n            if (this.geometryType !== undefined) {\n                this.key = `:${this.geometryType}`;\n            } else {\n                this.key = \"all\";\n            }\n        }\n        this.cachedStyleSet = undefined;\n    }\n}\n\n/**\n * Combine data from datasource and apply the rules from a specified theme to show it on the map.\n */\nexport class StyleSetEvaluator {\n    readonly styleSet: InternalStyle[];\n\n    private readonly m_techniques: IndexedTechnique[] = [];\n    private readonly m_exprPool = new ExprPool();\n    private readonly m_cachedResults = new Map<Expr, Value>();\n    private readonly m_styleConditionClassifier = new StyleConditionClassifier();\n    private readonly m_subStyleSetCache = new Map<string, InternalStyle[]>();\n    private readonly m_definitions?: Definitions;\n    private readonly m_definitionExprCache = new Map<string, Expr>();\n    private readonly m_tmpOptimizedSubSetKey: OptimizedSubSetKey = new OptimizedSubSetKey();\n    private readonly m_emptyEnv = new Env();\n    private m_featureDependencies: string[] = [];\n    private m_layer: string | undefined;\n    private m_geometryType: string | undefined;\n    private m_zoomLevel: number | undefined;\n    private m_previousResult: IndexedTechnique[] | undefined;\n    private m_previousEnv: Env | undefined;\n\n    constructor(styleSet: StyleSet, definitions?: Definitions) {\n        this.m_definitions = definitions;\n        this.styleSet = resolveReferences(styleSet, definitions);\n        computeDefaultRenderOrder(this.styleSet);\n        this.compileStyleSet();\n    }\n\n    /**\n     * Find all techniques that fit the current objects' environment.\n     * *The techniques in the resulting array may not be modified* since they are being reused for\n     * identical objects.\n     *\n     * @param env The objects environment, i.e. the attributes that are relevant for its\n     * representation.\n     * @param layer The optional layer name used to filter techniques.\n     * @param geometryType The optional geometryType used to filter techniques.\n     */\n    getMatchingTechniques(\n        env: Env,\n        layer?: string | undefined,\n        geometryType?: string | undefined\n    ): IndexedTechnique[] {\n        if (\n            this.m_previousResult &&\n            this.m_previousEnv &&\n            this.m_featureDependencies.every(p => this.m_previousEnv?.lookup(p) === env.lookup(p))\n        ) {\n            return this.m_previousResult;\n        }\n\n        const result: IndexedTechnique[] = [];\n        this.m_cachedResults.clear();\n\n        const optimizedSubSetKey = this.m_tmpOptimizedSubSetKey;\n        optimizedSubSetKey.set(layer, geometryType, env);\n\n        // get the requested $layer and $geometryType, if any.\n        this.m_layer = optimizedSubSetKey.layer;\n        this.m_geometryType = optimizedSubSetKey.geometryType;\n        this.m_zoomLevel = env.lookup(\"$zoom\") as number | undefined;\n\n        const searchedStyleSet = this.getOptimizedStyleSet(optimizedSubSetKey);\n\n        for (const currStyle of searchedStyleSet) {\n            if (this.processStyle(env, currStyle, result)) {\n                break;\n            }\n        }\n\n        this.m_previousResult = result;\n        this.m_previousEnv = env;\n\n        return result;\n    }\n\n    /**\n     * Check if `styleSet` contains any rule related to `layer`.\n     *\n     * @param layer name of layer\n     */\n    wantsLayer(layer: string): boolean {\n        return (\n            this.getOptimizedStyleSet(this.m_tmpOptimizedSubSetKey.set(layer, undefined)).length > 0\n        );\n    }\n\n    /**\n     * Check if `styleSet` contains any rule related to particular `[layer, geometryType]` pair.\n     *\n     * @param layer name of layer\n     * @param geometryType type of layer - `point`, `line` or `polygon`\n     */\n    wantsFeature(layer: string, geometryType?: string): boolean {\n        return (\n            this.getOptimizedStyleSet(this.m_tmpOptimizedSubSetKey.set(layer, geometryType))\n                .length > 0\n        );\n    }\n\n    /**\n     * Get the expression evaluation cache, for further feature processing.\n     *\n     * This object is valid until next `getMatchingTechniques` call.\n     */\n    get expressionEvaluatorCache() {\n        return this.m_cachedResults;\n    }\n\n    /**\n     * Reset array of techniques.\n     *\n     * Cleans technique array and indices, so it doesn't accumulate accross several decoding runs.\n     */\n    resetTechniques() {\n        for (const techinque of this.m_techniques) {\n            techinque._index = undefined!;\n        }\n        this.m_techniques.length = 0;\n        this.m_previousResult = undefined;\n        this.m_previousEnv = undefined;\n    }\n\n    /**\n     * Get the (current) array of techniques that have been created during decoding.\n     */\n    get techniques(): IndexedTechnique[] {\n        return this.m_techniques;\n    }\n\n    /**\n     * Get the (current) array of techniques that have been created during decoding.\n     */\n    get decodedTechniques(): IndexedTechnique[] {\n        return this.m_techniques.map(makeDecodedTechnique);\n    }\n\n    private getOptimizedStyleSet(subSetKey: OptimizedSubSetKey): InternalStyle[] {\n        if (subSetKey.cachedStyleSet !== undefined) {\n            return subSetKey.cachedStyleSet;\n        }\n        let optimizedStyleSet = this.m_subStyleSetCache.get(subSetKey.key);\n        if (optimizedStyleSet !== undefined) {\n            subSetKey.cachedStyleSet = optimizedStyleSet;\n            return optimizedStyleSet;\n        }\n        optimizedStyleSet = this.createPreFilteredStyleSet(subSetKey);\n        this.m_subStyleSetCache.set(subSetKey.key, optimizedStyleSet);\n        subSetKey.cachedStyleSet = optimizedStyleSet;\n        return optimizedStyleSet;\n    }\n\n    private createPreFilteredStyleSet(subSetKey: OptimizedSubSetKey) {\n        const { layer, geometryType } = subSetKey;\n\n        return this.styleSet.filter(style => {\n            if (layer !== undefined && style.layer !== undefined && style.layer !== layer) {\n                return false;\n            }\n            if (\n                geometryType !== undefined &&\n                style._geometryType !== undefined &&\n                style._geometryType !== geometryType\n            ) {\n                return false;\n            }\n            return true;\n        });\n    }\n\n    /**\n     * Compile the `when` conditions found when traversting the styling rules.\n     */\n    private compileStyleSet() {\n        this.m_featureDependencies = [\"$layer\", \"$geometryType\", \"$zoom\"];\n\n        this.styleSet.forEach(style => this.compileStyle(style));\n\n        // Create optimized styleSets for each `layer` & `geometryType` tuple.\n        this.styleSet.forEach(style => {\n            this.getOptimizedStyleSet(\n                this.m_tmpOptimizedSubSetKey.set(style.layer, style._geometryType)\n            );\n        });\n    }\n\n    /**\n     * Compile the `when` conditions reachable from the given `style`.\n     *\n     * @param style The current style.\n     */\n    private compileStyle(style: InternalStyle) {\n        this.checkStyleDynamicAttributes(style);\n\n        if (style.when !== undefined) {\n            try {\n                style._whenExpr = Array.isArray(style.when)\n                    ? Expr.fromJSON(style.when, this.m_definitions, this.m_definitionExprCache)\n                    : // tslint:disable-next-line: deprecation\n                      Expr.parse(style.when);\n\n                // search for usages of '$layer' and any other\n                // special symbol that can be used to speed up the evaluation\n                // of the `when` conditions associated to this `style`.\n                this.m_styleConditionClassifier.classify(style);\n\n                if (style._whenExpr !== undefined) {\n                    style._whenExpr = style._whenExpr.intern(this.m_exprPool);\n                }\n\n                const deps = style._whenExpr.dependencies();\n\n                deps?.properties.forEach(prop => {\n                    if (!this.m_featureDependencies.includes(prop)) {\n                        this.m_featureDependencies.push(prop);\n                    }\n                });\n\n                if (isJsonExpr(style.minZoomLevel)) {\n                    style._minZoomLevelExpr = Expr.fromJSON(style.minZoomLevel).intern(\n                        this.m_exprPool\n                    );\n                }\n\n                if (isJsonExpr(style.maxZoomLevel)) {\n                    style._maxZoomLevelExpr = Expr.fromJSON(style.maxZoomLevel).intern(\n                        this.m_exprPool\n                    );\n                }\n            } catch (err) {\n                logger.log(\n                    \"failed to evaluate expression\",\n                    JSON.stringify(style.when),\n                    \"error\",\n                    String(err)\n                );\n            }\n        }\n    }\n\n    /**\n     * Process a style (and its sub-styles) hierarchically to look for the technique that fits the\n     * current objects' environment. The attributes of the styles are assembled to create a unique\n     * technique for every object.\n     *\n     * @param env The objects environment, i.e. the attributes that are relevant for its\n     *            representation.\n     * @param style Current style (could also be top of stack).\n     * @param result The array of resulting techniques. There may be more than one technique per\n     *               object, resulting in multiple graphical objects for representation.\n     * @returns `true` if style has been found and processing is finished. `false` if not found, or\n     *          more than one technique should be applied.\n     */\n    private processStyle(env: Env, style: InternalStyle, result: Technique[]): boolean {\n        if (!this.checkZoomLevel(env, style)) {\n            return false;\n        }\n\n        if (\n            this.m_layer !== undefined &&\n            style.layer !== undefined &&\n            style.layer !== this.m_layer\n        ) {\n            return false;\n        }\n        if (\n            this.m_geometryType !== undefined &&\n            style._geometryType !== undefined &&\n            style._geometryType !== this.m_geometryType\n        ) {\n            return false;\n        }\n\n        if (style._whenExpr) {\n            try {\n                if (!style._whenExpr.evaluate(env, ExprScope.Condition, this.m_cachedResults)) {\n                    // Stop processing this styling rule. The `when` condition\n                    // associated with the current `style` evaluates to false so\n                    // no techinque defined by this style should be applied.\n                    return false;\n                }\n            } catch (error) {\n                logger.error(\n                    `failed to evaluate expression '${JSON.stringify(style.when)}': ${error}`\n                );\n                return false;\n            }\n        }\n\n        if (style.technique === undefined) {\n            return false;\n        }\n        // we found a technique!\n        if (style.technique !== \"none\") {\n            result.push(this.getTechniqueForStyleMatch(env, style));\n        }\n        // stop processing if \"final\" is set\n        return style.final === true;\n    }\n\n    private checkZoomLevel(env: Env, style: InternalStyle) {\n        if (style.minZoomLevel === undefined && style.maxZoomLevel === undefined) {\n            return true;\n        }\n\n        const zoomLevel = this.m_zoomLevel;\n        if (zoomLevel === undefined) {\n            return true;\n        }\n\n        if (style.minZoomLevel !== undefined) {\n            let minZoomLevel: Value = style.minZoomLevel;\n\n            if (style._minZoomLevelExpr) {\n                // the constraint is defined as expression, evaluate it and\n                // use its value\n                try {\n                    minZoomLevel = style._minZoomLevelExpr.evaluate(\n                        env,\n                        ExprScope.Condition,\n                        this.m_cachedResults\n                    );\n                } catch (error) {\n                    logger.error(\n                        `failed to evaluate expression '${JSON.stringify(\n                            style._minZoomLevelExpr\n                        )}': ${error}`\n                    );\n                }\n            }\n\n            if (typeof minZoomLevel === \"number\" && zoomLevel < minZoomLevel) {\n                return false;\n            }\n        }\n\n        if (style.maxZoomLevel !== undefined) {\n            let maxZoomLevel: Value = style.maxZoomLevel;\n\n            if (style._maxZoomLevelExpr) {\n                try {\n                    maxZoomLevel = style._maxZoomLevelExpr.evaluate(\n                        env,\n                        ExprScope.Condition,\n                        this.m_cachedResults\n                    );\n                } catch (error) {\n                    logger.error(\n                        `failed to evaluate expression '${JSON.stringify(\n                            style._maxZoomLevelExpr\n                        )}': ${error}`\n                    );\n                }\n            }\n\n            if (typeof maxZoomLevel === \"number\" && zoomLevel > maxZoomLevel) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n\n    private getTechniqueForStyleMatch(env: Env, style: InternalStyle) {\n        let technique: IndexedTechnique | undefined;\n        if (style._dynamicTechniques !== undefined) {\n            const dynamicAttributes = this.evaluateTechniqueProperties(style, env);\n            const key = this.getDynamicTechniqueKey(style, dynamicAttributes);\n            technique = style._dynamicTechniques!.get(key);\n            if (technique === undefined) {\n                technique = this.createTechnique(style, key, dynamicAttributes);\n                style._dynamicTechniques!.set(key, technique);\n            }\n        } else {\n            technique = style._staticTechnique;\n            if (technique === undefined) {\n                style._staticTechnique = technique = this.createTechnique(\n                    style,\n                    `${style._styleSetIndex}`,\n                    []\n                ) as IndexedTechnique;\n            }\n        }\n\n        if (technique._index === undefined) {\n            technique._index = this.m_techniques.length;\n            this.m_techniques.push(technique);\n        }\n        return technique;\n    }\n\n    private getDynamicTechniqueKey(\n        style: InternalStyle,\n        dynamicAttributes: Array<[string, Value]>\n    ) {\n        const dynamicAttrKey = dynamicAttributes\n            .map(([_attrName, attrValue]) => {\n                if (attrValue === undefined) {\n                    return \"U\";\n                } else {\n                    return JSON.stringify(attrValue);\n                }\n            })\n            .join(\":\");\n        return `${style._styleSetIndex!}:${dynamicAttrKey}`;\n    }\n\n    private checkStyleDynamicAttributes(style: InternalStyle) {\n        if (style._dynamicTechniqueAttributes !== undefined || style.technique === \"none\") {\n            return;\n        }\n\n        style._dynamicTechniqueAttributes = [];\n        style._dynamicFeatureAttributes = [];\n        style._dynamicForwardedAttributes = [];\n        style._staticAttributes = [];\n\n        const dynamicFeatureAttributes = style._dynamicFeatureAttributes;\n        const dynamicTechniqueAttributes = style._dynamicTechniqueAttributes;\n        const dynamicForwardedAttributes = style._dynamicForwardedAttributes;\n        const targetStaticAttributes = style._staticAttributes;\n\n        const techniqueDescriptor =\n            techniqueDescriptors[style.technique] || emptyTechniqueDescriptor;\n\n        const processAttribute = (attrName: string, attrValue: Value | JsonExpr | undefined) => {\n            if (attrValue === undefined) {\n                return;\n            }\n\n            if (isJsonExpr(attrValue)) {\n                attrValue = Expr.fromJSON(\n                    attrValue,\n                    this.m_definitions,\n                    this.m_definitionExprCache\n                ).intern(this.m_exprPool);\n            } else if (isInterpolatedPropertyDefinition(attrValue)) {\n                // found a property using an object-like interpolation definition.\n                attrValue = Expr.fromJSON(\n                    interpolatedPropertyDefinitionToJsonExpr(attrValue)\n                ).intern(this.m_exprPool);\n            }\n\n            if (Expr.isExpr(attrValue)) {\n                const deps = attrValue.dependencies();\n\n                if (deps.featureState) {\n                    if (attrName !== \"enabled\") {\n                        logger.log(\"feature-state is not supported in this context\");\n                    } else {\n                        style._usesFeatureState = true;\n                    }\n                }\n\n                if (deps.properties.size === 0 && !attrValue.isDynamic()) {\n                    // no data-dependencies detected.\n                    attrValue = attrValue.evaluate(this.m_emptyEnv);\n                }\n            }\n\n            if (Expr.isExpr(attrValue)) {\n                let attrScope: AttrScope | undefined = (techniqueDescriptor.attrScopes as any)[\n                    attrName as any\n                ];\n\n                if (attrScope === undefined) {\n                    // Use [[AttrScope.TechniqueGeometry]] as default scope for the attribute.\n                    attrScope = AttrScope.TechniqueGeometry;\n                }\n\n                const deps = attrValue.dependencies();\n\n                deps.properties.forEach(prop => {\n                    if (!this.m_featureDependencies.includes(prop)) {\n                        this.m_featureDependencies.push(prop);\n                    }\n                });\n\n                switch (attrScope) {\n                    case AttrScope.FeatureGeometry:\n                        dynamicFeatureAttributes.push([attrName, attrValue]);\n                        break;\n                    case AttrScope.TechniqueGeometry:\n                        dynamicTechniqueAttributes.push([attrName, attrValue]);\n                        break;\n                    case AttrScope.TechniqueRendering:\n                        if (deps.properties.size === 0) {\n                            dynamicForwardedAttributes.push([attrName, attrValue]);\n                        } else {\n                            dynamicTechniqueAttributes.push([attrName, attrValue]);\n                        }\n                        break;\n                }\n            } else if (attrValue !== undefined && attrValue !== null) {\n                targetStaticAttributes.push([attrName, attrValue]);\n            }\n        };\n\n        processAttribute(\"_category\", style.category);\n        processAttribute(\"_secondaryCategory\", (style as LineStyle).secondaryCategory);\n\n        processAttribute(\"renderOrder\", style.renderOrder);\n\n        // TODO: What the heck is that !?\n        processAttribute(\"label\", style.labelProperty);\n\n        // line & solid-line secondaryRenderOrder should be generic attr\n        // TODO: maybe just warn and force move it to `attr` ?\n        processAttribute(\"secondaryRenderOrder\", (style as LineStyle).secondaryRenderOrder);\n\n        if (style.attr !== undefined) {\n            for (const attrName in style.attr) {\n                if (!style.attr.hasOwnProperty(attrName)) {\n                    continue;\n                }\n                processAttribute(attrName, (style.attr as any)[attrName]);\n            }\n        }\n\n        if (dynamicTechniqueAttributes.length > 0) {\n            style._dynamicTechniques = new Map();\n        }\n    }\n\n    private evaluateTechniqueProperties(style: InternalStyle, env: Env): Array<[string, Value]> {\n        if (style._dynamicTechniqueAttributes === undefined) {\n            return [];\n        }\n\n        const instantiationContext = { env };\n\n        return style._dynamicTechniqueAttributes.map(([attrName, attrExpr]) => {\n            try {\n                if (attrExpr.isDynamic()) {\n                    const reducedExpr = attrExpr.instantiate(instantiationContext);\n                    return [attrName, reducedExpr];\n                }\n\n                const evaluatedValue = attrExpr.evaluate(\n                    env,\n                    ExprScope.Value,\n                    this.m_cachedResults\n                );\n                return [attrName, evaluatedValue];\n            } catch (error) {\n                logger.error(`failed to evaluate expression '${attrExpr.toJSON()}': ${error}`);\n                return [attrName, null];\n            }\n        });\n    }\n\n    private createTechnique(\n        style: InternalStyle,\n        key: string,\n        dynamicAttrs: Array<[string, Value]>\n    ) {\n        const technique: any = {};\n        technique.name = style.technique;\n        if (style._staticAttributes !== undefined) {\n            for (const [attrName, attrValue] of style._staticAttributes) {\n                if (attrValue !== null) {\n                    technique[attrName] = attrValue;\n                }\n            }\n        }\n        for (const [attrName, attrValue] of dynamicAttrs) {\n            if (attrValue !== null) {\n                technique[attrName] = attrValue;\n            }\n        }\n\n        if (style._dynamicFeatureAttributes !== undefined) {\n            for (const [attrName, attrValue] of style._dynamicFeatureAttributes) {\n                technique[attrName] = attrValue;\n            }\n        }\n\n        if (style._dynamicForwardedAttributes !== undefined) {\n            for (const [attrName, attrValue] of style._dynamicForwardedAttributes) {\n                technique[attrName] = attrValue;\n            }\n        }\n\n        technique._index = this.m_techniques.length;\n        technique._styleSetIndex = style._styleSetIndex!;\n        if (style.styleSet !== undefined) {\n            technique._styleSet = style.styleSet;\n        }\n        if (style._usesFeatureState !== undefined) {\n            technique._usesFeatureState = style._usesFeatureState;\n        }\n        this.m_techniques.push(technique as IndexedTechnique);\n        return technique as IndexedTechnique;\n    }\n}\n\nfunction computeDefaultRenderOrder(styleSet: InternalStyle[]) {\n    let techniqueRenderOrder = 0;\n    let styleSetIndex = 0;\n    for (const style of styleSet) {\n        style._styleSetIndex = styleSetIndex++;\n        if (style.technique !== undefined && style.renderOrder === undefined) {\n            style.renderOrder = techniqueRenderOrder++;\n        }\n    }\n}\n\nfunction resolveReferences(styleSet: StyleDeclaration[], definitions: Definitions | undefined) {\n    return styleSet.map(style => resolveStyleReferences(style, definitions));\n}\n\nfunction resolveStyleReferences(\n    style: StyleDeclaration,\n    definitions: Definitions | undefined\n): InternalStyle {\n    if (isJsonExpr(style)) {\n        if (!isJsonExprReference(style)) {\n            throw new Error(\"invalid expression in this context, only 'ref's are supported\");\n        }\n        // expand and instantiate references to style definitions.\n        const definitionName = style[1];\n        const def = definitions && definitions[definitionName];\n        if (!def) {\n            throw new Error(`invalid reference '${definitionName}' - not found`);\n        }\n        if (!isActualSelectorDefinition(def)) {\n            throw new Error(`invalid reference '${definitionName}' - expected style definition`);\n        }\n        // instantiate the style\n        return resolveStyleReferences(def, definitions);\n    }\n\n    return { ...style };\n}\n\n/**\n * Create transferable representation of dynamic technique.\n *\n * Converts  non-transferable [[Expr]]instances back to JSON form.\n */\nexport function makeDecodedTechnique(technique: IndexedTechnique): IndexedTechnique {\n    const result: Partial<IndexedTechnique> = {};\n    for (const attrName in technique) {\n        if (!technique.hasOwnProperty(attrName)) {\n            continue;\n        }\n\n        let attrValue: any = (technique as any)[attrName];\n\n        if (\n            typeof attrValue === \"object\" &&\n            (attrValue.isVector2 || attrValue.isVector3 || attrValue.isVector4)\n        ) {\n            attrValue = LiteralExpr.fromValue(attrValue);\n        }\n\n        if (Expr.isExpr(attrValue)) {\n            attrValue = attrValue.toJSON();\n        }\n\n        (result as any)[attrName] = attrValue;\n    }\n    return (result as any) as IndexedTechnique;\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport {\n    BooleanLiteralExpr,\n    CallExpr,\n    CaseExpr,\n    Expr,\n    ExprVisitor,\n    HasAttributeExpr,\n    MatchExpr,\n    NullLiteralExpr,\n    NumberLiteralExpr,\n    ObjectLiteralExpr,\n    StringLiteralExpr,\n    VarExpr\n} from \"./Expr\";\n\nimport { Value } from \"./Env\";\n\n/**\n * [[ExprPool]] maintains a set of unique interned [[Expr]] objects.\n *\n * @hidden\n */\nexport class ExprPool implements ExprVisitor<Expr, void> {\n    private readonly m_booleanLiterals = new Map<boolean, BooleanLiteralExpr>();\n    private readonly m_numberLiterals = new Map<number, NumberLiteralExpr>();\n    private readonly m_stringLiterals = new Map<string, StringLiteralExpr>();\n    private readonly m_objectLiterals = new Map<object, ObjectLiteralExpr>();\n    private readonly m_arrayLiterals: ObjectLiteralExpr[] = [];\n    private readonly m_varExprs = new Map<string, VarExpr>();\n    private readonly m_hasAttributeExprs = new Map<string, HasAttributeExpr>();\n    private readonly m_matchExprs: MatchExpr[] = [];\n    private readonly m_caseExprs: CaseExpr[] = [];\n    private readonly m_callExprs = new Map<string, CallExpr[]>();\n\n    /**\n     * Add `expr` to this [[ExprPool]] and return a unique [[Expr]]\n     * object that is structurally equivalent to `expr`.\n     *\n     * @param expr The [[Expr]] to add to this [[ExprPool]].\n     * @returns A unique [[Expr]] that is structurally equivalent to `expr`.\n     */\n    add(expr: Expr): Expr {\n        return expr.accept(this, undefined);\n    }\n\n    visitNullLiteralExpr(expr: NullLiteralExpr, context: void): Expr {\n        return NullLiteralExpr.instance;\n    }\n\n    visitBooleanLiteralExpr(expr: BooleanLiteralExpr, context: void): Expr {\n        const e = this.m_booleanLiterals.get(expr.value);\n        if (e) {\n            return e;\n        }\n        this.m_booleanLiterals.set(expr.value, expr);\n        return expr;\n    }\n\n    visitNumberLiteralExpr(expr: NumberLiteralExpr, context: void): Expr {\n        const e = this.m_numberLiterals.get(expr.value);\n        if (e) {\n            return e;\n        }\n        this.m_numberLiterals.set(expr.value, expr);\n        return expr;\n    }\n\n    visitStringLiteralExpr(expr: StringLiteralExpr, context: void): Expr {\n        const e = this.m_stringLiterals.get(expr.value);\n        if (e) {\n            return e;\n        }\n        this.m_stringLiterals.set(expr.value, expr);\n        return expr;\n    }\n\n    visitObjectLiteralExpr(expr: ObjectLiteralExpr, context: void): Expr {\n        const e = this.m_objectLiterals.get(expr.value);\n        if (e) {\n            return e;\n        }\n\n        if (Array.isArray(expr.value)) {\n            const array = expr.value as Value[];\n\n            const r = this.m_arrayLiterals.find(literal => {\n                const elements = literal.value as Value[];\n                if (elements.length !== array.length) {\n                    return false;\n                }\n                return array.every((x, i) => x === elements[i]);\n            });\n\n            if (r !== undefined) {\n                return r;\n            }\n\n            this.m_arrayLiterals.push(expr);\n        }\n\n        this.m_objectLiterals.set(expr.value, expr);\n\n        return expr;\n    }\n\n    visitVarExpr(expr: VarExpr, context: void): Expr {\n        const e = this.m_varExprs.get(expr.name);\n        if (e) {\n            return e;\n        }\n        this.m_varExprs.set(expr.name, expr);\n        return expr;\n    }\n\n    visitHasAttributeExpr(expr: HasAttributeExpr, context: void): Expr {\n        const e = this.m_hasAttributeExprs.get(expr.name);\n        if (e) {\n            return e;\n        }\n        this.m_hasAttributeExprs.set(expr.name, expr);\n        return expr;\n    }\n\n    visitMatchExpr(expr: MatchExpr, context: void): Expr {\n        const value = expr.value.accept(this, context);\n        const branches: typeof expr.branches = expr.branches.map(([label, body]) => [\n            label,\n            body.accept(this, context)\n        ]);\n        const fallback = expr.fallback.accept(this, context);\n        for (const candidate of this.m_matchExprs) {\n            if (candidate.value !== value) {\n                continue;\n            }\n            if (candidate.fallback !== fallback) {\n                continue;\n            }\n            if (candidate.branches.length !== branches.length) {\n                continue;\n            }\n            let branchesMatching = true;\n            for (let i = 0; i < branches.length; i++) {\n                if (\n                    branches[i][0] !== candidate.branches[i][0] ||\n                    branches[i][1] !== candidate.branches[i][1]\n                ) {\n                    branchesMatching = false;\n                    break;\n                }\n            }\n            if (branchesMatching) {\n                return candidate;\n            }\n        }\n        const r = new MatchExpr(value, branches, fallback);\n        this.m_matchExprs.push(r);\n        return r;\n    }\n\n    visitCaseExpr(expr: CaseExpr, context: void): Expr {\n        const branches: typeof expr.branches = expr.branches.map(([condition, body]) => [\n            condition.accept(this, context),\n            body.accept(this, context)\n        ]);\n        const fallback = expr.fallback.accept(this, context);\n\n        for (const candidate of this.m_caseExprs) {\n            if (candidate.fallback !== fallback) {\n                continue;\n            }\n            if (candidate.branches.length !== branches.length) {\n                continue;\n            }\n            let branchesMatching = true;\n            for (let i = 0; i < branches.length; i++) {\n                if (\n                    branches[i][0] !== candidate.branches[i][0] ||\n                    branches[i][1] !== candidate.branches[i][1]\n                ) {\n                    branchesMatching = false;\n                    break;\n                }\n            }\n            if (branchesMatching) {\n                return candidate;\n            }\n        }\n\n        const r = new CaseExpr(branches, fallback);\n        this.m_caseExprs.push(r);\n        return r;\n    }\n\n    visitCallExpr(expr: CallExpr, context: void): Expr {\n        // rewrite the actual arguments\n        const expressions = expr.args.map(childExpr => childExpr.accept(this, context));\n        // ensure we have a valid set of interned expressions for the calls\n        if (!this.m_callExprs.has(expr.op)) {\n            this.m_callExprs.set(expr.op, []);\n        }\n        // get the calls for the given operator.\n        const calls = this.m_callExprs.get(expr.op)!;\n        for (const call of calls) {\n            // check the number of arguments\n            if (call.args.length !== expressions.length) {\n                continue;\n            }\n            // find the index of the first mismatch.\n            let index = 0;\n            for (; index < call.args.length; ++index) {\n                if (call.args[index] !== expressions[index]) {\n                    break;\n                }\n            }\n            if (index === call.args.length) {\n                // no mismatch found, return the 'interned' call.\n                return call;\n            }\n        }\n        const e = new CallExpr(expr.op, expressions);\n        calls.push(e);\n        return e;\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * Fills an index buffer with the indices for the extruded walls for a polygon contour.\n *\n * @param indexBuffer Index buffer to be filled.\n * @param vertexOffset Starting offset of the vertices composing the contour.\n * @param vertexStride Number of elements per contour vertex.\n * @param contour Vertices that compose the contour.\n * @param contourEdges Collection of booleans indicating if contour edges should be added.\n * @param boundaryWalls If `false`, walls in tile boundaries will not be created.\n *\n */\nexport function addExtrudedWalls(\n    indexBuffer: number[],\n    vertexOffset: number,\n    vertexStride: number,\n    contour: number[],\n    contourEdges?: boolean[],\n    boundaryWalls?: boolean\n): void {\n    // Infer the index buffer's position of the vertices that form the extruded-polygons' walls\n    // by stepping through the contour segment by segment.\n    const nSegments = contour.length / vertexStride;\n    for (let i = 0; i < nSegments; ++i) {\n        const vFootprint0 = vertexOffset + i * 2;\n        const vRoof0 = vFootprint0 + 1;\n        const vFootprint1 = vertexOffset + ((i + 1) % nSegments) * 2;\n        const vRoof1 = vFootprint1 + 1;\n        if (boundaryWalls !== false || contourEdges === undefined) {\n            indexBuffer.push(vFootprint0, vRoof0, vRoof1, vRoof1, vFootprint1, vFootprint0);\n        } else if (contourEdges[i]) {\n            indexBuffer.push(vFootprint0, vRoof0, vRoof1, vRoof1, vFootprint1, vFootprint0);\n        }\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport * as THREE from \"three\";\n\nconst currEdgeStart = new THREE.Vector2();\nconst currEdgeGoal = new THREE.Vector2();\nconst prevEdgeStart = new THREE.Vector2();\nconst prevEdgeGoal = new THREE.Vector2();\n\n/**\n * Fills an index buffer with the indices for the edges of a polygon contour.\n *\n * @param indexBuffer Edge index buffer to be filled.\n * @param vertexOffset Starting offset of the vertices composing the contour.\n * @param vertexStride Number of elements per contour vertex.\n * @param polygonContour Vertices that compose the contour.\n * @param polygonContourEdges Collection of booleans indicating if contour edges should be added.\n */\nexport function addPolygonEdges(\n    indexBuffer: number[],\n    vertexOffset: number,\n    vertexStride: number,\n    polygonContour: number[],\n    polygonContourEdges: boolean[],\n    isExtruded?: boolean,\n    addFootprintEdges?: boolean,\n    wallEdgeSlope?: number\n) {\n    for (let i = 0; i < polygonContourEdges.length; ++i) {\n        if (polygonContourEdges[i]) {\n            if (isExtruded === true) {\n                const vFootprint0 = vertexOffset + i * 2;\n                const vRoof0 = vFootprint0 + 1;\n                const vFootprint1 = vertexOffset + ((i + 1) % polygonContourEdges.length) * 2;\n                const vRoof1 = vFootprint1 + 1;\n\n                if (addFootprintEdges === true) {\n                    indexBuffer.push(vFootprint0, vFootprint1);\n                }\n                indexBuffer.push(vRoof0, vRoof1);\n\n                const prevEdgeIdx = (i === 0 ? polygonContourEdges.length : i) - 1;\n                if (polygonContourEdges[prevEdgeIdx]) {\n                    if (wallEdgeSlope !== undefined) {\n                        const v0x = polygonContour[i * vertexStride];\n                        const v0y = polygonContour[i * vertexStride + 1];\n                        const v1x =\n                            polygonContour[((i + 1) % polygonContourEdges.length) * vertexStride];\n                        const v1y =\n                            polygonContour[\n                                ((i + 1) % polygonContourEdges.length) * vertexStride + 1\n                            ];\n\n                        currEdgeStart.set(v0x, v0y);\n                        currEdgeGoal.set(v1x, v1y);\n                        prevEdgeStart.set(\n                            polygonContour[prevEdgeIdx * vertexStride],\n                            polygonContour[prevEdgeIdx * vertexStride + 1]\n                        );\n                        prevEdgeGoal.set(currEdgeStart.x, currEdgeStart.y);\n\n                        if (\n                            prevEdgeGoal\n                                .sub(prevEdgeStart)\n                                .normalize()\n                                .dot(currEdgeGoal.sub(currEdgeStart).normalize()) <= wallEdgeSlope\n                        ) {\n                            indexBuffer.push(vFootprint0, vRoof0);\n                        }\n                    } else {\n                        indexBuffer.push(vFootprint0, vRoof0);\n                    }\n                }\n            } else {\n                const vFoot0 = vertexOffset + i;\n                const vRoof0 = vertexOffset + ((i + 1) % polygonContourEdges.length);\n                indexBuffer.push(vFoot0, vRoof0);\n            }\n        }\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport {\n    BufferAttribute as ThreeBufferAttribute,\n    BufferGeometry as ThreeBufferGeometry,\n    InterleavedBufferAttribute as ThreeInterleavedBufferAttribute,\n    TypedArray\n} from \"three\";\nimport {\n    BufferAttribute,\n    BufferElementType,\n    Geometry,\n    GeometryType,\n    InterleavedBufferAttribute\n} from \"./DecodedTile\";\n\n/**\n * Collection of helper methods to convert\n * {@link https://threejs.org/docs/index.html#api/en/core/BufferGeometry|three.js BufferGeometry}\n * to [[Geometry]] that allows creation and transfering of THREE BufferGeometry in webworkers.\n * See also [[CustomDatasourceExample]].\n */\nexport namespace ThreeBufferUtils {\n    export function getBufferElementType(buffer: TypedArray): BufferElementType {\n        if (buffer instanceof Int8Array) {\n            return \"int8\";\n        } else if (buffer instanceof Uint8Array) {\n            return \"uint8\";\n        } else if (buffer instanceof Int16Array) {\n            return \"int16\";\n        } else if (buffer instanceof Uint16Array) {\n            return \"uint16\";\n        } else if (buffer instanceof Int32Array) {\n            return \"int32\";\n        } else if (buffer instanceof Uint32Array) {\n            return \"uint32\";\n        } else if (buffer instanceof Float32Array) {\n            return \"float\";\n        }\n\n        throw new Error(`Unsupported buffer type ${name}`);\n    }\n\n    export function fromThreeBufferAttribute(\n        bufferAttribute: ThreeBufferAttribute\n    ): BufferAttribute {\n        const buffer = (bufferAttribute.array as any) as TypedArray;\n        return {\n            name: bufferAttribute.name,\n            buffer: buffer.buffer,\n            type: getBufferElementType(buffer),\n            itemCount: bufferAttribute.itemSize,\n            normalized: bufferAttribute.normalized\n        };\n    }\n\n    export function fromThreeInterleavedBufferAttribute(\n        bufferAttribute: ThreeInterleavedBufferAttribute\n    ): InterleavedBufferAttribute {\n        throw new Error(\"Not implemented yet\");\n    }\n\n    export function fromThreeBufferGeometry(\n        bufferGeometry: ThreeBufferGeometry,\n        techniqueIndex: number\n    ): Geometry {\n        const vertexAttributes: BufferAttribute[] = [];\n        const attributeNames = Object.getOwnPropertyNames(bufferGeometry.attributes);\n        for (const name of attributeNames) {\n            const attribute = bufferGeometry.attributes[name];\n            // FIXME: Also support InterleavedBufferAttribute\n            const vertexAttribute = fromThreeBufferAttribute(attribute as ThreeBufferAttribute);\n            vertexAttribute.name = name;\n            vertexAttributes.push(vertexAttribute);\n        }\n        const index =\n            bufferGeometry.index !== null\n                ? fromThreeBufferAttribute(bufferGeometry.index)\n                : undefined;\n\n        let count = 0;\n        if (index !== undefined) {\n            count = bufferGeometry.index === null ? 0 : bufferGeometry.index.count;\n        } else {\n            // If there is no index buffer, try to deduce the count from the position attribute.\n            const posAttr = bufferGeometry.attributes.position as ThreeBufferAttribute;\n            if (posAttr === undefined) {\n                throw new Error(\"Missing position attibute to deduce item count\");\n            }\n            count = posAttr.count;\n        }\n\n        return {\n            type: GeometryType.Unspecified,\n            vertexAttributes,\n            index,\n            groups: [{ start: 0, count, technique: techniqueIndex }]\n        };\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { Vector3Like } from \"@here/harp-geoutils\";\nimport * as THREE from \"three\";\n\n/**\n * Determines whether a position in NDC (Normalized Device Coordinates) is inside the screen.\n * @param ndc The position to check.\n */\nfunction isOnScreen(ndc: THREE.Vector3) {\n    return ndc.z > -1 && ndc.z < 1 && ndc.x >= -1 && ndc.x <= 1 && ndc.y >= -1 && ndc.y <= 1;\n}\n\n/**\n * @hidden\n * Handles the projection of world coordinates to screen coordinates.\n */\nexport class ScreenProjector {\n    static tempV2 = new THREE.Vector2();\n    static tempV3 = new THREE.Vector3();\n\n    private m_width: number = 0;\n    private m_height: number = 0;\n\n    /**\n     * Constructs a new `ScreenProjector`.\n     *\n     * @param m_camera Camera to project against.\n     */\n    constructor(private m_camera: THREE.Camera) {}\n\n    /**\n     * Height of the screen.\n     */\n    get width(): number {\n        return this.m_width;\n    }\n\n    /**\n     * Width of the screen.\n     */\n    get height(): number {\n        return this.m_height;\n    }\n\n    /**\n     * Apply current projectionViewMatrix of the camera to project the source vector into\n     * screen coordinates.\n     *\n     * @param {(Vector3Like)} source The source vector to project.\n     * @param {THREE.Vector2} target The target vector.\n     * @returns {THREE.Vector2} The projected vector (the parameter 'target') or undefined if\n     * outside the near / far plane.\n     */\n    project(\n        source: Vector3Like,\n        target: THREE.Vector2 = new THREE.Vector2()\n    ): THREE.Vector2 | undefined {\n        const p = this.projectVector(source, ScreenProjector.tempV3);\n        if (p.z > -1 && p.z < 1) {\n            return this.ndcToScreen(p, target);\n        }\n        return undefined;\n    }\n\n    /**\n     * Apply current projectionViewMatrix of the camera to project the source vector into\n     * screen coordinates.\n     *\n     * @param {(Vector3Like)} source The source vector to project.\n     * @param {THREE.Vector2} target The target vector.\n     * @returns {THREE.Vector2} The projected vector (the parameter 'target') or undefined if\n     * outside the screen.\n     */\n    projectOnScreen(\n        source: Vector3Like,\n        target: THREE.Vector2 = new THREE.Vector2()\n    ): THREE.Vector2 | undefined {\n        const p = this.projectVector(source, ScreenProjector.tempV3);\n        if (isOnScreen(p)) {\n            return this.ndcToScreen(p, target);\n        }\n        return undefined;\n    }\n\n    /**\n     * Apply current projectionViewMatrix of the camera to project the source vector into\n     * screen coordinates. The z component between -1 and 1 is also returned.\n     *\n     * @param {(Vector3Like)} source The source vector to project.\n     * @param {THREE.Vector3} target The target vector.\n     * @returns {THREE.Vector3} The projected vector (the parameter 'target') or undefined if\n     * outside the near / far plane.\n     */\n    project3(\n        source: Vector3Like,\n        target: THREE.Vector3 = new THREE.Vector3()\n    ): THREE.Vector3 | undefined {\n        const p = this.projectVector(source, ScreenProjector.tempV3);\n        if (p.z > -1 && p.z < 1) {\n            target.set((p.x * this.m_width) / 2, (p.y * this.m_height) / 2, p.z);\n            return target;\n        }\n        return undefined;\n    }\n\n    /**\n     * Apply current projectionViewMatrix of the camera to project the source vector. Stores\n     * result in NDC in the target vector.\n     *\n     * @param {(Vector3Like)} source The source vector to project.\n     * @param {THREE.Vector3} target The target vector.\n     * @returns {THREE.Vector3} The projected vector (the parameter 'target').\n     */\n    projectVector(source: Vector3Like, target: THREE.Vector3): THREE.Vector3 {\n        target.set(source.x, source.y, source.z).project(this.m_camera);\n        return target;\n    }\n\n    /**\n     * Fast test to check if projected point is on screen.\n     *\n     * @returns {boolean} `true` if point is on screen, `false` otherwise.\n     */\n    onScreen(source: Vector3Like): boolean {\n        const p = this.projectVector(source, ScreenProjector.tempV3);\n        return isOnScreen(p);\n    }\n\n    /**\n     * Update the `ScreenProjector` with the latest values of the screen and the camera.\n     *\n     * @param {THREE.Camera} camera Camera to project against.\n     * @param {number} width Width of screen/canvas.\n     * @param {number} height Height of screen/canvas.\n     */\n    update(camera: THREE.Camera, width: number, height: number) {\n        this.m_camera = camera;\n        this.m_width = width;\n        this.m_height = height;\n    }\n\n    private ndcToScreen(ndc: THREE.Vector3, screenCoords: THREE.Vector2): THREE.Vector2 {\n        return screenCoords.set((ndc.x * this.m_width) / 2, (ndc.y * this.m_height) / 2);\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { CubemapSky, GradientSky } from \"@here/harp-datasource-protocol\";\nimport { ProjectionType } from \"@here/harp-geoutils\";\nimport { SkyCubemapTexture } from \"./SkyCubemapTexture\";\nimport { SkyGradientTexture } from \"./SkyGradientTexture\";\n\nimport * as THREE from \"three\";\n\n/**\n * Class that handles [[MapView]]'s sky background.\n */\nexport class SkyBackground {\n    private m_skyTexture?: SkyGradientTexture | SkyCubemapTexture;\n\n    /**\n     * Constructs a new `SkyBackground`.\n     *\n     * @param m_sky Sky configuration parameters.\n     * @param m_projectionType [[MapView]]'s projection type.\n     * @param camera [[MapView]]'s camera.\n     */\n    constructor(\n        private m_sky: GradientSky | CubemapSky,\n        private m_projectionType: ProjectionType,\n        camera: THREE.Camera\n    ) {\n        switch (this.m_sky.type) {\n            case \"gradient\":\n                this.m_skyTexture = new SkyGradientTexture(this.m_sky, this.m_projectionType);\n                this.updateCamera(camera);\n                break;\n            case \"cubemap\": {\n                this.m_skyTexture = new SkyCubemapTexture(this.m_sky);\n                break;\n            }\n        }\n    }\n\n    /**\n     * Disposes allocated resources.\n     */\n    dispose() {\n        this.m_skyTexture!.dispose();\n    }\n\n    /**\n     * Sky texture.\n     */\n    get texture(): THREE.Texture {\n        return this.m_skyTexture!.texture;\n    }\n\n    /**\n     * This method updates the skybox based on the camera position (needed for some types of sky).\n     *\n     * @param camera The camera used in the map view.\n     */\n    updateCamera(camera: THREE.Camera) {\n        if (this.m_sky.type === \"gradient\") {\n            (this.m_skyTexture! as SkyGradientTexture).update(camera);\n        }\n    }\n\n    /**\n     * Updates the sky texture with new parameters.\n     *\n     * @param params New sky configuration parameters.\n     * @param projectionType Which projection is used, this may also change (in which case the\n     * textures should be recreated).\n     */\n    updateTexture(params: GradientSky | CubemapSky, projectionType: ProjectionType) {\n        const isSameSkyType =\n            this.m_sky.type === params.type && this.m_projectionType === projectionType;\n        switch (params.type) {\n            case \"gradient\":\n                if (isSameSkyType) {\n                    (this.m_skyTexture! as SkyGradientTexture).updateTexture(params);\n                } else {\n                    this.m_skyTexture = new SkyGradientTexture(params, projectionType);\n                }\n                break;\n            case \"cubemap\": {\n                if (isSameSkyType) {\n                    (this.m_skyTexture! as SkyCubemapTexture).updateTexture(params);\n                } else {\n                    this.m_skyTexture = new SkyCubemapTexture(params);\n                }\n                break;\n            }\n        }\n        this.m_projectionType = projectionType;\n        this.m_sky = params;\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { GradientSky } from \"@here/harp-datasource-protocol\";\nimport { ProjectionType } from \"@here/harp-geoutils\";\nimport { getOptionValue } from \"@here/harp-utils\";\nimport { Color, CubeTexture, DataTexture, Line3, Plane, RGBFormat, Texture, Vector3 } from \"three\";\n\nexport const DEFAULT_TEXTURE_SIZE = 512;\nexport const DEFAULT_MONOMIAL_POWER = 1;\n\n// Vectors used for skybox bitmap computation.\nconst cameraDir = [\n    new Vector3(1, 0, 0),\n    new Vector3(-1, 0, 0),\n    new Vector3(0, -1, 0),\n    new Vector3(0, 1, 0),\n    new Vector3(0, 0, 1),\n    new Vector3(0, 0, -1)\n];\nconst cameraRight = [\n    new Vector3(0, 0, -1),\n    new Vector3(0, 0, 1),\n    new Vector3(1, 0, 0),\n    new Vector3(1, 0, 0),\n    new Vector3(1, 0, 0),\n    new Vector3(-1, 0, 0)\n];\nconst cameraUp = [\n    new Vector3(0, 1, 0),\n    new Vector3(0, 1, 0),\n    new Vector3(0, 0, 1),\n    new Vector3(0, 0, -1),\n    new Vector3(0, 1, 0),\n    new Vector3(0, 1, 0)\n];\n\n/**\n * Class tha generates a texture containing a linear gradient, to be used with [[SkyBackground]].\n *\n * The gradient is mapped onto a sphere, where `topColor` maps to the top of the upper hemisphere,\n * `bottomColor` to the bottom of the upper hemisphere, and `groundColor` fills the bottom\n *  hemisphere..\n */\nexport class SkyGradientTexture {\n    private m_width: number;\n    private m_faceCount: number;\n    private m_faces: DataTexture[];\n    private m_skybox?: CubeTexture;\n\n    // Used only in the planar case.\n    private m_farClipPlaneDividedVertically?: THREE.Line3;\n    private m_groundPlane?: THREE.Plane;\n    private m_bottomMidFarPoint?: THREE.Vector3;\n    private m_topMidFarPoint?: THREE.Vector3;\n    private m_horizonPosition?: THREE.Vector3;\n    private m_farClipPlaneCorners?: THREE.Vector3[];\n\n    /**\n     * Constructs a new `SkyGradientTexture`.\n     *\n     * @param sky Initial [[GradientSky]] configuration.\n     * @param m_projectionType [[MapView]]'s projection type.\n     * @param m_height Optional height parameter.\n     */\n    constructor(\n        sky: GradientSky,\n        private m_projectionType: ProjectionType,\n        private m_height: number = DEFAULT_TEXTURE_SIZE\n    ) {\n        const topColor = new Color(sky.topColor);\n        const bottomColor = new Color(sky.bottomColor);\n        const groundColor = new Color(sky.groundColor);\n\n        this.m_width = this.m_projectionType === ProjectionType.Planar ? 1.0 : this.m_height;\n        this.m_faceCount = this.m_projectionType === ProjectionType.Planar ? 1.0 : 6.0;\n        this.m_faces = [];\n        for (let i = 0; i < this.m_faceCount; ++i) {\n            const data = new Uint8Array(3 * this.m_width * this.m_height);\n            this.fillTextureData(data, i, topColor, bottomColor, groundColor, sky.monomialPower);\n\n            const texture = new DataTexture(data, this.m_width, this.m_height, RGBFormat);\n            texture.needsUpdate = true;\n            texture.unpackAlignment = 1;\n            this.m_faces.push(texture);\n        }\n\n        if (this.m_projectionType === ProjectionType.Spherical) {\n            this.m_skybox = new CubeTexture(this.m_faces);\n            this.m_skybox.needsUpdate = true;\n        } else {\n            this.m_farClipPlaneDividedVertically = new Line3();\n            this.m_groundPlane = new Plane(new Vector3(0, 0, 1));\n            this.m_bottomMidFarPoint = new Vector3();\n            this.m_topMidFarPoint = new Vector3();\n            this.m_horizonPosition = new Vector3();\n            this.m_farClipPlaneCorners = [\n                new Vector3(),\n                new Vector3(),\n                new Vector3(),\n                new Vector3()\n            ];\n        }\n    }\n\n    /**\n     * Disposes allocated resources.\n     */\n    dispose() {\n        for (let i = 0; i < this.m_faceCount; ++i) {\n            this.m_faces[i].dispose();\n        }\n        if (this.m_projectionType === ProjectionType.Spherical) {\n            this.m_skybox!.dispose();\n        }\n    }\n\n    /**\n     * `SkyGradientTexture`'s texture resource (simple texture or cubemap depending on\n     * [[MapView]]'s projection).\n     */\n    get texture(): Texture {\n        return this.m_projectionType === ProjectionType.Planar ? this.m_faces[0] : this.m_skybox!;\n    }\n\n    /**\n     * This method updates the position of the texture depending on the camera frustum.\n     *\n     * @param camera The camera used in the map view.\n     */\n    update(camera: THREE.Camera) {\n        if (this.m_projectionType === ProjectionType.Planar) {\n            this.setHorizonPosition(camera);\n            this.updateTexturePosition();\n        }\n    }\n\n    /**\n     * Updates the `SkyGradientTexture` with new parameters.\n     *\n     * @param params New [[GradientSky]] configuration.\n     */\n    updateTexture(sky: GradientSky) {\n        for (let i = 0; i < this.m_faceCount; ++i) {\n            this.fillTextureData(\n                this.m_faces[i].image.data,\n                i,\n                new Color(sky.topColor),\n                new Color(sky.bottomColor),\n                new Color(sky.groundColor),\n                sky.monomialPower\n            );\n            this.m_faces[i].needsUpdate = true;\n        }\n        if (this.m_projectionType === ProjectionType.Spherical) {\n            this.m_skybox!.needsUpdate = true;\n        }\n    }\n\n    // When creating the texture, a Uint8Array is required, because the resulting texture passed\n    // to the scene as a background, is a texImage2D object, that does not accept UintClampedArray\n    // https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/texImage2D\n    // But, when updating the texture, a Uint8ClampedArray is passed as argument, because\n    // this.m_texture.image.data returns a Uint8ClampedArray. That's why this method accepts both.\n    private fillTextureData(\n        data: Uint8ClampedArray | Uint8Array,\n        faceIdx: number,\n        topColor: Color,\n        bottomColor: Color,\n        groundColor: Color,\n        monomialPower?: number\n    ) {\n        const color = new Color();\n        const dir = new Vector3();\n        const right = new Vector3();\n        const up = new Vector3();\n\n        const upDir = new Vector3(0, 0, 1);\n        for (let i = 0; i < this.m_height; ++i) {\n            for (let j = 0; j < this.m_width; ++j) {\n                if (this.m_projectionType === ProjectionType.Spherical) {\n                    const offsetX = right\n                        .copy(cameraRight[faceIdx])\n                        .multiplyScalar(((j + 0.5) / this.m_width) * 2.0 - 1.0);\n                    const offsetY = up\n                        .copy(cameraUp[faceIdx])\n                        .multiplyScalar(((i + 0.5) / this.m_height) * 2.0 - 1.0);\n                    dir.copy(cameraDir[faceIdx])\n                        .add(offsetX)\n                        .add(offsetY)\n                        .normalize();\n                    const t = Math.max(upDir.dot(dir), 0);\n\n                    color\n                        .copy(groundColor)\n                        .lerp(bottomColor, Math.min(t * 100, 1))\n                        .lerp(topColor, t ** getOptionValue(monomialPower, DEFAULT_MONOMIAL_POWER))\n                        .multiplyScalar(255);\n                } else {\n                    const t = i / this.m_height;\n                    if (i === 0) {\n                        color.copy(groundColor).multiplyScalar(255);\n                    } else {\n                        color\n                            .copy(bottomColor)\n                            .lerp(\n                                topColor,\n                                t ** getOptionValue(monomialPower, DEFAULT_MONOMIAL_POWER)\n                            )\n                            .multiplyScalar(255);\n                    }\n                }\n\n                data[i * this.m_width * 3 + j * 3] = color.r;\n                data[i * this.m_width * 3 + j * 3 + 1] = color.g;\n                data[i * this.m_width * 3 + j * 3 + 2] = color.b;\n            }\n        }\n    }\n\n    private setHorizonPosition(camera: THREE.Camera) {\n        this.m_farClipPlaneCorners![0].set(-1, -1, 1).unproject(camera);\n        this.m_farClipPlaneCorners![1].set(1, -1, 1).unproject(camera);\n        this.m_farClipPlaneCorners![2].set(-1, 1, 1).unproject(camera);\n        this.m_farClipPlaneCorners![3].set(1, 1, 1).unproject(camera);\n\n        this.m_bottomMidFarPoint!.copy(this.m_farClipPlaneCorners![0])\n            .add(this.m_farClipPlaneCorners![1])\n            .multiplyScalar(0.5);\n        this.m_topMidFarPoint!.copy(this.m_farClipPlaneCorners![2])\n            .add(this.m_farClipPlaneCorners![3])\n            .multiplyScalar(0.5);\n        this.m_farClipPlaneDividedVertically!.set(this.m_bottomMidFarPoint, this.m_topMidFarPoint);\n\n        const hasIntersection = this.m_groundPlane!.intersectLine(\n            this.m_farClipPlaneDividedVertically!,\n            this.m_horizonPosition!\n        );\n\n        // When there is no intersection between the ground plane and the\n        // farClipPlaneDividedVertically, be sure that the horizon is reset. Otherwise a previous\n        // intersection point stored in the m_horizonPosition will be considered the valid one.\n        if (!hasIntersection) {\n            this.m_horizonPosition!.set(0.0, 0.0, 0.0);\n        }\n    }\n\n    private updateTexturePosition() {\n        const coveredBySky = this.m_bottomMidFarPoint!.distanceTo(this.m_horizonPosition!);\n        const frustumHeight = this.m_farClipPlaneDividedVertically!.distance();\n        const skyRatio = coveredBySky / frustumHeight;\n\n        // If there is no intersection between the ground plane and the line that defines the far\n        // clip plane divided vertically, it means that there is no sky visible and therefore the\n        // ground color should be displayed. When there is no intersection, the length of the\n        // this.m_horizonPosition is still equal to zero, as threejs initialize an empty vector with\n        // all the three components to zero.\n        // If there is an intersection, calculate the offset.\n        const ratio = this.m_horizonPosition!.length() === 0 ? 1 : skyRatio - 2 / this.m_height;\n\n        // If the bottom part of the far clipping plane is under the ground plane, scroll the\n        // texture down. Otherwise, the camera is looking at the sky, therefore, scroll the texture\n        // up.\n        this.m_faces[0].offset.set(0, this.m_bottomMidFarPoint!.z <= 0 ? -ratio : skyRatio);\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { Theme } from \"@here/harp-datasource-protocol\";\nimport { FontCatalog } from \"@here/harp-text-canvas\";\nimport { assert, LoggerManager } from \"@here/harp-utils\";\n\nexport const DEFAULT_FONT_CATALOG_NAME = \"default\";\n\nconst logger = LoggerManager.instance.create(\"FontCatalogLoader\");\n\ntype FontCatalogCallback = (name: string, catalog: FontCatalog) => void;\n\nexport class FontCatalogLoader {\n    private m_catalogsLoading: number = 0;\n\n    constructor(private readonly m_theme: Theme) {}\n\n    /**\n     * Initializes font catalog loader.\n     * @param defaultFontCatalogUrl Url of the font catalog that will be used by default if the\n     * theme doesn't define any font catalog.\n     * @returns Name of the default font catalog.\n     */\n    initialize(defaultFontCatalogUrl: string): string {\n        if (this.m_theme.fontCatalogs === undefined || this.m_theme.fontCatalogs.length === 0) {\n            this.m_theme.fontCatalogs = [\n                {\n                    name: DEFAULT_FONT_CATALOG_NAME,\n                    url: defaultFontCatalogUrl\n                }\n            ];\n            return DEFAULT_FONT_CATALOG_NAME;\n        }\n\n        const defaultFontCatalogName = this.m_theme.fontCatalogs[0].name;\n        return defaultFontCatalogName;\n    }\n\n    async loadCatalogs(catalogCallback: FontCatalogCallback): Promise<void[]> {\n        assert(this.m_theme.fontCatalogs !== undefined);\n        assert(this.m_theme.fontCatalogs!.length > 0);\n\n        const promises: Array<Promise<void>> = [];\n\n        this.m_theme.fontCatalogs!.forEach(fontCatalogConfig => {\n            this.m_catalogsLoading += 1;\n            const fontCatalogPromise: Promise<void> = FontCatalog.load(fontCatalogConfig.url, 1024)\n                .then<void>(catalogCallback.bind(undefined, fontCatalogConfig.name))\n                .catch((error: Error) => {\n                    logger.error(\"Failed to load FontCatalog: \", error);\n                })\n                .finally(() => {\n                    this.m_catalogsLoading -= 1;\n                });\n            promises.push(fontCatalogPromise);\n        });\n\n        return Promise.all(promises);\n    }\n\n    get loading(): boolean {\n        return this.m_catalogsLoading > 0;\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { Env, GeometryKindSet } from \"@here/harp-datasource-protocol\";\nimport { Projection } from \"@here/harp-geoutils\";\nimport { ElevationProvider } from \"../ElevationProvider\";\nimport { MapView } from \"../MapView\";\nimport { ViewState } from \"./ViewState\";\n\n/**\n * View state obtained from a MapView instance.\n */\nexport class MapViewState implements ViewState {\n    constructor(\n        private readonly m_mapView: MapView,\n        private readonly m_renderedTilesChangeCheck: () => boolean\n    ) {}\n\n    get worldCenter(): THREE.Vector3 {\n        return this.m_mapView.worldCenter;\n    }\n    get cameraIsMoving(): boolean {\n        return this.m_mapView.cameraIsMoving;\n    }\n    get maxVisibilityDist(): number {\n        return this.m_mapView.viewRanges.maximum;\n    }\n    get zoomLevel(): number {\n        return this.m_mapView.zoomLevel;\n    }\n    get env(): Env {\n        return this.m_mapView.env;\n    }\n    get frameNumber(): number {\n        return this.m_mapView.frameNumber;\n    }\n    get lookAtDistance(): number {\n        return this.m_mapView.targetDistance;\n    }\n    get isDynamic(): boolean {\n        return this.m_mapView.isDynamicFrame;\n    }\n    get hiddenGeometryKinds(): GeometryKindSet | undefined {\n        return this.m_mapView.tileGeometryManager === undefined\n            ? undefined\n            : this.m_mapView.tileGeometryManager.hiddenGeometryKinds;\n    }\n\n    get renderedTilesChanged(): boolean {\n        return this.m_renderedTilesChangeCheck();\n    }\n\n    get projection(): Projection {\n        return this.m_mapView.projection;\n    }\n\n    get elevationProvider(): ElevationProvider | undefined {\n        return this.m_mapView.elevationProvider;\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { FontCatalog, TextCanvas } from \"@here/harp-text-canvas\";\nimport { assert } from \"@here/harp-utils\";\n\nexport class TextCanvasFactory {\n    private m_minGlyphCount: number = 0; //Min amount of glyphs each [[TextCanvas]] layer can store.\n    private m_maxGlyphCount: number = 0; //Max amount of glyphs each [[TextCanvas]] layer can store.\n\n    /**\n     * Creates an instance of text canvas factory.\n     * @param m_renderer\n     */\n    constructor(private readonly m_renderer: THREE.WebGLRenderer) {}\n\n    setGlyphCountLimits(min: number, max: number) {\n        this.m_minGlyphCount = min;\n        this.m_maxGlyphCount = max;\n    }\n\n    /**\n     * Creates text canvas\n     * @param fontCatalog Initial [[FontCatalog]].\n     */\n    createTextCanvas(fontCatalog: FontCatalog): TextCanvas {\n        assert(this.m_maxGlyphCount > 0);\n\n        return new TextCanvas({\n            renderer: this.m_renderer,\n            fontCatalog,\n            minGlyphCount: this.m_minGlyphCount,\n            maxGlyphCount: this.m_maxGlyphCount\n        });\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { getOptionValue } from \"@here/harp-utils\";\nimport { MapView, MapViewEventNames } from \"../MapView\";\nimport { CopyrightInfo } from \"./CopyrightInfo\";\n\n/**\n * Helper class that maintains up-to-date [[MapView]] copyright information in DOM element.\n *\n * @example\n *\n *     // HTML snippet\n *     <div id=\"copyrightNotice\" style=\"position:absolute; right:0; bottom:0; z-index:100\"></div>\n *\n *     // JavaScript\n *     const mapView = new MapView({ ... });\n *     CopyrightElementHandler.install(\"copyrightNotice\", mapView);\n */\nexport class CopyrightElementHandler {\n    /**\n     * Install [[CopyrightElementHandler]] on DOM element and - optionally - attach to a [[MapView]]\n     * instance.\n     *\n     * @param element HTML DOM element or a HTML DOM element id\n     * @param mapView, optional, [[attach]] to this [[MapView]]\n     */\n    static install(element: string | HTMLElement, mapView?: MapView): CopyrightElementHandler {\n        return new CopyrightElementHandler(element, mapView);\n    }\n\n    /**\n     * Static copyright info.\n     *\n     * Use when [[MapView]]'s [[DataSource]]'s do not provide proper copyright information.\n     */\n    staticInfo: CopyrightInfo[] | undefined;\n\n    private m_defaults: Map<string, CopyrightInfo> = new Map();\n    private m_element: HTMLElement;\n    private m_mapViews: MapView[] = [];\n\n    /**\n     * Creates a new `CopyrightElementHandler` that updates the DOM element with the copyright info\n     * of the given `mapView`.\n     *\n     * Note: Generally, the static [[install]] method can be used to create and attach a new\n     * `CopyrightElementHandler` to a [[MapView]]\n     *\n     * @param element HTML DOM element or a HTML DOM element id\n     * @param mapView optional, [[attach]] to this [[MapView]] instance\n     */\n    constructor(element: string | HTMLElement, mapView?: MapView) {\n        if (typeof element === \"string\") {\n            const htmlElement = document.getElementById(element);\n            if (!htmlElement) {\n                throw new Error(`CopyrightElementHandler: unable to find DOM element #${element}`);\n            }\n            this.m_element = htmlElement;\n        } else {\n            this.m_element = element;\n        }\n\n        if (mapView !== undefined) {\n            this.attach(mapView);\n        }\n    }\n\n    /**\n     * Destroys this object by removing all event listeners from the attached [[MapView]]s.\n     */\n    destroy() {\n        for (const mapView of this.m_mapViews) {\n            mapView.removeEventListener(MapViewEventNames.CopyrightChanged, this.update);\n        }\n    }\n\n    /**\n     * Attaches this [[CopyrightInfo]] updates from [[MapView]] instance.\n     */\n    attach(mapView: MapView): this {\n        this.m_mapViews.push(mapView);\n\n        mapView.addEventListener(MapViewEventNames.CopyrightChanged, this.update);\n        this.update();\n\n        return this;\n    }\n\n    /**\n     * Stop following [[CopyrightInfo]] updates from [[MapView]] instance.\n     */\n    detach(mapView: MapView): this {\n        mapView.removeEventListener(MapViewEventNames.CopyrightChanged, this.update);\n\n        this.m_mapViews = this.m_mapViews.filter(item => item !== mapView);\n        this.update();\n\n        return this;\n    }\n\n    /**\n     * Set [[CopyrightInfo]] defaults to be used in case [[DataSource]] does not provide deatailed\n     * copyright information.\n     *\n     * The defaults will applied to all undefined `year`, `label` and `link` values in the copyright\n     * information retrieved from [[MapView]].\n     */\n    setDefaults(defaults: CopyrightInfo[] | undefined): this {\n        this.m_defaults.clear();\n        if (defaults !== undefined) {\n            for (const item of defaults) {\n                this.m_defaults.set(item.id, item);\n            }\n        }\n\n        return this;\n    }\n\n    /**\n     * Sets the [[staticInfo]] property.\n     *\n     * A `CopyrightElementHandler` always displays a deduplicated sum of static copyright info and\n     * copyright information obtained from attached [[MapView]]s.\n     *\n     * This information is used when [[DataSource]] instances of given [[MapView]] do not provide\n     * copyright information.\n     */\n    setStaticCopyightInfo(staticInfo: CopyrightInfo[] | undefined): this {\n        this.staticInfo = staticInfo;\n        return this;\n    }\n\n    /**\n     * Update copyright info text in controlled HTML element.\n     */\n    update = () => {\n        const mergedCopyrightInfo = this.m_mapViews\n            .map(mapView => mapView.copyrightInfo)\n            .reduce(CopyrightInfo.mergeArrays, this.staticInfo || []);\n\n        // Conditionally hiding of element with copyright information.\n        // If nothing to show we schould to avoid empty white rectangle in right bottom corner.\n        if (mergedCopyrightInfo.length === 0) {\n            this.m_element.style.display = \"none\";\n            return;\n        } else {\n            this.m_element.style.display = \"block\";\n        }\n\n        if (this.m_defaults.size !== 0) {\n            for (const sourceInfo of mergedCopyrightInfo) {\n                const defaults = this.m_defaults.get(sourceInfo.id);\n                if (defaults !== undefined) {\n                    sourceInfo.year = getOptionValue(sourceInfo.year, defaults.year);\n                    sourceInfo.label = getOptionValue(sourceInfo.label, defaults.label);\n                    sourceInfo.link = getOptionValue(sourceInfo.link, defaults.link);\n                }\n            }\n        }\n        const deduped = CopyrightInfo.mergeArrays(mergedCopyrightInfo);\n\n        this.m_element.innerHTML = CopyrightInfo.formatAsHtml(deduped);\n    };\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { TransferManager } from \"@here/harp-transfer-manager\";\nimport {\n    AreaCopyrightInfo,\n    CopyrightCoverageProvider,\n    CopyrightCoverageResponse\n} from \"./CopyrightCoverageProvider\";\n\ninterface RequestHeaders {\n    [field: string]: string;\n}\n\n/**\n * Copyright provider which retrieves copyright coverage information from provided URL.\n */\nexport class UrlCopyrightProvider extends CopyrightCoverageProvider {\n    private m_cachedCopyrightResponse: Promise<AreaCopyrightInfo[]> | undefined;\n\n    /**\n     * Default constructor.\n     *\n     * @param m_fetchURL URL to fetch copyrights data from.\n     * @param m_baseScheme Scheme to get copyrights from.\n     * @param m_requestHeaders Optional request headers for requests(e.g. Authorization)\n     */\n    constructor(\n        private m_fetchURL: string,\n        private m_baseScheme: string,\n        private m_requestHeaders?: RequestHeaders\n    ) {\n        super();\n    }\n\n    /**\n     * Sets request headers.\n     * @param headers\n     */\n    setRequestHeaders(headers: RequestHeaders | undefined) {\n        this.m_requestHeaders = headers;\n    }\n\n    /**\n     * @inheritdoc\n     * @override\n     */\n    getCopyrightCoverageData(): Promise<AreaCopyrightInfo[]> {\n        if (this.m_cachedCopyrightResponse !== undefined) {\n            return this.m_cachedCopyrightResponse;\n        }\n\n        this.m_cachedCopyrightResponse = new TransferManager()\n            .downloadJson<CopyrightCoverageResponse>(this.m_fetchURL, {\n                headers: this.m_requestHeaders\n            })\n            .then(json => json[this.m_baseScheme])\n            .catch(error => {\n                this.logger.error(error);\n                return [];\n            });\n\n        return this.m_cachedCopyrightResponse;\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/** @module\n *\n * This module provides classes to ease downloading URLs. In particular, following redirects,\n * retrying on HTTP errors, and limiting the number of parallel concurrent downloads.\n */\n\nimport \"@here/harp-fetch\";\nimport { DeferredPromise } from \"./DeferredPromise\";\n\n/**\n * `TransferManager` for downloading URLs.\n *\n * Features:\n *\n * * Merges JSON downloads, for example, the same URL if requested as JSON will only be downloaded\n *   once.\n * * Limits the amount of parallel downloads, useful when requesting a large amount of URLs that\n *   would otherwise stall the browser.\n * * Retries the downloads with an increasing timeout on HTTP 503 replies.\n *\n * The static method [[instance]] can be used to get a default constructed instance.\n */\nexport class TransferManager {\n    /**\n     * The timeout in milliseconds to wait between retries. This timeout is multiplied with the\n     * number of retries. First retry waits for 0 ms, second retry for 500 ms, third for 1000 ms and\n     * so on.\n     */\n    static readonly retryTimeout = 500;\n    /**\n     * The amount of maximum parallel downloads to allow.\n     */\n    static readonly maxParallelDownloads = 16;\n    /**\n     * Returns a default instance of [[TransferManager]].\n     */\n    static instance(): TransferManager {\n        return TransferManager.defaultInstance;\n    }\n    private static readonly defaultInstance = new TransferManager();\n    private static async fetchRepeatedly(\n        fetchFunction: typeof fetch,\n        retryCount: number,\n        maxRetries: number,\n        url: string,\n        init?: RequestInit\n    ): Promise<Response> {\n        try {\n            const response = await fetchFunction(url, init);\n            if (response.status !== 503 || retryCount > maxRetries) {\n                return response;\n            }\n        } catch (err) {\n            if (\n                err.hasOwnProperty(\"isCancelled\") ||\n                (err.hasOwnProperty(\"name\") && err.name === \"AbortError\") ||\n                retryCount > maxRetries\n            ) {\n                throw err;\n            }\n        }\n        return TransferManager.waitFor(TransferManager.retryTimeout * retryCount).then(() =>\n            TransferManager.fetchRepeatedly(fetchFunction, maxRetries, retryCount + 1, url, init)\n        );\n    }\n    private static waitFor(milliseconds: number): Promise<void> {\n        return new Promise<void>(resolve => setTimeout(resolve, milliseconds));\n    }\n    private activeDownloadCount = 0;\n    private downloadQueue = new Array<DeferredPromise<Response>>();\n    private activeDownloads = new Map<string, Promise<any>>();\n    /**\n     * Constructs a new [[TransferManager]].\n     *\n     * @param fetchFunction The default fetch function to use.\n     * @param maxRetries The maximum amount to try to re-fetch a resource.\n     */\n    constructor(readonly fetchFunction = fetch, readonly maxRetries: number = 5) {}\n    /**\n     * Downloads a JSON object. Merges downloads if requested multiple times.\n     *\n     * Note: This method merges multiple downloads of the same resource to\n     * only one request. The init parameter is ignored if the download is merged.\n     * Call [[download]] instead to download the resource without merging.\n     *\n     * @param url The URL to download\n     * @param init Optional extra parameters for the download.\n     */\n    downloadJson<T>(url: string, init?: RequestInit): Promise<T> {\n        return this.downloadAs<T>(response => response.json(), url, init);\n    }\n    /**\n     * Downloads a binary object. Merges downloads if requested multiple times.\n     *\n     * Note: This method merges multiple downloads of the same resource to\n     * only one request. The init parameter is ignored if the download is merged.\n     * Call [[download]] instead to download the resource without merging.\n     *\n     * @param url The URL to download\n     * @param init Optional extra parameters for the download\n     */\n    downloadArrayBuffer(url: string, init?: RequestInit): Promise<ArrayBuffer> {\n        return this.download(url, init).then(response => response.arrayBuffer());\n    }\n    /**\n     * Downloads a URL and returns the response.\n     *\n     * Does not merge multiple requests to the same URL.\n     *\n     * @param url The URL to download.\n     * @param init Optional extra parameters for the download.\n     */\n    download(url: string, init?: RequestInit): Promise<Response> {\n        if (this.activeDownloadCount >= TransferManager.maxParallelDownloads) {\n            const deferred = new DeferredPromise<Response>(() => this.doDownload(url, init));\n            this.downloadQueue.push(deferred);\n            return deferred.promise;\n        }\n        return this.doDownload(url, init);\n    }\n    private async doDownload(url: string, init?: RequestInit): Promise<Response> {\n        try {\n            ++this.activeDownloadCount;\n            const response = await TransferManager.fetchRepeatedly(\n                this.fetchFunction,\n                0,\n                this.maxRetries,\n                url,\n                init\n            );\n\n            this.onDownloadDone();\n            return response;\n        } catch (error) {\n            this.onDownloadDone();\n            throw error;\n        }\n    }\n    private onDownloadDone() {\n        --this.activeDownloadCount;\n        this.execDeferredDownload();\n    }\n    private execDeferredDownload() {\n        const future = this.downloadQueue.pop();\n        if (future === undefined) {\n            return;\n        }\n        future.exec();\n    }\n    private downloadAs<T>(\n        converter: (response: Response) => Promise<T>,\n        url: string,\n        init?: RequestInit\n    ): Promise<T> {\n        const cacheKey = url;\n        const pendingFetch = this.activeDownloads.get(cacheKey);\n        if (pendingFetch !== undefined) {\n            return Promise.resolve(pendingFetch);\n        }\n        const newFetch = this.download(url, init)\n            .then(response => {\n                this.activeDownloads.delete(cacheKey);\n                if (response.ok) {\n                    return converter(response);\n                }\n                throw new Error(JSON.stringify(response));\n            })\n            .catch(err => {\n                this.activeDownloads.delete(cacheKey);\n                throw err;\n            });\n        this.activeDownloads.set(cacheKey, newFetch);\n        return newFetch;\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n *\n * DeferredPromise takes an executor function for executing it later, when [[exec]] is called.\n * This class allows wrapping other promises or long running functions for later execution.\n * @internal\n * @hidden\n */\nexport class DeferredPromise<T> {\n    /**\n     * Internal promise to store the result of the deferred executor function.\n     */\n    readonly promise: Promise<T>;\n    private resolveFunc?: (result?: T) => void;\n    private rejectFunc?: (reason?: any) => void;\n\n    /**\n     * Constructs a new [[DeferredPromise]]\n     * @param executor Async function that should be executed at a later point in time.\n     */\n    constructor(private readonly executor: () => Promise<T>) {\n        this.promise = new Promise<T>((resolve, reject) => {\n            this.resolveFunc = resolve;\n            this.rejectFunc = reject;\n        });\n    }\n\n    /**\n     * When `exec` is called the deferred executor function is executed.\n     */\n    exec() {\n        this.executor()\n            .then(result => this.resolveFunc!(result))\n            .catch(error => this.rejectFunc!(error));\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * `ImageItem` is used to identify an image in the [[ImageCache]].\n */\nexport interface ImageItem {\n    /** URL of the image, or unique identifier. */\n    url: string;\n    /** Pixel data. */\n    imageData?: ImageData | ImageBitmap;\n    /** Mip maps for image data */\n    mipMaps?: ImageData[];\n    /** Turns to `true` when the data has finished loading. */\n    loaded: boolean;\n    /** `loadingPromise` is only used during loading/generating the image. */\n    loadingPromise?: Promise<ImageItem | undefined>;\n}\n\nexport namespace ImageItem {\n    /**\n     * Missing Typedoc\n     */\n    export function isLoading(imageItem: ImageItem): boolean {\n        return imageItem.loadingPromise !== undefined;\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { Theme } from \"@here/harp-datasource-protocol\";\nimport { EarthConstants, Projection, ProjectionType } from \"@here/harp-geoutils\";\n\nimport { GroundAtmosphereMaterial, SkyAtmosphereMaterial } from \"@here/harp-materials\";\nimport { WorldAnchor } from \"./MapView\";\n\nimport { assert } from \"@here/harp-utils\";\nimport * as THREE from \"three\";\nimport { TiltViewClipPlanesEvaluator } from \"./ClipPlanesEvaluator\";\n\n/**\n * Atmosphere effect variants.\n */\nenum AtmosphereVariant {\n    Ground = 0x1,\n    Sky = 0x2,\n    SkyAndGround = 0x3\n}\n\n/**\n * Atmosphere shader variants.\n */\nenum AtmosphereShadingVariant {\n    ScatteringShader,\n    SimpleColor,\n    Wireframe\n}\n\n/**\n * Lists light modes.\n */\nexport enum AtmosphereLightMode {\n    LightOverhead = 0,\n    LightDynamic = 1\n}\n\n/**\n * Maximum altitude that atmosphere reaches as the percent of the Earth radius.\n */\nconst SKY_ATMOSPHERE_ALTITUDE_FACTOR = 0.025;\n\n/**\n * Maximum altitude that ground atmosphere is visible as the percent of the Earth radius.\n */\nconst GROUND_ATMOSPHERE_ALTITUDE_FACTOR = 0.0001;\n\n/**\n * Utility cache for holding temporary values.\n */\nconst cache = {\n    clipPlanes: { near: 0, far: 0 }\n};\n\n/**\n * Class that provides [[MapView]]'s atmospheric scattering effect.\n */\nexport class MapViewAtmosphere {\n    /**\n     * User data name attribute assigned to created mesh.\n     */\n    static SkyAtmosphereUserName: string = \"SkyAtmosphere\";\n    /**\n     * User data name attribute assigned to created mesh.\n     */\n    static GroundAtmosphereUserName: string = \"GroundAtmosphere\";\n\n    /**\n     * Check if scene or root scene object has already atmosphere effect added.\n     *\n     * @param where [[THREE.Object3D]] or [[THREE.Scene]] instance.\n     */\n    static isPresent(where: THREE.Scene | THREE.Object3D): boolean {\n        const root = where instanceof THREE.Scene ? where.parent : where;\n        if (root == null) {\n            return false;\n        }\n        if (root.getObjectByName(MapViewAtmosphere.SkyAtmosphereUserName)) {\n            return true;\n        } else if (root.getObjectByName(MapViewAtmosphere.GroundAtmosphereUserName)) {\n            return true;\n        }\n        return false;\n    }\n\n    private m_enabled: boolean = true;\n    private m_skyGeometry?: THREE.BufferGeometry;\n    private m_skyMaterial?: THREE.Material;\n    private m_skyMesh?: THREE.Mesh;\n    private m_groundGeometry?: THREE.BufferGeometry;\n    private m_groundMaterial?: THREE.Material;\n    private m_groundMesh?: THREE.Mesh;\n\n    private m_clipPlanesEvaluator = new TiltViewClipPlanesEvaluator(\n        EarthConstants.EQUATORIAL_RADIUS * SKY_ATMOSPHERE_ALTITUDE_FACTOR,\n        0,\n        1.0,\n        0.05,\n        10000000.0\n    );\n    // TODO: Support for Theme definition should be added.\n    //private m_cachedTheme: Theme = { styles: {} };\n\n    private readonly m_lightDirection = new THREE.Vector3(0.0, 1.0, 0.0);\n\n    /**\n     * Creates and adds `Atmosphere` effects to the scene.\n     *\n     * @note Currently works only with globe projection.\n     *\n     * @param m_sceneRoot The scene's root [[THREE.Object3D]] instance where the effect will\n     * be added.\n     * @param m_sceneCamera The camera used to render entire scene.\n     * @param m_projection The geo-projection used to transform geo coordinates to cartesian space.\n     * @param m_updateCallback The optional callback to that should be called whenever atmosphere\n     * configuration changes, may be used to inform related components (`MapView`) to redraw.\n     * @param m_atmosphereVariant The optional atmosphere configuration variant enum\n     * [[AtmosphereVariant]], which denotes where the atmosphere scattering effect should be\n     * applied, it may be ground or sky atmosphere only or most realistic for both, which is\n     * chosen by default.\n     * @param m_materialVariant The optional material variant to be used, mainly for\n     * testing and tweaking purposes.\n     */\n    constructor(\n        private m_sceneRoot: THREE.Object3D,\n        private m_sceneCamera: THREE.Camera,\n        private m_projection: Projection,\n        private m_updateCallback?: () => void,\n        private m_atmosphereVariant: AtmosphereVariant = AtmosphereVariant.SkyAndGround,\n        private m_materialVariant = AtmosphereShadingVariant.ScatteringShader\n    ) {\n        // tslint:disable-next-line: no-bitwise\n        if (this.m_atmosphereVariant & AtmosphereVariant.Sky) {\n            this.createSkyGeometry();\n        }\n        // tslint:disable-next-line: no-bitwise\n        if (this.m_atmosphereVariant & AtmosphereVariant.Ground) {\n            this.createGroundGeometry();\n        }\n        this.addToScene(this.m_sceneRoot);\n    }\n\n    get skyMesh(): THREE.Mesh | undefined {\n        return this.m_skyMesh;\n    }\n\n    get groundMesh(): THREE.Mesh | undefined {\n        return this.m_groundMesh;\n    }\n\n    /**\n     * Allows to enable/disable the atmosphere effect, regardless of the theme settings.\n     *\n     * Use this method to change the setup in runtime without defining corresponding theme setup.\n     *\n     * @param enable A boolean that specifies whether the atmosphere should be enabled or disabled.\n     */\n    set enabled(enable: boolean) {\n        // Check already disposed.\n        if (this.disposed) {\n            return;\n        }\n        if (this.m_enabled === enable) {\n            return;\n        }\n        this.m_enabled = enable;\n        const isAdded = MapViewAtmosphere.isPresent(this.m_sceneRoot);\n        if (enable && !isAdded) {\n            this.addToScene(this.m_sceneRoot);\n        } else if (!enable && isAdded) {\n            this.removeFromScene(this.m_sceneRoot);\n        }\n    }\n\n    /**\n     * Returns the current atmosphere status, enabled or disabled.\n     */\n    get enabled(): boolean {\n        return this.m_enabled;\n    }\n\n    set lightMode(lightMode: AtmosphereLightMode) {\n        if (this.m_materialVariant !== AtmosphereShadingVariant.ScatteringShader) {\n            return;\n        }\n        const dynamicLight = lightMode === AtmosphereLightMode.LightDynamic;\n        if (this.m_groundMaterial !== undefined) {\n            const groundMat = this.m_groundMaterial as GroundAtmosphereMaterial;\n            groundMat.setDynamicLighting(dynamicLight);\n        }\n        if (this.m_skyMaterial !== undefined) {\n            const skyMat = this.m_skyMaterial as SkyAtmosphereMaterial;\n            skyMat.setDynamicLighting(dynamicLight);\n        }\n    }\n\n    /**\n     * Disposes allocated resources.\n     */\n    dispose() {\n        // Unlink from scene and mapview anchors\n        if (this.enabled) {\n            this.enabled = false;\n        }\n\n        this.m_skyMaterial?.dispose();\n        this.m_groundMaterial?.dispose();\n\n        this.m_skyGeometry?.dispose();\n        this.m_groundGeometry?.dispose();\n\n        // After disposal we may no longer enable effect.\n        this.m_skyGeometry = undefined;\n        this.m_groundGeometry = undefined;\n\n        this.m_skyMaterial = undefined;\n        this.m_groundMaterial = undefined;\n\n        this.m_skyMesh = undefined;\n        this.m_groundMesh = undefined;\n    }\n\n    /**\n     * Sets the atmosphere depending on the [[Theme]] instance provided.\n     *\n     * This function is called when a theme is loaded. Atmosphere is added only if the theme\n     * contains a atmosphere definition with a:\n     * - `color` property, used to set the atmosphere color.\n     *\n     * @param theme A [[Theme]] instance.\n     */\n    reset(theme: Theme) {\n        //this.m_cachedTheme = theme;\n    }\n\n    private get disposed() {\n        return this.m_skyMesh === undefined && this.m_groundMesh === undefined;\n    }\n\n    /**\n     * Handles atmosphere effect adding.\n     */\n    private addToScene(sceneRoot: THREE.Object3D) {\n        assert(!MapViewAtmosphere.isPresent(sceneRoot), \"Atmosphere already added\");\n        if (this.m_skyMesh !== undefined) {\n            sceneRoot.add(createWorldAnchor(this.m_skyMesh, Number.MIN_SAFE_INTEGER));\n        }\n        if (this.m_groundMesh !== undefined) {\n            sceneRoot.add(createWorldAnchor(this.m_groundMesh, Number.MAX_SAFE_INTEGER));\n        }\n\n        // Request an update once the anchor is added to [[MapView]].\n        if (this.m_updateCallback) {\n            this.m_updateCallback();\n        }\n    }\n\n    /**\n     * Handles atmosphere effect removal.\n     */\n    private removeFromScene(sceneRoot: THREE.Object3D) {\n        if (!MapViewAtmosphere.isPresent(sceneRoot)) {\n            return;\n        }\n        let update = false;\n        if (this.m_skyMesh !== undefined) {\n            sceneRoot.remove(this.m_skyMesh);\n            update = true;\n        }\n        if (this.m_groundMesh !== undefined) {\n            sceneRoot.remove(this.m_groundMesh);\n            update = true;\n        }\n        if (update && this.m_updateCallback) {\n            this.m_updateCallback();\n        }\n    }\n\n    private createSkyGeometry() {\n        let skyGeometry: THREE.Geometry;\n        switch (this.m_projection.type) {\n            case ProjectionType.Spherical:\n                skyGeometry = new THREE.SphereGeometry(\n                    EarthConstants.EQUATORIAL_RADIUS * (1 + SKY_ATMOSPHERE_ALTITUDE_FACTOR),\n                    256,\n                    256\n                );\n                break;\n            default: {\n                skyGeometry = new THREE.PlaneGeometry(200, 200);\n                break;\n            }\n        }\n\n        skyGeometry.translate(0, 0, 0);\n        this.m_skyGeometry = new THREE.BufferGeometry();\n        this.m_skyGeometry.fromGeometry(skyGeometry);\n        skyGeometry.dispose();\n\n        if (this.m_materialVariant === AtmosphereShadingVariant.ScatteringShader) {\n            this.m_skyMaterial = new SkyAtmosphereMaterial();\n        } else if (this.m_materialVariant === AtmosphereShadingVariant.SimpleColor) {\n            this.m_skyMaterial = new THREE.MeshBasicMaterial({\n                color: new THREE.Color(0xc4f8ed),\n                opacity: 0.4,\n                transparent: false,\n                depthTest: true, // hide atmosphere behind globe (note: transparent changes order)\n                depthWrite: false,\n                side: THREE.BackSide,\n                blending: THREE.NormalBlending,\n                fog: false\n            });\n        } else {\n            this.m_skyMaterial = new THREE.MeshStandardMaterial({\n                color: 0x7fffff,\n                depthTest: false,\n                depthWrite: false,\n                normalScale: new THREE.Vector2(-1, -1),\n                side: THREE.BackSide, // not truly supported in wireframe mode\n                wireframe: true\n            });\n        }\n\n        this.m_skyMesh = new THREE.Mesh(this.m_skyGeometry, this.m_skyMaterial);\n        // Assign custom name so sky object may be easily recognized withing the scene.\n        this.m_skyMesh.name = MapViewAtmosphere.SkyAtmosphereUserName;\n        this.setupSkyForRendering();\n    }\n\n    private createGroundGeometry() {\n        let groundGeometry: THREE.Geometry;\n        switch (this.m_projection.type) {\n            case ProjectionType.Spherical:\n                groundGeometry = new THREE.SphereGeometry(\n                    EarthConstants.EQUATORIAL_RADIUS * (1 + GROUND_ATMOSPHERE_ALTITUDE_FACTOR),\n                    256,\n                    256\n                );\n                break;\n            default: {\n                groundGeometry = new THREE.PlaneGeometry(200, 200);\n                break;\n            }\n        }\n        groundGeometry.translate(0, 0, 0);\n        this.m_groundGeometry = new THREE.BufferGeometry();\n        this.m_groundGeometry.fromGeometry(groundGeometry);\n        groundGeometry.dispose();\n\n        if (this.m_materialVariant === AtmosphereShadingVariant.ScatteringShader) {\n            this.m_groundMaterial = new GroundAtmosphereMaterial();\n        } else if (this.m_materialVariant === AtmosphereShadingVariant.SimpleColor) {\n            this.m_groundMaterial = new THREE.MeshBasicMaterial({\n                color: new THREE.Color(0x00c5ff),\n                opacity: 0.4,\n                transparent: true,\n                depthTest: false,\n                depthWrite: false,\n                side: THREE.FrontSide,\n                blending: THREE.NormalBlending,\n                fog: false\n            });\n        } else {\n            this.m_groundMaterial = new THREE.MeshStandardMaterial({\n                color: 0x11899a,\n                depthTest: true, // FrontSide is not fully supported, so need depth test\n                depthWrite: false,\n                side: THREE.FrontSide,\n                wireframe: true\n            });\n        }\n\n        this.m_groundMesh = new THREE.Mesh(this.m_groundGeometry, this.m_groundMaterial);\n        // Assign name so object may be recognized withing the scene.\n        this.m_groundMesh.name = MapViewAtmosphere.GroundAtmosphereUserName;\n\n        this.setupGroundForRendering();\n    }\n\n    private setupSkyForRendering(): void {\n        if (this.m_skyMesh === undefined) {\n            return;\n        }\n        // Depending on material variant we need to update uniforms or only\n        // update camera near/far planes cause camera need to see further then\n        // actual earth geometry.\n        let onBeforeCallback: (_camera: THREE.Camera, _material: THREE.Material) => void;\n        if (this.m_materialVariant !== AtmosphereShadingVariant.ScatteringShader) {\n            // Setup only further clip planes before rendering.\n            onBeforeCallback = (camera: THREE.Camera, _material: THREE.Material) => {\n                this.overrideClipPlanes(camera);\n            };\n        } else {\n            // Setup proper clip planes and update uniforms values.\n            onBeforeCallback = (camera: THREE.Camera, material: THREE.Material) => {\n                this.overrideClipPlanes(camera);\n                // Check material wasn't swapped.\n                assert(material instanceof SkyAtmosphereMaterial);\n                const mat = this.m_skyMaterial as SkyAtmosphereMaterial;\n                mat.updateUniforms(mat, this.m_skyMesh!, camera, this.m_lightDirection);\n            };\n        }\n\n        // Sky material should be already created with mesh.\n        assert(this.m_skyMaterial !== undefined);\n        this.m_skyMesh.onBeforeRender = (\n            _renderer: THREE.WebGLRenderer,\n            _scene: THREE.Scene,\n            camera: THREE.Camera,\n            _geometry: THREE.Geometry | THREE.BufferGeometry,\n            material: THREE.Material,\n            _group: THREE.Group\n        ) => {\n            onBeforeCallback(camera, material);\n        };\n\n        this.m_skyMesh.onAfterRender = (\n            _renderer: THREE.WebGLRenderer,\n            _scene: THREE.Scene,\n            camera: THREE.Camera,\n            _geometry: THREE.Geometry | THREE.BufferGeometry,\n            _material: THREE.Material,\n            _group: THREE.Group\n        ) => {\n            this.revertClipPlanes(camera);\n        };\n    }\n\n    private setupGroundForRendering(): void {\n        if (this.m_groundMesh === undefined) {\n            return;\n        }\n        if (this.m_materialVariant !== AtmosphereShadingVariant.ScatteringShader) {\n            return;\n        }\n        // Ground material should be already created.\n        assert(this.m_groundMaterial !== undefined);\n        // Ground mesh does not need custom clip planes and uses the same camera setup as\n        // real (data source based) geometry.\n        this.m_groundMesh.onBeforeRender = (\n            _renderer: THREE.WebGLRenderer,\n            _scene: THREE.Scene,\n            camera: THREE.Camera,\n            _geometry: THREE.Geometry | THREE.BufferGeometry,\n            material: THREE.Material,\n            _group: THREE.Group\n        ) => {\n            assert(material instanceof GroundAtmosphereMaterial);\n            const mat = this.m_groundMaterial as GroundAtmosphereMaterial;\n            mat.updateUniforms(mat, this.m_groundMesh!, camera, this.m_lightDirection);\n        };\n    }\n\n    private overrideClipPlanes(rteCamera: THREE.Camera) {\n        // Store current clip planes used by global camera before modifying them.\n        const sceneCam = this.m_sceneCamera as THREE.PerspectiveCamera;\n        cache.clipPlanes.near = sceneCam.near;\n        cache.clipPlanes.far = sceneCam.far;\n        // Calculate view ranges using world camera.\n        // NOTE: ElevationProvider is not passed to evaluator, leaves min/max altitudes unchanged.\n        const viewRanges = this.m_clipPlanesEvaluator.evaluateClipPlanes(\n            this.m_sceneCamera,\n            this.m_projection\n        );\n        // Update relative to eye camera used internally in rendering.\n        assert(rteCamera instanceof THREE.PerspectiveCamera);\n        const c = rteCamera as THREE.PerspectiveCamera;\n        c.near = viewRanges.near;\n        // Small margin ensures that we never cull small triangles just below or at\n        // horizon - possible due to frustum culling in-precisions.\n        c.far = viewRanges.far + EarthConstants.EQUATORIAL_RADIUS * 0.1;\n        c.updateProjectionMatrix();\n    }\n\n    private revertClipPlanes(rteCamera: THREE.Camera) {\n        assert(rteCamera instanceof THREE.PerspectiveCamera);\n        const c = rteCamera as THREE.PerspectiveCamera;\n        // Restore scene camera clip planes.\n        c.near = cache.clipPlanes.near;\n        c.far = cache.clipPlanes.far;\n        c.updateProjectionMatrix();\n    }\n}\n\nfunction createWorldAnchor(mesh: THREE.Mesh, renderOrder: number): WorldAnchor<THREE.Mesh> {\n    const anchor = mesh as WorldAnchor<THREE.Mesh>;\n    anchor.renderOrder = renderOrder;\n    anchor.pickable = false;\n    anchor.worldPosition = new THREE.Vector3(0, 0, 0);\n    return anchor;\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport * as THREE from \"three\";\n\nexport type ExtendedMesh = THREE.Mesh & {\n    /**\n     * Distance of this object from the Tile's center.\n     */\n    displacement?: THREE.Vector3;\n};\n\n/**\n * This enum defines the possible origin points for an image.\n */\nexport enum ImageOrigin {\n    TopLeft,\n    BottomLeft\n}\n\n/**\n * Available rendering parameters for the POIs.\n */\nexport interface ImageOptions {\n    /**\n     * The point of origin of the texture as supported in [[ImageOrigin]].\n     */\n    origin?: ImageOrigin;\n\n    /**\n     * Missing Typedoc\n     */\n    width: number;\n\n    /**\n     * Missing Typedoc\n     */\n    height: number;\n\n    /**\n     * Missing Typedoc\n     */\n    xOffset?: number;\n\n    /**\n     * Missing Typedoc\n     */\n    yOffset?: number;\n\n    /**\n     * Missing Typedoc\n     */\n    flipH?: boolean;\n\n    /**\n     * Missing Typedoc\n     */\n    flipV?: boolean;\n\n    /**\n     * Missing Typedoc\n     */\n    opacity?: number;\n}\n\n// export enum TextAlign {\n//     Center,\n//     Left,\n//     Right,\n\n//     // ??? expands lines to have same length.\n//     Justify\n// }\n\n// export interface LayoutOptions {\n//     paddingH?: number;\n//     paddingV: number;\n//     transFormCenterX?: number;\n//     transFormCenterY?: number;\n//     rotation?: number;\n//     /** Set to `true` to enlarge the box after rotation to include all rotated corners. */\n//     rotationEnlargesBox: boolean;\n// }\n\n// export interface TextOptions {\n//     bgColor?: THREE.Color;\n//     wrapWords?: boolean;\n//     maxNumLines?: number;\n//     maxWidth?: number;\n//     /** Replace with ellipsis if wider than maxWidth. */\n//     addEllipsis?: boolean;\n//     /** Handle right-to-left texts */\n//     isRightToLeft?: boolean;\n\n//     textAlignH?: AlignH; // = AlignH.Center;\n//     textAlignV?: AlignV; // = AlignV.Center;\n// }\n\n// export class IconLabel {\n//     constructor(text: string, options: LayoutOptions | TextOptions) {}\n\n//     /**\n//      * Setup a box with size and padding.\n//      *\n//      * @param box Target box to set up.\n//      */\n//     getBox(box: THREE.Box2) {}\n\n//     /**\n//      * Compute width and height from text and font.\n//      */\n//     computeBox() {}\n\n//     /**\n//      * Generate the glyphs and keep them in a buffer. Generates a fixed layout.\n//      */\n//     prepareRendering() {}\n// }\n\n// export enum AlignH {\n//     Center,\n//     Left,\n//     Right\n// }\n\n// export enum AlignV {\n//     Center,\n//     Top,\n//     Bottom\n// }\n\n// export enum AnchorTarget {\n//     /** Anchor point relative to Icon */\n//     Icon,\n//     /** Anchor point is transform center of icon */\n//     IconCenter,\n//     /** Anchor point relative to Icon including padding */\n//     IconBox,\n//     /** Anchor point relative to Label */\n//     Label,\n//     /** Anchor point relative to combination of Icon and Label */\n//     Box\n// }\n\n// export class AnchorPosition {\n//     targetH: AnchorTarget = AnchorTarget.Icon;\n//     targetV: AnchorTarget = AnchorTarget.Icon;\n//     alignH: AlignH = AlignH.Center;\n//     alignV: AlignV = AlignV.Center;\n// }\n\n// export enum IconPinMode {\n//     /** Pinned down, anchor point is the same at all angles. */\n//     PinDown,\n//     /**\n//      * Icon stands up. \"StreetLevel\"-style. The anchor point moves to the bottom of the icon when\n//      * the view direction gets parallel to the ground.\n//      */\n//     StandUp\n// }\n\n// export interface IconScaleOptions {\n//     depthScale?: boolean;\n//     minimumScale?: number;\n// }\n\n// export interface IconOptions {\n//     useScreenSpace?: boolean; // = true\n//     priority?: number;\n\n//     scaleOptions?: IconScaleOptions;\n\n//     /** Optional offset in screen space */\n//     screenOffsetX?: number;\n//     screenOffsetY?: number;\n\n//     /** Optional 3D height above terrain. */\n//     heightAboveGround?: number;\n// }\n\n// export class SimplePoiIcon {\n//     constructor(\n//         readonly pos: THREE.Vector3,\n//         readonly image ?: IconTexture,\n//         options ?: IconOptions\n//     ) { }\n// }\n\n// export class PoiIcon {\n//     constructor(\n//         readonly pos: THREE.Vector3,\n//         readonly image?: IconTexture,\n//         readonly label?: IconLabel,\n//         options?: IconOptions\n//     ) {}\n// }\n\n// export interface PoiOptions {\n//     featureId?: number;\n//     minZoomLevel?: number;\n// }\n\n// export class SimplePoi {\n//     private m_featureId?: number;\n//     private m_minZoomLevel: number = 0;\n\n//     constructor(readonly icon: SimplePoiIcon, options?: PoiOptions) {\n//         if (options !== undefined) {\n//             this.m_featureId = options.featureId;\n//             this.m_minZoomLevel = options.minZoomLevel !== undefined ? options.minZoomLevel : 0;\n//         }\n//     }\n// }\n\n// export class Poi {\n//     /** store multiple icons, one for every LOD */\n//     private m_icons: PoiIcon[] = [];\n//     private m_lod = 0;\n//     private m_featureId?: number;\n//     private m_minZoomLevel: number = 0;\n\n//     constructor(icon: PoiIcon, options?: PoiOptions) {\n//         this.m_icons.push(icon);\n\n//         if (options !== undefined) {\n//             this.m_featureId = options.featureId;\n//             this.m_minZoomLevel = options.minZoomLevel !== undefined ? options.minZoomLevel : 0;\n//         }\n//     }\n\n//     icon(): PoiIcon | undefined {\n//         return this.m_icons[this.m_lod];\n//     }\n\n//     /**\n//      * Select the level of detail that should be used.\n//      *\n//      * @param levelOfDetail Level of detail to render.\n//      */\n//     selectIcon(levelOfDetail: number) {}\n// }\n","/*\n * Copyright (C) 2020 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\nimport * as THREE from \"three\";\n\nexport interface RequestHeaders {\n    [field: string]: string;\n}\n\n/**\n * A texture loader that supports request headers(e.g. for Authorization)\n */\nexport class TextureLoader {\n    private m_textureLoader = new THREE.TextureLoader();\n\n    /**\n     * Load an image from url and create a texture\n     * @param url URL to the image\n     * @param requestHeaders Optional request headers to load image(e.g. Authorization)\n     * @param crossOrigin Enable/disable CORS\n     */\n    async load(\n        url: string,\n        requestHeaders?: RequestHeaders | undefined,\n        crossOrigin: boolean = true\n    ): Promise<THREE.Texture> {\n        // Use THREE.js texture loader directly if no request header is set\n        if (requestHeaders === undefined) {\n            return this.loadWithThreeLoader(url);\n        }\n\n        // Load image with fetch API if request header is set\n        const response = await fetch(url, {\n            headers: requestHeaders,\n            mode: crossOrigin ? \"cors\" : \"no-cors\"\n        });\n        const blob = await response.blob();\n\n        // Load image from blob using THREE.js loader\n        const texture = await this.loadWithThreeLoader(URL.createObjectURL(blob));\n\n        // Set correct image format from original URL or blob mime type\n        // (object URL does not contain file format)\n        const isJPEG =\n            blob.type === \"image/jpeg/\" ||\n            url.search(/\\.jpe?g($|\\?)/i) > 0 ||\n            url.search(/^data\\:image\\/jpeg/) === 0;\n        texture.format = isJPEG ? THREE.RGBFormat : THREE.RGBAFormat;\n\n        return texture;\n    }\n\n    private loadWithThreeLoader(url: string): Promise<THREE.Texture> {\n        return new Promise<THREE.Texture>((resolve, reject) => {\n            this.m_textureLoader.setCrossOrigin(\"\");\n            this.m_textureLoader.load(\n                url,\n                texture => resolve(texture),\n                undefined,\n                () => reject(new Error(\"failed to load texture\"))\n            );\n        });\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport * as THREE from \"three\";\n\nimport { GeometryType, getFeatureId } from \"@here/harp-datasource-protocol\";\nimport { assert, LoggerManager } from \"@here/harp-utils\";\nimport { Tile, TileFeatureData } from \"../Tile\";\nimport {\n    BufferedGeometryLineAccessor,\n    BufferedGeometryObject3dAccessor,\n    IGeometryAccessor,\n    ILineAccessor,\n    IndexedBufferedGeometryLineAccessor,\n    IObject3dAccessor,\n    isLineAccessor,\n    isObject3dAccessor\n} from \"./TileGeometry\";\n\nconst logger = LoggerManager.instance.create(\"TileDataAccessor\");\n\n/**\n * Interface for a client visitor that is used to visit all `THREE.Object`s in a tile.\n */\nexport interface ITileDataVisitor {\n    tile: Tile;\n\n    /**\n     * Should return `true` if the visitor wants to visit the object with the specified\n     * `featureId`. This function is called before the type of the object is even known.\n     */\n    wantsFeature(featureId: number | undefined): boolean;\n\n    /**\n     * Should return `true` if the visitor wants to visit the point with the specified\n     * `featureId`.\n     */\n    wantsPoint(featureId: number | undefined): boolean;\n\n    /**\n     * Should return `true` if the visitor wants to visit the line with the specified\n     * `featureId`.\n     */\n    wantsLine(featureId: number | undefined): boolean;\n\n    /**\n     * Should return `true` if the visitor wants to visit the area object with the specified\n     * `featureId`.\n     */\n    wantsArea(featureId: number | undefined): boolean;\n\n    /**\n     * Should return `true` if the visitor wants to visit the object with the specified\n     * `featureId`.\n     */\n    wantsObject3D(featureId: number | undefined): boolean;\n\n    /**\n     * Visits a point object with the specified `featureId`; use `pointAccessor` to get the\n     * object's properties.\n     */\n    visitPoint(featureId: number | undefined): void;\n\n    /**\n     * Visits a line object with the specified `featureId`; use `pointAccessor` to get the\n     * object's properties.\n     */\n    visitLine(featureId: number | undefined, lineAccessor: ILineAccessor): void;\n\n    /**\n     * Visit an area object with the specified `featureId`; use `pointAccessor` to get the\n     * object's properties.\n     */\n    visitArea(featureId: number | undefined): void;\n\n    /**\n     * Visits a 3D object with the specified `featureId`; use `pointAccessor` to get the\n     * object's properties.\n     */\n    visitObject3D(featureId: number | undefined, object3dAccessor: IObject3dAccessor): void;\n}\n\n/**\n * An interface that provides options for [[TileDataAccessor]].\n */\nexport interface TileDataAccessorOptions {\n    /** Limit to objects that have `featureID`s. */\n    onlyWithFeatureIds?: boolean;\n    /** Sets and overrides `wantPoints`, `wantLines`, `wantAreas`, `wantObject3D`. */\n    wantsAll?: boolean;\n    /** `true` to visit points. */\n    wantsPoints?: boolean;\n    /** `true` to visit lines. */\n    wantsLines?: boolean;\n    /** `true` to visit area objects. */\n    wantsAreas?: boolean;\n    /** `true` to visit general 3D objects. */\n    wantsObject3D?: boolean;\n}\n\n/**\n * An accessor for all geometries in a tile. This class uses a client-provided [[ITileDataVisitor]]\n * to visit all objects, based on filtering options specified by both, the `TileDataAccessor` and\n * the visitor itself.\n */\nexport class TileDataAccessor {\n    private m_wantsPoints = true;\n    private m_wantsLines = true;\n    private m_wantsAreas = true;\n    private m_wantsObject3D = true;\n\n    /**\n     * Constructs a `TileDataAccessor` instance.\n     *\n     * @param tile The tile to access.\n     * @param visitor The visitor.\n     * @param options Options for the tile.\n     */\n    constructor(\n        public tile: Tile,\n        private visitor: ITileDataVisitor,\n        options: TileDataAccessorOptions\n    ) {\n        const wantsAll = options.wantsAll === true;\n        this.m_wantsPoints = wantsAll || !(options.wantsPoints === false);\n        this.m_wantsLines = wantsAll || !(options.wantsLines === false);\n        this.m_wantsAreas = wantsAll || !(options.wantsAreas === false);\n        this.m_wantsObject3D = wantsAll || !(options.wantsObject3D === false);\n    }\n\n    /**\n     * Calls the visitor on all objects in the tile.\n     */\n    visitAll(): void {\n        const objects = this.tile.objects;\n\n        for (const object of objects) {\n            this.visitObject(object);\n        }\n    }\n\n    /**\n     * Visits a single object. This function should normally be called during visiting.\n     *\n     * @param object The object to visit.\n     */\n    protected visitObject(object: THREE.Object3D): void {\n        const featureData: TileFeatureData | undefined =\n            object.userData !== undefined\n                ? (object.userData.feature as TileFeatureData)\n                : undefined;\n\n        // early opt out if there is no feature data, or if the feature data has only a single id\n        // and the visitor wants to ignore that featureId\n        if (\n            featureData === undefined ||\n            (featureData.objInfos !== undefined &&\n                featureData.objInfos.length === 1 &&\n                !this.visitor.wantsFeature(getFeatureId(featureData.objInfos[0])))\n        ) {\n            return;\n        }\n\n        const geometryType = featureData.geometryType;\n        if (geometryType === undefined) {\n            logger.warn(\"#visitObject: visiting object failed, no geometryType\", object);\n            return;\n        }\n\n        assert(featureData.objInfos !== undefined, \"featureData.ids missing\");\n        assert(featureData.starts !== undefined, \"featureData.starts missing\");\n        assert(Array.isArray(featureData.starts), \"featureData.starts is not an array\");\n        if (featureData.objInfos !== undefined && featureData.starts !== undefined) {\n            assert(\n                featureData.objInfos.length === featureData.starts.length,\n                \"featureData.ids and featureData.starts have unequal length\"\n            );\n        }\n\n        switch (geometryType) {\n            case GeometryType.Point:\n            case GeometryType.Text:\n                if (!this.m_wantsPoints) {\n                    return;\n                }\n                break;\n            case GeometryType.SolidLine:\n            case GeometryType.ExtrudedLine:\n            case GeometryType.TextPath:\n                if (!this.m_wantsLines) {\n                    return;\n                }\n                break;\n            case GeometryType.Polygon:\n            case GeometryType.ExtrudedPolygon:\n                if (!this.m_wantsAreas) {\n                    return;\n                }\n                break;\n            case GeometryType.Object3D:\n                if (!this.m_wantsObject3D) {\n                    return;\n                }\n                break;\n            default:\n                logger.warn(\"#visitObject: invalid geometryType\");\n        }\n\n        if (object.type !== \"Mesh\") {\n            logger.warn(\"#visitObject: visiting object failed, not of type 'Mesh'\", object);\n            return;\n        }\n\n        const mesh = object as THREE.Mesh;\n\n        this.visitMesh(mesh, featureData);\n    }\n\n    /**\n     * Gets the `BufferGeometry` from the specified object. This function requires the\n     * attribute `position` in `BufferGeometry` to be set.\n     *\n     * @param object The object from which to get the geometry.\n     * @returns the geometry of the object, or `undefined`.\n     */\n    protected getBufferGeometry(object: THREE.Mesh): THREE.BufferGeometry | undefined {\n        const geometry = object.geometry;\n\n        if (geometry.type !== \"BufferGeometry\") {\n            logger.warn(\"#visitObject: object does not have BufferGeometry\");\n            return undefined;\n        }\n\n        const bufferGeometry = geometry as THREE.BufferGeometry;\n\n        // we know its a BufferAttribute because it is a BufferGeometry\n        const position: THREE.BufferAttribute = bufferGeometry.getAttribute(\n            \"position\"\n        ) as THREE.BufferAttribute;\n\n        if (!position) {\n            logger.warn(\"#visitLines: BufferGeometry has no position attribute\");\n            return undefined;\n        }\n\n        return bufferGeometry;\n    }\n\n    /**\n     * Obtains an accessor for the nonindexed geometry. This function may return `undefined`\n     * if the accessor is not implemented.\n     *\n     * @param geometryType The type of geometry.\n     * @param object The object for which to access the attributes and geometry.\n     * @param bufferGeometry The object's `BufferGeometry`.\n     * @returns an accessor for a specified object, if available.\n     */\n    protected getGeometryAccessor(\n        geometryType: GeometryType,\n        object: THREE.Mesh,\n        bufferGeometry: THREE.BufferGeometry\n    ): IGeometryAccessor | undefined {\n        switch (geometryType) {\n            case GeometryType.Point:\n            case GeometryType.Text:\n                // return new RoBufferedGeometryLineAccessor(object, geometryType, bufferGeometry);\n                return undefined;\n            case GeometryType.SolidLine:\n            case GeometryType.ExtrudedLine:\n            case GeometryType.TextPath:\n                return new BufferedGeometryLineAccessor(object, geometryType, bufferGeometry);\n            case GeometryType.Polygon:\n            case GeometryType.ExtrudedPolygon:\n                // return new RoBufferedGeometryLineAccessor(object, geometryType, bufferGeometry);\n                return undefined;\n            case GeometryType.Object3D:\n                return new BufferedGeometryObject3dAccessor(object, geometryType, bufferGeometry);\n            default:\n                logger.warn(\"#getGeometryAccessor: invalid geometryType\");\n        }\n        return undefined;\n    }\n\n    /**\n     * Obtains an accessor for the indexed geometry. This function may return `undefined`\n     * if the accessor is not implemented.\n     *\n     * @param geometryType The type of geometry.\n     * @param object The object for which to access the attributes and geometry.\n     * @param bufferGeometry The object's `BufferGeometry`.\n     * @returns an accessor for a specified object, if available.\n     */\n    protected getIndexedGeometryAccessor(\n        geometryType: GeometryType,\n        object: THREE.Mesh,\n        bufferGeometry: THREE.BufferGeometry\n    ): IGeometryAccessor | undefined {\n        switch (geometryType) {\n            case GeometryType.Point:\n            case GeometryType.Text:\n                // return new RoBufferedGeometryLineAccessor(object, geometryType, bufferGeometry);\n                return undefined;\n            case GeometryType.SolidLine:\n            case GeometryType.ExtrudedLine:\n            case GeometryType.TextPath:\n                return new IndexedBufferedGeometryLineAccessor(\n                    object,\n                    geometryType,\n                    bufferGeometry\n                );\n            case GeometryType.Polygon:\n            case GeometryType.ExtrudedPolygon:\n                // return new RoBufferedGeometryLineAccessor(object, geometryType, bufferGeometry);\n                return undefined;\n            case GeometryType.Object3D:\n                // return new RoBufferedGeometryLineAccessor(object, geometryType, bufferGeometry);\n                return undefined;\n            default:\n                logger.warn(\"#getIndexedGeometryAccessor: invalid geometryType\");\n        }\n        return undefined;\n    }\n\n    /**\n     * Visit the object.\n     *\n     * @param meshObject Object of type `Mesh`.\n     * @param featureData Dataset stored along with the object.\n     */\n    protected visitMesh(meshObject: THREE.Mesh, featureData: TileFeatureData): void {\n        const { objInfos, starts } = featureData;\n        const geometryType = featureData.geometryType;\n\n        // make linter happy: we already know that these both are valid\n        if (objInfos === undefined || starts === undefined || geometryType === undefined) {\n            return;\n        }\n\n        let geometryAccessor: IGeometryAccessor | undefined;\n\n        for (let featureIndex = 0; featureIndex < objInfos.length; featureIndex++) {\n            const featureId = getFeatureId(objInfos[featureIndex]);\n\n            if (!this.visitor.wantsFeature(featureId)) {\n                continue;\n            }\n\n            const featureStart = starts[featureIndex];\n            let featureEnd: number = -1;\n\n            // lazy creation of accessor, in case featureId was not wanted...\n            if (geometryAccessor === undefined) {\n                const bufferGeometry = this.getBufferGeometry(meshObject);\n                if (bufferGeometry === undefined) {\n                    continue;\n                }\n\n                if (bufferGeometry.index !== null) {\n                    geometryAccessor = this.getIndexedGeometryAccessor(\n                        geometryType,\n                        meshObject,\n                        bufferGeometry\n                    );\n                } else {\n                    geometryAccessor = this.getGeometryAccessor(\n                        geometryType,\n                        meshObject,\n                        bufferGeometry\n                    );\n                }\n\n                if (geometryAccessor === undefined) {\n                    logger.warn(\"#visitObject: no accessor geometryType\", geometryType);\n                    continue;\n                }\n            }\n\n            featureEnd =\n                featureIndex < starts.length - 1\n                    ? starts[featureIndex + 1]\n                    : geometryAccessor.getCount();\n\n            // setup/update the accessor for the new range of the object\n            geometryAccessor.setRange(featureStart, featureEnd);\n\n            switch (geometryType) {\n                case GeometryType.Point:\n                case GeometryType.Text:\n                    this.visitor.visitPoint(featureId);\n                    break;\n                case GeometryType.SolidLine:\n                case GeometryType.ExtrudedLine:\n                case GeometryType.TextPath:\n                    assert(isLineAccessor(geometryAccessor));\n                    this.visitor.visitLine(featureId, (geometryAccessor as any) as ILineAccessor);\n                    break;\n                case GeometryType.Polygon:\n                case GeometryType.ExtrudedPolygon:\n                    this.visitor.visitArea(featureId);\n                    break;\n                case GeometryType.Object3D:\n                    assert(isObject3dAccessor(geometryAccessor));\n                    this.visitor.visitObject3D(\n                        featureId,\n                        (geometryAccessor as any) as IObject3dAccessor\n                    );\n                    break;\n                default:\n                    logger.warn(\"#visitObject: invalid geometryType\");\n            }\n        }\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nexport * from \"./lib/Lines\";\nexport * from \"./lib/TriangulateLines\";\nexport * from \"./lib/HighPrecisionLines\";\nexport * from \"./lib/HighPrecisionUtils\";\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { Projection } from \"@here/harp-geoutils\";\nimport { assert } from \"@here/harp-utils\";\nimport * as THREE from \"three\";\n\n// Preallocate temp variables used during line generation.\nconst tmpV = new THREE.Vector3();\nconst tmpNormal = new THREE.Vector3();\nconst tmpTangent0 = new THREE.Vector3();\nconst tmpTangent1 = new THREE.Vector3();\nconst tmpBitangent = new THREE.Vector3();\nconst SEGMENT_OFFSET = 0.1;\n\n/**\n * Describes vertex attribute parameters of interleaved buffer.\n */\ninterface VertexAttributeDescriptor {\n    name: string;\n    itemSize: number;\n    offset: number;\n}\n\ninterface VertexDescriptor {\n    attributes: VertexAttributeDescriptor[];\n    stride: number;\n}\n\n/**\n * Declares all the vertex attributes used for rendering a line using the [[SolidLineMaterial]].\n */\n\n/** Base line vertex attributes. */\nconst LINE_VERTEX_ATTRIBUTES: VertexDescriptor = {\n    attributes: [\n        // The \"extrusionCoord\" is a vec4 which represents:\n        // xy: Extrusion coordinates\n        // sign(xy): Extrusion direction\n        // z: Line length\n        { name: \"extrusionCoord\", itemSize: 3, offset: 0 },\n        { name: \"position\", itemSize: 3, offset: 3 },\n        { name: \"tangent\", itemSize: 3, offset: 6 },\n        { name: \"bitangent\", itemSize: 4, offset: 9 }\n    ],\n    stride: 13\n};\n\n/** Optional normal and uv coordinates. */\nconst NORMAL_UV_VERTEX_ATTRIBUTES: VertexDescriptor = {\n    attributes: [\n        { name: \"uv\", itemSize: 2, offset: LINE_VERTEX_ATTRIBUTES.stride },\n        { name: \"normal\", itemSize: 3, offset: LINE_VERTEX_ATTRIBUTES.stride + 2 }\n    ],\n    stride: 5\n};\n\n/** Base line vertex attributes plus normals and uv coordinates. */\nconst LINE_VERTEX_ATTRIBUTES_NUV: VertexDescriptor = {\n    attributes: [...LINE_VERTEX_ATTRIBUTES.attributes, ...NORMAL_UV_VERTEX_ATTRIBUTES.attributes],\n    stride: LINE_VERTEX_ATTRIBUTES.stride + NORMAL_UV_VERTEX_ATTRIBUTES.stride\n};\n\n/**\n * Declares all the vertex attributes used for rendering a line using the\n * [[HighPrecisionLineMaterial]].\n */\nconst HP_LINE_VERTEX_ATTRIBUTES: VertexDescriptor = {\n    attributes: [\n        { name: \"extrusionCoord\", itemSize: 2, offset: 0 },\n        { name: \"position\", itemSize: 3, offset: 2 },\n        { name: \"positionLow\", itemSize: 3, offset: 5 },\n        { name: \"tangent\", itemSize: 3, offset: 8 },\n        { name: \"bitangent\", itemSize: 4, offset: 11 }\n    ],\n    stride: 15\n};\n\n/** High precision line vertex attributes plus normals and uv coordinates. */\nconst HP_LINE_VERTEX_ATTRIBUTES_NUV: VertexDescriptor = {\n    attributes: [\n        ...HP_LINE_VERTEX_ATTRIBUTES.attributes,\n        ...NORMAL_UV_VERTEX_ATTRIBUTES.attributes\n    ],\n    stride: HP_LINE_VERTEX_ATTRIBUTES.stride + NORMAL_UV_VERTEX_ATTRIBUTES.stride\n};\n\n/**\n * Class that holds the vertex and index attributes for a [[Lines]] object.\n */\nexport class LineGeometry {\n    vertices: number[] = [];\n    vertexColors: number[] = [];\n    indices: number[] = [];\n}\n\nfunction getVertexDescriptor(hasNormalsAndUvs: boolean, highPrecision: boolean): VertexDescriptor {\n    if (highPrecision) {\n        return hasNormalsAndUvs ? HP_LINE_VERTEX_ATTRIBUTES_NUV : HP_LINE_VERTEX_ATTRIBUTES;\n    } else {\n        return hasNormalsAndUvs ? LINE_VERTEX_ATTRIBUTES_NUV : LINE_VERTEX_ATTRIBUTES;\n    }\n}\n\n/**\n * Creates a [[LineGeometry]] object out of a polyline.\n *\n * @param center Center of the polyline.\n * @param polyline Array of `numbers` describing a polyline.\n * @param offsets Array of `numbers` representing line segment offsets.\n * @param uvs Array of `numbers` representing texture coordinates.\n * @param colors Array of `numbers` describing a polyline's colors.\n * @param geometry [[LineGeometry]] object used to store the vertex and index attributes.\n * @param highPrecision If `true` will create high-precision vertex information.\n */\nexport function createLineGeometry(\n    center: THREE.Vector3,\n    polyline: ArrayLike<number>,\n    projection: Projection,\n    offsets?: ArrayLike<number>,\n    uvs?: ArrayLike<number>,\n    colors?: ArrayLike<number>,\n    geometry = new LineGeometry(),\n    highPrecision: boolean = false\n): LineGeometry {\n    if (polyline.length === 0) {\n        return geometry;\n    }\n\n    const stride = getVertexDescriptor(uvs !== undefined, highPrecision).stride;\n\n    const pointCount = polyline.length / 3;\n    const segments = new Array<number>(pointCount);\n    const tangents = new Array<number>(polyline.length - 3);\n    const baseVertex = geometry.vertices.length / stride;\n\n    const hasSegmentOffsets = offsets !== undefined && offsets.length > 0;\n    const hasTexCoords = uvs !== undefined && uvs.length > 0;\n    const vertexColors = colors !== undefined && colors.length && polyline.length;\n\n    assert(!hasSegmentOffsets || offsets!.length === pointCount);\n    assert(!hasTexCoords || uvs!.length / 2 === pointCount);\n    assert(!vertexColors || colors!.length === polyline.length);\n\n    // Compute segments and tangents.\n    let sum = SEGMENT_OFFSET;\n    segments[0] = sum;\n    for (let i = 0; i < pointCount - 1; ++i) {\n        let sqrLength = 0;\n        for (let j = 0; j < 3; ++j) {\n            const d = polyline[(i + 1) * 3 + j] - polyline[i * 3 + j];\n            tangents[i * 3 + j] = d;\n            sqrLength += d * d;\n        }\n        const len = Math.sqrt(sqrLength);\n        sum = sum + len;\n        segments[i + 1] = sum;\n    }\n\n    const lineCoverage = hasSegmentOffsets\n        ? Math.abs(offsets![offsets!.length - 1] - offsets![0])\n        : 1.0;\n    const lineLength = segments[segments.length - 1] / lineCoverage;\n\n    // Override the segments if offsets are explicitly provided.\n    if (hasSegmentOffsets) {\n        for (let i = 0; i < pointCount; ++i) {\n            segments[i] = offsets![i] * lineLength + SEGMENT_OFFSET;\n        }\n    }\n\n    // Check if we're working with a closed line.\n    let isClosed = true;\n    for (let j = 0; j < 3; ++j) {\n        isClosed = isClosed && polyline[j] === polyline[polyline.length - 3 + j];\n    }\n\n    const tmpVertices: number[] = [];\n\n    const addVertexPair = (\n        i: number,\n        T1: number,\n        T2: number,\n        segment: number,\n        extrusionCoord: number\n    ) => {\n        tmpVertices.length = 0;\n\n        // Store the segment and extrusionCoord attributes.\n        geometry.vertices.push(segment, extrusionCoord * -1, lineLength);\n        tmpVertices.push(segment, extrusionCoord * 1, lineLength);\n\n        // Store the position attribute (component-dependant).\n        for (let j = 0; j < 3; ++j) {\n            if (!highPrecision) {\n                geometry.vertices.push(polyline[i * 3 + j]);\n                tmpVertices.push(polyline[i * 3 + j]);\n            } else {\n                const highComp = Math.fround(polyline[i * 3 + j]);\n                const lowComp = polyline[i * 3 + j] - highComp;\n                geometry.vertices.push(highComp, lowComp);\n                tmpVertices.push(highComp, lowComp);\n            }\n            tmpNormal.setComponent(j, polyline[i * 3 + j]);\n        }\n\n        // Store the bitangent attribute (component-dependant).\n        for (let j = 0; j < 3; ++j) {\n            tmpTangent0.setComponent(j, tangents[T1 + j]);\n            tmpTangent1.setComponent(j, tangents[T2 + j]);\n        }\n        tmpTangent0.normalize();\n        geometry.vertices.push(tmpTangent0.x, tmpTangent0.y, tmpTangent0.z);\n        tmpVertices.push(tmpTangent0.x, tmpTangent0.y, tmpTangent0.z);\n        tmpNormal.add(center); // tmpNormal contains world position\n        projection.surfaceNormal(tmpNormal, tmpNormal);\n        const angle = computeBitangent(\n            tmpNormal,\n            tmpTangent0,\n            tmpTangent1.normalize(),\n            tmpBitangent\n        );\n        geometry.vertices.push(tmpBitangent.x, tmpBitangent.y, tmpBitangent.z, angle);\n        tmpVertices.push(tmpBitangent.x, tmpBitangent.y, tmpBitangent.z, angle);\n\n        if (hasTexCoords) {\n            // uvs\n            geometry.vertices.push(uvs![i * 2], uvs![i * 2 + 1]);\n            tmpVertices.push(uvs![i * 2], uvs![i * 2 + 1]);\n            // normals\n            geometry.vertices.push(tmpNormal.x, tmpNormal.y, tmpNormal.z);\n            tmpVertices.push(tmpNormal.x, tmpNormal.y, tmpNormal.z);\n        }\n\n        geometry.vertices.push(...tmpVertices);\n\n        // Add vertex colors (if supplied).\n        if (vertexColors) {\n            geometry.vertexColors.push(colors![i * 3], colors![i * 3 + 1], colors![i * 3 + 2]);\n            geometry.vertexColors.push(colors![i * 3], colors![i * 3 + 1], colors![i * 3 + 2]);\n        }\n    };\n\n    for (let i = 0; i < pointCount; ++i) {\n        // Retrieve the per-point tangents.\n        const T1 = isClosed && i === 0 ? tangents.length - 3 : Math.max(0, i - 1) * 3;\n        const T2 = isClosed && i === pointCount - 1 ? 0 : Math.min(i * 3, tangents.length - 3);\n\n        // Process v0 and v1.\n        if (i > 0) {\n            addVertexPair(i, T1, T2, segments[i - 1], segments[i]);\n        }\n\n        // Process v2 and v3.\n        if (i + 1 < pointCount) {\n            addVertexPair(\n                i,\n                T1,\n                T2,\n                segments[Math.min(i, segments.length - 1)] * -1,\n                segments[Math.min(i + 1, segments.length - 1)]\n            );\n        }\n    }\n\n    // Store the triangle indices in the final index buffer.\n    for (let i = 0; i < pointCount - 1; ++i) {\n        const base = baseVertex + i * 4;\n        geometry.indices.push(base, base + 1, base + 2, base + 2, base + 1, base + 3);\n    }\n\n    return geometry;\n}\n\n/**\n * Creates a [[LineGeometry]] object out of a polyline.\n *\n * @param polyline Array of `numbers` describing a polyline.\n * @param colors Array of `numbers` describing a polyline's colors.\n * @param geometry [[LineGeometry]] object used to store the vertex and index attributes.\n */\nexport function createSimpleLineGeometry(\n    polyline: ArrayLike<number>,\n    colors?: ArrayLike<number>,\n    geometry = new LineGeometry()\n): LineGeometry {\n    if (polyline.length === 0) {\n        return geometry;\n    }\n\n    const pointCount = polyline.length / 3;\n    let index = geometry.vertices.length / 3;\n\n    const vertexColors = colors !== undefined && colors.length && polyline.length;\n\n    for (let i = 0; i < pointCount; ++i, index++) {\n        if (i > 0) {\n            geometry.indices.push(index);\n        }\n        if (i < pointCount - 1) {\n            geometry.indices.push(index);\n        }\n        for (let j = 0; j < 3; ++j) {\n            geometry.vertices.push(polyline[i * 3 + j]);\n            if (vertexColors) {\n                geometry.vertexColors.push(colors![i * 3 + j]);\n            }\n        }\n    }\n\n    return geometry;\n}\n\n/**\n * Class used to render groups (or batches) of width-variable lines (in the same tile).\n */\nexport class LineGroup {\n    /**\n     * Adds all the attribute data needed to a [[BufferGeometry]] object for rendering `Lines`.\n     *\n     * @param vertices Array of vertex attributes.\n     * @param colors Array of vertex colors.\n     * @param indices Array of vertex indices.\n     * @param geometry [[BufferGeometry]] object which will store all the `Lines` attribute data.\n     * @param hasNormalsAnUvs Whether vertices have normal and uv coordinates as attributes.\n     * @param highPrecision If `true` will create high-precision vertex information.\n     * @param isSimple `true` to create simple (nonsolid, nonextruded) lines. Defaults to `false`.\n     */\n    static createGeometry(\n        vertices: ArrayLike<number>,\n        colors: ArrayLike<number>,\n        indices: ArrayLike<number>,\n        geometry: THREE.BufferGeometry,\n        hasNormalsAndUvs: boolean = false,\n        highPrecision = false,\n        isSimple = false\n    ): THREE.BufferGeometry {\n        if (isSimple) {\n            geometry.setAttribute(\n                \"position\",\n                new THREE.BufferAttribute(new Float32Array(vertices), 3)\n            );\n            if (colors.length === vertices.length) {\n                geometry.setAttribute(\n                    \"color\",\n                    new THREE.BufferAttribute(new Float32Array(colors), 3)\n                );\n            }\n            geometry.setIndex(new THREE.BufferAttribute(new Uint32Array(indices), 1));\n            return geometry;\n        } else {\n            const vertexDescriptor = getVertexDescriptor(hasNormalsAndUvs, highPrecision);\n\n            const buffer = new THREE.InterleavedBuffer(\n                new Float32Array(vertices),\n                vertexDescriptor.stride\n            );\n            vertexDescriptor.attributes.forEach(descr => {\n                const attribute = new THREE.InterleavedBufferAttribute(\n                    buffer,\n                    descr.itemSize,\n                    descr.offset,\n                    false\n                );\n                geometry.setAttribute(descr.name, attribute);\n            });\n            if (colors.length === vertices.length) {\n                geometry.setAttribute(\n                    \"color\",\n                    new THREE.BufferAttribute(new Float32Array(colors), 3)\n                );\n            }\n\n            geometry.setIndex(new THREE.BufferAttribute(new Uint32Array(indices), 1));\n\n            return geometry;\n        }\n    }\n\n    private readonly m_geometry: LineGeometry;\n\n    constructor(\n        readonly hasNormalsAndUvs: boolean = false,\n        readonly highPrecision: boolean = false,\n        readonly isSimple: boolean = false\n    ) {\n        this.m_geometry = new LineGeometry();\n    }\n\n    /**\n     * Clears the list of line strips.\n     */\n    clear() {\n        this.m_geometry.vertices = [];\n        this.m_geometry.vertexColors = [];\n        this.m_geometry.indices = [];\n    }\n\n    /**\n     * Add the given points to this line group.\n     *\n     * @param center World center of the provided points.\n     * @param points Sequence of (x,y,z) coordinates.\n     * @param offsets Sequence of line segment offsets.\n     * @param uvs Sequence of (u,v) texture coordinates.\n     * @param colors Sequence of (r,g,b) color components.\n     */\n    add(\n        center: THREE.Vector3,\n        points: ArrayLike<number>,\n        projection: Projection,\n        offsets?: ArrayLike<number>,\n        uvs?: ArrayLike<number>,\n        colors?: ArrayLike<number>\n    ): this {\n        if (!this.isSimple) {\n            assert(!this.hasNormalsAndUvs || uvs !== undefined);\n            createLineGeometry(\n                center,\n                points,\n                projection,\n                offsets,\n                uvs,\n                colors,\n                this.m_geometry,\n                this.highPrecision\n            );\n        } else {\n            createSimpleLineGeometry(points, colors, this.m_geometry);\n        }\n        return this;\n    }\n\n    /**\n     * Returns the list of vertices.\n     */\n    get vertices(): number[] {\n        return this.m_geometry.vertices;\n    }\n\n    /**\n     * Returns the list of vertex colors.\n     */\n    get vertexColors(): number[] {\n        return this.m_geometry.vertexColors;\n    }\n\n    /**\n     * Returns the list of indices.\n     */\n    get indices(): number[] {\n        return this.m_geometry.indices;\n    }\n\n    /**\n     * Returns the list of [[VertexAttributeDescriptor]]s.\n     */\n    get vertexAttributes(): VertexAttributeDescriptor[] {\n        return getVertexDescriptor(this.hasNormalsAndUvs, this.highPrecision).attributes;\n    }\n\n    /**\n     * Returns the vertex attribute stride.\n     */\n    get stride(): number {\n        return getVertexDescriptor(this.hasNormalsAndUvs, this.highPrecision).stride;\n    }\n\n    /**\n     * Creates a three.js geometry.\n     */\n    createGeometry(geometry?: THREE.BufferGeometry): THREE.BufferGeometry {\n        if (geometry === undefined) {\n            geometry = new THREE.BufferGeometry();\n        }\n        return LineGroup.createGeometry(\n            this.m_geometry.vertices,\n            this.m_geometry.vertexColors,\n            this.m_geometry.indices,\n            geometry,\n            this.hasNormalsAndUvs,\n            this.highPrecision\n        );\n    }\n}\n\nfunction computeBitangent(\n    n: THREE.Vector3,\n    t0: THREE.Vector3,\n    t1: THREE.Vector3,\n    bt: THREE.Vector3\n): number {\n    let angle = 0;\n    if (!t0.equals(t1)) {\n        angle = Math.acos(t0.dot(t1)) * Math.sign(n.dot(tmpV.copy(t0).cross(t1)));\n        if (Number.isNaN(angle)) {\n            angle = 0;\n        }\n    }\n    bt.copy(t0)\n        .add(t1)\n        .normalize()\n        .cross(n)\n        .normalize();\n    return angle;\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport * as THREE from \"three\";\n\nimport { HighPrecisionPointMaterial } from \"@here/harp-materials\";\n\nimport { HighPrecisionObject } from \"./HighPrecisionLines\";\nimport { HighPrecisionUtils } from \"./HighPrecisionUtils\";\n\n/**\n * Class used to render high-precision points.\n */\nexport class HighPrecisionPoints extends THREE.Points implements HighPrecisionObject {\n    matrixWorldInverse: THREE.Matrix4;\n\n    /**\n     * Number of dimensions this `HighPrecisionObject` is specified in (2D/3D).\n     */\n    dimensionality?: number;\n\n    /**\n     * Creates a `HighPrecisionPoints` object.\n     *\n     * @param geometry [[BufferGeometry]] used to render this object.\n     * @param material [[HighPrecisionLineMaterial]] used to render this object.\n     *     instances.\n     * @param positions Array of 2D/3D positions.\n     * @param color Color of the rendered point.\n     * @param opacity Opacity of the rendered point.\n     */\n    constructor(\n        geometry?: THREE.BufferGeometry,\n        material?: HighPrecisionPointMaterial,\n        positions?: number[] | THREE.Vector3[],\n        color?: THREE.Color,\n        opacity?: number\n    ) {\n        if (material === undefined) {\n            material = new HighPrecisionPointMaterial({\n                color: color ? color : HighPrecisionPointMaterial.DEFAULT_COLOR,\n                opacity: opacity !== undefined ? opacity : 1\n            });\n        }\n\n        super(geometry === undefined ? new THREE.BufferGeometry() : geometry, material);\n\n        this.matrixWorldInverse = new THREE.Matrix4();\n\n        if (positions) {\n            this.setPositions(positions);\n        }\n    }\n\n    get bufferGeometry(): THREE.BufferGeometry {\n        return this.geometry as THREE.BufferGeometry;\n    }\n\n    /**\n     * Clears the [[BufferGeometry]] used to render this point.\n     */\n    clearGeometry(): THREE.BufferGeometry {\n        return (this.geometry = new THREE.BufferGeometry());\n    }\n\n    get shaderMaterial(): THREE.ShaderMaterial {\n        return this.material as THREE.ShaderMaterial;\n    }\n\n    setPositions(positions: number[] | THREE.Vector3[]): void {\n        HighPrecisionUtils.setPositions(this, positions);\n    }\n\n    setupForRendering(): void {\n        if (\n            (this.material as any).isHighPrecisionPointsMaterial &&\n            this.dimensionality !== undefined\n        ) {\n            (this.material as any).setDimensionality(this.dimensionality);\n        }\n        this.onBeforeRender = (\n            _renderer: THREE.WebGLRenderer,\n            _scene: THREE.Scene,\n            camera: THREE.Camera,\n            _geometry: THREE.Geometry | THREE.BufferGeometry,\n            _material: THREE.Material,\n            _group: THREE.Group\n        ) => {\n            HighPrecisionUtils.updateHpUniforms(this, camera, this.shaderMaterial);\n        };\n    }\n\n    updateMatrixWorld(force: boolean) {\n        const doUpdateMatrixWorldInverse = this.matrixWorldNeedsUpdate || force;\n\n        super.updateMatrixWorld(force);\n\n        if (doUpdateMatrixWorldInverse) {\n            this.matrixWorldInverse.getInverse(this.matrixWorld);\n        }\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nexport * from \"./lib/OmvDataFilter\";\nexport * from \"./lib/OmvDataSource\";\nexport * from \"./lib/OmvDecoderDefs\";\nexport * from \"./lib/OmvTile\";\nexport * from \"./lib/OmvDebugLabelsTile\";\nexport * from \"./lib/OmvRestClient\";\nexport * from \"./lib/GeoJsonDataProvider\";\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\nimport { GeometryKind, GeometryKindSet } from \"@here/harp-datasource-protocol\";\nimport { MapEnv } from \"@here/harp-datasource-protocol/index-decoder\";\nimport {\n    OmvFeatureFilterDescription,\n    OmvFilterDescription,\n    OmvFilterFeatureAttribute,\n    OmvFilterString,\n    OmvGeometryType,\n    OmvLayerFilterDescription\n} from \"./OmvDecoderDefs\";\n\n/**\n * The `OmvFeatureFilter` is designed to work in an `OmvVisitor`/`visitOmv` combination (for\n * example, `OmvDecoder`). Returning `false` from any of the calls terminates processing of that\n * layer or feature.\n *\n * The `OmvFeatureFilter` is an \"early-opt-out\" filter, which cannot filter individual features,\n * because at that point the features are not really decoded. Use the [[OmvFeatureModifier]] to\n * filter for individual features.\n */\nexport interface OmvFeatureFilter {\n    /**\n     * Returns `true` if the filter contains rules for specific kinds.\n     */\n    hasKindFilter: boolean;\n\n    /**\n     * Return `false` if the layer should not be processed.\n     *\n     * @param layer Current layer.\n     * @param level Level of tile.\n     */\n    wantsLayer(layer: string, level: number): boolean;\n\n    /**\n     * Return `false` if the point feature should not be processed.\n     *\n     * @param layer Current layer.\n     * @param feature Current feature.\n     * @param level Level of tile.\n     */\n    wantsPointFeature(layer: string, geometryType: OmvGeometryType, level: number): boolean;\n\n    /**\n     * Return `false` if the line feature should not be processed.\n     *\n     * @param layer Current layer.\n     * @param feature Current feature.\n     * @param level Level of tile.\n     */\n    wantsLineFeature(layer: string, geometryType: OmvGeometryType, level: number): boolean;\n\n    /**\n     * Return `false` if the polygon feature should not be processed.\n     *\n     * @param layer Current layer.\n     * @param feature Current feature.\n     * @param level Level of tile.\n     */\n    wantsPolygonFeature(layer: string, geometryType: OmvGeometryType, level: number): boolean;\n\n    /**\n     * Return `false` if kind of object is not enabled and the geometry should not be created.\n     *\n     * @param {(string | string[])} kind Tag \"kind\" of the tag.\n     * @returns {boolean}\n     */\n    wantsKind(kind: string | string[]): boolean;\n}\n\n/**\n * The `OmvFeatureModifier` can be used to filter individual features. It gets passed in the [[Env]]\n * of the feature, which contains all the values that can be searched for in a style. If a filter\n * function returns false, the feature is ignored, and no geometry is being created.\n *\n * In addition to pure filtering, the `OmvFeatureModifier` can also modify the [[Env]] of the\n * feature, or even add new properties to the feature, for example, traffic states. The\n * `OmvFeatureModifier` is executed before the styles are selected, so the geometry is created with\n * the modified feature properties.\n */\nexport interface OmvFeatureModifier {\n    /**\n     * Check if the point feature described by `env` should be processed. The properties can be\n     * modified or added to.\n     *\n     * @param layer Current layer.\n     * @param env Properties of point feature.\n     * @param level Level of tile.\n     * @returns `false` to ignore feature.\n     */\n    doProcessPointFeature(layer: string, env: MapEnv, level: number): boolean;\n\n    /**\n     * Check if the line feature described by `env` should be processed. The properties can be\n     * modified or added to.\n     *\n     * @param layer Current layer.\n     * @param env Properties of line feature.\n     * @param level Level of tile.\n     * @returns `false` to ignore feature.\n     */\n    doProcessLineFeature(layer: string, env: MapEnv, level: number): boolean;\n\n    /**\n     * Check if the polygon feature described by `env` should be processed. The properties can be\n     * modified or added to.\n     *\n     * @param layer Current layer.\n     * @param env Properties of polygon feature.\n     * @param level Level of tile.\n     * @returns `false` to ignore feature.\n     */\n    doProcessPolygonFeature(layer: string, env: MapEnv, level: number): boolean;\n}\n\n/**\n * Builds an `OmvFilterDescription` (internal type) that specifies an [[OmvFeatureFilter]] as well\n * as an [[OmvFeatureModifier]].\n *\n */\nexport class OmvFeatureFilterDescriptionBuilder {\n    private m_processLayersDefault: boolean = true;\n    private m_processPointsDefault: boolean = true;\n    private m_processLinesDefault: boolean = true;\n    private m_processPolygonsDefault: boolean = true;\n\n    private readonly m_layersToProcess = new Array<OmvLayerFilterDescription>();\n    private readonly m_layersToIgnore = new Array<OmvLayerFilterDescription>();\n    private readonly m_pointsToProcess = new Array<OmvFilterDescription>();\n    private readonly m_ignoredPoints = new Array<OmvFilterDescription>();\n    private readonly m_linesToProcess = new Array<OmvFilterDescription>();\n    private readonly m_linesToIgnore = new Array<OmvFilterDescription>();\n    private readonly m_polygonsToProcess = new Array<OmvFilterDescription>();\n    private readonly m_polygonsToIgnore = new Array<OmvFilterDescription>();\n\n    private m_kindsToProcess: string[] = [];\n    private m_kindsToIgnore: string[] = [];\n\n    /**\n     * Builds an `OmvFilterDescription` (internal type) that specifies an [[OmvFeatureFilter]] as\n     * well as an [[OmvFeatureModifier]].\n     *\n     * @param processLayersDefault If `true`, all unspecified layers will be processed. If `false`,\n     * all unspecified layers will be ignored.\n     * @param processPointsDefault If `true`, all unspecified point features will be processed. If\n     * `false`, all unspecified point features will be ignored.\n     * @param processLinesDefault If `true`, all unspecified line features will be processed. If\n     * `false`, all unspecified line features will be ignored.\n     * @param processPolygonsDefault If `true`, all unspecified polygon features will be processed.\n     * If `false`, all unspecified polygon features will be ignored.\n     */\n    constructor(\n        options?: OmvFeatureFilterDescriptionBuilder.OmvFeatureFilterDescriptionBuilderOptions\n    ) {\n        if (options) {\n            this.m_processLayersDefault =\n                options.processLayersDefault !== undefined ? options.processLayersDefault : true;\n            this.m_processPointsDefault =\n                options.processPointsDefault !== undefined ? options.processPointsDefault : true;\n            this.m_processLinesDefault =\n                options.processLinesDefault !== undefined ? options.processLinesDefault : true;\n            this.m_processPolygonsDefault =\n                options.processPolygonsDefault !== undefined\n                    ? options.processPolygonsDefault\n                    : true;\n        }\n    }\n\n    /**\n     * Add a layer that should be processed.\n     *\n     * @param layer Layer name to be matched.\n     * @param match Match condition.\n     */\n    processLayer(\n        layer: string,\n        match = OmvFilterString.StringMatch.Match,\n        minLevel: number = 0,\n        maxLevel: number = Infinity\n    ) {\n        this.m_layersToProcess.push({\n            name: { value: layer, match },\n            minLevel,\n            maxLevel\n        });\n    }\n\n    /**\n     * Add a layer that should be ignored.\n     *\n     * @param layer Layer name to be matched.\n     * @param match Match condition.\n     */\n    ignoreLayer(\n        layer: string,\n        match = OmvFilterString.StringMatch.Match,\n        minLevel: number = 0,\n        maxLevel: number = Infinity\n    ) {\n        this.m_layersToIgnore.push({\n            name: { value: layer, match },\n            minLevel,\n            maxLevel\n        });\n    }\n\n    /**\n     * Add a valid point feature.\n     *\n     * @param options Feature options.\n     */\n    processPoint(options: OmvFeatureFilterDescriptionBuilder.FeatureOption) {\n        this.addItem(this.m_pointsToProcess, options);\n    }\n\n    /**\n     * Add valid point features.\n     *\n     * @param options Multi feature options.\n     */\n    processPoints(options: OmvFeatureFilterDescriptionBuilder.MultiFeatureOption) {\n        this.addItems(this.m_pointsToProcess, options);\n    }\n\n    /**\n     * Add a point feature that should be ignored.\n     *\n     * @param options Feature options.\n     */\n    ignorePoint(options: OmvFeatureFilterDescriptionBuilder.FeatureOption) {\n        this.addItem(this.m_ignoredPoints, options);\n    }\n\n    /**\n     * Add point features that should be ignored.\n     *\n     * @param options Multi feature options.\n     */\n    ignorePoints(options: OmvFeatureFilterDescriptionBuilder.MultiFeatureOption) {\n        this.addItems(this.m_ignoredPoints, options);\n    }\n\n    /**\n     * Add a valid line feature.\n     *\n     * @param options Feature options.\n     */\n    processLine(options: OmvFeatureFilterDescriptionBuilder.FeatureOption) {\n        this.addItem(this.m_linesToProcess, options);\n    }\n\n    /**\n     * Add valid line features.\n     *\n     * @param options Multi feature options.\n     */\n    processLines(options: OmvFeatureFilterDescriptionBuilder.MultiFeatureOption) {\n        this.addItems(this.m_linesToProcess, options);\n    }\n\n    /**\n     * Ignore a line feature.\n     *\n     * @param options Feature options.\n     */\n    ignoreLine(options: OmvFeatureFilterDescriptionBuilder.FeatureOption) {\n        this.addItem(this.m_linesToIgnore, options);\n    }\n\n    /**\n     * Ignore line features.\n     *\n     * @param options Multi feature options.\n     */\n    ignoreLines(options: OmvFeatureFilterDescriptionBuilder.MultiFeatureOption) {\n        this.addItems(this.m_linesToIgnore, options);\n    }\n\n    /**\n     * Add a valid polygon feature.\n     *\n     * @param options Feature options.\n     */\n    processPolygon(options: OmvFeatureFilterDescriptionBuilder.FeatureOption) {\n        this.addItem(this.m_polygonsToProcess, options);\n    }\n\n    /**\n     * Add valid polygon features.\n     *\n     * @param options Multi feature options.\n     */\n    processPolygons(options: OmvFeatureFilterDescriptionBuilder.MultiFeatureOption) {\n        this.addItems(this.m_polygonsToProcess, options);\n    }\n\n    /**\n     * Ignore a valid polygon feature.\n     *\n     * @param options Feature options.\n     */\n    ignorePolygon(options: OmvFeatureFilterDescriptionBuilder.FeatureOption) {\n        this.addItem(this.m_polygonsToIgnore, options);\n    }\n\n    /**\n     * Ignore polygon features.\n     *\n     * @param options Multi feature options.\n     */\n    ignorePolygons(options: OmvFeatureFilterDescriptionBuilder.MultiFeatureOption) {\n        this.addItems(this.m_polygonsToIgnore, options);\n    }\n\n    /**\n     * Add all the specified strings as \"enabledKinds\".\n     *\n     * @param {string[]} enabledKinds List of kinds that should be generated.\n     */\n    processKinds(enabledKinds: string[]) {\n        this.m_kindsToProcess = this.m_kindsToProcess.concat(enabledKinds);\n    }\n\n    /**\n     * Add all the specified strings as \"disabledKinds\".\n     *\n     * @param {string[]} disabledKinds List of kinds that should _not_ be generated.\n     */\n    ignoreKinds(disabledKinds: string[]) {\n        this.m_kindsToIgnore = this.m_kindsToIgnore.concat(disabledKinds);\n    }\n\n    /**\n     * Create a filter description that can be passed as an option to the [[OmvDataSource]].\n     */\n    createDescription(): OmvFeatureFilterDescription {\n        return {\n            processLayersDefault: this.m_processLayersDefault,\n            processPointsDefault: this.m_processPointsDefault,\n            processLinesDefault: this.m_processLinesDefault,\n            processPolygonsDefault: this.m_processPolygonsDefault,\n\n            layersToProcess: this.m_layersToProcess,\n            layersToIgnore: this.m_layersToIgnore,\n            pointsToProcess: this.m_pointsToProcess,\n            pointsToIgnore: this.m_ignoredPoints,\n            linesToProcess: this.m_linesToProcess,\n            linesToIgnore: this.m_linesToIgnore,\n            polygonsToProcess: this.m_polygonsToProcess,\n            polygonsToIgnore: this.m_polygonsToIgnore,\n\n            kindsToProcess: this.m_kindsToProcess,\n            kindsToIgnore: this.m_kindsToIgnore\n        };\n    }\n\n    private addItem(\n        items: OmvFilterDescription[],\n        options: OmvFeatureFilterDescriptionBuilder.FeatureOption\n    ) {\n        if (options.minLevel === undefined || isNaN(options.minLevel)) {\n            options.minLevel = 0;\n        }\n        if (options.maxLevel === undefined || isNaN(options.maxLevel)) {\n            options.maxLevel = Infinity;\n        }\n\n        const item: OmvFilterDescription = {\n            layerName: {\n                value: options.layer,\n                match:\n                    options.matchLayer === undefined\n                        ? OmvFilterString.StringMatch.Match\n                        : options.matchLayer\n            },\n            geometryTypes:\n                options.geomType !== undefined\n                    ? Array.isArray(options.geomType)\n                        ? options.geomType\n                        : [options.geomType]\n                    : undefined,\n            classes: [\n                {\n                    value: options.featureClass,\n                    match:\n                        options.matchClass === undefined\n                            ? OmvFilterString.StringMatch.Match\n                            : options.matchClass\n                }\n            ],\n            minLevel: options.minLevel,\n            maxLevel: options.maxLevel,\n            featureAttribute: options.featureAttribute\n        };\n\n        items.push(item);\n    }\n\n    private addItems(\n        items: OmvFilterDescription[],\n        options: OmvFeatureFilterDescriptionBuilder.MultiFeatureOption\n    ) {\n        if (options.minLevel === undefined || isNaN(options.minLevel)) {\n            options.minLevel = 0;\n        }\n        if (options.maxLevel === undefined || isNaN(options.maxLevel)) {\n            options.maxLevel = Infinity;\n        }\n\n        const item: OmvFilterDescription = {\n            layerName: {\n                value: options.layer,\n                match:\n                    options.matchLayer === undefined\n                        ? OmvFilterString.StringMatch.Match\n                        : options.matchLayer\n            },\n            geometryTypes:\n                options.geomTypes !== undefined\n                    ? Array.isArray(options.geomTypes)\n                        ? options.geomTypes\n                        : [options.geomTypes]\n                    : undefined,\n            classes: options.featureClasses,\n            minLevel: options.minLevel,\n            maxLevel: options.maxLevel,\n            featureAttribute: options.featureAttribute\n        };\n\n        items.push(item);\n    }\n}\n\nexport namespace OmvFeatureFilterDescriptionBuilder {\n    /**\n     * Options for `OmvFeatureFilterDescriptionBuilder`.\n     */\n    export interface OmvFeatureFilterDescriptionBuilderOptions {\n        /**\n         * If `true`, all unspecified layers will be processed. If `false`, all unspecified layers\n         * will be ignored.\n         */\n        processLayersDefault?: boolean;\n        /**\n         * If `true`, all unspecified point features will be processed. If `false`, all unspecified\n         * point features will be ignored.\n         */\n        processPointsDefault?: boolean;\n        /**\n         * If `true`, all unspecified line features will be processed. If `false`, all unspecified\n         * line\n         * features will be ignored.\n         */\n        processLinesDefault?: boolean;\n        /**\n         * If `true`, all unspecified polygon features will be processed. If `false`, all\n         * unspecified polygon features will be ignored.\n         */\n        processPolygonsDefault?: boolean;\n    }\n\n    /**\n     * Description of a single feature.\n     */\n    export interface FeatureOption {\n        /**\n         * Layer name to be matched.\n         */\n        layer: string;\n        /**\n         * Optional geometry type to be limited to. If specified, but does not match, the feature is\n         * ignored.\n         */\n        geomType: OmvGeometryType | OmvGeometryType[] | undefined;\n        /**\n         * Optional class to match. If specified, but does not match, the feature is ignored.\n         */\n        featureClass: string;\n        /**\n         * Match condition for the layer name.\n         */\n        matchLayer?: OmvFilterString.StringMatch;\n        /**\n         * Match condition for `featureClass`.\n         */\n        matchClass?: OmvFilterString.StringMatch;\n        /**\n         * Minimum tile level to match.\n         */\n        minLevel?: number;\n        /**\n         * Maximum tile level to match.\n         */\n        maxLevel?: number;\n        /**\n         * Feature attribute to match.\n         */\n        featureAttribute?: OmvFilterFeatureAttribute;\n    }\n\n    /**\n     * Description for multiple features.\n     */\n    export interface MultiFeatureOption {\n        /**\n         * Layer name to be matched.\n         */\n        layer: string;\n        /**\n         * Optional geometry type to be limited to. If specified, but does not match, the feature is\n         * ignored.\n         */\n        geomTypes?: OmvGeometryType | OmvGeometryType[] | undefined;\n        /**\n         * Optional classes to match. If specified, but does not match, the feature is ignored.\n         */\n        featureClasses?: OmvFilterString[];\n        /**\n         * Match condition for the layer name.\n         */\n        matchLayer?: OmvFilterString.StringMatch;\n        /**\n         * Minimum tile level to match.\n         */\n        minLevel?: number;\n        /**\n         * Maximum tile level to match.\n         */\n        maxLevel?: number;\n        /**\n         * Feature attribute to match.\n         */\n        featureAttribute?: OmvFilterFeatureAttribute;\n    }\n}\n\n/**\n * `OmvFeatureFilter` implementation that uses a `OmvFeatureFilterDescription` to filter `TileData`\n * features before they are completely decoded.\n *\n * @hidden\n */\nexport class OmvGenericFeatureFilter implements OmvFeatureFilter {\n    private static matchLayer(\n        layer: string,\n        layerItems: OmvLayerFilterDescription[],\n        level: number\n    ): boolean {\n        for (const layerItem of layerItems) {\n            if (level < layerItem.minLevel || level > layerItem.maxLevel) {\n                continue;\n            }\n\n            if (OmvFilterString.matchString(layer, layerItem.name)) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    private disabledKinds: GeometryKindSet | undefined;\n    private enabledKinds: GeometryKindSet | undefined;\n\n    constructor(private description: OmvFeatureFilterDescription) {\n        if (this.description.kindsToProcess.length > 0) {\n            this.enabledKinds = new GeometryKindSet(\n                this.description.kindsToProcess as GeometryKind[]\n            );\n        }\n        if (this.description.kindsToIgnore.length > 0) {\n            this.disabledKinds = new GeometryKindSet(\n                this.description.kindsToIgnore as GeometryKind[]\n            );\n        }\n    }\n\n    wantsLayer(layer: string, level: number): boolean {\n        if (OmvGenericFeatureFilter.matchLayer(layer, this.description.layersToProcess, level)) {\n            return true;\n        }\n\n        if (OmvGenericFeatureFilter.matchLayer(layer, this.description.layersToIgnore, level)) {\n            return false;\n        }\n\n        return this.description.processLayersDefault;\n    }\n\n    wantsPointFeature(layer: string, geometryType: OmvGeometryType, level: number): boolean {\n        return this.wantsFeature(\n            this.description.pointsToProcess,\n            this.description.pointsToIgnore,\n            layer,\n            geometryType,\n            level,\n            this.description.processPointsDefault\n        );\n    }\n\n    wantsLineFeature(layer: string, geometryType: OmvGeometryType, level: number): boolean {\n        return this.wantsFeature(\n            this.description.linesToProcess,\n            this.description.linesToIgnore,\n            layer,\n            geometryType,\n            level,\n            this.description.processLinesDefault\n        );\n    }\n\n    wantsPolygonFeature(layer: string, geometryType: OmvGeometryType, level: number): boolean {\n        return this.wantsFeature(\n            this.description.polygonsToProcess,\n            this.description.polygonsToIgnore,\n            layer,\n            geometryType,\n            level,\n            this.description.processPolygonsDefault\n        );\n    }\n\n    wantsKind(kind: string | string[]): boolean {\n        // undefined -> no way to filter\n        if (kind === undefined) {\n            return true;\n        }\n\n        return (\n            !(\n                this.disabledKinds !== undefined &&\n                this.disabledKinds.hasOrIntersects(kind as GeometryKind)\n            ) ||\n            (this.enabledKinds !== undefined &&\n                this.enabledKinds.hasOrIntersects(kind as GeometryKind))\n        );\n    }\n\n    get hasKindFilter(): boolean {\n        return this.enabledKinds !== undefined || this.disabledKinds !== undefined;\n    }\n\n    private wantsFeature(\n        itemsToProcess: OmvFilterDescription[],\n        itemsToIgnore: OmvFilterDescription[],\n        layer: string,\n        geometryType: OmvGeometryType,\n        level: number,\n        defaultResult: boolean\n    ): boolean {\n        for (const item of itemsToProcess) {\n            if (level < item.minLevel || level > item.maxLevel) {\n                continue;\n            }\n\n            if (!OmvFilterString.matchString(layer, item.layerName)) {\n                // this rule is not for this layer\n                continue;\n            }\n\n            if (item.geometryTypes !== undefined && item.geometryTypes.indexOf(geometryType) >= 0) {\n                return true;\n            }\n        }\n\n        for (const item of itemsToIgnore) {\n            if (!OmvFilterString.matchString(layer, item.layerName)) {\n                // this rule is not for this layer\n                continue;\n            }\n\n            if (item.geometryTypes !== undefined && item.geometryTypes.indexOf(geometryType) >= 0) {\n                return false;\n            }\n        }\n\n        return defaultResult;\n    }\n}\n\n/**\n * An [[OmvFeatureFilter]] implementation that delegates all filter decision\n * returning `true` for any predicate if all delegates return `true`.\n */\nexport class ComposedDataFilter implements OmvFeatureFilter {\n    constructor(readonly filters: OmvFeatureFilter[]) {}\n\n    get hasKindFilter() {\n        return this.filters.reduce<boolean>(\n            (result, filter) => result && filter.hasKindFilter,\n            true\n        );\n    }\n\n    wantsLayer(layer: string, level: number): boolean {\n        return this.filters.reduce<boolean>(\n            (result, filter) => result && filter.wantsLayer(layer, level),\n            true\n        );\n    }\n    wantsPointFeature(layer: string, geometryType: OmvGeometryType, level: number): boolean {\n        return this.filters.reduce<boolean>(\n            (result, filter) => result && filter.wantsPointFeature(layer, geometryType, level),\n            true\n        );\n    }\n    wantsLineFeature(layer: string, geometryType: OmvGeometryType, level: number): boolean {\n        return this.filters.reduce<boolean>(\n            (result, filter) => result && filter.wantsLineFeature(layer, geometryType, level),\n            true\n        );\n    }\n    wantsPolygonFeature(layer: string, geometryType: OmvGeometryType, level: number): boolean {\n        return this.filters.reduce<boolean>(\n            (result, filter) => result && filter.wantsPolygonFeature(layer, geometryType, level),\n            true\n        );\n    }\n    wantsKind(kind: string | string[]): boolean {\n        return this.filters.reduce<boolean>(\n            (result, filter) => result && filter.wantsKind(kind),\n            true\n        );\n    }\n}\n/**\n * `OmvFeatureModifier` implementation that uses a `OmvFeatureFilterDescription` to filter\n * `TileData` features before they are completely decoded.\n *\n * @hidden\n */\nexport class OmvGenericFeatureModifier implements OmvFeatureModifier {\n    static matchItems(\n        layerName: string,\n        featureClass: string,\n        items: OmvFilterDescription[]\n    ): boolean {\n        for (const item of items) {\n            if (item.classes !== undefined) {\n                if (!OmvFilterString.matchString(layerName, item.layerName)) {\n                    continue;\n                }\n                for (const matchClass of item.classes) {\n                    if (OmvFilterString.matchString(featureClass, matchClass)) {\n                        return true;\n                    }\n                }\n            }\n        }\n        return false;\n    }\n\n    static matchAttribute(layerName: string, env: MapEnv, items: OmvFilterDescription[]): boolean {\n        for (const item of items) {\n            if (item.featureAttribute !== undefined) {\n                if (\n                    OmvFilterString.matchString(layerName, item.layerName) &&\n                    env.lookup(item.featureAttribute.key) === item.featureAttribute.value\n                ) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n\n    constructor(private description: OmvFeatureFilterDescription) {}\n\n    doProcessPointFeature(layer: string, env: MapEnv): boolean {\n        return this.doProcessFeature(\n            this.description.pointsToProcess,\n            this.description.pointsToIgnore,\n            layer,\n            env,\n            this.description.processPointsDefault\n        );\n    }\n\n    doProcessLineFeature(layer: string, env: MapEnv): boolean {\n        return this.doProcessFeature(\n            this.description.linesToProcess,\n            this.description.linesToIgnore,\n            layer,\n            env,\n            this.description.processLinesDefault\n        );\n    }\n\n    doProcessPolygonFeature(layer: string, env: MapEnv): boolean {\n        return this.doProcessFeature(\n            this.description.polygonsToProcess,\n            this.description.polygonsToIgnore,\n            layer,\n            env,\n            this.description.processPolygonsDefault\n        );\n    }\n\n    protected doProcessFeature(\n        itemsToProcess: OmvFilterDescription[],\n        itemsToIgnore: OmvFilterDescription[],\n        layer: string,\n        env: MapEnv,\n        defaultResult: boolean\n    ): boolean {\n        if (layer === undefined || (itemsToProcess.length === 0 && itemsToIgnore.length === 0)) {\n            return defaultResult;\n        }\n\n        let featureClass: string | undefined;\n        const featureClassThing = env.lookup(\"class\");\n\n        if (featureClassThing !== undefined && featureClassThing !== null) {\n            featureClass = featureClassThing.toString();\n        }\n\n        if (\n            featureClass &&\n            OmvGenericFeatureModifier.matchItems(layer, featureClass, itemsToProcess)\n        ) {\n            return true;\n        }\n\n        if (\n            featureClass &&\n            OmvGenericFeatureModifier.matchItems(layer, featureClass, itemsToIgnore)\n        ) {\n            return false;\n        }\n\n        if (OmvGenericFeatureModifier.matchAttribute(layer, env, itemsToProcess)) {\n            return true;\n        }\n\n        if (OmvGenericFeatureModifier.matchAttribute(layer, env, itemsToIgnore)) {\n            return false;\n        }\n\n        return defaultResult;\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport {\n    AttributeMap,\n    Definitions,\n    GeometryType,\n    ITileDecoder,\n    OptionsMap,\n    StyleSet,\n    WorkerServiceProtocol\n} from \"@here/harp-datasource-protocol\";\nimport { EarthConstants, TileKey, webMercatorTilingScheme } from \"@here/harp-geoutils\";\nimport { LineGroup } from \"@here/harp-lines\";\nimport { CopyrightInfo, CopyrightProvider, DataSourceOptions } from \"@here/harp-mapview\";\nimport { DataProvider, TileDataSource, TileFactory } from \"@here/harp-mapview-decoder\";\nimport { getOptionValue, LoggerManager } from \"@here/harp-utils\";\nimport {\n    FeatureModifierId,\n    OMV_TILE_DECODER_SERVICE_TYPE,\n    OmvDecoderOptions,\n    OmvFeatureFilterDescription\n} from \"./OmvDecoderDefs\";\nimport { OmvRestClient, OmvRestClientParameters } from \"./OmvRestClient\";\nimport { OmvTile } from \"./OmvTile\";\n\nconst logger = LoggerManager.instance.create(\"OmvDataSource\");\n\nexport interface LinesGeometry {\n    type: GeometryType;\n    lines: LineGroup;\n    technique: number;\n\n    /**\n     * Optional array of objects. It can be used to pass user data from the geometry to the mesh.\n     */\n    objInfos?: AttributeMap[];\n\n    /**\n     * Optional list of feature start indices. The indices point into the index attribute.\n     */\n    featureStarts?: number[];\n}\n\nexport interface OmvTileFactory {\n    /** Create an instance of [[OmvTile]] or a subclass. */\n    createTile(dataSource: OmvDataSource, tileKey: TileKey): OmvTile;\n}\n\nexport interface OmvDataSourceParameters extends DataSourceOptions {\n    /**\n     * If set to `true`, features that have no technique in the theme will be printed to the console\n     * (can be excessive!).\n     */\n    showMissingTechniques?: boolean;\n\n    /**\n     * @deprecated Tile info is not decoded anymore. The same information can be generated\n     * implementing a [[IGeometryProcessor]] and using [[OmvProtobufDataAdapter]] to decode OMV\n     * data.\n     */\n    createTileInfo?: boolean;\n\n    /**\n     * Specify the decoder that should be used. If not supplied, the default will be used.\n     */\n    decoder?: ITileDecoder;\n\n    /**\n     * Optionally specify the DataProvider that should be used.\n     */\n    dataProvider?: DataProvider;\n\n    /**\n     * Specify the URL to the decoder bundle. If not supplied, the default will be used.\n     */\n    concurrentDecoderScriptUrl?: string;\n\n    /**\n     * Gather feature IDs from `OmvData`. Defaults to `false`.\n     * @deprecated, FeatureIds are always gathered, use [[gatherFeatureAttributes]] to gather\n     * all feature attributes.\n     */\n    gatherFeatureIds?: boolean;\n\n    /**\n     * Gather feature attributes from `OmvData`. Defaults to `false`.\n     */\n    gatherFeatureAttributes?: boolean;\n\n    /**\n     * @deprecated Tile info is not decoded anymore. The same information can be generated\n     * implementing a [[IGeometryProcessor]] and using [[OmvProtobufDataAdapter]] to decode OMV\n     * data.\n     */\n    gatherRoadSegments?: boolean;\n\n    /**\n     * If not set to `false`, very short text labels will be skipped during decoding based on a\n     * heuristic.\n     */\n    skipShortLabels?: boolean;\n\n    /**\n     * A description for the feature filter that can be safely passed down to the web workers. It\n     * has to be generated with the help of the [[OmvFeatureFilterDescriptionBuilder]] (to guarantee\n     * correctness). This parameter gets applied to the decoder used in the [[OmvDataSource]]\n     * which might be shared between various [[OmvDataSource]]s.\n     */\n    filterDescr?: OmvFeatureFilterDescription;\n\n    /**\n     * Optional, custom factory for [[Tile]] instances created by this [[OmvDataSource]].\n     */\n    tileFactory?: TileFactory<OmvTile>;\n\n    /**\n     * Identifier used to choose OmvFeatureModifier, if undefined [[OmvGenericFeatureModifier]] is\n     * used. This parameter gets applied to the decoder used in the [[OmvDataSource]] which might\n     * be shared between various [[OmvDataSource]]s.\n     */\n    featureModifierId?: FeatureModifierId;\n\n    /**\n     * Optional, default copyright information of tiles provided by this data source.\n     * Implementation should provide this information from the source data if possible.\n     */\n    copyrightInfo?: CopyrightInfo[];\n\n    /**\n     * Optional copyright info provider for tiles provided by this data source.\n     */\n    copyrightProvider?: CopyrightProvider;\n\n    /**\n     * Maximum geometry height above groud level this `OmvDataSource` can produce.\n     *\n     * Used in first stage of frustum culling before [[Tile.maxGeometryHeight]] data is available.\n     *\n     * @default [[EarthConstants.MAX_BUILDING_HEIGHT]].\n     */\n    maxGeometryHeight?: number;\n\n    /**\n     * Indicates whether overlay on elevation is enabled. Defaults to `false`.\n     */\n    enableElevationOverlay?: boolean;\n\n    /**\n     * Indicates whether to add a ground plane to cover the tile completely. This is necessary for\n     * the fallback logic, such that the parent fall back tiles don't overlap the children tiles.\n     * Default is true (i.e. if not defined it is taken to be true)\n     */\n    addGroundPlane?: boolean;\n}\n\n/**\n * A helper function to retrieve the [[DataProvider]] from the [[OmvDataSource]]s parameters.\n *\n * @param params The parameters passed into the OmvDataSource.\n */\nfunction getDataProvider(params: OmvWithRestClientParams | OmvWithCustomDataProvider) {\n    if ((params as OmvWithCustomDataProvider).dataProvider) {\n        return (params as OmvWithCustomDataProvider).dataProvider;\n    } else if (\n        (params as OmvWithRestClientParams).baseUrl ||\n        (params as OmvWithRestClientParams).url\n    ) {\n        return new OmvRestClient(params as OmvRestClientParameters);\n    } else {\n        throw new Error(\"OmvDataSource: missing url, baseUrl or dataProvider params\");\n    }\n}\n\nexport type OmvWithRestClientParams = OmvRestClientParameters & OmvDataSourceParameters;\nexport type OmvWithCustomDataProvider = OmvDataSourceParameters & { dataProvider: DataProvider };\n\nlet missingOmvDecoderServiceInfoEmitted: boolean = false;\n\nexport class OmvDataSource extends TileDataSource<OmvTile> {\n    private readonly m_decoderOptions: OmvDecoderOptions;\n\n    constructor(private m_params: OmvWithRestClientParams | OmvWithCustomDataProvider) {\n        super(m_params.tileFactory || new TileFactory(OmvTile), {\n            styleSetName: m_params.styleSetName || \"omv\",\n            name: m_params.name,\n            tilingScheme: webMercatorTilingScheme,\n            dataProvider: getDataProvider(m_params),\n            concurrentDecoderServiceName: OMV_TILE_DECODER_SERVICE_TYPE,\n            decoder: m_params.decoder,\n            concurrentDecoderScriptUrl: m_params.concurrentDecoderScriptUrl,\n            copyrightInfo: m_params.copyrightInfo,\n            copyrightProvider: m_params.copyrightProvider,\n            // tslint:disable-next-line: deprecation\n            minZoomLevel: m_params.minZoomLevel,\n            // tslint:disable-next-line: deprecation\n            maxZoomLevel: m_params.maxZoomLevel,\n            minDataLevel: getOptionValue(m_params.minDataLevel, 1),\n            maxDataLevel: getOptionValue(m_params.maxDataLevel, 17),\n            minDisplayLevel: m_params.minDisplayLevel,\n            maxDisplayLevel: m_params.maxDisplayLevel,\n            storageLevelOffset: getOptionValue(m_params.storageLevelOffset, -1)\n        });\n\n        this.cacheable = true;\n        this.addGroundPlane =\n            m_params.addGroundPlane === undefined || m_params.addGroundPlane === true;\n\n        this.m_decoderOptions = {\n            showMissingTechniques: this.m_params.showMissingTechniques === true,\n            filterDescription: this.m_params.filterDescr,\n            gatherFeatureAttributes: this.m_params.gatherFeatureAttributes === true,\n            featureModifierId: this.m_params.featureModifierId,\n            skipShortLabels: this.m_params.skipShortLabels,\n            storageLevelOffset: getOptionValue(m_params.storageLevelOffset, -1),\n            enableElevationOverlay: this.m_params.enableElevationOverlay === true\n        };\n\n        this.maxGeometryHeight = getOptionValue(\n            m_params.maxGeometryHeight,\n            EarthConstants.MAX_BUILDING_HEIGHT\n        );\n    }\n\n    /** @override */\n    async connect() {\n        try {\n            await super.connect();\n        } catch (error) {\n            if (\n                WorkerServiceProtocol.isUnknownServiceError(error) &&\n                !missingOmvDecoderServiceInfoEmitted\n            ) {\n                logger.info(\n                    \"Unable to create decoder service in worker. Use \" +\n                        \" 'OmvTileDecoderService.start();' in decoder script.\"\n                );\n                missingOmvDecoderServiceInfoEmitted = true;\n            }\n            throw error;\n        }\n        this.configureDecoder(undefined, undefined, undefined, this.m_decoderOptions);\n    }\n\n    /**\n     * Remove the current data filter.\n     * Will be applied to the decoder, which might be shared with other omv datasources.\n     */\n    removeDataFilter(): void {\n        this.configureDecoder(undefined, undefined, undefined, {\n            filterDescription: null\n        });\n    }\n\n    /**\n     * Set a new data filter. Can also be done during the creation of an [[OmvDataSource]].\n     * Will be applied to the decoder, which might be shared with other omv datasources.\n     *\n     * @param filterDescription Data filter description created with\n     * [[OmvFeatureFilterDescriptionBuilder]].\n     */\n    setDataFilter(filterDescription: OmvFeatureFilterDescription): void {\n        this.m_decoderOptions.filterDescription =\n            filterDescription !== null ? filterDescription : undefined;\n\n        this.configureDecoder(undefined, undefined, undefined, {\n            filterDescription\n        });\n    }\n\n    /** @override */\n    shouldPreloadTiles(): boolean {\n        return true;\n    }\n\n    /** @override */\n    setLanguages(languages?: string[]): void {\n        if (languages !== undefined) {\n            this.configureDecoder(undefined, undefined, languages, undefined);\n        }\n    }\n\n    /** @override */\n    get storageLevelOffset() {\n        return super.storageLevelOffset;\n    }\n\n    /** @override */\n    set storageLevelOffset(levelOffset: number) {\n        super.storageLevelOffset = levelOffset;\n        this.m_decoderOptions.storageLevelOffset = this.storageLevelOffset;\n        this.configureDecoder(undefined, undefined, undefined, {\n            storageLevelOffset: this.storageLevelOffset\n        });\n    }\n\n    /** @override */\n    setEnableElevationOverlay(enable: boolean) {\n        if (this.m_decoderOptions.enableElevationOverlay !== enable) {\n            this.m_decoderOptions.enableElevationOverlay = enable;\n            this.configureDecoder(undefined, undefined, undefined, {\n                enableElevationOverlay: enable\n            });\n        }\n    }\n\n    private configureDecoder(\n        styleSet?: StyleSet,\n        definitions?: Definitions,\n        languages?: string[],\n        options?: OptionsMap\n    ) {\n        this.clearCache();\n        this.decoder.configure(styleSet, definitions, languages, options);\n        this.mapView.markTilesDirty(this);\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nexport * from \"./lib/DataProvider\";\nexport * from \"./lib/TileDataSource\";\nexport * from \"./lib/TileLoader\";\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport {\n    Definitions,\n    ITileDecoder,\n    StyleSet,\n    Theme,\n    TileInfo\n} from \"@here/harp-datasource-protocol\";\nimport { TileKey, TilingScheme } from \"@here/harp-geoutils\";\nimport {\n    ConcurrentDecoderFacade,\n    CopyrightInfo,\n    CopyrightProvider,\n    DataSource,\n    DataSourceOptions,\n    Tile,\n    TileLoaderState\n} from \"@here/harp-mapview\";\nimport { LoggerManager } from \"@here/harp-utils\";\nimport { DataProvider } from \"./DataProvider\";\nimport { TileInfoLoader, TileLoader } from \"./TileLoader\";\n\n/**\n * Set of common options for all [[TileDataSource]]s.\n */\nexport interface TileDataSourceOptions extends DataSourceOptions {\n    /**\n     * The [[TilingScheme]] the data source is using.\n     */\n    tilingScheme: TilingScheme;\n\n    /**\n     * The [[DataProvider]] to use for downloading the actual data.\n     */\n    dataProvider: DataProvider;\n\n    /**\n     * Optional: Specify [[ITileDecoder]] instance.\n     */\n    decoder?: ITileDecoder;\n\n    /**\n     * Optional name of decoder service class.\n     * @see [[ConcurrentDecoderFacade]]\n     * @see [[ConcurrentWorkerSet]]\n     */\n    concurrentDecoderServiceName?: string;\n\n    /**\n     * Optional URL for decoder bundle to be loaded into web worker.\n     */\n    concurrentDecoderScriptUrl?: string;\n\n    /**\n     * Optional count of web workers to use with the decoder bundle.\n     */\n    concurrentDecoderWorkerCount?: number;\n\n    /**\n     * Optional, default copyright information of tiles provided by this data source.\n     * Implementation should provide this information from the source data if possible.\n     */\n    copyrightInfo?: CopyrightInfo[];\n\n    /**\n     * Optional copyright info provider for tiles provided by this data source. Copyrights from\n     * provider are concatenated with default ones from `copyrightInfo`.\n     */\n    copyrightProvider?: CopyrightProvider;\n}\n\n/**\n * Templated factory class to create instances of [[Tile]].\n */\nexport class TileFactory<TileType extends Tile> {\n    /**\n     * Initialize the factory using the constructor of the element to be called when a [[Tile]] is\n     * created.\n     *\n     * @param m_modelConstructor Constructor of (subclass of) [[Tile]].\n     */\n    constructor(\n        private m_modelConstructor: new (dataSource: DataSource, tileKey: TileKey) => TileType\n    ) {}\n\n    /**\n     * Create an instance of (subclass of) [[Tile]]. The required parameters are passed as arguments\n     * to the constructor of [[Tile]].\n     *\n     * @param dataSource [[Datasource]] this class belongs to.\n     * @param tileKey Quadtree address of the [[Tile]].\n     */\n    create(dataSource: DataSource, tileKey: TileKey): TileType {\n        return new this.m_modelConstructor(dataSource, tileKey);\n    }\n}\n\n/**\n * Common base class for the typical [[DataSource]] which uses an [[ITileDecoder]] to decode the\n * tile content asynchronously. The decoder can be passed in as an option, or a default\n * asynchronous one is generated.\n */\nexport class TileDataSource<TileType extends Tile> extends DataSource {\n    protected readonly logger = LoggerManager.instance.create(\"TileDataSource\");\n    protected readonly m_decoder: ITileDecoder;\n    private m_isReady: boolean = false;\n\n    /**\n     * Set up the `TileDataSource`.\n     *\n     * @param m_tileFactory Factory to create the [[Tile]] instances.\n     * @param m_options Options specifying the parameters of the [[DataSource]].\n     */\n    constructor(\n        private readonly m_tileFactory: TileFactory<TileType>,\n        private readonly m_options: TileDataSourceOptions\n    ) {\n        super({\n            name: m_options.name,\n            styleSetName: m_options.styleSetName,\n            // tslint:disable-next-line: deprecation\n            minZoomLevel: m_options.minZoomLevel,\n            // tslint:disable-next-line: deprecation\n            maxZoomLevel: m_options.maxZoomLevel,\n            minDataLevel: m_options.minDataLevel,\n            maxDataLevel: m_options.maxDataLevel,\n            minDisplayLevel: m_options.minDisplayLevel,\n            maxDisplayLevel: m_options.maxDisplayLevel,\n            storageLevelOffset: m_options.storageLevelOffset\n        });\n        if (m_options.decoder) {\n            this.m_decoder = m_options.decoder;\n        } else if (m_options.concurrentDecoderServiceName) {\n            this.m_decoder = ConcurrentDecoderFacade.getTileDecoder(\n                m_options.concurrentDecoderServiceName,\n                m_options.concurrentDecoderScriptUrl,\n                m_options.concurrentDecoderWorkerCount\n            );\n        } else {\n            throw new Error(\n                `TileDataSource[${this.name}]: unable to create, missing decoder or ` +\n                    `concurrentDecoderServiceName`\n            );\n        }\n        this.useGeometryLoader = true;\n        this.cacheable = true;\n    }\n\n    /** @override */\n    dispose() {\n        this.decoder.dispose();\n    }\n\n    /** @override */\n    ready(): boolean {\n        return this.m_isReady && this.m_options.dataProvider.ready();\n    }\n\n    /**\n     * Get the [[ITileDecoder]] of this `ITileDataSource`, which has either been passed in with\n     * the options, or has been supplied by the [[ConcurrentDecoderFacade]].\n     */\n    get decoder(): ITileDecoder {\n        return this.m_decoder;\n    }\n\n    /** @override */\n    async connect() {\n        await Promise.all([this.m_options.dataProvider.connect(), this.m_decoder.connect()]);\n        this.m_isReady = true;\n\n        this.m_decoder.configure(undefined, undefined, undefined, {\n            storageLevelOffset: this.m_options.storageLevelOffset\n        });\n    }\n\n    /** @override */\n    setStyleSet(styleSet?: StyleSet, definitions?: Definitions, languages?: string[]): void {\n        this.m_decoder.configure(styleSet, definitions, languages);\n        this.mapView.markTilesDirty(this);\n    }\n\n    /**\n     * Apply the [[Theme]] to this data source.\n     *\n     * Applies new [[StyleSet]] and definitions from theme only if matching styleset (see\n     * `styleSetName` property) is found in `theme`.\n     * @override\n     */\n    setTheme(theme: Theme, languages?: string[]): void {\n        const styleSet =\n            this.styleSetName !== undefined && theme.styles\n                ? theme.styles[this.styleSetName]\n                : undefined;\n\n        if (styleSet !== undefined) {\n            this.setStyleSet(styleSet, theme.definitions, languages);\n        }\n    }\n\n    /**\n     * Get the [[DataProvider]] that has been passed in with the options.\n     */\n    dataProvider(): DataProvider {\n        return this.m_options.dataProvider;\n    }\n\n    /** @override */\n    getTilingScheme(): TilingScheme {\n        return this.m_options.tilingScheme;\n    }\n\n    /**\n     * Create a [[Tile]] and start the asynchronous download of the tile content. The [[Tile]] will\n     * be empty, but the download and decoding will be scheduled immediately. [[Tile]] instance is\n     * initialized with default copyrights, concatenated with copyrights from copyright provider of\n     * this data source.\n     *\n     * @param tileKey Quadtree address of the requested tile.\n     * @override\n     */\n    getTile(tileKey: TileKey): TileType | undefined {\n        const tile = this.m_tileFactory.create(this, tileKey);\n        tile.tileLoader = new TileLoader(\n            this,\n            tileKey,\n            this.m_options.dataProvider,\n            this.decoder,\n            0\n        );\n        tile.copyrightInfo = this.m_options.copyrightInfo;\n        if (this.m_options.copyrightProvider !== undefined) {\n            this.m_options.copyrightProvider\n                .getCopyrights(tile.geoBox, tileKey.level)\n                .then(copyrightInfo => {\n                    tile.copyrightInfo =\n                        tile.copyrightInfo === undefined\n                            ? copyrightInfo\n                            : [...tile.copyrightInfo, ...copyrightInfo];\n                    this.requestUpdate();\n                });\n        }\n        tile.load();\n\n        return tile;\n    }\n\n    /**\n     * Get [[TileInfo]] of a tile.\n     *\n     * @param tileKey Quadtree address of the requested tile.\n     * @returns A promise which will contain the [[TileInfo]] when resolved.\n     */\n    getTileInfo(tileKey: TileKey): Promise<TileInfo | undefined> {\n        const promise = new Promise<TileInfo | undefined>((resolve, reject) => {\n            const tileLoader = new TileInfoLoader(\n                this,\n                tileKey,\n                this.m_options.dataProvider,\n                this.decoder,\n                0\n            );\n\n            tileLoader.loadAndDecode().then(loaderState => {\n                if (loaderState === TileLoaderState.Ready) {\n                    resolve(tileLoader.tileInfo);\n                } else {\n                    reject(\n                        new Error(`TileDataSource#getInfoTile wrong final state: ${loaderState}`)\n                    );\n                }\n            });\n        });\n\n        return promise;\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\nimport { getPropertyValue, isTextTechnique } from \"@here/harp-datasource-protocol\";\nimport { TileKey } from \"@here/harp-geoutils/lib/tiling/TileKey\";\nimport { DataSource, TextElement } from \"@here/harp-mapview\";\nimport { debugContext } from \"@here/harp-mapview/lib/DebugContext\";\nimport {\n    ContextualArabicConverter,\n    FontUnit,\n    TextLayoutStyle,\n    TextRenderStyle\n} from \"@here/harp-text-canvas\";\nimport * as THREE from \"three\";\n\nimport { TileGeometryCreator } from \"@here/harp-mapview/lib/geometry/TileGeometryCreator\";\nimport { OmvTile } from \"./OmvTile\";\n\nconst debugMaterial = new THREE.LineBasicMaterial({\n    color: 0x000000,\n    linewidth: 2,\n    depthTest: false,\n    depthFunc: THREE.NeverDepth\n});\n\nconst debugCircleMaterial = new THREE.MeshBasicMaterial({\n    color: 0xff0000,\n    depthTest: false,\n    depthFunc: THREE.NeverDepth\n});\n\nconst debugCircleMaterialWF = new THREE.MeshBasicMaterial({\n    color: 0xff0000,\n    depthTest: false,\n    depthFunc: THREE.NeverDepth\n});\ndebugCircleMaterialWF.wireframe = true;\n\nconst debugCircleMaterial2WF = new THREE.MeshBasicMaterial({\n    color: 0x8080ff,\n    depthTest: false,\n    depthFunc: THREE.NeverDepth\n});\ndebugCircleMaterial2WF.wireframe = true;\n\nconst debugBlackCircleMaterial = new THREE.MeshBasicMaterial({\n    color: 0x000000,\n    depthTest: false,\n    depthFunc: THREE.NeverDepth\n});\n\nconst textRenderStyle = new TextRenderStyle();\nconst textLayoutStyle = new TextLayoutStyle();\n\ntextRenderStyle.fontSize = {\n    unit: FontUnit.Point,\n    size: 9,\n    backgroundSize: 0\n};\ntextRenderStyle.opacity = 0.75;\ntextRenderStyle.backgroundOpacity = 0.75;\n\nexport class OmvDebugLabelsTile extends OmvTile {\n    constructor(dataSource: DataSource, tileKey: TileKey) {\n        super(dataSource, tileKey);\n    }\n\n    /** @override */\n    loadingFinished() {\n        this.addLabelDebugInfo();\n    }\n\n    /**\n     * Create [[TextElement]] objects from the given decoded [[Tile]] and list of materials.\n     */\n    private addLabelDebugInfo() {\n        // activate in the browser with:\n        // window.__debugContext.setValue(\"DEBUG_TEXT_PATHS\", true)\n        const debugTextPaths = debugContext.getValue(\"DEBUG_TEXT_PATHS\");\n        const debugTextPathsFull = debugContext.getValue(\"DEBUG_TEXT_PATHS_FULL\");\n\n        if (!(debugTextPaths || debugTextPathsFull) || this.decodedTile === undefined) {\n            return;\n        }\n\n        const tileGeometryCreator = TileGeometryCreator.instance;\n        const decodedTile = this.decodedTile!;\n\n        tileGeometryCreator.createTextElements(this, decodedTile);\n\n        const colorMap = new Map<number, THREE.Color>();\n\n        // allow limiting to specific names and/or index. There can be many paths with the same text\n        const textFilter = debugContext.getValue(\"DEBUG_TEXT_PATHS.FILTER.TEXT\");\n        const indexFilter = debugContext.getValue(\"DEBUG_TEXT_PATHS.FILTER.INDEX\");\n        const env = this.mapView.env;\n\n        if (decodedTile.textPathGeometries !== undefined) {\n            this.preparedTextPaths = tileGeometryCreator.prepareTextPaths(\n                decodedTile.textPathGeometries,\n                decodedTile\n            );\n        }\n\n        if (this.preparedTextPaths !== undefined) {\n            const lineGeometry = new THREE.BufferGeometry();\n            const lineIndices = new Array<number>();\n            const linePositions = new Array<number>();\n\n            const redPointGeometry = new THREE.BufferGeometry();\n            const redPointIndices = new Array<number>();\n            const redPointPositions = new Array<number>();\n\n            const blackPointGeometry = new THREE.BufferGeometry();\n            const blackPointIndices = new Array<number>();\n            const blackPointPositions = new Array<number>();\n\n            let baseVertex = 0;\n            const pointScale = this.mapView.pixelToWorld;\n            const worldOffsetX = this.computeWorldOffsetX();\n\n            for (const textPath of this.preparedTextPaths) {\n                const technique = decodedTile.techniques[textPath.technique];\n                if (!isTextTechnique(technique)) {\n                    continue;\n                }\n                if (technique.color !== undefined) {\n                    colorMap.set(\n                        textPath.technique,\n                        new THREE.Color(getPropertyValue(technique.color, env))\n                    );\n                }\n\n                baseVertex = linePositions.length / 3;\n\n                const text = textPath.text;\n\n                const elementIndex = this.preparedTextPaths.indexOf(textPath);\n\n                const createDebugInfo =\n                    (!textFilter || (text && text.indexOf(textFilter) >= 0)) &&\n                    (indexFilter === undefined || indexFilter === elementIndex);\n\n                if (createDebugInfo) {\n                    for (let i = 0; i < textPath.path.length; i += 3) {\n                        const pathIndex = i / 3;\n                        const x = textPath.path[i];\n                        const y = textPath.path[i + 1];\n                        // raise it a bit, so we get identify connectivity visually by tilting\n                        const z = textPath.path[i + 2] + i / 3;\n\n                        if (debugTextPaths) {\n                            linePositions.push(x, y, z);\n                        }\n\n                        const isRedPoint = i === 0;\n\n                        if (debugTextPathsFull || isRedPoint) {\n                            const pointSize = pointScale * (isRedPoint ? 6 : 4);\n\n                            const positions = isRedPoint ? redPointPositions : blackPointPositions;\n                            const indices = isRedPoint ? redPointIndices : blackPointIndices;\n\n                            positions.push(x, y - pointSize, z);\n                            positions.push(x + pointSize, y, z);\n                            positions.push(x, y + pointSize, z);\n                            positions.push(x - pointSize, y, z);\n\n                            const pointIndex = positions.length / 3;\n\n                            indices.push(pointIndex - 4);\n                            indices.push(pointIndex - 3);\n                            indices.push(pointIndex - 2);\n                            indices.push(pointIndex - 4);\n                            indices.push(pointIndex - 2);\n                            indices.push(pointIndex - 1);\n\n                            if (debugTextPathsFull) {\n                                // give point index a label\n                                const label: string =\n                                    pathIndex % 5 === 0\n                                        ? text + \":\" + pathIndex\n                                        : Number(pathIndex).toString();\n                                const labelElement = new TextElement(\n                                    ContextualArabicConverter.instance.convert(label),\n                                    new THREE.Vector3(x + worldOffsetX, y, z),\n                                    textRenderStyle,\n                                    textLayoutStyle,\n                                    getPropertyValue(technique.priority || 0, env),\n                                    technique.xOffset || 0.0,\n                                    technique.yOffset || 0.0\n                                );\n                                labelElement.minZoomLevel = technique.minZoomLevel;\n                                labelElement.mayOverlap = true;\n                                labelElement.reserveSpace = false;\n                                labelElement.alwaysOnTop = true;\n                                labelElement.ignoreDistance = true;\n                                labelElement.priority = TextElement.HIGHEST_PRIORITY;\n                                this.addTextElement(labelElement);\n                            }\n                        }\n                    }\n\n                    // the lines of a path share a common geometry\n                    const N = textPath.path.length / 3;\n                    for (let i = 0; i < N; ++i) {\n                        if (i > 0) {\n                            lineIndices.push(baseVertex + i);\n                        }\n                        if (i + 1 < N) {\n                            lineIndices.push(baseVertex + i);\n                        }\n                    }\n                }\n            }\n\n            if (lineIndices.length > 0) {\n                lineGeometry.addGroup(0, lineIndices.length, 0);\n\n                lineGeometry.setAttribute(\n                    \"position\",\n                    new THREE.BufferAttribute(new Float32Array(linePositions), 3)\n                );\n\n                lineGeometry.setIndex(new THREE.BufferAttribute(new Uint32Array(lineIndices), 1));\n                const lineMesh = new THREE.LineSegments(lineGeometry, debugMaterial);\n                lineMesh.renderOrder = 2000;\n                this.objects.push(lineMesh);\n            }\n\n            if (redPointIndices.length > 0) {\n                redPointGeometry.addGroup(0, redPointIndices.length, 0);\n\n                redPointGeometry.setAttribute(\n                    \"position\",\n                    new THREE.BufferAttribute(new Float32Array(redPointPositions), 3)\n                );\n\n                redPointGeometry.setIndex(\n                    new THREE.BufferAttribute(new Uint32Array(redPointIndices), 1)\n                );\n                const redPointMesh = new THREE.Mesh(redPointGeometry, debugCircleMaterial);\n                redPointMesh.renderOrder = 3000;\n                this.objects.push(redPointMesh);\n            }\n\n            if (blackPointIndices.length > 0) {\n                blackPointGeometry.addGroup(0, blackPointIndices.length, 0);\n\n                blackPointGeometry.setAttribute(\n                    \"position\",\n                    new THREE.BufferAttribute(new Float32Array(blackPointPositions), 3)\n                );\n\n                blackPointGeometry.setIndex(\n                    new THREE.BufferAttribute(new Uint32Array(blackPointIndices), 1)\n                );\n                const blackPointMesh = new THREE.Mesh(blackPointGeometry, debugBlackCircleMaterial);\n                blackPointMesh.renderOrder = 2500;\n                this.objects.push(blackPointMesh);\n            }\n        }\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { GeoJson, ITiler, WorkerServiceProtocol } from \"@here/harp-datasource-protocol\";\nimport \"@here/harp-fetch\";\nimport { TileKey } from \"@here/harp-geoutils\";\nimport { ConcurrentTilerFacade } from \"@here/harp-mapview\";\nimport { DataProvider } from \"@here/harp-mapview-decoder\";\nimport { LoggerManager } from \"@here/harp-utils\";\n\nconst logger = LoggerManager.instance.create(\"GeoJsonDataProvider\");\n\nexport interface GeoJsonDataProviderOptions {\n    /**\n     * Worker script hosting [[Tiler Service]]\n     * @default `./decoder.bundle.ts`\n     */\n    workerTilerUrl?: string;\n\n    /**\n     * Custom tiler instance.\n     * If not provided, [[GeoJsonDataProvider]] will obtain [[WorkerBasedTiler]]\n     * from [[ConcurrentTilerFacade]].\n     */\n    tiler?: ITiler;\n}\n\nlet missingTilerServiceInfoEmitted: boolean = false;\n\n/**\n * GeoJson [[DataProvider]]. Automatically handles tiling and simplification of static GeoJson.\n */\nexport class GeoJsonDataProvider implements DataProvider {\n    private m_tiler: ITiler;\n    private m_registered = false;\n\n    /**\n     * Constructs a new `GeoJsonDataProvider`.\n     *\n     * @param name Name to be used to reference this `DataProvider`\n     * @param input URL of the GeoJSON, or a GeoJSON.\n     * @param options Optional\n     * @returns New `GeoJsonDataProvider`.\n     */\n    constructor(\n        readonly name: string,\n        public input: URL | GeoJson,\n        options?: GeoJsonDataProviderOptions\n    ) {\n        this.m_tiler =\n            (options && options.tiler) ||\n            ConcurrentTilerFacade.getTiler(\"omv-tiler\", options && options.workerTilerUrl);\n    }\n\n    async connect(): Promise<void> {\n        try {\n            await this.m_tiler.connect();\n        } catch (error) {\n            if (\n                WorkerServiceProtocol.isUnknownServiceError(error) &&\n                !missingTilerServiceInfoEmitted\n            ) {\n                logger.info(\n                    \"Unable to start GeoJson tiler service in worker. Use \" +\n                        \" 'OmvTilerService.start();' in decoder script.\"\n                );\n                missingTilerServiceInfoEmitted = true;\n            }\n            throw error;\n        }\n\n        await this.m_tiler.registerIndex(this.name, this.input);\n        this.m_registered = true;\n    }\n\n    updateInput(input: URL | GeoJson) {\n        this.input = input;\n        this.m_tiler.updateIndex(this.name, this.input);\n    }\n\n    ready(): boolean {\n        return this.m_registered;\n    }\n\n    async getTile(tileKey: TileKey): Promise<{}> {\n        return this.m_tiler.getTile(this.name, tileKey);\n    }\n}\n","/*\n * Copyright (C) 2017-2020 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/** @hidden */\nexport const apikey = \"J0IJdYzKDYS3nHVDDEWETIqK3nAcxqW42vz7xeSq61M\";\n\n/** @hidden */\nexport const copyrightInfo = [\n    {\n        id: \"here.com\",\n        year: new Date().getFullYear(),\n        label: \"HERE\",\n        link: \"https://legal.here.com/terms\"\n    }\n];\n"],"sourceRoot":""}